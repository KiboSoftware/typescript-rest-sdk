/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BaseResponse,
  DeletedCountResponse,
  Tag,
} from '../models';
import {
    BaseResponseFromJSON,
    BaseResponseToJSON,
    DeletedCountResponseFromJSON,
    DeletedCountResponseToJSON,
    TagFromJSON,
    TagToJSON,
} from '../models';

export interface InventoryTagApiCreateTagRequest {
    xVolTenant: number;
    tagCategoryName: string;
    tag: Tag;
}

export interface InventoryTagApiDeleteTagRequest {
    xVolTenant: number;
    tagCategoryName: string;
    tagValue: string;
}

export interface InventoryTagApiGetTagRequest {
    xVolTenant: number;
    tagCategoryName: string;
    tagValue: string;
}

export interface InventoryTagApiUpdateTagRequest {
    xVolTenant: number;
    tagCategoryName: string;
    tagValue: string;
    tag: Tag;
}

/**
 * 
 */
export class InventoryTagApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create a tag
     * Create Tag
     */


    async createTagRaw(requestParameters: InventoryTagApiCreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createTag.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling createTag.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling createTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}/tag`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters.tag),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Create a tag
     * Create Tag
     */
    async createTag(requestParameters: InventoryTagApiCreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Tag
     * Delete Tag
     */


    async deleteTagRaw(requestParameters: InventoryTagApiDeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteTag.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling deleteTag.');
        }

        if (requestParameters.tagValue === null || requestParameters.tagValue === undefined) {
            throw new runtime.RequiredError('tagValue','Required parameter requestParameters.tagValue was null or undefined when calling deleteTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        if (requestParameters.tagValue !== undefined) {
            queryParameters['tagValue'] = requestParameters.tagValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}/tag/{tag_value}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedCountResponseFromJSON(jsonValue));
    }

    /**
     * Delete a Tag
     * Delete Tag
     */
    async deleteTag(requestParameters: InventoryTagApiDeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse> {
        const response = await this.deleteTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a tag
     * Get Tag
     */


    async getTagRaw(requestParameters: InventoryTagApiGetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getTag.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling getTag.');
        }

        if (requestParameters.tagValue === null || requestParameters.tagValue === undefined) {
            throw new runtime.RequiredError('tagValue','Required parameter requestParameters.tagValue was null or undefined when calling getTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        if (requestParameters.tagValue !== undefined) {
            queryParameters['tagValue'] = requestParameters.tagValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}/tag/{tag_value}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Get a tag
     * Get Tag
     */
    async getTag(requestParameters: InventoryTagApiGetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.getTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the designated tag
     * Update Tag
     */


    async updateTagRaw(requestParameters: InventoryTagApiUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tag>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateTag.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling updateTag.');
        }

        if (requestParameters.tagValue === null || requestParameters.tagValue === undefined) {
            throw new runtime.RequiredError('tagValue','Required parameter requestParameters.tagValue was null or undefined when calling updateTag.');
        }

        if (requestParameters.tag === null || requestParameters.tag === undefined) {
            throw new runtime.RequiredError('tag','Required parameter requestParameters.tag was null or undefined when calling updateTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        if (requestParameters.tagValue !== undefined) {
            queryParameters['tagValue'] = requestParameters.tagValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}/tag/{tag_value}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagToJSON(requestParameters.tag),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagFromJSON(jsonValue));
    }

    /**
     * Update the designated tag
     * Update Tag
     */
    async updateTag(requestParameters: InventoryTagApiUpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tag> {
        const response = await this.updateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
