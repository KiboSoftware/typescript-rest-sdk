/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  LocationGroupResponse,
  LocationRequest,
  LocationResponse,
} from '../models';


export namespace inventoryLocationApiParams { 
    export interface GetLocationGroupsRequest {
        locationGroupCode: string;
    }
    export interface GetLocationsRequest {
        locationCode: string;
    }
    export interface SaveLocationRequest {
        locationRequest: LocationRequest;
    }
}
/**
* InventoryLocationApiService - interface
* 
* @export
* @interface InventoryLocationApi
*/
export interface InventoryLocationApiService {
    /**
    * Get LocationGroups
    * @summary Get Location Groups
    * @param {string} locationGroupCode Location Group Code of the location to get
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryLocationApiInterface
    */
    getLocationGroupsRaw(requestParameters: inventoryLocationApiParams.GetLocationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationGroupResponse>>>;

    /**
    * Get LocationGroups
    * Get Location Groups
    */
    getLocationGroups(requestParameters: inventoryLocationApiParams.GetLocationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationGroupResponse>>;

    /**
    * Get Locations
    * @summary Get Locations
    * @param {string} locationCode Location Code of the location to get
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryLocationApiInterface
    */
    getLocationsRaw(requestParameters: inventoryLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>>;

    /**
    * Get Locations
    * Get Locations
    */
    getLocations(requestParameters: inventoryLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>>;

    /**
    * Get Locations
    * @summary Get Locations
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryLocationApiInterface
    */
    getLocations_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>>;

    /**
    * Get Locations
    * Get Locations
    */
    getLocations_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>>;

    /**
    * Save Location
    * @summary Save Location
    * @param {LocationRequest} locationRequest Location Request Object
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryLocationApiInterface
    */
    saveLocationRaw(requestParameters: inventoryLocationApiParams.SaveLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>>;

    /**
    * Save Location
    * Save Location
    */
    saveLocation(requestParameters: inventoryLocationApiParams.SaveLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>>;

}


/**
 * 
 */
export class InventoryLocationApi extends runtime.BaseAPI implements InventoryLocationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get LocationGroups
     * Get Location Groups
     */


    async getLocationGroupsRaw(requestParameters: inventoryLocationApiParams.GetLocationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationGroupResponse>>> {
        if (requestParameters.locationGroupCode === null || requestParameters.locationGroupCode === undefined) {
            throw new runtime.RequiredError('locationGroupCode','Required parameter requestParameters.locationGroupCode was null or undefined when calling getLocationGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/location/{locationGroupCode}`.replace(`{${"locationGroupCode"}}`, encodeURIComponent(String(requestParameters.locationGroupCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get LocationGroups
     * Get Location Groups
     */
    async getLocationGroups(requestParameters: inventoryLocationApiParams.GetLocationGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationGroupResponse>> {
        const response = await this.getLocationGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Locations
     * Get Locations
     */


    async getLocationsRaw(requestParameters: inventoryLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/location/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Locations
     * Get Locations
     */
    async getLocations(requestParameters: inventoryLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.getLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Locations
     * Get Locations
     */


    async getLocations_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Locations
     * Get Locations
     */
    async getLocations_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.getLocations_1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Save Location
     * Save Location
     */


    async saveLocationRaw(requestParameters: inventoryLocationApiParams.SaveLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationResponse>>> {
        if (requestParameters.locationRequest === null || requestParameters.locationRequest === undefined) {
            throw new runtime.RequiredError('locationRequest','Required parameter requestParameters.locationRequest was null or undefined when calling saveLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/location`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Save Location
     * Save Location
     */
    async saveLocation(requestParameters: inventoryLocationApiParams.SaveLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationResponse>> {
        const response = await this.saveLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
