/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AdjustFutureDate404Response,
  AdjustRequest,
  DeleteFutureItemRequest,
  DeleteFutureItemResponse,
  DeleteItemRequest,
  DeleteItemResponse,
  DeleteItemsRequest,
  JobIDResponse,
  JobQueueResponse,
  RefreshRequest,
} from '../models';
import {
    AdjustFutureDate404ResponseFromJSON,
    AdjustFutureDate404ResponseToJSON,
    AdjustRequestFromJSON,
    AdjustRequestToJSON,
    DeleteFutureItemRequestFromJSON,
    DeleteFutureItemRequestToJSON,
    DeleteFutureItemResponseFromJSON,
    DeleteFutureItemResponseToJSON,
    DeleteItemRequestFromJSON,
    DeleteItemRequestToJSON,
    DeleteItemResponseFromJSON,
    DeleteItemResponseToJSON,
    DeleteItemsRequestFromJSON,
    DeleteItemsRequestToJSON,
    JobIDResponseFromJSON,
    JobIDResponseToJSON,
    JobQueueResponseFromJSON,
    JobQueueResponseToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
} from '../models';

export interface ModifyInventoryApiDeleteRequest {
    xVolTenant: number;
    deleteItemRequest: DeleteItemRequest;
    xVolSite?: number;
}

export interface ModifyInventoryApiAdjustOperationRequest {
    xVolTenant: number;
    adjustRequest: AdjustRequest;
}

export interface ModifyInventoryApiDeleteFutureInventoryRequest {
    xVolTenant: number;
    deleteFutureItemRequest: DeleteFutureItemRequest;
    xVolSite?: number;
}

export interface ModifyInventoryApiDeleteItemsOperationRequest {
    xVolTenant: number;
    deleteItemsRequest: DeleteItemsRequest;
    xVolSite?: number;
}

export interface ModifyInventoryApiRedistributeInventoryAcrossTagsRequest {
    xVolTenant: number;
}

export interface ModifyInventoryApiRefreshOperationRequest {
    xVolTenant: number;
    refreshRequest: RefreshRequest;
}

/**
 * 
 */
export class ModifyInventoryApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Inventory
     * Delete
     */


    async _deleteRaw(requestParameters: ModifyInventoryApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteItemResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling _delete.');
        }

        if (requestParameters.deleteItemRequest === null || requestParameters.deleteItemRequest === undefined) {
            throw new runtime.RequiredError('deleteItemRequest','Required parameter requestParameters.deleteItemRequest was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteItemRequestToJSON(requestParameters.deleteItemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteItemResponseFromJSON(jsonValue));
    }

    /**
     * Delete Inventory
     * Delete
     */
    async _delete(requestParameters: ModifyInventoryApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteItemResponse> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adjust Inventory
     * Adjust
     */


    async adjustRaw(requestParameters: ModifyInventoryApiAdjustOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobIDResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling adjust.');
        }

        if (requestParameters.adjustRequest === null || requestParameters.adjustRequest === undefined) {
            throw new runtime.RequiredError('adjustRequest','Required parameter requestParameters.adjustRequest was null or undefined when calling adjust.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/adjust`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustRequestToJSON(requestParameters.adjustRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobIDResponseFromJSON(jsonValue));
    }

    /**
     * Adjust Inventory
     * Adjust
     */
    async adjust(requestParameters: ModifyInventoryApiAdjustOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobIDResponse> {
        const response = await this.adjustRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Future Inventory
     * Delete-future-inventory
     */


    async deleteFutureInventoryRaw(requestParameters: ModifyInventoryApiDeleteFutureInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFutureItemResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFutureInventory.');
        }

        if (requestParameters.deleteFutureItemRequest === null || requestParameters.deleteFutureItemRequest === undefined) {
            throw new runtime.RequiredError('deleteFutureItemRequest','Required parameter requestParameters.deleteFutureItemRequest was null or undefined when calling deleteFutureInventory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/deleteFutureInventory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteFutureItemRequestToJSON(requestParameters.deleteFutureItemRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFutureItemResponseFromJSON(jsonValue));
    }

    /**
     * Delete Future Inventory
     * Delete-future-inventory
     */
    async deleteFutureInventory(requestParameters: ModifyInventoryApiDeleteFutureInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFutureItemResponse> {
        const response = await this.deleteFutureInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Multiple Inventory
     * Delete-items
     */


    async deleteItemsRaw(requestParameters: ModifyInventoryApiDeleteItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteItemResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteItems.');
        }

        if (requestParameters.deleteItemsRequest === null || requestParameters.deleteItemsRequest === undefined) {
            throw new runtime.RequiredError('deleteItemsRequest','Required parameter requestParameters.deleteItemsRequest was null or undefined when calling deleteItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/deleteItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteItemsRequestToJSON(requestParameters.deleteItemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteItemResponseFromJSON(jsonValue));
    }

    /**
     * Delete Multiple Inventory
     * Delete-items
     */
    async deleteItems(requestParameters: ModifyInventoryApiDeleteItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteItemResponse> {
        const response = await this.deleteItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create jobs to redistribute inventory across tags for the given tenant
     * Redistribute Inventory Across Tags
     */


    async redistributeInventoryAcrossTagsRaw(requestParameters: ModifyInventoryApiRedistributeInventoryAcrossTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobQueueResponse>>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling redistributeInventoryAcrossTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/redistribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobQueueResponseFromJSON));
    }

    /**
     * Create jobs to redistribute inventory across tags for the given tenant
     * Redistribute Inventory Across Tags
     */
    async redistributeInventoryAcrossTags(requestParameters: ModifyInventoryApiRedistributeInventoryAcrossTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobQueueResponse>> {
        const response = await this.redistributeInventoryAcrossTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh Inventory
     * Refresh
     */


    async refreshRaw(requestParameters: ModifyInventoryApiRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobIDResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling refresh.');
        }

        if (requestParameters.refreshRequest === null || requestParameters.refreshRequest === undefined) {
            throw new runtime.RequiredError('refreshRequest','Required parameter requestParameters.refreshRequest was null or undefined when calling refresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters.refreshRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobIDResponseFromJSON(jsonValue));
    }

    /**
     * Refresh Inventory
     * Refresh
     */
    async refresh(requestParameters: ModifyInventoryApiRefreshOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobIDResponse> {
        const response = await this.refreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
