/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BaseResponse,
  DeletedResponse,
  FetchFileConfigRequest,
  FetchFileConnectionResponse,
  MFetchFileConfig,
} from '../models';
import {
    BaseResponseFromJSON,
    BaseResponseToJSON,
    DeletedResponseFromJSON,
    DeletedResponseToJSON,
    FetchFileConfigRequestFromJSON,
    FetchFileConfigRequestToJSON,
    FetchFileConnectionResponseFromJSON,
    FetchFileConnectionResponseToJSON,
    MFetchFileConfigFromJSON,
    MFetchFileConfigToJSON,
} from '../models';

export interface InventoryFetchFileConfigApiDeleteFetchConfigRequest {
    xVolTenant: number;
    fetchFileConfigID: number;
}

export interface InventoryFetchFileConfigApiGetFetchConfigRequest {
    xVolTenant: number;
}

export interface InventoryFetchFileConfigApiSaveFetchConfigRequest {
    xVolTenant: number;
    fetchFileConfigRequest: FetchFileConfigRequest;
}

export interface InventoryFetchFileConfigApiTestConnectionRequest {
    xVolTenant: number;
    fetchFileConfigID: number;
}

/**
 * 
 */
export class InventoryFetchFileConfigApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Deletes a fetch file config
     * Delete Fetch Config
     */


    async deleteFetchConfigRaw(requestParameters: InventoryFetchFileConfigApiDeleteFetchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFetchConfig.');
        }

        if (requestParameters.fetchFileConfigID === null || requestParameters.fetchFileConfigID === undefined) {
            throw new runtime.RequiredError('fetchFileConfigID','Required parameter requestParameters.fetchFileConfigID was null or undefined when calling deleteFetchConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/config/fetchfile/{fetchFileConfigID}`.replace(`{${"fetchFileConfigID"}}`, encodeURIComponent(String(requestParameters.fetchFileConfigID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a fetch file config
     * Delete Fetch Config
     */
    async deleteFetchConfig(requestParameters: InventoryFetchFileConfigApiDeleteFetchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedResponse> {
        const response = await this.deleteFetchConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Fetch File Configs for the current tenant
     * Get Fetch Config
     */


    async getFetchConfigRaw(requestParameters: InventoryFetchFileConfigApiGetFetchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MFetchFileConfig>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFetchConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/config/fetchfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MFetchFileConfigFromJSON(jsonValue));
    }

    /**
     * Get the Fetch File Configs for the current tenant
     * Get Fetch Config
     */
    async getFetchConfig(requestParameters: InventoryFetchFileConfigApiGetFetchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MFetchFileConfig> {
        const response = await this.getFetchConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save a new Fetch File Config
     * Save Fetch Config
     */


    async saveFetchConfigRaw(requestParameters: InventoryFetchFileConfigApiSaveFetchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveFetchConfig.');
        }

        if (requestParameters.fetchFileConfigRequest === null || requestParameters.fetchFileConfigRequest === undefined) {
            throw new runtime.RequiredError('fetchFileConfigRequest','Required parameter requestParameters.fetchFileConfigRequest was null or undefined when calling saveFetchConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/config/fetchfile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FetchFileConfigRequestToJSON(requestParameters.fetchFileConfigRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Save a new Fetch File Config
     * Save Fetch Config
     */
    async saveFetchConfig(requestParameters: InventoryFetchFileConfigApiSaveFetchConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.saveFetchConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attempts to connect to a fetch file endpoint and lists current files if successful
     * Test Connection
     */


    async testConnectionRaw(requestParameters: InventoryFetchFileConfigApiTestConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchFileConnectionResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testConnection.');
        }

        if (requestParameters.fetchFileConfigID === null || requestParameters.fetchFileConfigID === undefined) {
            throw new runtime.RequiredError('fetchFileConfigID','Required parameter requestParameters.fetchFileConfigID was null or undefined when calling testConnection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/config/fetchfile/testConnection/{fetchFileConfigID}`.replace(`{${"fetchFileConfigID"}}`, encodeURIComponent(String(requestParameters.fetchFileConfigID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchFileConnectionResponseFromJSON(jsonValue));
    }

    /**
     * Attempts to connect to a fetch file endpoint and lists current files if successful
     * Test Connection
     */
    async testConnection(requestParameters: InventoryFetchFileConfigApiTestConnectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchFileConnectionResponse> {
        const response = await this.testConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
