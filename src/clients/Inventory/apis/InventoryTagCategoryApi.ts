/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BaseResponse,
  DeletedCountResponse,
  TagCategory,
} from '../models';


export namespace inventoryTagcategoryApiParams { 
    export interface DeleteTagCategoryRequest {
        xVolTenant: number;
        tagCategoryName: string;
    }
    export interface UpdateTagCategoryRequest {
        xVolTenant: number;
        tagCategoryName: string;
        tagCategory: TagCategory;
    }
}
/**
* InventoryTagcategoryApiService - interface
* 
* @export
* @interface InventoryTagcategoryApi
*/
export interface InventoryTagcategoryApiService {
    /**
    * Delete a Tag category
    * @summary Delete Tag Category
    * @param {number} xVolTenant Tenant ID
    * @param {string} tagCategoryName Tag Category Name
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryTagcategoryApiInterface
    */
    deleteTagCategoryRaw(requestParameters: inventoryTagcategoryApiParams.DeleteTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>>;

    /**
    * Delete a Tag category
    * Delete Tag Category
    */
    deleteTagCategory(requestParameters: inventoryTagcategoryApiParams.DeleteTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse>;

    /**
    * Update the designated tag category
    * @summary Update Tag Category
    * @param {number} xVolTenant Tenant ID
    * @param {string} tagCategoryName Tag Category Name
    * @param {TagCategory} tagCategory Request create or modify Tag Categories
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryTagcategoryApiInterface
    */
    updateTagCategoryRaw(requestParameters: inventoryTagcategoryApiParams.UpdateTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCategory>>;

    /**
    * Update the designated tag category
    * Update Tag Category
    */
    updateTagCategory(requestParameters: inventoryTagcategoryApiParams.UpdateTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCategory>;

}


/**
 * 
 */
export class InventoryTagcategoryApi extends runtime.BaseAPI implements InventoryTagcategoryApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete a Tag category
     * Delete Tag Category
     */


    async deleteTagCategoryRaw(requestParameters: inventoryTagcategoryApiParams.DeleteTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteTagCategory.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling deleteTagCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/tagCategory/{tag_category_name}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete a Tag category
     * Delete Tag Category
     */
    async deleteTagCategory(requestParameters: inventoryTagcategoryApiParams.DeleteTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse> {
        const response = await this.deleteTagCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the designated tag category
     * Update Tag Category
     */


    async updateTagCategoryRaw(requestParameters: inventoryTagcategoryApiParams.UpdateTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCategory>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateTagCategory.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling updateTagCategory.');
        }

        if (requestParameters.tagCategory === null || requestParameters.tagCategory === undefined) {
            throw new runtime.RequiredError('tagCategory','Required parameter requestParameters.tagCategory was null or undefined when calling updateTagCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/tagCategory/{tag_category_name}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.tagCategory,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the designated tag category
     * Update Tag Category
     */
    async updateTagCategory(requestParameters: inventoryTagcategoryApiParams.UpdateTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCategory> {
        const response = await this.updateTagCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
