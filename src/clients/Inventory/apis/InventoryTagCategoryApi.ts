/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  TagCategory,
} from '../models';


export namespace inventoryTagCategoryApiParams { 
    export interface GetTagCategoryRequest {
        tagCategoryName: string;
    }
}
/**
* InventoryTagCategoryApiService - interface
* 
* @export
* @interface InventoryTagCategoryApi
*/
export interface InventoryTagCategoryApiService {
    /**
    * Get a tag category
    * @summary Get Tag Category
    * @param {string} tagCategoryName Tag Category Name
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryTagCategoryApiInterface
    */
    getTagCategoryRaw(requestParameters: inventoryTagCategoryApiParams.GetTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCategory>>;

    /**
    * Get a tag category
    * Get Tag Category
    */
    getTagCategory(requestParameters: inventoryTagCategoryApiParams.GetTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCategory>;

    /**
    * Get all tag categories for a tenant
    * @summary Get Tag Category All
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryTagCategoryApiInterface
    */
    getTagCategoryAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagCategory>>>;

    /**
    * Get all tag categories for a tenant
    * Get Tag Category All
    */
    getTagCategoryAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagCategory>>;

}


/**
 * 
 */
export class InventoryTagCategoryApi extends runtime.BaseAPI implements InventoryTagCategoryApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get a tag category
     * Get Tag Category
     */


    async getTagCategoryRaw(requestParameters: inventoryTagCategoryApiParams.GetTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCategory>> {
        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling getTagCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/tagCategory/{tag_category_name}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a tag category
     * Get Tag Category
     */
    async getTagCategory(requestParameters: inventoryTagCategoryApiParams.GetTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCategory> {
        const response = await this.getTagCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tag categories for a tenant
     * Get Tag Category All
     */


    async getTagCategoryAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/tagCategory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all tag categories for a tenant
     * Get Tag Category All
     */
    async getTagCategoryAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagCategory>> {
        const response = await this.getTagCategoryAllRaw(initOverrides);
        return await response.value();
    }

}
