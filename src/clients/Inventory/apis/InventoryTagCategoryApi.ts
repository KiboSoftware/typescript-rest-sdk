/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BaseResponse,
  DeletedCountResponse,
  TagCategory,
} from '../models';
import {
    BaseResponseFromJSON,
    BaseResponseToJSON,
    DeletedCountResponseFromJSON,
    DeletedCountResponseToJSON,
    TagCategoryFromJSON,
    TagCategoryToJSON,
} from '../models';

export interface InventoryTagCategoryApiDeleteTagCategoryRequest {
    xVolTenant: number;
    tagCategoryName: string;
}

export interface InventoryTagCategoryApiGetTagCategoryRequest {
    xVolTenant: number;
    tagCategoryName: string;
}

export interface InventoryTagCategoryApiGetTagCategoryAllRequest {
    xVolTenant: number;
}

export interface InventoryTagCategoryApiUpdateTagCategoryRequest {
    xVolTenant: number;
    tagCategoryName: string;
    tagCategory: TagCategory;
}

/**
 * 
 */
export class InventoryTagCategoryApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete a Tag category
     * Delete Tag Category
     */


    async deleteTagCategoryRaw(requestParameters: InventoryTagCategoryApiDeleteTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteTagCategory.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling deleteTagCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedCountResponseFromJSON(jsonValue));
    }

    /**
     * Delete a Tag category
     * Delete Tag Category
     */
    async deleteTagCategory(requestParameters: InventoryTagCategoryApiDeleteTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse> {
        const response = await this.deleteTagCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a tag category
     * Get Tag Category
     */


    async getTagCategoryRaw(requestParameters: InventoryTagCategoryApiGetTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCategory>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getTagCategory.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling getTagCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagCategoryFromJSON(jsonValue));
    }

    /**
     * Get a tag category
     * Get Tag Category
     */
    async getTagCategory(requestParameters: InventoryTagCategoryApiGetTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCategory> {
        const response = await this.getTagCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tag categories for a tenant
     * Get Tag Category All
     */


    async getTagCategoryAllRaw(requestParameters: InventoryTagCategoryApiGetTagCategoryAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagCategory>>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getTagCategoryAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagCategoryFromJSON));
    }

    /**
     * Get all tag categories for a tenant
     * Get Tag Category All
     */
    async getTagCategoryAll(requestParameters: InventoryTagCategoryApiGetTagCategoryAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagCategory>> {
        const response = await this.getTagCategoryAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the designated tag category
     * Update Tag Category
     */


    async updateTagCategoryRaw(requestParameters: InventoryTagCategoryApiUpdateTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCategory>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateTagCategory.');
        }

        if (requestParameters.tagCategoryName === null || requestParameters.tagCategoryName === undefined) {
            throw new runtime.RequiredError('tagCategoryName','Required parameter requestParameters.tagCategoryName was null or undefined when calling updateTagCategory.');
        }

        if (requestParameters.tagCategory === null || requestParameters.tagCategory === undefined) {
            throw new runtime.RequiredError('tagCategory','Required parameter requestParameters.tagCategory was null or undefined when calling updateTagCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.tagCategoryName !== undefined) {
            queryParameters['tagCategoryName'] = requestParameters.tagCategoryName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/tagCategory/{tag_category_name}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagCategoryToJSON(requestParameters.tagCategory),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagCategoryFromJSON(jsonValue));
    }

    /**
     * Update the designated tag category
     * Update Tag Category
     */
    async updateTagCategory(requestParameters: InventoryTagCategoryApiUpdateTagCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCategory> {
        const response = await this.updateTagCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
