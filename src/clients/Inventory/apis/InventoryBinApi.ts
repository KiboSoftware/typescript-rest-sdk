/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BaseResponse,
  Bin,
  BinIDResponse,
  BinResponseModel,
  BinSearchRequest,
  BinSearchResponse,
  BinStatusModel,
  BinTypeModel,
  CreateBinRequest,
  LoadBinInventoryRequest,
  LoadBinInventoryResponse,
  UpdateBinRequest,
  UpdateBinsRequest,
  UpdateBinsResponse,
} from '../models';


export namespace inventoryBinApiParams { 
    export interface CreateBinOperationRequest {
        xVolTenant: number;
        createBinRequest: CreateBinRequest;
    }
    export interface GetBinStatusesRequest {
        xVolTenant: number;
    }
    export interface GetBinTypesRequest {
        xVolTenant: number;
    }
    export interface GetBinsRequest {
        xVolTenant: number;
        locationID: number;
        searchTerm?: number;
        perPage?: number;
        page?: number;
    }
    export interface LoadInventoryRequest {
        xVolTenant: number;
        loadBinInventoryRequest: LoadBinInventoryRequest;
    }
    export interface SearchBinsRequest {
        xVolTenant: number;
        binSearchRequest: BinSearchRequest;
    }
    export interface UpdateBinOperationRequest {
        xVolTenant: number;
        binId: number;
        updateBinRequest: UpdateBinRequest;
    }
    export interface UpdateBinsOperationRequest {
        xVolTenant: number;
        updateBinsRequest: UpdateBinsRequest;
    }
}
/**
* InventoryBinApiService - interface
* 
* @export
* @interface InventoryBinApi
*/
export interface InventoryBinApiService {
    /**
    * Create a bin
    * @summary Create Bin
    * @param {number} xVolTenant Tenant ID
    * @param {CreateBinRequest} createBinRequest Request to create a new bin
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    createBinRaw(requestParameters: inventoryBinApiParams.CreateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinIDResponse>>;

    /**
    * Create a bin
    * Create Bin
    */
    createBin(requestParameters: inventoryBinApiParams.CreateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinIDResponse>;

    /**
    * Get list of bin statuses
    * @summary Get Bin Statuses
    * @param {number} xVolTenant Tenant ID
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    getBinStatusesRaw(requestParameters: inventoryBinApiParams.GetBinStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BinStatusModel>>>;

    /**
    * Get list of bin statuses
    * Get Bin Statuses
    */
    getBinStatuses(requestParameters: inventoryBinApiParams.GetBinStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BinStatusModel>>;

    /**
    * Get list of bin types
    * @summary Get Bin Types
    * @param {number} xVolTenant Tenant ID
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    getBinTypesRaw(requestParameters: inventoryBinApiParams.GetBinTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BinTypeModel>>>;

    /**
    * Get list of bin types
    * Get Bin Types
    */
    getBinTypes(requestParameters: inventoryBinApiParams.GetBinTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BinTypeModel>>;

    /**
    * Get a list of bins
    * @summary Get Bins
    * @param {number} xVolTenant Tenant ID
    * @param {number} locationID Id of location
    * @param {number} [searchTerm] Term to match in bins
    * @param {number} [perPage] Results per page
    * @param {number} [page] Page to show
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    getBinsRaw(requestParameters: inventoryBinApiParams.GetBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinResponseModel>>;

    /**
    * Get a list of bins
    * Get Bins
    */
    getBins(requestParameters: inventoryBinApiParams.GetBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinResponseModel>;

    /**
    * Loads bin inventory for designated bins
    * @summary Load Inventory
    * @param {number} xVolTenant Tenant ID
    * @param {LoadBinInventoryRequest} loadBinInventoryRequest Request to load bin inventory
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    loadInventoryRaw(requestParameters: inventoryBinApiParams.LoadInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoadBinInventoryResponse>>;

    /**
    * Loads bin inventory for designated bins
    * Load Inventory
    */
    loadInventory(requestParameters: inventoryBinApiParams.LoadInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoadBinInventoryResponse>;

    /**
    * Search bins for a inventory by bin name or any product identifier
    * @summary Search Bins
    * @param {number} xVolTenant Tenant ID
    * @param {BinSearchRequest} binSearchRequest Request to allocate inventory
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    searchBinsRaw(requestParameters: inventoryBinApiParams.SearchBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinSearchResponse>>;

    /**
    * Search bins for a inventory by bin name or any product identifier
    * Search Bins
    */
    searchBins(requestParameters: inventoryBinApiParams.SearchBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinSearchResponse>;

    /**
    * Update the designated bin
    * @summary Update Bin
    * @param {number} xVolTenant Tenant ID
    * @param {number} binId Id of bin to update
    * @param {UpdateBinRequest} updateBinRequest Request to update a bin
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    updateBinRaw(requestParameters: inventoryBinApiParams.UpdateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bin>>;

    /**
    * Update the designated bin
    * Update Bin
    */
    updateBin(requestParameters: inventoryBinApiParams.UpdateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bin>;

    /**
    * Update the designated bins
    * @summary Update Bins
    * @param {number} xVolTenant Tenant ID
    * @param {UpdateBinsRequest} updateBinsRequest Request to update multiple bins
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof InventoryBinApiInterface
    */
    updateBinsRaw(requestParameters: inventoryBinApiParams.UpdateBinsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateBinsResponse>>;

    /**
    * Update the designated bins
    * Update Bins
    */
    updateBins(requestParameters: inventoryBinApiParams.UpdateBinsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateBinsResponse>;

}


/**
 * 
 */
export class InventoryBinApi extends runtime.BaseAPI implements InventoryBinApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create a bin
     * Create Bin
     */


    async createBinRaw(requestParameters: inventoryBinApiParams.CreateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinIDResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createBin.');
        }

        if (requestParameters.createBinRequest === null || requestParameters.createBinRequest === undefined) {
            throw new runtime.RequiredError('createBinRequest','Required parameter requestParameters.createBinRequest was null or undefined when calling createBin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createBinRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a bin
     * Create Bin
     */
    async createBin(requestParameters: inventoryBinApiParams.CreateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinIDResponse> {
        const response = await this.createBinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of bin statuses
     * Get Bin Statuses
     */


    async getBinStatusesRaw(requestParameters: inventoryBinApiParams.GetBinStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BinStatusModel>>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getBinStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin/binStatuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get list of bin statuses
     * Get Bin Statuses
     */
    async getBinStatuses(requestParameters: inventoryBinApiParams.GetBinStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BinStatusModel>> {
        const response = await this.getBinStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of bin types
     * Get Bin Types
     */


    async getBinTypesRaw(requestParameters: inventoryBinApiParams.GetBinTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BinTypeModel>>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getBinTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin/binTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get list of bin types
     * Get Bin Types
     */
    async getBinTypes(requestParameters: inventoryBinApiParams.GetBinTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BinTypeModel>> {
        const response = await this.getBinTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of bins
     * Get Bins
     */


    async getBinsRaw(requestParameters: inventoryBinApiParams.GetBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinResponseModel>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getBins.');
        }

        if (requestParameters.locationID === null || requestParameters.locationID === undefined) {
            throw new runtime.RequiredError('locationID','Required parameter requestParameters.locationID was null or undefined when calling getBins.');
        }

        const queryParameters: any = {};

        if (requestParameters.locationID !== undefined) {
            queryParameters['locationID'] = requestParameters.locationID;
        }

        if (requestParameters.searchTerm !== undefined) {
            queryParameters['searchTerm'] = requestParameters.searchTerm;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a list of bins
     * Get Bins
     */
    async getBins(requestParameters: inventoryBinApiParams.GetBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinResponseModel> {
        const response = await this.getBinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Loads bin inventory for designated bins
     * Load Inventory
     */


    async loadInventoryRaw(requestParameters: inventoryBinApiParams.LoadInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoadBinInventoryResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling loadInventory.');
        }

        if (requestParameters.loadBinInventoryRequest === null || requestParameters.loadBinInventoryRequest === undefined) {
            throw new runtime.RequiredError('loadBinInventoryRequest','Required parameter requestParameters.loadBinInventoryRequest was null or undefined when calling loadInventory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin/loadInventory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.loadBinInventoryRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Loads bin inventory for designated bins
     * Load Inventory
     */
    async loadInventory(requestParameters: inventoryBinApiParams.LoadInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoadBinInventoryResponse> {
        const response = await this.loadInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search bins for a inventory by bin name or any product identifier
     * Search Bins
     */


    async searchBinsRaw(requestParameters: inventoryBinApiParams.SearchBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BinSearchResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling searchBins.');
        }

        if (requestParameters.binSearchRequest === null || requestParameters.binSearchRequest === undefined) {
            throw new runtime.RequiredError('binSearchRequest','Required parameter requestParameters.binSearchRequest was null or undefined when calling searchBins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin/searchInventory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.binSearchRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search bins for a inventory by bin name or any product identifier
     * Search Bins
     */
    async searchBins(requestParameters: inventoryBinApiParams.SearchBinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BinSearchResponse> {
        const response = await this.searchBinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the designated bin
     * Update Bin
     */


    async updateBinRaw(requestParameters: inventoryBinApiParams.UpdateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Bin>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateBin.');
        }

        if (requestParameters.binId === null || requestParameters.binId === undefined) {
            throw new runtime.RequiredError('binId','Required parameter requestParameters.binId was null or undefined when calling updateBin.');
        }

        if (requestParameters.updateBinRequest === null || requestParameters.updateBinRequest === undefined) {
            throw new runtime.RequiredError('updateBinRequest','Required parameter requestParameters.updateBinRequest was null or undefined when calling updateBin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin/{bin_id}`.replace(`{${"bin_id"}}`, encodeURIComponent(String(requestParameters.binId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateBinRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the designated bin
     * Update Bin
     */
    async updateBin(requestParameters: inventoryBinApiParams.UpdateBinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Bin> {
        const response = await this.updateBinRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the designated bins
     * Update Bins
     */


    async updateBinsRaw(requestParameters: inventoryBinApiParams.UpdateBinsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateBinsResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateBins.');
        }

        if (requestParameters.updateBinsRequest === null || requestParameters.updateBinsRequest === undefined) {
            throw new runtime.RequiredError('updateBinsRequest','Required parameter requestParameters.updateBinsRequest was null or undefined when calling updateBins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v1/bin/updateBins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateBinsRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the designated bins
     * Update Bins
     */
    async updateBins(requestParameters: inventoryBinApiParams.UpdateBinsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateBinsResponse> {
        const response = await this.updateBinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
