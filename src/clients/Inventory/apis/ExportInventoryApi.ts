/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CreateExportSettingsFTPRequest,
  CreateExportSettingsRequest,
  CreateExportSettingsS3Request,
  DeletedCountResponse,
  ExportInventoryRequest,
  ExportInventoryResponse,
  ExportSettingsResponse,
  UpdateExportSettingsFTPRequest,
  UpdateExportSettingsFTPResponse,
  UpdateExportSettingsRequest,
  UpdateExportSettingsResponse,
  UpdateExportSettingsS3Request,
  UpdateExportSettingsS3Response,
} from '../models';
import {
    CreateExportSettingsFTPRequestFromJSON,
    CreateExportSettingsFTPRequestToJSON,
    CreateExportSettingsRequestFromJSON,
    CreateExportSettingsRequestToJSON,
    CreateExportSettingsS3RequestFromJSON,
    CreateExportSettingsS3RequestToJSON,
    DeletedCountResponseFromJSON,
    DeletedCountResponseToJSON,
    ExportInventoryRequestFromJSON,
    ExportInventoryRequestToJSON,
    ExportInventoryResponseFromJSON,
    ExportInventoryResponseToJSON,
    ExportSettingsResponseFromJSON,
    ExportSettingsResponseToJSON,
    UpdateExportSettingsFTPRequestFromJSON,
    UpdateExportSettingsFTPRequestToJSON,
    UpdateExportSettingsFTPResponseFromJSON,
    UpdateExportSettingsFTPResponseToJSON,
    UpdateExportSettingsRequestFromJSON,
    UpdateExportSettingsRequestToJSON,
    UpdateExportSettingsResponseFromJSON,
    UpdateExportSettingsResponseToJSON,
    UpdateExportSettingsS3RequestFromJSON,
    UpdateExportSettingsS3RequestToJSON,
    UpdateExportSettingsS3ResponseFromJSON,
    UpdateExportSettingsS3ResponseToJSON,
} from '../models';

export interface ExportInventoryApiCreateExportSettingsOperationRequest {
    xVolTenant: number;
    createExportSettingsRequest: CreateExportSettingsRequest;
}

export interface ExportInventoryApiCreateExportSettingsFTPOperationRequest {
    xVolTenant: number;
    createExportSettingsFTPRequest: CreateExportSettingsFTPRequest;
}

export interface ExportInventoryApiCreateExportSettingsS3OperationRequest {
    xVolTenant: number;
    createExportSettingsS3Request: CreateExportSettingsS3Request;
}

export interface ExportInventoryApiDeleteExportSettingsRequest {
    xVolTenant: number;
    exportSettingsName: string;
}

export interface ExportInventoryApiDeleteExportSettingsFTPRequest {
    xVolTenant: number;
    exportSettingsName: string;
    exportSettingsFTPName?: string;
}

export interface ExportInventoryApiDeleteExportSettingsS3Request {
    xVolTenant: number;
    exportSettingsName: string;
    exportSettingsS3Name?: string;
}

export interface ExportInventoryApiRunExportRequest {
    xVolTenant: number;
    exportInventoryRequest: ExportInventoryRequest;
}

export interface ExportInventoryApiUpdateExportSettingsOperationRequest {
    xVolTenant: number;
    updateExportSettingsRequest: UpdateExportSettingsRequest;
}

export interface ExportInventoryApiUpdateExportSettingsFTPOperationRequest {
    xVolTenant: number;
    updateExportSettingsFTPRequest: UpdateExportSettingsFTPRequest;
}

export interface ExportInventoryApiUpdateExportSettingsS3OperationRequest {
    xVolTenant: number;
    updateExportSettingsS3Request: UpdateExportSettingsS3Request;
}

/**
 * 
 */
export class ExportInventoryApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create an Export Settings
     * Create Export Settings
     */


    async createExportSettingsRaw(requestParameters: ExportInventoryApiCreateExportSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportSettingsResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createExportSettings.');
        }

        if (requestParameters.createExportSettingsRequest === null || requestParameters.createExportSettingsRequest === undefined) {
            throw new runtime.RequiredError('createExportSettingsRequest','Required parameter requestParameters.createExportSettingsRequest was null or undefined when calling createExportSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExportSettingsRequestToJSON(requestParameters.createExportSettingsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Create an Export Settings
     * Create Export Settings
     */
    async createExportSettings(requestParameters: ExportInventoryApiCreateExportSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportSettingsResponse> {
        const response = await this.createExportSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an Export Settings FTP
     * Create Export Settings FTP
     */


    async createExportSettingsFTPRaw(requestParameters: ExportInventoryApiCreateExportSettingsFTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportSettingsResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createExportSettingsFTP.');
        }

        if (requestParameters.createExportSettingsFTPRequest === null || requestParameters.createExportSettingsFTPRequest === undefined) {
            throw new runtime.RequiredError('createExportSettingsFTPRequest','Required parameter requestParameters.createExportSettingsFTPRequest was null or undefined when calling createExportSettingsFTP.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/ftp/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExportSettingsFTPRequestToJSON(requestParameters.createExportSettingsFTPRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Create an Export Settings FTP
     * Create Export Settings FTP
     */
    async createExportSettingsFTP(requestParameters: ExportInventoryApiCreateExportSettingsFTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportSettingsResponse> {
        const response = await this.createExportSettingsFTPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an Export Settings S3
     * Create Export Settings S3
     */


    async createExportSettingsS3Raw(requestParameters: ExportInventoryApiCreateExportSettingsS3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportSettingsResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createExportSettingsS3.');
        }

        if (requestParameters.createExportSettingsS3Request === null || requestParameters.createExportSettingsS3Request === undefined) {
            throw new runtime.RequiredError('createExportSettingsS3Request','Required parameter requestParameters.createExportSettingsS3Request was null or undefined when calling createExportSettingsS3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/s3/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExportSettingsS3RequestToJSON(requestParameters.createExportSettingsS3Request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Create an Export Settings S3
     * Create Export Settings S3
     */
    async createExportSettingsS3(requestParameters: ExportInventoryApiCreateExportSettingsS3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportSettingsResponse> {
        const response = await this.createExportSettingsS3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an Export Settings
     * Delete Export Settings
     */


    async deleteExportSettingsRaw(requestParameters: ExportInventoryApiDeleteExportSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteExportSettings.');
        }

        if (requestParameters.exportSettingsName === null || requestParameters.exportSettingsName === undefined) {
            throw new runtime.RequiredError('exportSettingsName','Required parameter requestParameters.exportSettingsName was null or undefined when calling deleteExportSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.exportSettingsName !== undefined) {
            queryParameters['exportSettingsName'] = requestParameters.exportSettingsName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/{exportSettingsName}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedCountResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an Export Settings
     * Delete Export Settings
     */
    async deleteExportSettings(requestParameters: ExportInventoryApiDeleteExportSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse> {
        const response = await this.deleteExportSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * Delete Export Settings FTP
     */


    async deleteExportSettingsFTPRaw(requestParameters: ExportInventoryApiDeleteExportSettingsFTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteExportSettingsFTP.');
        }

        if (requestParameters.exportSettingsName === null || requestParameters.exportSettingsName === undefined) {
            throw new runtime.RequiredError('exportSettingsName','Required parameter requestParameters.exportSettingsName was null or undefined when calling deleteExportSettingsFTP.');
        }

        const queryParameters: any = {};

        if (requestParameters.exportSettingsName !== undefined) {
            queryParameters['exportSettingsName'] = requestParameters.exportSettingsName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}`.replace(`{${"exportSettingsFTPName"}}`, encodeURIComponent(String(requestParameters.exportSettingsFTPName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedCountResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * Delete Export Settings FTP
     */
    async deleteExportSettingsFTP(requestParameters: ExportInventoryApiDeleteExportSettingsFTPRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse> {
        const response = await this.deleteExportSettingsFTPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * Delete Export Settings S3
     */


    async deleteExportSettingsS3Raw(requestParameters: ExportInventoryApiDeleteExportSettingsS3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletedCountResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteExportSettingsS3.');
        }

        if (requestParameters.exportSettingsName === null || requestParameters.exportSettingsName === undefined) {
            throw new runtime.RequiredError('exportSettingsName','Required parameter requestParameters.exportSettingsName was null or undefined when calling deleteExportSettingsS3.');
        }

        const queryParameters: any = {};

        if (requestParameters.exportSettingsName !== undefined) {
            queryParameters['exportSettingsName'] = requestParameters.exportSettingsName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}`.replace(`{${"exportSettingsS3Name"}}`, encodeURIComponent(String(requestParameters.exportSettingsS3Name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedCountResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * Delete Export Settings S3
     */
    async deleteExportSettingsS3(requestParameters: ExportInventoryApiDeleteExportSettingsS3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletedCountResponse> {
        const response = await this.deleteExportSettingsS3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run Export Settings Job
     * Run Export
     */


    async runExportRaw(requestParameters: ExportInventoryApiRunExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportInventoryResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling runExport.');
        }

        if (requestParameters.exportInventoryRequest === null || requestParameters.exportInventoryRequest === undefined) {
            throw new runtime.RequiredError('exportInventoryRequest','Required parameter requestParameters.exportInventoryRequest was null or undefined when calling runExport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportInventoryRequestToJSON(requestParameters.exportInventoryRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportInventoryResponseFromJSON(jsonValue));
    }

    /**
     * Run Export Settings Job
     * Run Export
     */
    async runExport(requestParameters: ExportInventoryApiRunExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportInventoryResponse> {
        const response = await this.runExportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an Export Settings
     * Update Export Settings
     */


    async updateExportSettingsRaw(requestParameters: ExportInventoryApiUpdateExportSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateExportSettingsResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateExportSettings.');
        }

        if (requestParameters.updateExportSettingsRequest === null || requestParameters.updateExportSettingsRequest === undefined) {
            throw new runtime.RequiredError('updateExportSettingsRequest','Required parameter requestParameters.updateExportSettingsRequest was null or undefined when calling updateExportSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExportSettingsRequestToJSON(requestParameters.updateExportSettingsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateExportSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Update an Export Settings
     * Update Export Settings
     */
    async updateExportSettings(requestParameters: ExportInventoryApiUpdateExportSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateExportSettingsResponse> {
        const response = await this.updateExportSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an Export Settings FTP
     * Update Export Settings FTP
     */


    async updateExportSettingsFTPRaw(requestParameters: ExportInventoryApiUpdateExportSettingsFTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateExportSettingsFTPResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateExportSettingsFTP.');
        }

        if (requestParameters.updateExportSettingsFTPRequest === null || requestParameters.updateExportSettingsFTPRequest === undefined) {
            throw new runtime.RequiredError('updateExportSettingsFTPRequest','Required parameter requestParameters.updateExportSettingsFTPRequest was null or undefined when calling updateExportSettingsFTP.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/ftp/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExportSettingsFTPRequestToJSON(requestParameters.updateExportSettingsFTPRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateExportSettingsFTPResponseFromJSON(jsonValue));
    }

    /**
     * Update an Export Settings FTP
     * Update Export Settings FTP
     */
    async updateExportSettingsFTP(requestParameters: ExportInventoryApiUpdateExportSettingsFTPOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateExportSettingsFTPResponse> {
        const response = await this.updateExportSettingsFTPRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an Export Settings S3
     * Update Export Settings S3
     */


    async updateExportSettingsS3Raw(requestParameters: ExportInventoryApiUpdateExportSettingsS3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateExportSettingsS3Response>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateExportSettingsS3.');
        }

        if (requestParameters.updateExportSettingsS3Request === null || requestParameters.updateExportSettingsS3Request === undefined) {
            throw new runtime.RequiredError('updateExportSettingsS3Request','Required parameter requestParameters.updateExportSettingsS3Request was null or undefined when calling updateExportSettingsS3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/inventory/api/v1/export/s3/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExportSettingsS3RequestToJSON(requestParameters.updateExportSettingsS3Request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateExportSettingsS3ResponseFromJSON(jsonValue));
    }

    /**
     * Update an Export Settings S3
     * Update Export Settings S3
     */
    async updateExportSettingsS3(requestParameters: ExportInventoryApiUpdateExportSettingsS3OperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateExportSettingsS3Response> {
        const response = await this.updateExportSettingsS3Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
