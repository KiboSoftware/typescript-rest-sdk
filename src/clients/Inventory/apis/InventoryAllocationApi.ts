/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AllocateInventory500Response,
  AllocateInventoryRequest,
  BaseResponse,
  JobQueueResponse,
  TransitionCartRequest,
} from '../models';

export interface AllocateInventoryOperationRequest {
    xVolTenant: number;
    allocateInventoryRequest: AllocateInventoryRequest;
    responseFields?: string;
}

export interface DeallocateInventoryRequest {
    xVolTenant: number;
    allocateInventoryRequest: AllocateInventoryRequest;
    responseFields?: string;
}

export interface FulfillInventoryRequest {
    xVolTenant: number;
    allocateInventoryRequest: AllocateInventoryRequest;
    responseFields?: string;
}

export interface TransitionCartOperationRequest {
    xVolTenant: number;
    transitionCartRequest: TransitionCartRequest;
    responseFields?: string;
}

/**
 * InventoryAllocationApi - interface
 * 
 * @export
 * @interface InventoryAllocationApiInterface
 */
export interface InventoryAllocationApiInterface {
    /**
     * Allocates inventory based on the given request
     * @summary Allocate Inventory
     * @param {number} xVolTenant Tenant ID
     * @param {AllocateInventoryRequest} allocateInventoryRequest Request to allocate inventory
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryAllocationApiInterface
     */
    allocateInventoryRaw(requestParameters: AllocateInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobQueueResponse>>;

    /**
     * Allocates inventory based on the given request
     * Allocate Inventory
     */
    allocateInventory(requestParameters: AllocateInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobQueueResponse>;

    /**
     * Deallocates inventory based on the given request
     * @summary Deallocate Inventory
     * @param {number} xVolTenant Tenant ID
     * @param {AllocateInventoryRequest} allocateInventoryRequest Request to allocate inventory
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryAllocationApiInterface
     */
    deallocateInventoryRaw(requestParameters: DeallocateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Deallocates inventory based on the given request
     * Deallocate Inventory
     */
    deallocateInventory(requestParameters: DeallocateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Fulfills inventory based on the given request
     * @summary Fulfill Inventory
     * @param {number} xVolTenant Tenant ID
     * @param {AllocateInventoryRequest} allocateInventoryRequest Request to allocate inventory
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryAllocationApiInterface
     */
    fulfillInventoryRaw(requestParameters: FulfillInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Fulfills inventory based on the given request
     * Fulfill Inventory
     */
    fulfillInventory(requestParameters: FulfillInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

    /**
     * Transitions a cart allocation into a normal order/shipment allocation
     * @summary Transition Cart
     * @param {number} xVolTenant Tenant ID
     * @param {TransitionCartRequest} transitionCartRequest Request needed for transitioning cart allocations to order/shipment allocations
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InventoryAllocationApiInterface
     */
    transitionCartRaw(requestParameters: TransitionCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>>;

    /**
     * Transitions a cart allocation into a normal order/shipment allocation
     * Transition Cart
     */
    transitionCart(requestParameters: TransitionCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse>;

}

/**
 * 
 */
export class InventoryAllocationApi extends runtime.BaseAPI implements InventoryAllocationApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Allocates inventory based on the given request
     * Allocate Inventory
     */


    async allocateInventoryRaw(requestParameters: AllocateInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobQueueResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling allocateInventory.');
        }

        if (requestParameters.allocateInventoryRequest === null || requestParameters.allocateInventoryRequest === undefined) {
            throw new runtime.RequiredError('allocateInventoryRequest','Required parameter requestParameters.allocateInventoryRequest was null or undefined when calling allocateInventory.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/allocate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.allocateInventoryRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Allocates inventory based on the given request
     * Allocate Inventory
     */
    async allocateInventory(requestParameters: AllocateInventoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobQueueResponse> {
        const response = await this.allocateInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deallocates inventory based on the given request
     * Deallocate Inventory
     */


    async deallocateInventoryRaw(requestParameters: DeallocateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deallocateInventory.');
        }

        if (requestParameters.allocateInventoryRequest === null || requestParameters.allocateInventoryRequest === undefined) {
            throw new runtime.RequiredError('allocateInventoryRequest','Required parameter requestParameters.allocateInventoryRequest was null or undefined when calling deallocateInventory.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/deallocate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.allocateInventoryRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deallocates inventory based on the given request
     * Deallocate Inventory
     */
    async deallocateInventory(requestParameters: DeallocateInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.deallocateInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fulfills inventory based on the given request
     * Fulfill Inventory
     */


    async fulfillInventoryRaw(requestParameters: FulfillInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling fulfillInventory.');
        }

        if (requestParameters.allocateInventoryRequest === null || requestParameters.allocateInventoryRequest === undefined) {
            throw new runtime.RequiredError('allocateInventoryRequest','Required parameter requestParameters.allocateInventoryRequest was null or undefined when calling fulfillInventory.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/fulfill`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.allocateInventoryRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Fulfills inventory based on the given request
     * Fulfill Inventory
     */
    async fulfillInventory(requestParameters: FulfillInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.fulfillInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transitions a cart allocation into a normal order/shipment allocation
     * Transition Cart
     */


    async transitionCartRaw(requestParameters: TransitionCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling transitionCart.');
        }

        if (requestParameters.transitionCartRequest === null || requestParameters.transitionCartRequest === undefined) {
            throw new runtime.RequiredError('transitionCartRequest','Required parameter requestParameters.transitionCartRequest was null or undefined when calling transitionCart.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/inventory/v5/inventory/transitionCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transitionCartRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Transitions a cart allocation into a normal order/shipment allocation
     * Transition Cart
     */
    async transitionCart(requestParameters: TransitionCartOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.transitionCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
