/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ItemQuantity } from './ItemQuantity';
import {
    ItemQuantityFromJSON,
    ItemQuantityFromJSONTyped,
    ItemQuantityToJSON,
} from './ItemQuantity';
import type { RequestLocation } from './RequestLocation';
import {
    RequestLocationFromJSON,
    RequestLocationFromJSONTyped,
    RequestLocationToJSON,
} from './RequestLocation';

/**
 * 
 * @export
 * @interface InventoryRequestAllOf
 */
export interface InventoryRequestAllOf {
    /**
     * Inventory Request Type Enum
     * @type {string}
     * @memberof InventoryRequestAllOf
     */
    type?: InventoryRequestAllOfTypeEnum;
    /**
     * List of Items to search on
     * @type {Array<ItemQuantity>}
     * @memberof InventoryRequestAllOf
     */
    items?: Array<ItemQuantity>;
    /**
     * 
     * @type {RequestLocation}
     * @memberof InventoryRequestAllOf
     */
    requestLocation?: RequestLocation;
    /**
     * The maximum number of results to return, defaults to 100 for most
     * @type {number}
     * @memberof InventoryRequestAllOf
     */
    limit?: number;
    /**
     * List of location codes that are allowed to be included in results
     * @type {Array<string>}
     * @memberof InventoryRequestAllOf
     */
    locationWhitelist?: Array<string>;
    /**
     * List of location codes that should be returned before all others, preventing them from being excluded by limit
     * @type {Array<string>}
     * @memberof InventoryRequestAllOf
     */
    locationPriorityList?: Array<string>;
    /**
     * List of location codes that are NOT allowed to be included in results
     * @type {Array<string>}
     * @memberof InventoryRequestAllOf
     */
    locationBlacklist?: Array<string>;
    /**
     * Whether to ignore the safety stock buffer put in place
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    ignoreSafetyStock?: boolean;
    /**
     * Whether to allow items with negative inventory in the results
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    includeNegativeInventory?: boolean;
    /**
     * Whether to limit results to locations that are shipping enabled
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    directShip?: boolean;
    /**
     * Filter results by locations that have transfer enabled (true) or don't (false)
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    transferEnabled?: boolean;
    /**
     * Filter results by locations that have finderbot enabled (true) or don't (false)
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    pickup?: boolean;
    /**
     * Filter results by locations that have aggregate export enabled (true) or don't (false)
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    includeInAggregateExport?: boolean;
    /**
     * Filter results by locations that have physical storefronts (true) or don't (false)
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    includeInLocationExport?: boolean;
    /**
     * Filter out results that are blocked from assignment (at the product/location level) 
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    excludeBlockedAssignment?: boolean;
    /**
     * Flag to include attributes or not
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    includeAttributes?: boolean;
    /**
     * If set to true, include future inventory in response (records that were set with a deliveryDate).
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    includeFutureInventory?: boolean;
    /**
     * Whether to allow items with negative future inventory in the results
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    includeNegativeFutureInventory?: boolean;
    /**
     * DateTime to filter for only future inventory with a delivery date before or equal to the given date
     * @type {Date}
     * @memberof InventoryRequestAllOf
     */
    deliveryDateBefore?: Date;
    /**
     * DateTime to filter for only future inventory with a delivery date after or equal to the given date
     * @type {Date}
     * @memberof InventoryRequestAllOf
     */
    deliveryDateAfter?: Date;
    /**
     * What to sort the inventory results by. Only used for GetInventoryByLocation calls (locationCode must be set)
     * @type {string}
     * @memberof InventoryRequestAllOf
     */
    sortByEnum?: InventoryRequestAllOfSortByEnumEnum;
    /**
     * Whether to sort by descending order or not. Must be used in conjunction with the sortByEnum value
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    sortDescending?: boolean;
    /**
     * Whether to force populate default tags onto the request if they are unspecified for any tag category
     * @type {boolean}
     * @memberof InventoryRequestAllOf
     */
    forceDefaultsForUnspecifiedTagCategories?: boolean;
    /**
     * Associative Map of <String, String> for tagCategoryName => tagName
     * @type {{ [key: string]: string; }}
     * @memberof InventoryRequestAllOf
     */
    tags?: { [key: string]: string; };
}


/**
 * @export
 */
export const InventoryRequestAllOfTypeEnum = {
    All: 'ALL',
    Partial: 'PARTIAL',
    Any: 'ANY',
    AllStores: 'ALL_STORES'
} as const;
export type InventoryRequestAllOfTypeEnum = typeof InventoryRequestAllOfTypeEnum[keyof typeof InventoryRequestAllOfTypeEnum];

/**
 * @export
 */
export const InventoryRequestAllOfSortByEnumEnum = {
    OnHand: 'ON_HAND',
    Available: 'AVAILABLE',
    Allocated: 'ALLOCATED',
    PartNumber: 'PART_NUMBER',
    ProductId: 'PRODUCT_ID'
} as const;
export type InventoryRequestAllOfSortByEnumEnum = typeof InventoryRequestAllOfSortByEnumEnum[keyof typeof InventoryRequestAllOfSortByEnumEnum];


/**
 * Check if a given object implements the InventoryRequestAllOf interface.
 */
export function instanceOfInventoryRequestAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryRequestAllOfFromJSON(json: any): InventoryRequestAllOf {
    return InventoryRequestAllOfFromJSONTyped(json, false);
}

export function InventoryRequestAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryRequestAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(ItemQuantityFromJSON)),
        'requestLocation': !exists(json, 'requestLocation') ? undefined : RequestLocationFromJSON(json['requestLocation']),
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'locationWhitelist': !exists(json, 'locationWhitelist') ? undefined : json['locationWhitelist'],
        'locationPriorityList': !exists(json, 'locationPriorityList') ? undefined : json['locationPriorityList'],
        'locationBlacklist': !exists(json, 'locationBlacklist') ? undefined : json['locationBlacklist'],
        'ignoreSafetyStock': !exists(json, 'ignoreSafetyStock') ? undefined : json['ignoreSafetyStock'],
        'includeNegativeInventory': !exists(json, 'includeNegativeInventory') ? undefined : json['includeNegativeInventory'],
        'directShip': !exists(json, 'directShip') ? undefined : json['directShip'],
        'transferEnabled': !exists(json, 'transferEnabled') ? undefined : json['transferEnabled'],
        'pickup': !exists(json, 'pickup') ? undefined : json['pickup'],
        'includeInAggregateExport': !exists(json, 'includeInAggregateExport') ? undefined : json['includeInAggregateExport'],
        'includeInLocationExport': !exists(json, 'includeInLocationExport') ? undefined : json['includeInLocationExport'],
        'excludeBlockedAssignment': !exists(json, 'excludeBlockedAssignment') ? undefined : json['excludeBlockedAssignment'],
        'includeAttributes': !exists(json, 'includeAttributes') ? undefined : json['includeAttributes'],
        'includeFutureInventory': !exists(json, 'includeFutureInventory') ? undefined : json['includeFutureInventory'],
        'includeNegativeFutureInventory': !exists(json, 'includeNegativeFutureInventory') ? undefined : json['includeNegativeFutureInventory'],
        'deliveryDateBefore': !exists(json, 'deliveryDateBefore') ? undefined : json['deliveryDateBefore'],
        'deliveryDateAfter': !exists(json, 'deliveryDateAfter') ? undefined : json['deliveryDateAfter'],
        'sortByEnum': !exists(json, 'sortByEnum') ? undefined : json['sortByEnum'],
        'sortDescending': !exists(json, 'sortDescending') ? undefined : json['sortDescending'],
        'forceDefaultsForUnspecifiedTagCategories': !exists(json, 'forceDefaultsForUnspecifiedTagCategories') ? undefined : json['forceDefaultsForUnspecifiedTagCategories'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
    };
}

export function InventoryRequestAllOfToJSON(value?: InventoryRequestAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(ItemQuantityToJSON)),
        'requestLocation': RequestLocationToJSON(value.requestLocation),
        'limit': value.limit,
        'locationWhitelist': value.locationWhitelist,
        'locationPriorityList': value.locationPriorityList,
        'locationBlacklist': value.locationBlacklist,
        'ignoreSafetyStock': value.ignoreSafetyStock,
        'includeNegativeInventory': value.includeNegativeInventory,
        'directShip': value.directShip,
        'transferEnabled': value.transferEnabled,
        'pickup': value.pickup,
        'includeInAggregateExport': value.includeInAggregateExport,
        'includeInLocationExport': value.includeInLocationExport,
        'excludeBlockedAssignment': value.excludeBlockedAssignment,
        'includeAttributes': value.includeAttributes,
        'includeFutureInventory': value.includeFutureInventory,
        'includeNegativeFutureInventory': value.includeNegativeFutureInventory,
        'deliveryDateBefore': value.deliveryDateBefore,
        'deliveryDateAfter': value.deliveryDateAfter,
        'sortByEnum': value.sortByEnum,
        'sortDescending': value.sortDescending,
        'forceDefaultsForUnspecifiedTagCategories': value.forceDefaultsForUnspecifiedTagCategories,
        'tags': value.tags,
    };
}

