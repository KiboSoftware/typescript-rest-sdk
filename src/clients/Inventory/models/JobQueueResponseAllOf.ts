/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface JobQueueResponseAllOf
 */
export interface JobQueueResponseAllOf {
    /**
     * Internal identifier that uniquely identifies a single job
     * @type {number}
     * @memberof JobQueueResponseAllOf
     */
    jobID?: number;
    /**
     * Unique internal identifier of the tenant that owns the job
     * @type {number}
     * @memberof JobQueueResponseAllOf
     */
    tenantID?: number;
    /**
     * Unique internal Identifier of the owning location
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    locationCode?: string;
    /**
     * Purpose of the job
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    type?: JobQueueResponseAllOfTypeEnum;
    /**
     * Time and date the job was added to the queue in ISO8601 format in UTC
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    added?: string;
    /**
     * Time and date the job was started in ISO8601 format in UTC
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    started?: string;
    /**
     * Time and date the job was finished in ISO8601 format in UTC
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    finished?: string;
    /**
     * The full name of the file that was picked up at the secure droppoint server before being split up by location. Applies only to refresh and adjust jobs created via file fetch process
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    originalFilename?: string;
    /**
     * True if the job was not created from a fetched file
     * @type {boolean}
     * @memberof JobQueueResponseAllOf
     */
    hasData?: boolean;
    /**
     * The number of items processed, only for job types REFRESH and ADJUST
     * @type {number}
     * @memberof JobQueueResponseAllOf
     */
    itemCount?: number;
    /**
     * Current status of job completion
     * @type {string}
     * @memberof JobQueueResponseAllOf
     */
    status?: JobQueueResponseAllOfStatusEnum;
}


/**
 * @export
 */
export const JobQueueResponseAllOfTypeEnum = {
    Refresh: 'REFRESH',
    Adjust: 'ADJUST',
    ReleaseShipments: 'RELEASE_SHIPMENTS',
    CreatePickWave: 'CREATE_PICK_WAVE',
    ClosePickWave: 'CLOSE_PICK_WAVE',
    PutAwayFile: 'PUT_AWAY_FILE',
    ShortPickError: 'SHORT_PICK_ERROR',
    BinAuditStart: 'BIN_AUDIT_START',
    BinAuditCompletion: 'BIN_AUDIT_COMPLETION',
    CreateBinAudit: 'CREATE_BIN_AUDIT',
    ReleasePendingItems: 'RELEASE_PENDING_ITEMS',
    Allocate: 'ALLOCATE',
    Deallocate: 'DEALLOCATE',
    Fulfill: 'FULFILL',
    Delete: 'DELETE'
} as const;
export type JobQueueResponseAllOfTypeEnum = typeof JobQueueResponseAllOfTypeEnum[keyof typeof JobQueueResponseAllOfTypeEnum];

/**
 * @export
 */
export const JobQueueResponseAllOfStatusEnum = {
    Pending: 'PENDING',
    Working: 'WORKING',
    Success: 'SUCCESS',
    Failed: 'FAILED'
} as const;
export type JobQueueResponseAllOfStatusEnum = typeof JobQueueResponseAllOfStatusEnum[keyof typeof JobQueueResponseAllOfStatusEnum];


/**
 * Check if a given object implements the JobQueueResponseAllOf interface.
 */
export function instanceOfJobQueueResponseAllOf(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function JobQueueResponseAllOfFromJSON(json: any): JobQueueResponseAllOf {
    return JobQueueResponseAllOfFromJSONTyped(json, false);
}

export function JobQueueResponseAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobQueueResponseAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jobID': !exists(json, 'jobID') ? undefined : json['jobID'],
        'tenantID': !exists(json, 'tenantID') ? undefined : json['tenantID'],
        'locationCode': !exists(json, 'locationCode') ? undefined : json['locationCode'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'added': !exists(json, 'added') ? undefined : json['added'],
        'started': !exists(json, 'started') ? undefined : json['started'],
        'finished': !exists(json, 'finished') ? undefined : json['finished'],
        'originalFilename': !exists(json, 'originalFilename') ? undefined : json['originalFilename'],
        'hasData': !exists(json, 'hasData') ? undefined : json['hasData'],
        'itemCount': !exists(json, 'itemCount') ? undefined : json['itemCount'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function JobQueueResponseAllOfToJSON(value?: JobQueueResponseAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'jobID': value.jobID,
        'tenantID': value.tenantID,
        'locationCode': value.locationCode,
        'type': value.type,
        'added': value.added,
        'started': value.started,
        'finished': value.finished,
        'originalFilename': value.originalFilename,
        'hasData': value.hasData,
        'itemCount': value.itemCount,
        'status': value.status,
    };
}

