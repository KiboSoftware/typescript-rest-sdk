/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryFutureInventory } from './InventoryFutureInventory';
import {
    InventoryFutureInventoryFromJSON,
    InventoryFutureInventoryFromJSONTyped,
    InventoryFutureInventoryToJSON,
} from './InventoryFutureInventory';

/**
 * Response object for a tag quantity
 * @export
 * @interface InventoryTagQuantity
 */
export interface InventoryTagQuantity {
    /**
     * The quantity the the location has in its possession for this tag
     * @type {number}
     * @memberof InventoryTagQuantity
     */
    onHand?: number;
    /**
     * The quantity the location has that are available for purchase for this tag
     * @type {number}
     * @memberof InventoryTagQuantity
     */
    available?: number;
    /**
     * The quantity the location has that are already allocated for this tag
     * @type {number}
     * @memberof InventoryTagQuantity
     */
    allocated?: number;
    /**
     * The quantity the location has that are pending for this tag
     * @type {number}
     * @memberof InventoryTagQuantity
     */
    pending?: number;
    /**
     * Associative Map of <String, String> for tagCategoryName => tagName
     * @type {{ [key: string]: string; }}
     * @memberof InventoryTagQuantity
     */
    tags?: { [key: string]: string; };
    /**
     * 
     * @type {Array<InventoryFutureInventory>}
     * @memberof InventoryTagQuantity
     */
    futureInventory?: Array<InventoryFutureInventory>;
}

/**
 * Check if a given object implements the InventoryTagQuantity interface.
 */
export function instanceOfInventoryTagQuantity(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryTagQuantityFromJSON(json: any): InventoryTagQuantity {
    return InventoryTagQuantityFromJSONTyped(json, false);
}

export function InventoryTagQuantityFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryTagQuantity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'onHand': !exists(json, 'onHand') ? undefined : json['onHand'],
        'available': !exists(json, 'available') ? undefined : json['available'],
        'allocated': !exists(json, 'allocated') ? undefined : json['allocated'],
        'pending': !exists(json, 'pending') ? undefined : json['pending'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'futureInventory': !exists(json, 'futureInventory') ? undefined : ((json['futureInventory'] as Array<any>).map(InventoryFutureInventoryFromJSON)),
    };
}

export function InventoryTagQuantityToJSON(value?: InventoryTagQuantity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'onHand': value.onHand,
        'available': value.available,
        'allocated': value.allocated,
        'pending': value.pending,
        'tags': value.tags,
        'futureInventory': value.futureInventory === undefined ? undefined : ((value.futureInventory as Array<any>).map(InventoryFutureInventoryToJSON)),
    };
}

