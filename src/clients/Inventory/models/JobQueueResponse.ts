/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Response for getting a job
 * @export
 * @interface JobQueueResponse
 */
export interface JobQueueResponse {
    /**
     * Internal identifier that uniquely identifies a single job
     * @type {number}
     * @memberof JobQueueResponse
     */
    jobID?: number;
    /**
     * Unique internal identifier of the tenant that owns the job
     * @type {number}
     * @memberof JobQueueResponse
     */
    tenantID?: number;
    /**
     * Unique internal Identifier of the owning location
     * @type {string}
     * @memberof JobQueueResponse
     */
    locationCode?: string;
    /**
     * Purpose of the job
     * @type {string}
     * @memberof JobQueueResponse
     */
    type?: JobQueueResponseTypeEnum;
    /**
     * Time and date the job was added to the queue in ISO8601 format in UTC
     * @type {string}
     * @memberof JobQueueResponse
     */
    added?: string;
    /**
     * Time and date the job was started in ISO8601 format in UTC
     * @type {string}
     * @memberof JobQueueResponse
     */
    started?: string;
    /**
     * Time and date the job was finished in ISO8601 format in UTC
     * @type {string}
     * @memberof JobQueueResponse
     */
    finished?: string;
    /**
     * The full name of the file that was picked up at the secure droppoint server before being split up by location. Applies only to refresh and adjust jobs created via file fetch process
     * @type {string}
     * @memberof JobQueueResponse
     */
    originalFilename?: string;
    /**
     * True if the job was not created from a fetched file
     * @type {boolean}
     * @memberof JobQueueResponse
     */
    hasData?: boolean;
    /**
     * The number of items processed, only for job types REFRESH and ADJUST
     * @type {number}
     * @memberof JobQueueResponse
     */
    itemCount?: number;
    /**
     * Current status of job completion
     * @type {string}
     * @memberof JobQueueResponse
     */
    status?: JobQueueResponseStatusEnum;
}


/**
 * @export
 */
export const JobQueueResponseTypeEnum = {
    Refresh: 'REFRESH',
    Adjust: 'ADJUST',
    ReleaseShipments: 'RELEASE_SHIPMENTS',
    CreatePickWave: 'CREATE_PICK_WAVE',
    ClosePickWave: 'CLOSE_PICK_WAVE',
    PutAwayFile: 'PUT_AWAY_FILE',
    ShortPickError: 'SHORT_PICK_ERROR',
    BinAuditStart: 'BIN_AUDIT_START',
    BinAuditCompletion: 'BIN_AUDIT_COMPLETION',
    CreateBinAudit: 'CREATE_BIN_AUDIT',
    ReleasePendingItems: 'RELEASE_PENDING_ITEMS',
    Allocate: 'ALLOCATE',
    Deallocate: 'DEALLOCATE',
    Fulfill: 'FULFILL',
    Delete: 'DELETE'
} as const;
export type JobQueueResponseTypeEnum = typeof JobQueueResponseTypeEnum[keyof typeof JobQueueResponseTypeEnum];

/**
 * @export
 */
export const JobQueueResponseStatusEnum = {
    Pending: 'PENDING',
    Working: 'WORKING',
    Success: 'SUCCESS',
    Failed: 'FAILED'
} as const;
export type JobQueueResponseStatusEnum = typeof JobQueueResponseStatusEnum[keyof typeof JobQueueResponseStatusEnum];


/**
 * Check if a given object implements the JobQueueResponse interface.
 */
export function instanceOfJobQueueResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function JobQueueResponseFromJSON(json: any): JobQueueResponse {
    return JobQueueResponseFromJSONTyped(json, false);
}

export function JobQueueResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobQueueResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jobID': !exists(json, 'jobID') ? undefined : json['jobID'],
        'tenantID': !exists(json, 'tenantID') ? undefined : json['tenantID'],
        'locationCode': !exists(json, 'locationCode') ? undefined : json['locationCode'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'added': !exists(json, 'added') ? undefined : json['added'],
        'started': !exists(json, 'started') ? undefined : json['started'],
        'finished': !exists(json, 'finished') ? undefined : json['finished'],
        'originalFilename': !exists(json, 'originalFilename') ? undefined : json['originalFilename'],
        'hasData': !exists(json, 'hasData') ? undefined : json['hasData'],
        'itemCount': !exists(json, 'itemCount') ? undefined : json['itemCount'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function JobQueueResponseToJSON(value?: JobQueueResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'jobID': value.jobID,
        'tenantID': value.tenantID,
        'locationCode': value.locationCode,
        'type': value.type,
        'added': value.added,
        'started': value.started,
        'finished': value.finished,
        'originalFilename': value.originalFilename,
        'hasData': value.hasData,
        'itemCount': value.itemCount,
        'status': value.status,
    };
}

