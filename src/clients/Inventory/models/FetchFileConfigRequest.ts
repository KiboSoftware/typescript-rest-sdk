/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for Fetch File Configs
 * @export
 * @interface FetchFileConfigRequest
 */
export interface FetchFileConfigRequest {
    /**
     * Fetch File Config ID
     * @type {number}
     * @memberof FetchFileConfigRequest
     */
    fetchFileConfigID?: number;
    /**
     * Flag for active state
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    active: boolean;
    /**
     * Email List
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    emailList?: string;
    /**
     * Flag for Refresh Enabled
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    refreshEnabled?: boolean;
    /**
     * Description for the refresh file
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    refreshFileDescription?: string;
    /**
     * Flag for Update Enabled
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    updateEnabled?: boolean;
    /**
     * Description for the update file
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    updateFileDescription?: string;
    /**
     * FTP server address
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    ftpServer: string;
    /**
     * FTP server username
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    ftpUsername: string;
    /**
     * FTP server password
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    ftpPassword: string;
    /**
     * FTP server port
     * @type {number}
     * @memberof FetchFileConfigRequest
     */
    ftpPort?: number;
    /**
     * FTP server remote path
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    ftpRemotePath: string;
    /**
     * FTP server remote path archive
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    ftpRemotePathArchive?: string;
    /**
     * S3 Region
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    region?: string;
    /**
     * S3 Bucket
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    bucket?: string;
    /**
     * S3 Bucket Path (directory)
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    s3Path?: string;
    /**
     * S3 Archive Bucket
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    archiveBucket?: string;
    /**
     * S3 Archive Bucket Path (directory)
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    s3ArchivePath?: string;
    /**
     * Lock name
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    lockName: string;
    /**
     * Enum denoting action post processing
     * @type {number}
     * @memberof FetchFileConfigRequest
     */
    postProcessAction: number;
    /**
     * Flag for using control file
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    useControlFile?: boolean;
    /**
     * Flag for using multiple files
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    multipleFiles?: boolean;
    /**
     * Flag for converting negatives to zero
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    zeroOutNegatives?: boolean;
    /**
     * Flag for if its a test ftp config
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    testFTPConfigs?: boolean;
    /**
     * List of field names
     * @type {Array<string>}
     * @memberof FetchFileConfigRequest
     */
    fieldNameMap?: Array<string>;
    /**
     * Flag for ignoring extra fields
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    ignoreExtraFields?: boolean;
    /**
     * Flag to convert null quantities to zero
     * @type {boolean}
     * @memberof FetchFileConfigRequest
     */
    blankQuantityIsZero?: boolean;
    /**
     * Delimiter
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    csvDelimiter?: string;
    /**
     * Enum for fetch file productMapping
     * @type {string}
     * @memberof FetchFileConfigRequest
     */
    productMapping?: FetchFileConfigRequestProductMappingEnum;
}


/**
 * @export
 */
export const FetchFileConfigRequestProductMappingEnum = {
    PartNumberWithUpc: 'SWAP_PART_NUMBER_WITH_UPC',
    SkuWithUpc: 'SWAP_SKU_WITH_UPC'
} as const;
export type FetchFileConfigRequestProductMappingEnum = typeof FetchFileConfigRequestProductMappingEnum[keyof typeof FetchFileConfigRequestProductMappingEnum];


/**
 * Check if a given object implements the FetchFileConfigRequest interface.
 */
export function instanceOfFetchFileConfigRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "active" in value;
    isInstance = isInstance && "ftpServer" in value;
    isInstance = isInstance && "ftpUsername" in value;
    isInstance = isInstance && "ftpPassword" in value;
    isInstance = isInstance && "ftpRemotePath" in value;
    isInstance = isInstance && "lockName" in value;
    isInstance = isInstance && "postProcessAction" in value;

    return isInstance;
}

export function FetchFileConfigRequestFromJSON(json: any): FetchFileConfigRequest {
    return FetchFileConfigRequestFromJSONTyped(json, false);
}

export function FetchFileConfigRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchFileConfigRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fetchFileConfigID': !exists(json, 'fetchFileConfigID') ? undefined : json['fetchFileConfigID'],
        'active': json['active'],
        'emailList': !exists(json, 'emailList') ? undefined : json['emailList'],
        'refreshEnabled': !exists(json, 'refreshEnabled') ? undefined : json['refreshEnabled'],
        'refreshFileDescription': !exists(json, 'refreshFileDescription') ? undefined : json['refreshFileDescription'],
        'updateEnabled': !exists(json, 'updateEnabled') ? undefined : json['updateEnabled'],
        'updateFileDescription': !exists(json, 'updateFileDescription') ? undefined : json['updateFileDescription'],
        'ftpServer': json['ftpServer'],
        'ftpUsername': json['ftpUsername'],
        'ftpPassword': json['ftpPassword'],
        'ftpPort': !exists(json, 'ftpPort') ? undefined : json['ftpPort'],
        'ftpRemotePath': json['ftpRemotePath'],
        'ftpRemotePathArchive': !exists(json, 'ftpRemotePathArchive') ? undefined : json['ftpRemotePathArchive'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'bucket': !exists(json, 'bucket') ? undefined : json['bucket'],
        's3Path': !exists(json, 's3Path') ? undefined : json['s3Path'],
        'archiveBucket': !exists(json, 'archiveBucket') ? undefined : json['archiveBucket'],
        's3ArchivePath': !exists(json, 's3ArchivePath') ? undefined : json['s3ArchivePath'],
        'lockName': json['lockName'],
        'postProcessAction': json['postProcessAction'],
        'useControlFile': !exists(json, 'useControlFile') ? undefined : json['useControlFile'],
        'multipleFiles': !exists(json, 'multipleFiles') ? undefined : json['multipleFiles'],
        'zeroOutNegatives': !exists(json, 'zeroOutNegatives') ? undefined : json['zeroOutNegatives'],
        'testFTPConfigs': !exists(json, 'testFTPConfigs') ? undefined : json['testFTPConfigs'],
        'fieldNameMap': !exists(json, 'fieldNameMap') ? undefined : json['fieldNameMap'],
        'ignoreExtraFields': !exists(json, 'ignoreExtraFields') ? undefined : json['ignoreExtraFields'],
        'blankQuantityIsZero': !exists(json, 'blankQuantityIsZero') ? undefined : json['blankQuantityIsZero'],
        'csvDelimiter': !exists(json, 'csvDelimiter') ? undefined : json['csvDelimiter'],
        'productMapping': !exists(json, 'productMapping') ? undefined : json['productMapping'],
    };
}

export function FetchFileConfigRequestToJSON(value?: FetchFileConfigRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fetchFileConfigID': value.fetchFileConfigID,
        'active': value.active,
        'emailList': value.emailList,
        'refreshEnabled': value.refreshEnabled,
        'refreshFileDescription': value.refreshFileDescription,
        'updateEnabled': value.updateEnabled,
        'updateFileDescription': value.updateFileDescription,
        'ftpServer': value.ftpServer,
        'ftpUsername': value.ftpUsername,
        'ftpPassword': value.ftpPassword,
        'ftpPort': value.ftpPort,
        'ftpRemotePath': value.ftpRemotePath,
        'ftpRemotePathArchive': value.ftpRemotePathArchive,
        'region': value.region,
        'bucket': value.bucket,
        's3Path': value.s3Path,
        'archiveBucket': value.archiveBucket,
        's3ArchivePath': value.s3ArchivePath,
        'lockName': value.lockName,
        'postProcessAction': value.postProcessAction,
        'useControlFile': value.useControlFile,
        'multipleFiles': value.multipleFiles,
        'zeroOutNegatives': value.zeroOutNegatives,
        'testFTPConfigs': value.testFTPConfigs,
        'fieldNameMap': value.fieldNameMap,
        'ignoreExtraFields': value.ignoreExtraFields,
        'blankQuantityIsZero': value.blankQuantityIsZero,
        'csvDelimiter': value.csvDelimiter,
        'productMapping': value.productMapping,
    };
}

