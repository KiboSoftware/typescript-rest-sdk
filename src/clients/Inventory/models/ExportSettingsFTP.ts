/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Export Settings FTP
 * @export
 * @interface ExportSettingsFTP
 */
export interface ExportSettingsFTP {
    /**
     * Flag for Active State
     * @type {boolean}
     * @memberof ExportSettingsFTP
     */
    active?: boolean;
    /**
     * Export Settings ID
     * @type {number}
     * @memberof ExportSettingsFTP
     */
    exportSettingsID?: number;
    /**
     * Export Settings FTP ID
     * @type {number}
     * @memberof ExportSettingsFTP
     */
    exportSettingsFTPID?: number;
    /**
     * Export Settings FTP Name
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    name: string;
    /**
     * FTP Server Address
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    ftpServer: string;
    /**
     * FTP Server Port
     * @type {number}
     * @memberof ExportSettingsFTP
     */
    ftpPort: number;
    /**
     * FTP Server Directory
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    ftpDirectory: string;
    /**
     * FTP Server Control File Directory
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    ftpDirectoryControlFile?: string;
    /**
     * FTP Username
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    ftpUser?: string;
    /**
     * FTP Password
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    ftpPassword?: string;
    /**
     * FTP Delivery Class. Defaults to ExportDeliveryDefault
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    deliveryClass?: string;
    /**
     * Control File
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    controlFile?: string;
    /**
     * Control File Email
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    controlFileEmail?: string;
    /**
     * Remote File Name
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    remoteFileName?: string;
    /**
     * Control File Name
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    controlFileName?: string;
    /**
     * Endpoint
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    endpoint?: string;
    /**
     * Environment
     * @type {string}
     * @memberof ExportSettingsFTP
     */
    environment?: string;
}

/**
 * Check if a given object implements the ExportSettingsFTP interface.
 */
export function instanceOfExportSettingsFTP(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ftpServer" in value;
    isInstance = isInstance && "ftpPort" in value;
    isInstance = isInstance && "ftpDirectory" in value;

    return isInstance;
}

export function ExportSettingsFTPFromJSON(json: any): ExportSettingsFTP {
    return ExportSettingsFTPFromJSONTyped(json, false);
}

export function ExportSettingsFTPFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportSettingsFTP {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'exportSettingsID': !exists(json, 'exportSettingsID') ? undefined : json['exportSettingsID'],
        'exportSettingsFTPID': !exists(json, 'exportSettingsFTPID') ? undefined : json['exportSettingsFTPID'],
        'name': json['name'],
        'ftpServer': json['ftpServer'],
        'ftpPort': json['ftpPort'],
        'ftpDirectory': json['ftpDirectory'],
        'ftpDirectoryControlFile': !exists(json, 'ftpDirectoryControlFile') ? undefined : json['ftpDirectoryControlFile'],
        'ftpUser': !exists(json, 'ftpUser') ? undefined : json['ftpUser'],
        'ftpPassword': !exists(json, 'ftpPassword') ? undefined : json['ftpPassword'],
        'deliveryClass': !exists(json, 'deliveryClass') ? undefined : json['deliveryClass'],
        'controlFile': !exists(json, 'controlFile') ? undefined : json['controlFile'],
        'controlFileEmail': !exists(json, 'controlFileEmail') ? undefined : json['controlFileEmail'],
        'remoteFileName': !exists(json, 'remoteFileName') ? undefined : json['remoteFileName'],
        'controlFileName': !exists(json, 'controlFileName') ? undefined : json['controlFileName'],
        'endpoint': !exists(json, 'endpoint') ? undefined : json['endpoint'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
    };
}

export function ExportSettingsFTPToJSON(value?: ExportSettingsFTP | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'exportSettingsID': value.exportSettingsID,
        'exportSettingsFTPID': value.exportSettingsFTPID,
        'name': value.name,
        'ftpServer': value.ftpServer,
        'ftpPort': value.ftpPort,
        'ftpDirectory': value.ftpDirectory,
        'ftpDirectoryControlFile': value.ftpDirectoryControlFile,
        'ftpUser': value.ftpUser,
        'ftpPassword': value.ftpPassword,
        'deliveryClass': value.deliveryClass,
        'controlFile': value.controlFile,
        'controlFileEmail': value.controlFileEmail,
        'remoteFileName': value.remoteFileName,
        'controlFileName': value.controlFileName,
        'endpoint': value.endpoint,
        'environment': value.environment,
    };
}

