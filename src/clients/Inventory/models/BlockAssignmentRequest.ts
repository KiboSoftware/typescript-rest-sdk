/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockAssignmentItem } from './BlockAssignmentItem';
import {
    BlockAssignmentItemFromJSON,
    BlockAssignmentItemFromJSONTyped,
    BlockAssignmentItemToJSON,
} from './BlockAssignmentItem';

/**
 * Request to block assignment on the product
 * @export
 * @interface BlockAssignmentRequest
 */
export interface BlockAssignmentRequest {
    /**
     * list of items for blocking Assignment
     * @type {Array<BlockAssignmentItem>}
     * @memberof BlockAssignmentRequest
     */
    items: Array<BlockAssignmentItem>;
    /**
     * Location Code
     * @type {string}
     * @memberof BlockAssignmentRequest
     */
    locationCode?: string;
    /**
     * user id
     * @type {number}
     * @memberof BlockAssignmentRequest
     */
    userID?: number;
    /**
     * how many results to show per page
     * @type {number}
     * @memberof BlockAssignmentRequest
     */
    pageSize?: number;
    /**
     * which page to show
     * @type {number}
     * @memberof BlockAssignmentRequest
     */
    pageNum?: number;
    /**
     * index to sort results by
     * @type {string}
     * @memberof BlockAssignmentRequest
     */
    sortBy?: string;
}

/**
 * Check if a given object implements the BlockAssignmentRequest interface.
 */
export function instanceOfBlockAssignmentRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "items" in value;

    return isInstance;
}

export function BlockAssignmentRequestFromJSON(json: any): BlockAssignmentRequest {
    return BlockAssignmentRequestFromJSONTyped(json, false);
}

export function BlockAssignmentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAssignmentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(BlockAssignmentItemFromJSON)),
        'locationCode': !exists(json, 'locationCode') ? undefined : json['locationCode'],
        'userID': !exists(json, 'userID') ? undefined : json['userID'],
        'pageSize': !exists(json, 'pageSize') ? undefined : json['pageSize'],
        'pageNum': !exists(json, 'pageNum') ? undefined : json['pageNum'],
        'sortBy': !exists(json, 'sortBy') ? undefined : json['sortBy'],
    };
}

export function BlockAssignmentRequestToJSON(value?: BlockAssignmentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'items': ((value.items as Array<any>).map(BlockAssignmentItemToJSON)),
        'locationCode': value.locationCode,
        'userID': value.userID,
        'pageSize': value.pageSize,
        'pageNum': value.pageNum,
        'sortBy': value.sortBy,
    };
}

