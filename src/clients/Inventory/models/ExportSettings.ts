/* tslint:disable */
/* eslint-disable */
/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportSettingsFTP } from './ExportSettingsFTP';
import {
    ExportSettingsFTPFromJSON,
    ExportSettingsFTPFromJSONTyped,
    ExportSettingsFTPToJSON,
} from './ExportSettingsFTP';
import type { ExportSettingsS3 } from './ExportSettingsS3';
import {
    ExportSettingsS3FromJSON,
    ExportSettingsS3FromJSONTyped,
    ExportSettingsS3ToJSON,
} from './ExportSettingsS3';

/**
 * Export Settings
 * @export
 * @interface ExportSettings
 */
export interface ExportSettings {
    /**
     * Export Settings Name
     * @type {string}
     * @memberof ExportSettings
     */
    name: string;
    /**
     * Format for the export file
     * @type {string}
     * @memberof ExportSettings
     */
    fileFormat: ExportSettingsFileFormatEnum;
    /**
     * Type of exportGG for the settings
     * @type {string}
     * @memberof ExportSettings
     */
    exportType: ExportSettingsExportTypeEnum;
    /**
     * Flag for only sending available
     * @type {boolean}
     * @memberof ExportSettings
     */
    onlySendAvailable?: boolean;
    /**
     * Flag for only sending from active locations
     * @type {boolean}
     * @memberof ExportSettings
     */
    onlySendActiveLocations?: boolean;
    /**
     * List of export FTP settings
     * @type {Array<ExportSettingsFTP>}
     * @memberof ExportSettings
     */
    ftpInformation: Array<ExportSettingsFTP>;
    /**
     * List of export S3 settings
     * @type {Array<ExportSettingsS3>}
     * @memberof ExportSettings
     */
    s3Information?: Array<ExportSettingsS3>;
    /**
     * Flag for exporting as a single file
     * @type {boolean}
     * @memberof ExportSettings
     */
    exportSingleFile?: boolean;
    /**
     * Safety Stock
     * @type {string}
     * @memberof ExportSettings
     */
    safetyStock?: ExportSettingsSafetyStockEnum;
    /**
     * Floor
     * @type {string}
     * @memberof ExportSettings
     */
    floor?: ExportSettingsFloorEnum;
    /**
     * LTD
     * @type {string}
     * @memberof ExportSettings
     */
    ltd?: ExportSettingsLtdEnum;
    /**
     * Name for the export file
     * @type {string}
     * @memberof ExportSettings
     */
    fileName?: string;
    /**
     * Flag for using shortened filenames
     * @type {boolean}
     * @memberof ExportSettings
     */
    shortenFilename?: boolean;
    /**
     * Flag for including attributes
     * @type {boolean}
     * @memberof ExportSettings
     */
    includeAttributes?: boolean;
    /**
     * Flag for zipping the files
     * @type {boolean}
     * @memberof ExportSettings
     */
    zipFiles?: boolean;
    /**
     * Name for the zipped file
     * @type {string}
     * @memberof ExportSettings
     */
    zipFileName?: string;
    /**
     * Untransformed File Name
     * @type {string}
     * @memberof ExportSettings
     */
    untransformedFileName?: string;
    /**
     * Untransformed Zip File Name
     * @type {string}
     * @memberof ExportSettings
     */
    untransformedZipFileName?: string;
    /**
     * Location Group Ids associated with the settings
     * @type {Array<number>}
     * @memberof ExportSettings
     */
    locationGroupIDs?: Array<number>;
    /**
     * Site Ids associated with the settings
     * @type {Array<number>}
     * @memberof ExportSettings
     */
    siteIDs?: Array<number>;
    /**
     * Flag for only using locations with Direct Ship enabled
     * @type {boolean}
     * @memberof ExportSettings
     */
    directShip?: boolean;
    /**
     * Flag for only using locations with In Store Pickup enabled
     * @type {boolean}
     * @memberof ExportSettings
     */
    pickup?: boolean;
    /**
     * Flag for only using locations with Transfer enabled
     * @type {boolean}
     * @memberof ExportSettings
     */
    transfer?: boolean;
    /**
     * Enum for export productMapping
     * @type {string}
     * @memberof ExportSettings
     */
    productMapping?: ExportSettingsProductMappingEnum;
    /**
     * Flag for marking the setting as a classic export
     * @type {boolean}
     * @memberof ExportSettings
     */
    isClassic?: boolean;
    /**
     * Flag for excluding negative inventory locations
     * @type {boolean}
     * @memberof ExportSettings
     */
    ignoreNegativeInventoryLocations?: boolean;
    /**
     * Associative Map of <String, String> for tagCategoryName => tagName
     * @type {{ [key: string]: string; }}
     * @memberof ExportSettings
     */
    tags?: { [key: string]: string; };
}


/**
 * @export
 */
export const ExportSettingsFileFormatEnum = {
    Xml: 'XML',
    Csv: 'CSV'
} as const;
export type ExportSettingsFileFormatEnum = typeof ExportSettingsFileFormatEnum[keyof typeof ExportSettingsFileFormatEnum];

/**
 * @export
 */
export const ExportSettingsExportTypeEnum = {
    Aggregate: 'AGGREGATE',
    Location: 'LOCATION'
} as const;
export type ExportSettingsExportTypeEnum = typeof ExportSettingsExportTypeEnum[keyof typeof ExportSettingsExportTypeEnum];

/**
 * @export
 */
export const ExportSettingsSafetyStockEnum = {
    Max: 'SAFETY_STOCK_MAX',
    Min: 'SAFETY_STOCK_MIN',
    Avg: 'SAFETY_STOCK_AVG',
    Sum: 'SAFETY_STOCK_SUM'
} as const;
export type ExportSettingsSafetyStockEnum = typeof ExportSettingsSafetyStockEnum[keyof typeof ExportSettingsSafetyStockEnum];

/**
 * @export
 */
export const ExportSettingsFloorEnum = {
    Max: 'FLOOR_MAX',
    Min: 'FLOOR_MIN',
    Avg: 'FLOOR_AVG',
    Sum: 'FLOOR_SUM'
} as const;
export type ExportSettingsFloorEnum = typeof ExportSettingsFloorEnum[keyof typeof ExportSettingsFloorEnum];

/**
 * @export
 */
export const ExportSettingsLtdEnum = {
    Max: 'LTD_MAX',
    Min: 'LTD_MIN',
    Avg: 'LTD_AVG',
    Sum: 'LTD_SUM'
} as const;
export type ExportSettingsLtdEnum = typeof ExportSettingsLtdEnum[keyof typeof ExportSettingsLtdEnum];

/**
 * @export
 */
export const ExportSettingsProductMappingEnum = {
    PartNumberWithUpc: 'SWAP_PART_NUMBER_WITH_UPC',
    SkuWithUpc: 'SWAP_SKU_WITH_UPC'
} as const;
export type ExportSettingsProductMappingEnum = typeof ExportSettingsProductMappingEnum[keyof typeof ExportSettingsProductMappingEnum];


/**
 * Check if a given object implements the ExportSettings interface.
 */
export function instanceOfExportSettings(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "fileFormat" in value;
    isInstance = isInstance && "exportType" in value;
    isInstance = isInstance && "ftpInformation" in value;

    return isInstance;
}

export function ExportSettingsFromJSON(json: any): ExportSettings {
    return ExportSettingsFromJSONTyped(json, false);
}

export function ExportSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'fileFormat': json['fileFormat'],
        'exportType': json['exportType'],
        'onlySendAvailable': !exists(json, 'onlySendAvailable') ? undefined : json['onlySendAvailable'],
        'onlySendActiveLocations': !exists(json, 'onlySendActiveLocations') ? undefined : json['onlySendActiveLocations'],
        'ftpInformation': ((json['ftpInformation'] as Array<any>).map(ExportSettingsFTPFromJSON)),
        's3Information': !exists(json, 's3Information') ? undefined : ((json['s3Information'] as Array<any>).map(ExportSettingsS3FromJSON)),
        'exportSingleFile': !exists(json, 'exportSingleFile') ? undefined : json['exportSingleFile'],
        'safetyStock': !exists(json, 'safetyStock') ? undefined : json['safetyStock'],
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'ltd': !exists(json, 'ltd') ? undefined : json['ltd'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'shortenFilename': !exists(json, 'shortenFilename') ? undefined : json['shortenFilename'],
        'includeAttributes': !exists(json, 'includeAttributes') ? undefined : json['includeAttributes'],
        'zipFiles': !exists(json, 'zipFiles') ? undefined : json['zipFiles'],
        'zipFileName': !exists(json, 'zipFileName') ? undefined : json['zipFileName'],
        'untransformedFileName': !exists(json, 'untransformedFileName') ? undefined : json['untransformedFileName'],
        'untransformedZipFileName': !exists(json, 'untransformedZipFileName') ? undefined : json['untransformedZipFileName'],
        'locationGroupIDs': !exists(json, 'locationGroupIDs') ? undefined : json['locationGroupIDs'],
        'siteIDs': !exists(json, 'siteIDs') ? undefined : json['siteIDs'],
        'directShip': !exists(json, 'directShip') ? undefined : json['directShip'],
        'pickup': !exists(json, 'pickup') ? undefined : json['pickup'],
        'transfer': !exists(json, 'transfer') ? undefined : json['transfer'],
        'productMapping': !exists(json, 'productMapping') ? undefined : json['productMapping'],
        'isClassic': !exists(json, 'isClassic') ? undefined : json['isClassic'],
        'ignoreNegativeInventoryLocations': !exists(json, 'ignoreNegativeInventoryLocations') ? undefined : json['ignoreNegativeInventoryLocations'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
    };
}

export function ExportSettingsToJSON(value?: ExportSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'fileFormat': value.fileFormat,
        'exportType': value.exportType,
        'onlySendAvailable': value.onlySendAvailable,
        'onlySendActiveLocations': value.onlySendActiveLocations,
        'ftpInformation': ((value.ftpInformation as Array<any>).map(ExportSettingsFTPToJSON)),
        's3Information': value.s3Information === undefined ? undefined : ((value.s3Information as Array<any>).map(ExportSettingsS3ToJSON)),
        'exportSingleFile': value.exportSingleFile,
        'safetyStock': value.safetyStock,
        'floor': value.floor,
        'ltd': value.ltd,
        'fileName': value.fileName,
        'shortenFilename': value.shortenFilename,
        'includeAttributes': value.includeAttributes,
        'zipFiles': value.zipFiles,
        'zipFileName': value.zipFileName,
        'untransformedFileName': value.untransformedFileName,
        'untransformedZipFileName': value.untransformedZipFileName,
        'locationGroupIDs': value.locationGroupIDs,
        'siteIDs': value.siteIDs,
        'directShip': value.directShip,
        'pickup': value.pickup,
        'transfer': value.transfer,
        'productMapping': value.productMapping,
        'isClassic': value.isClassic,
        'ignoreNegativeInventoryLocations': value.ignoreNegativeInventoryLocations,
        'tags': value.tags,
    };
}

