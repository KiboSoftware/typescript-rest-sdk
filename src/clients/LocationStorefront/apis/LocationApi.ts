/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Storefront Service
 * OpenAPI Spec for Kibo Location Storefront Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Location,
  LocationCollection,
} from '../models';

export interface GetCurbsideLocationRequest {
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetDeliveryLocationRequest {
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetDeliveryLocationsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetDirectShipLocationRequest {
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetInStorePickupLocationRequest {
    locationCode: string;
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetInStorePickupLocationsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetLocationRequest {
    locationCode: string;
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

export interface GetLocationsInUsageTypeRequest {
    locationUsageType: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributeDefinition?: boolean;
    responseFields?: string;
}

/**
 * LocationApi - interface
 * 
 * @export
 * @interface LocationApiInterface
 */
export interface LocationApiInterface {
    /**
     * Get the Curbside Location for the Site.
     * @summary Get Curbside Location
     * @param {boolean} [includeAttributeDefinition] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getCurbsideLocationRaw(requestParameters: GetCurbsideLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get the Curbside Location for the Site.
     * Get Curbside Location
     */
    getCurbsideLocation(requestParameters: GetCurbsideLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Get Delivery Location
     * @summary Get Delivery Location
     * @param {boolean} [includeAttributeDefinition] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getDeliveryLocationRaw(requestParameters: GetDeliveryLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get Delivery Location
     * Get Delivery Location
     */
    getDeliveryLocation(requestParameters: GetDeliveryLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Gets the delivery Locations for the site
     * @summary Get Delivery Locations
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {boolean} [includeAttributeDefinition] Include the location attributes associated definition
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getDeliveryLocationsRaw(requestParameters: GetDeliveryLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>>;

    /**
     * Gets the delivery Locations for the site
     * Get Delivery Locations
     */
    getDeliveryLocations(requestParameters: GetDeliveryLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection>;

    /**
     * Get the Direct Ship Location for the Site.
     * @summary Get Direct Ship Location
     * @param {boolean} [includeAttributeDefinition] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getDirectShipLocationRaw(requestParameters: GetDirectShipLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get the Direct Ship Location for the Site.
     * Get Direct Ship Location
     */
    getDirectShipLocation(requestParameters: GetDirectShipLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Get a specific in store pickup Location for the Site
     * @summary Get In Store Pickup Location
     * @param {string} locationCode 
     * @param {boolean} [includeAttributeDefinition] Include the location attributes associated definition
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getInStorePickupLocationRaw(requestParameters: GetInStorePickupLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get a specific in store pickup Location for the Site
     * Get In Store Pickup Location
     */
    getInStorePickupLocation(requestParameters: GetInStorePickupLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Gets the in store pickup Locations for the site.
     * @summary Get In Store Pickup Locations
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {boolean} [includeAttributeDefinition] Include the location attributes associated definition
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getInStorePickupLocationsRaw(requestParameters: GetInStorePickupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>>;

    /**
     * Gets the in store pickup Locations for the site.
     * Get In Store Pickup Locations
     */
    getInStorePickupLocations(requestParameters: GetInStorePickupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection>;

    /**
     * Get a Location by locationCode.
     * @summary Get Location
     * @param {string} locationCode 
     * @param {boolean} [includeAttributeDefinition] Include the location attributes associated definition
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getLocationRaw(requestParameters: GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
     * Get a Location by locationCode.
     * Get Location
     */
    getLocation(requestParameters: GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
     * Get the Locations for the Site associated with the locationUsageType.
     * @summary Get Locations In Usage Type
     * @param {string} locationUsageType 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {boolean} [includeAttributeDefinition] Include the location attributes associated definition
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationApiInterface
     */
    getLocationsInUsageTypeRaw(requestParameters: GetLocationsInUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>>;

    /**
     * Get the Locations for the Site associated with the locationUsageType.
     * Get Locations In Usage Type
     */
    getLocationsInUsageType(requestParameters: GetLocationsInUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection>;

}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI implements LocationApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get the Curbside Location for the Site.
     * Get Curbside Location
     */


    async getCurbsideLocationRaw(requestParameters: GetCurbsideLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/CS/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the Curbside Location for the Site.
     * Get Curbside Location
     */
    async getCurbsideLocation(requestParameters: GetCurbsideLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getCurbsideLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Delivery Location
     * Get Delivery Location
     */


    async getDeliveryLocationRaw(requestParameters: GetDeliveryLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/DL/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Delivery Location
     * Get Delivery Location
     */
    async getDeliveryLocation(requestParameters: GetDeliveryLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getDeliveryLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the delivery Locations for the site
     * Get Delivery Locations
     */


    async getDeliveryLocationsRaw(requestParameters: GetDeliveryLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/DL/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the delivery Locations for the site
     * Get Delivery Locations
     */
    async getDeliveryLocations(requestParameters: GetDeliveryLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getDeliveryLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Direct Ship Location for the Site.
     * Get Direct Ship Location
     */


    async getDirectShipLocationRaw(requestParameters: GetDirectShipLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/DS/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the Direct Ship Location for the Site.
     * Get Direct Ship Location
     */
    async getDirectShipLocation(requestParameters: GetDirectShipLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getDirectShipLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific in store pickup Location for the Site
     * Get In Store Pickup Location
     */


    async getInStorePickupLocationRaw(requestParameters: GetInStorePickupLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getInStorePickupLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/SP/locations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a specific in store pickup Location for the Site
     * Get In Store Pickup Location
     */
    async getInStorePickupLocation(requestParameters: GetInStorePickupLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getInStorePickupLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the in store pickup Locations for the site.
     * Get In Store Pickup Locations
     */


    async getInStorePickupLocationsRaw(requestParameters: GetInStorePickupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/SP/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the in store pickup Locations for the site.
     * Get In Store Pickup Locations
     */
    async getInStorePickupLocations(requestParameters: GetInStorePickupLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getInStorePickupLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Location by locationCode.
     * Get Location
     */


    async getLocationRaw(requestParameters: GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a Location by locationCode.
     * Get Location
     */
    async getLocation(requestParameters: GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Locations for the Site associated with the locationUsageType.
     * Get Locations In Usage Type
     */


    async getLocationsInUsageTypeRaw(requestParameters: GetLocationsInUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        if (requestParameters.locationUsageType === null || requestParameters.locationUsageType === undefined) {
            throw new runtime.RequiredError('locationUsageType','Required parameter requestParameters.locationUsageType was null or undefined when calling getLocationsInUsageType.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/{locationUsageType}/locations`.replace(`{${"locationUsageType"}}`, encodeURIComponent(String(requestParameters.locationUsageType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the Locations for the Site associated with the locationUsageType.
     * Get Locations In Usage Type
     */
    async getLocationsInUsageType(requestParameters: GetLocationsInUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getLocationsInUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
