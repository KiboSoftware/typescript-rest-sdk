/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Storefront Service
 * OpenAPI Spec for Kibo Location Storefront Service
 *
 * The version of the OpenAPI document: v1_storefront
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Location,
  LocationCollection,
} from '../models';
import {
    LocationFromJSON,
    LocationToJSON,
    LocationCollectionFromJSON,
    LocationCollectionToJSON,
} from '../models';

export interface LocationApiGetCurbsideLocationRequest {
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetDeliveryLocationRequest {
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetDeliveryLocationsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetDirectShipLocationRequest {
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetInStorePickupLocationRequest {
    locationCode: string;
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetInStorePickupLocationsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetLocationRequest {
    locationCode: string;
    includeAttributeDefinition?: boolean;
}

export interface LocationApiGetLocationsInUsageTypeRequest {
    locationUsageType: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributeDefinition?: boolean;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get the Curbside Location for the Site.
     * Get Curbside Location
     */


    async getCurbsideLocationRaw(requestParameters: LocationApiGetCurbsideLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/CS/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Get the Curbside Location for the Site.
     * Get Curbside Location
     */
    async getCurbsideLocation(requestParameters: LocationApiGetCurbsideLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getCurbsideLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specific Delivery Location for the site
     * Get Delivery Location
     */


    async getDeliveryLocationRaw(requestParameters: LocationApiGetDeliveryLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/DL/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Gets a specific Delivery Location for the site
     * Get Delivery Location
     */
    async getDeliveryLocation(requestParameters: LocationApiGetDeliveryLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getDeliveryLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the delivery Locations for the site
     * Get Delivery Locations
     */


    async getDeliveryLocationsRaw(requestParameters: LocationApiGetDeliveryLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/DL/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationCollectionFromJSON(jsonValue));
    }

    /**
     * Gets the delivery Locations for the site
     * Get Delivery Locations
     */
    async getDeliveryLocations(requestParameters: LocationApiGetDeliveryLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getDeliveryLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Direct Ship Location for the Site.
     * Get Direct Ship Location
     */


    async getDirectShipLocationRaw(requestParameters: LocationApiGetDirectShipLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/DS/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Get the Direct Ship Location for the Site.
     * Get Direct Ship Location
     */
    async getDirectShipLocation(requestParameters: LocationApiGetDirectShipLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getDirectShipLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific in store pickup Location for the Site
     * Get In Store Pickup Location
     */


    async getInStorePickupLocationRaw(requestParameters: LocationApiGetInStorePickupLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getInStorePickupLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/SP/locations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Get a specific in store pickup Location for the Site
     * Get In Store Pickup Location
     */
    async getInStorePickupLocation(requestParameters: LocationApiGetInStorePickupLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getInStorePickupLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the in store pickup Locations for the site.
     * Get In Store Pickup Locations
     */


    async getInStorePickupLocationsRaw(requestParameters: LocationApiGetInStorePickupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/SP/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationCollectionFromJSON(jsonValue));
    }

    /**
     * Gets the in store pickup Locations for the site.
     * Get In Store Pickup Locations
     */
    async getInStorePickupLocations(requestParameters: LocationApiGetInStorePickupLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getInStorePickupLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Location by locationCode.
     * Get Location
     */


    async getLocationRaw(requestParameters: LocationApiGetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationFromJSON(jsonValue));
    }

    /**
     * Get a Location by locationCode.
     * Get Location
     */
    async getLocation(requestParameters: LocationApiGetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Locations for the Site associated with the locationUsageType.
     * Get Locations In Usage Type
     */


    async getLocationsInUsageTypeRaw(requestParameters: LocationApiGetLocationsInUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        if (requestParameters.locationUsageType === null || requestParameters.locationUsageType === undefined) {
            throw new runtime.RequiredError('locationUsageType','Required parameter requestParameters.locationUsageType was null or undefined when calling getLocationsInUsageType.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributeDefinition !== undefined) {
            queryParameters['includeAttributeDefinition'] = requestParameters.includeAttributeDefinition;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/storefront/locationUsageTypes/{locationUsageType}/locations`.replace(`{${"locationUsageType"}}`, encodeURIComponent(String(requestParameters.locationUsageType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationCollectionFromJSON(jsonValue));
    }

    /**
     * Get the Locations for the Site associated with the locationUsageType.
     * Get Locations In Usage Type
     */
    async getLocationsInUsageType(requestParameters: LocationApiGetLocationsInUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getLocationsInUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
