/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ErrorItem,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
  MultiValueMapStringString
} from '../models';


export namespace shippingNotificationApiParams { 
    export interface HandleCarrierNotificationRequest {
        carrier: string;
        paramMap: MultiValueMapStringString;
    }
}
/**
* ShippingNotificationApiService - interface
* 
* @export
* @interface ShippingNotificationApi
*/
export interface ShippingNotificationApiService {
    /**
    * Handle Carrier Notification
    * @summary Handle Carrier Notification
    * @param {string} carrier 
    * @param {MultiValueMapStringString} paramMap 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingNotificationApiInterface
    */
    handleCarrierNotificationRaw(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * Handle Carrier Notification
    * Handle Carrier Notification
    */
    handleCarrierNotification(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}


/**
 * 
 */
export class ShippingNotificationApi extends runtime.BaseAPI implements ShippingNotificationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Handle Carrier Notification
     * Handle Carrier Notification
     */


    async handleCarrierNotificationRaw(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.carrier === null || requestParameters.carrier === undefined) {
            throw new runtime.RequiredError('carrier','Required parameter requestParameters.carrier was null or undefined when calling handleCarrierNotification.');
        }

        if (requestParameters.paramMap === null || requestParameters.paramMap === undefined) {
            throw new runtime.RequiredError('paramMap','Required parameter requestParameters.paramMap was null or undefined when calling handleCarrierNotification.');
        }

        const queryParameters: any = {};

        if (requestParameters.paramMap !== undefined) {
            queryParameters['paramMap'] = requestParameters.paramMap;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/notifications/{carrier}`.replace(`{${"carrier"}}`, encodeURIComponent(String(requestParameters.carrier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Handle Carrier Notification
     * Handle Carrier Notification
     */
    async handleCarrierNotification(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.handleCarrierNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
