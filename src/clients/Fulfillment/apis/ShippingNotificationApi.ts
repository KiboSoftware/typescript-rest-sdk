/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';


export namespace shippingNotificationApiParams { 
    export interface HandleCarrierNotificationRequest {
        carrier: string;
        xVolTenant: number;
        paramMap: any | null;
        xVolSite?: number;
    }
}
/**
* ShippingNotificationApiService - interface
* 
* @export
* @interface ShippingNotificationApi
*/
export interface ShippingNotificationApiService {
    /**
    * handleCarrierNotification
    * @summary handleCarrierNotification
    * @param {string} carrier carrier
    * @param {number} xVolTenant 
    * @param {any} paramMap paramMap
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingNotificationApiInterface
    */
    handleCarrierNotificationRaw(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * handleCarrierNotification
    * handleCarrierNotification
    */
    handleCarrierNotification(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}


/**
 * 
 */
export class ShippingNotificationApi extends runtime.BaseAPI implements ShippingNotificationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * handleCarrierNotification
     * handleCarrierNotification
     */


    async handleCarrierNotificationRaw(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.carrier === null || requestParameters.carrier === undefined) {
            throw new runtime.RequiredError('carrier','Required parameter requestParameters.carrier was null or undefined when calling handleCarrierNotification.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling handleCarrierNotification.');
        }

        if (requestParameters.paramMap === null || requestParameters.paramMap === undefined) {
            throw new runtime.RequiredError('paramMap','Required parameter requestParameters.paramMap was null or undefined when calling handleCarrierNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.paramMap !== undefined) {

            formParams.append('paramMap', new Blob([JSON.stringify(requestParameters.paramMap)], { type: "application/json", }));
        }

        const response = await this.request({
            path: `/commerce/fulfillment/shipping/notifications/{carrier}`.replace(`{${"carrier"}}`, encodeURIComponent(String(requestParameters.carrier))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * handleCarrierNotification
     * handleCarrierNotification
     */
    async handleCarrierNotification(requestParameters: shippingNotificationApiParams.HandleCarrierNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.handleCarrierNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
