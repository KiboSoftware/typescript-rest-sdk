/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelOfSubstitutableItemResponse,
  EntityModelOfShipment,
  SubstituteItemsRequest,
} from '../models';


export namespace substitutionsApiParams { 
    export interface AddSubstituteItemsRequest {
        shipmentNumber: number;
        xVolTenant: number;
        substituteItemsRequestDto: SubstituteItemsRequest;
        ifMatch?: string;
        xVolSite?: number;
    }
    export interface GetSubstituteItemsRequest {
        shipmentNumber: number;
        xVolTenant: number;
        originalLineId?: number;
        productCode?: string;
        xVolSite?: number;
    }
    export interface RemoveSubstituteItemsRequest {
        shipmentNumber: number;
        xVolTenant: number;
        substituteItemsRequestDto: SubstituteItemsRequest;
        ifMatch?: string;
        xVolSite?: number;
    }
}
/**
* SubstitutionsApiService - interface
* 
* @export
* @interface SubstitutionsApi
*/
export interface SubstitutionsApiService {
    /**
    * addSubstituteItems
    * @summary addSubstituteItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {SubstituteItemsRequest} substituteItemsRequestDto substituteItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubstitutionsApiInterface
    */
    addSubstituteItemsRaw(requestParameters: substitutionsApiParams.AddSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * addSubstituteItems
    * addSubstituteItems
    */
    addSubstituteItems(requestParameters: substitutionsApiParams.AddSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * getSubstituteItems
    * @summary getSubstituteItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [originalLineId] 
    * @param {string} [productCode] 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubstitutionsApiInterface
    */
    getSubstituteItemsRaw(requestParameters: substitutionsApiParams.GetSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfSubstitutableItemResponse>>;

    /**
    * getSubstituteItems
    * getSubstituteItems
    */
    getSubstituteItems(requestParameters: substitutionsApiParams.GetSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfSubstitutableItemResponse>;

    /**
    * removeSubstituteItems
    * @summary removeSubstituteItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {SubstituteItemsRequest} substituteItemsRequestDto substituteItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubstitutionsApiInterface
    */
    removeSubstituteItemsRaw(requestParameters: substitutionsApiParams.RemoveSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * removeSubstituteItems
    * removeSubstituteItems
    */
    removeSubstituteItems(requestParameters: substitutionsApiParams.RemoveSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

}


/**
 * 
 */
export class SubstitutionsApi extends runtime.BaseAPI implements SubstitutionsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * addSubstituteItems
     * addSubstituteItems
     */


    async addSubstituteItemsRaw(requestParameters: substitutionsApiParams.AddSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling addSubstituteItems.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling addSubstituteItems.');
        }

        if (requestParameters.substituteItemsRequestDto === null || requestParameters.substituteItemsRequestDto === undefined) {
            throw new runtime.RequiredError('substituteItemsRequestDto','Required parameter requestParameters.substituteItemsRequestDto was null or undefined when calling addSubstituteItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/substituteItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.substituteItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * addSubstituteItems
     * addSubstituteItems
     */
    async addSubstituteItems(requestParameters: substitutionsApiParams.AddSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.addSubstituteItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getSubstituteItems
     * getSubstituteItems
     */


    async getSubstituteItemsRaw(requestParameters: substitutionsApiParams.GetSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfSubstitutableItemResponse>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getSubstituteItems.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSubstituteItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.originalLineId !== undefined) {
            queryParameters['originalLineId'] = requestParameters.originalLineId;
        }

        if (requestParameters.productCode !== undefined) {
            queryParameters['productCode'] = requestParameters.productCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/substituteItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getSubstituteItems
     * getSubstituteItems
     */
    async getSubstituteItems(requestParameters: substitutionsApiParams.GetSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfSubstitutableItemResponse> {
        const response = await this.getSubstituteItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * removeSubstituteItems
     * removeSubstituteItems
     */


    async removeSubstituteItemsRaw(requestParameters: substitutionsApiParams.RemoveSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeSubstituteItems.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling removeSubstituteItems.');
        }

        if (requestParameters.substituteItemsRequestDto === null || requestParameters.substituteItemsRequestDto === undefined) {
            throw new runtime.RequiredError('substituteItemsRequestDto','Required parameter requestParameters.substituteItemsRequestDto was null or undefined when calling removeSubstituteItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/substituteItems/remove`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.substituteItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * removeSubstituteItems
     * removeSubstituteItems
     */
    async removeSubstituteItems(requestParameters: substitutionsApiParams.RemoveSubstituteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.removeSubstituteItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
