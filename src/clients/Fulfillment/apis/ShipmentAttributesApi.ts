/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ShipmentAttribute,
} from '../models';
import {
    ShipmentAttributeFromJSON,
    ShipmentAttributeToJSON,
} from '../models';

export interface ShipmentAttributesApiDeleteShipmentAttributeUsingDELETERequest {
    shipmentNumber: number;
    key: string;
}

export interface ShipmentAttributesApiGetShipmentAttributeUsingGETRequest {
    shipmentNumber: number;
    key: string;
}

export interface ShipmentAttributesApiGetShipmentAttributesUsingGETRequest {
    shipmentNumber: number;
}

export interface ShipmentAttributesApiSetShipmentAttributeUsingPUTRequest {
    shipmentNumber: number;
    key: string;
    shipmentAttribute?: ShipmentAttribute;
}

export interface ShipmentAttributesApiSetShipmentAttributesUsingPUTRequest {
    shipmentNumber: number;
    shipmentAttribute?: Array<ShipmentAttribute>;
}

/**
 * 
 */
export class ShipmentAttributesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Shipment Attribute
     * Delete Shipment Attribute
     */


    async deleteShipmentAttributeUsingDELETERaw(requestParameters: ShipmentAttributesApiDeleteShipmentAttributeUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentAttributeUsingDELETE.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentAttributeUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/attributes/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Attribute
     * Delete Shipment Attribute
     */
    async deleteShipmentAttributeUsingDELETE(requestParameters: ShipmentAttributesApiDeleteShipmentAttributeUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentAttributeUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * Get Shipment Attribute
     * Get Shipment Attribute
     */


    async getShipmentAttributeUsingGETRaw(requestParameters: ShipmentAttributesApiGetShipmentAttributeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipmentAttribute>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentAttributeUsingGET.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling getShipmentAttributeUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/attributes/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentAttributeFromJSON(jsonValue));
    }

    /**
     * Get Shipment Attribute
     * Get Shipment Attribute
     */
    async getShipmentAttributeUsingGET(requestParameters: ShipmentAttributesApiGetShipmentAttributeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipmentAttribute> {
        const response = await this.getShipmentAttributeUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipment Attributes
     * Get Shipment Attributes
     */


    async getShipmentAttributesUsingGETRaw(requestParameters: ShipmentAttributesApiGetShipmentAttributesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShipmentAttribute>>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentAttributesUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/attributes`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShipmentAttributeFromJSON));
    }

    /**
     * Get Shipment Attributes
     * Get Shipment Attributes
     */
    async getShipmentAttributesUsingGET(requestParameters: ShipmentAttributesApiGetShipmentAttributesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShipmentAttribute>> {
        const response = await this.getShipmentAttributesUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set Shipment Attribute
     * Set Shipment Attribute
     */


    async setShipmentAttributeUsingPUTRaw(requestParameters: ShipmentAttributesApiSetShipmentAttributeUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipmentAttribute>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling setShipmentAttributeUsingPUT.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling setShipmentAttributeUsingPUT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/attributes/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShipmentAttributeToJSON(requestParameters.shipmentAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentAttributeFromJSON(jsonValue));
    }

    /**
     * Set Shipment Attribute
     * Set Shipment Attribute
     */
    async setShipmentAttributeUsingPUT(requestParameters: ShipmentAttributesApiSetShipmentAttributeUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipmentAttribute> {
        const response = await this.setShipmentAttributeUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set Shipment Attributes
     * Set Shipment Attributes
     */


    async setShipmentAttributesUsingPUTRaw(requestParameters: ShipmentAttributesApiSetShipmentAttributesUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShipmentAttribute>>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling setShipmentAttributesUsingPUT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/attributes`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentAttribute.map(ShipmentAttributeToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShipmentAttributeFromJSON));
    }

    /**
     * Set Shipment Attributes
     * Set Shipment Attributes
     */
    async setShipmentAttributesUsingPUT(requestParameters: ShipmentAttributesApiSetShipmentAttributesUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShipmentAttribute>> {
        const response = await this.setShipmentAttributesUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
