/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelShipmentDto,
  ErrorItem,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
  ShipmentNoteDto,
} from '../models';


export namespace shipmentNotesApiParams { 
    export interface DeleteShipmentNoteRequest {
        shipmentNumber: number;
        noteId: string;
        ifMatch?: string;
    }
    export interface NewShipmentNoteRequest {
        shipmentNumber: number;
        shipmentNoteDto: ShipmentNoteDto;
        ifMatch?: string;
    }
    export interface UpdateShipmentNoteRequest {
        shipmentNumber: number;
        noteId: string;
        shipmentNoteDto: ShipmentNoteDto;
        ifMatch?: string;
    }
}
/**
* ShipmentNotesApiService - interface
* 
* @export
* @interface ShipmentNotesApi
*/
export interface ShipmentNotesApiService {
    /**
    * Delete Shipment Note
    * @summary Delete Shipment Note
    * @param {number} shipmentNumber 
    * @param {string} noteId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentNotesApiInterface
    */
    deleteShipmentNoteRaw(requestParameters: shipmentNotesApiParams.DeleteShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Shipment Note
    * Delete Shipment Note
    */
    deleteShipmentNote(requestParameters: shipmentNotesApiParams.DeleteShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Create Shipment Note
    * @summary Create Shipment Note
    * @param {number} shipmentNumber 
    * @param {ShipmentNoteDto} shipmentNoteDto 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentNotesApiInterface
    */
    newShipmentNoteRaw(requestParameters: shipmentNotesApiParams.NewShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipmentNoteDto>>;

    /**
    * Create Shipment Note
    * Create Shipment Note
    */
    newShipmentNote(requestParameters: shipmentNotesApiParams.NewShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipmentNoteDto>;

    /**
    * Update Shipment Note
    * @summary Update Shipment Note
    * @param {number} shipmentNumber 
    * @param {string} noteId 
    * @param {ShipmentNoteDto} shipmentNoteDto 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentNotesApiInterface
    */
    updateShipmentNoteRaw(requestParameters: shipmentNotesApiParams.UpdateShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Update Shipment Note
    * Update Shipment Note
    */
    updateShipmentNote(requestParameters: shipmentNotesApiParams.UpdateShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

}


/**
 * 
 */
export class ShipmentNotesApi extends runtime.BaseAPI implements ShipmentNotesApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Shipment Note
     * Delete Shipment Note
     */


    async deleteShipmentNoteRaw(requestParameters: shipmentNotesApiParams.DeleteShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteShipmentNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/notes/{noteId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Note
     * Delete Shipment Note
     */
    async deleteShipmentNote(requestParameters: shipmentNotesApiParams.DeleteShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentNoteRaw(requestParameters, initOverrides);
    }

    /**
     * Create Shipment Note
     * Create Shipment Note
     */


    async newShipmentNoteRaw(requestParameters: shipmentNotesApiParams.NewShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShipmentNoteDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling newShipmentNote.');
        }

        if (requestParameters.shipmentNoteDto === null || requestParameters.shipmentNoteDto === undefined) {
            throw new runtime.RequiredError('shipmentNoteDto','Required parameter requestParameters.shipmentNoteDto was null or undefined when calling newShipmentNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/notes`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentNoteDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Shipment Note
     * Create Shipment Note
     */
    async newShipmentNote(requestParameters: shipmentNotesApiParams.NewShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShipmentNoteDto> {
        const response = await this.newShipmentNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Shipment Note
     * Update Shipment Note
     */


    async updateShipmentNoteRaw(requestParameters: shipmentNotesApiParams.UpdateShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateShipmentNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateShipmentNote.');
        }

        if (requestParameters.shipmentNoteDto === null || requestParameters.shipmentNoteDto === undefined) {
            throw new runtime.RequiredError('shipmentNoteDto','Required parameter requestParameters.shipmentNoteDto was null or undefined when calling updateShipmentNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/notes/{noteId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentNoteDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Shipment Note
     * Update Shipment Note
     */
    async updateShipmentNote(requestParameters: shipmentNotesApiParams.UpdateShipmentNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.updateShipmentNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
