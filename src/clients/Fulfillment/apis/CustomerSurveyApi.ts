/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelEntityModelCustomerSurveyDto,
  CustomerSurveyDto,
  EntityModelCustomerSurveyDto,
  ErrorItem,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace customerSurveyApiParams { 
    export interface CreateSurveyRequest {
        shipmentNumber: number;
        customerSurveyDto: CustomerSurveyDto;
    }
    export interface GetSurveyRequest {
        id: string;
    }
    export interface GetSurveysRequest {
        shipmentNumber: number;
    }
}
/**
* CustomerSurveyApiService - interface
* 
* @export
* @interface CustomerSurveyApi
*/
export interface CustomerSurveyApiService {
    /**
    * Create Survey
    * @summary Create Survey
    * @param {number} shipmentNumber 
    * @param {CustomerSurveyDto} customerSurveyDto 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CustomerSurveyApiInterface
    */
    createSurveyRaw(requestParameters: customerSurveyApiParams.CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomerSurveyDto>>;

    /**
    * Create Survey
    * Create Survey
    */
    createSurvey(requestParameters: customerSurveyApiParams.CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomerSurveyDto>;

    /**
    * Get Survey
    * @summary Get Survey
    * @param {string} id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CustomerSurveyApiInterface
    */
    getSurveyRaw(requestParameters: customerSurveyApiParams.GetSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomerSurveyDto>>;

    /**
    * Get Survey
    * Get Survey
    */
    getSurvey(requestParameters: customerSurveyApiParams.GetSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomerSurveyDto>;

    /**
    * Get Surveys
    * @summary Get Surveys
    * @param {number} shipmentNumber 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CustomerSurveyApiInterface
    */
    getSurveysRaw(requestParameters: customerSurveyApiParams.GetSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelCustomerSurveyDto>>;

    /**
    * Get Surveys
    * Get Surveys
    */
    getSurveys(requestParameters: customerSurveyApiParams.GetSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelCustomerSurveyDto>;

}


/**
 * 
 */
export class CustomerSurveyApi extends runtime.BaseAPI implements CustomerSurveyApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Survey
     * Create Survey
     */


    async createSurveyRaw(requestParameters: customerSurveyApiParams.CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomerSurveyDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling createSurvey.');
        }

        if (requestParameters.customerSurveyDto === null || requestParameters.customerSurveyDto === undefined) {
            throw new runtime.RequiredError('customerSurveyDto','Required parameter requestParameters.customerSurveyDto was null or undefined when calling createSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/surveys`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerSurveyDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Survey
     * Create Survey
     */
    async createSurvey(requestParameters: customerSurveyApiParams.CreateSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomerSurveyDto> {
        const response = await this.createSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Survey
     * Get Survey
     */


    async getSurveyRaw(requestParameters: customerSurveyApiParams.GetSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelCustomerSurveyDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSurvey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/surveys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Survey
     * Get Survey
     */
    async getSurvey(requestParameters: customerSurveyApiParams.GetSurveyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelCustomerSurveyDto> {
        const response = await this.getSurveyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Surveys
     * Get Surveys
     */


    async getSurveysRaw(requestParameters: customerSurveyApiParams.GetSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelCustomerSurveyDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getSurveys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/surveys`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Surveys
     * Get Surveys
     */
    async getSurveys(requestParameters: customerSurveyApiParams.GetSurveysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelCustomerSurveyDto> {
        const response = await this.getSurveysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
