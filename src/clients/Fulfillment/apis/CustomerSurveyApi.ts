/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelOfEntityModelOfCustomerSurvey,
  CustomerSurvey,
  EntityModelOfCustomerSurvey,
} from '../models';
import {
    CollectionModelOfEntityModelOfCustomerSurveyFromJSON,
    CollectionModelOfEntityModelOfCustomerSurveyToJSON,
    CustomerSurveyFromJSON,
    CustomerSurveyToJSON,
    EntityModelOfCustomerSurveyFromJSON,
    EntityModelOfCustomerSurveyToJSON,
} from '../models';

export interface CustomerSurveyApiCreateSurveyUsingPOSTRequest {
    shipmentNumber: number;
    customerSurvey?: CustomerSurvey;
}

export interface CustomerSurveyApiGetSurveyUsingGETRequest {
    id: string;
}

export interface CustomerSurveyApiGetSurveysUsingGETRequest {
    shipmentNumber: number;
}

/**
 * 
 */
export class CustomerSurveyApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Survey
     * Create Survey
     */


    async createSurveyUsingPOSTRaw(requestParameters: CustomerSurveyApiCreateSurveyUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfCustomerSurvey>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling createSurveyUsingPOST.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/surveys`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerSurveyToJSON(requestParameters.customerSurvey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelOfCustomerSurveyFromJSON(jsonValue));
    }

    /**
     * Create Survey
     * Create Survey
     */
    async createSurveyUsingPOST(requestParameters: CustomerSurveyApiCreateSurveyUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfCustomerSurvey> {
        const response = await this.createSurveyUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Survey
     * Get Survey
     */


    async getSurveyUsingGETRaw(requestParameters: CustomerSurveyApiGetSurveyUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfCustomerSurvey>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSurveyUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/surveys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelOfCustomerSurveyFromJSON(jsonValue));
    }

    /**
     * Get Survey
     * Get Survey
     */
    async getSurveyUsingGET(requestParameters: CustomerSurveyApiGetSurveyUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfCustomerSurvey> {
        const response = await this.getSurveyUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Surveys
     * Get Surveys
     */


    async getSurveysUsingGETRaw(requestParameters: CustomerSurveyApiGetSurveysUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfCustomerSurvey>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getSurveysUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/surveys`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionModelOfEntityModelOfCustomerSurveyFromJSON(jsonValue));
    }

    /**
     * Get Surveys
     * Get Surveys
     */
    async getSurveysUsingGET(requestParameters: CustomerSurveyApiGetSurveysUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfCustomerSurvey> {
        const response = await this.getSurveysUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
