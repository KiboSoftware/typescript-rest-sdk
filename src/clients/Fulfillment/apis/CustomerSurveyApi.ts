/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelOfEntityModelOfCustomerSurvey,
  CustomerSurvey,
  EntityModelOfCustomerSurvey,
} from '../models';

export interface CustomerSurveyApiCreateSurveyUsingPOSTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    customerSurveyDto: CustomerSurvey;
    xVolSite?: number;
    responseFields?: string;
}

export interface CustomerSurveyApiGetSurveyUsingGETRequest {
    id: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface CustomerSurveyApiGetSurveysUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

/**
 * CustomerSurveyApi - interface
 * 
 * @export
 * @interface CustomerSurveyApiInterface
 */
export interface CustomerSurveyApiInterface {
    /**
     * createSurvey
     * @summary createSurvey
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {CustomerSurvey} customerSurveyDto customerSurveyDto
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSurveyApiInterface
     */
    createSurveyUsingPOSTRaw(requestParameters: CustomerSurveyApiCreateSurveyUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfCustomerSurvey>>;

    /**
     * createSurvey
     * createSurvey
     */
    createSurveyUsingPOST(requestParameters: CustomerSurveyApiCreateSurveyUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfCustomerSurvey>;

    /**
     * getSurvey
     * @summary getSurvey
     * @param {string} id id
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSurveyApiInterface
     */
    getSurveyUsingGETRaw(requestParameters: CustomerSurveyApiGetSurveyUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfCustomerSurvey>>;

    /**
     * getSurvey
     * getSurvey
     */
    getSurveyUsingGET(requestParameters: CustomerSurveyApiGetSurveyUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfCustomerSurvey>;

    /**
     * getSurveys
     * @summary getSurveys
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSurveyApiInterface
     */
    getSurveysUsingGETRaw(requestParameters: CustomerSurveyApiGetSurveysUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfCustomerSurvey>>;

    /**
     * getSurveys
     * getSurveys
     */
    getSurveysUsingGET(requestParameters: CustomerSurveyApiGetSurveysUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfCustomerSurvey>;

}

/**
 * 
 */
export class CustomerSurveyApi extends runtime.BaseAPI implements CustomerSurveyApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * createSurvey
     * createSurvey
     */


    async createSurveyUsingPOSTRaw(requestParameters: CustomerSurveyApiCreateSurveyUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfCustomerSurvey>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling createSurveyUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createSurveyUsingPOST.');
        }

        if (requestParameters.customerSurveyDto === null || requestParameters.customerSurveyDto === undefined) {
            throw new runtime.RequiredError('customerSurveyDto','Required parameter requestParameters.customerSurveyDto was null or undefined when calling createSurveyUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/surveys`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerSurveyDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * createSurvey
     * createSurvey
     */
    async createSurveyUsingPOST(requestParameters: CustomerSurveyApiCreateSurveyUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfCustomerSurvey> {
        const response = await this.createSurveyUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getSurvey
     * getSurvey
     */


    async getSurveyUsingGETRaw(requestParameters: CustomerSurveyApiGetSurveyUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfCustomerSurvey>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSurveyUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSurveyUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/surveys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getSurvey
     * getSurvey
     */
    async getSurveyUsingGET(requestParameters: CustomerSurveyApiGetSurveyUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfCustomerSurvey> {
        const response = await this.getSurveyUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getSurveys
     * getSurveys
     */


    async getSurveysUsingGETRaw(requestParameters: CustomerSurveyApiGetSurveysUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfCustomerSurvey>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getSurveysUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSurveysUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/surveys`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getSurveys
     * getSurveys
     */
    async getSurveysUsingGET(requestParameters: CustomerSurveyApiGetSurveysUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfCustomerSurvey> {
        const response = await this.getSurveysUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
