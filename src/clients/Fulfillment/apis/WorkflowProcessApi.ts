/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelOfWorkflowProcess,
  PagedModelOfEntityModelOfWorkflowProcess,
} from '../models';

export interface WorkflowProcessApiGetDefinitionImageUsingGETRequest {
    containerIdOrAlias: string;
    processId: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationCodeUsingGETRequest {
    locationCode: string;
    shipmentType: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRequest {
    locationGroupCode: string;
    shipmentType: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface WorkflowProcessApiGetWorkflowProcessByShipmentTypeUsingGETRequest {
    shipmentType: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface WorkflowProcessApiGetWorkflowProcessUsingGETRequest {
    containerIdOrAlias: string;
    processId: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface WorkflowProcessApiGetWorkflowProcessesUsingGETRequest {
    xVolTenant: number;
    page?: number;
    pageSize?: number;
    sort?: string;
    xVolSite?: number;
    responseFields?: string;
}

/**
 * WorkflowProcessApi - interface
 * 
 * @export
 * @interface WorkflowProcessApiInterface
 */
export interface WorkflowProcessApiInterface {
    /**
     * getDefinitionImage
     * @summary getDefinitionImage
     * @param {string} containerIdOrAlias containerIdOrAlias
     * @param {string} processId processId
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowProcessApiInterface
     */
    getDefinitionImageUsingGETRaw(requestParameters: WorkflowProcessApiGetDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * getDefinitionImage
     * getDefinitionImage
     */
    getDefinitionImageUsingGET(requestParameters: WorkflowProcessApiGetDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * getWorkflowProcessByShipmentTypeLocationCode
     * @summary getWorkflowProcessByShipmentTypeLocationCode
     * @param {string} locationCode locationCode
     * @param {string} shipmentType shipmentType
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowProcessApiInterface
     */
    getWorkflowProcessByShipmentTypeLocationCodeUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>>;

    /**
     * getWorkflowProcessByShipmentTypeLocationCode
     * getWorkflowProcessByShipmentTypeLocationCode
     */
    getWorkflowProcessByShipmentTypeLocationCodeUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess>;

    /**
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     * @summary getWorkflowProcessByShipmentTypeLocationGroupCode
     * @param {string} locationGroupCode locationGroupCode
     * @param {string} shipmentType shipmentType
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowProcessApiInterface
     */
    getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>>;

    /**
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     */
    getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess>;

    /**
     * getWorkflowProcessByShipmentType
     * @summary getWorkflowProcessByShipmentType
     * @param {string} shipmentType shipmentType
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkflowProcessApiInterface
     */
    getWorkflowProcessByShipmentTypeUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>>;

    /**
     * getWorkflowProcessByShipmentType
     * getWorkflowProcessByShipmentType
     */
    getWorkflowProcessByShipmentTypeUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess>;

    /**
     * getWorkflowProcess
     * @summary getWorkflowProcess
     * @param {string} containerIdOrAlias containerIdOrAlias
     * @param {string} processId processId
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowProcessApiInterface
     */
    getWorkflowProcessUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>>;

    /**
     * getWorkflowProcess
     * getWorkflowProcess
     */
    getWorkflowProcessUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess>;

    /**
     * getWorkflowProcesses
     * @summary getWorkflowProcesses
     * @param {number} xVolTenant 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [sort] 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowProcessApiInterface
     */
    getWorkflowProcessesUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfWorkflowProcess>>;

    /**
     * getWorkflowProcesses
     * getWorkflowProcesses
     */
    getWorkflowProcessesUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfWorkflowProcess>;

}

/**
 * 
 */
export class WorkflowProcessApi extends runtime.BaseAPI implements WorkflowProcessApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * getDefinitionImage
     * getDefinitionImage
     */


    async getDefinitionImageUsingGETRaw(requestParameters: WorkflowProcessApiGetDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.containerIdOrAlias === null || requestParameters.containerIdOrAlias === undefined) {
            throw new runtime.RequiredError('containerIdOrAlias','Required parameter requestParameters.containerIdOrAlias was null or undefined when calling getDefinitionImageUsingGET.');
        }

        if (requestParameters.processId === null || requestParameters.processId === undefined) {
            throw new runtime.RequiredError('processId','Required parameter requestParameters.processId was null or undefined when calling getDefinitionImageUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getDefinitionImageUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/processes/definitionImage/{containerIdOrAlias}/{processId}`.replace(`{${"containerIdOrAlias"}}`, encodeURIComponent(String(requestParameters.containerIdOrAlias))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * getDefinitionImage
     * getDefinitionImage
     */
    async getDefinitionImageUsingGET(requestParameters: WorkflowProcessApiGetDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getDefinitionImageUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getWorkflowProcessByShipmentTypeLocationCode
     * getWorkflowProcessByShipmentTypeLocationCode
     */


    async getWorkflowProcessByShipmentTypeLocationCodeUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getWorkflowProcessByShipmentTypeLocationCodeUsingGET.');
        }

        if (requestParameters.shipmentType === null || requestParameters.shipmentType === undefined) {
            throw new runtime.RequiredError('shipmentType','Required parameter requestParameters.shipmentType was null or undefined when calling getWorkflowProcessByShipmentTypeLocationCodeUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getWorkflowProcessByShipmentTypeLocationCodeUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/processes/shipmentType/{shipmentType}/location/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))).replace(`{${"shipmentType"}}`, encodeURIComponent(String(requestParameters.shipmentType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getWorkflowProcessByShipmentTypeLocationCode
     * getWorkflowProcessByShipmentTypeLocationCode
     */
    async getWorkflowProcessByShipmentTypeLocationCodeUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess> {
        const response = await this.getWorkflowProcessByShipmentTypeLocationCodeUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     */


    async getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>> {
        if (requestParameters.locationGroupCode === null || requestParameters.locationGroupCode === undefined) {
            throw new runtime.RequiredError('locationGroupCode','Required parameter requestParameters.locationGroupCode was null or undefined when calling getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET.');
        }

        if (requestParameters.shipmentType === null || requestParameters.shipmentType === undefined) {
            throw new runtime.RequiredError('shipmentType','Required parameter requestParameters.shipmentType was null or undefined when calling getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/processes/shipmentType/{shipmentType}/locationGroup/{locationGroupCode}`.replace(`{${"locationGroupCode"}}`, encodeURIComponent(String(requestParameters.locationGroupCode))).replace(`{${"shipmentType"}}`, encodeURIComponent(String(requestParameters.shipmentType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     * getWorkflowProcessByShipmentTypeLocationGroupCode
     */
    async getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess> {
        const response = await this.getWorkflowProcessByShipmentTypeLocationGroupCodeUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getWorkflowProcessByShipmentType
     * getWorkflowProcessByShipmentType
     */


    async getWorkflowProcessByShipmentTypeUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>> {
        if (requestParameters.shipmentType === null || requestParameters.shipmentType === undefined) {
            throw new runtime.RequiredError('shipmentType','Required parameter requestParameters.shipmentType was null or undefined when calling getWorkflowProcessByShipmentTypeUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getWorkflowProcessByShipmentTypeUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/processes/shipmentType/{shipmentType}`.replace(`{${"shipmentType"}}`, encodeURIComponent(String(requestParameters.shipmentType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getWorkflowProcessByShipmentType
     * getWorkflowProcessByShipmentType
     */
    async getWorkflowProcessByShipmentTypeUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess> {
        const response = await this.getWorkflowProcessByShipmentTypeUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getWorkflowProcess
     * getWorkflowProcess
     */


    async getWorkflowProcessUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfWorkflowProcess>> {
        if (requestParameters.containerIdOrAlias === null || requestParameters.containerIdOrAlias === undefined) {
            throw new runtime.RequiredError('containerIdOrAlias','Required parameter requestParameters.containerIdOrAlias was null or undefined when calling getWorkflowProcessUsingGET.');
        }

        if (requestParameters.processId === null || requestParameters.processId === undefined) {
            throw new runtime.RequiredError('processId','Required parameter requestParameters.processId was null or undefined when calling getWorkflowProcessUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getWorkflowProcessUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/processes/definitions/{containerIdOrAlias}/{processId}`.replace(`{${"containerIdOrAlias"}}`, encodeURIComponent(String(requestParameters.containerIdOrAlias))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getWorkflowProcess
     * getWorkflowProcess
     */
    async getWorkflowProcessUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfWorkflowProcess> {
        const response = await this.getWorkflowProcessUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getWorkflowProcesses
     * getWorkflowProcesses
     */


    async getWorkflowProcessesUsingGETRaw(requestParameters: WorkflowProcessApiGetWorkflowProcessesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfWorkflowProcess>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getWorkflowProcessesUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/processes/definitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getWorkflowProcesses
     * getWorkflowProcesses
     */
    async getWorkflowProcessesUsingGET(requestParameters: WorkflowProcessApiGetWorkflowProcessesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfWorkflowProcess> {
        const response = await this.getWorkflowProcessesUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
