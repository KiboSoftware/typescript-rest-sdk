/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ClosePickWave,
  CollectionModelOfPickWave,
  CollectionModelOfShipment,
  CreatePickWave,
  EntityModelOfPickWave,
  EntityModelOfPickWaveDetail,
  EntityModelOfRenderedContent,
} from '../models';

export interface ClosePickWaveUsingPUTRequest {
    pickWaveNumber: number;
    xVolTenant: number;
    closePickWaveDto: ClosePickWave;
    xVolSite?: number;
    responseFields?: string;
}

export interface CreatePickWaveUsingPOSTRequest {
    xVolTenant: number;
    createPickWaveDto: CreatePickWave;
    xVolSite?: number;
    responseFields?: string;
}

export interface GetOpenPickWavesUsingGETRequest {
    fulfillmentLocationCode: string;
    xVolTenant: number;
    shipmentType?: string;
    userDisplayName?: string;
    userId?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface GetPickWaveDetailsUsingGETRequest {
    pickWaveNumber: number;
    xVolTenant: number;
    sortContentsByLocator?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface GetPickWaveUsingGETRequest {
    pickWaveNumber: number;
    xVolTenant: number;
    sortContents?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface GetShipmentsInPickWaveUsingGETRequest {
    pickWaveNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface RenderOrderPickSheetsUsingGETRequest {
    pickWaveNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface RenderPickWaveUsingGETRequest {
    pickWaveNumber: number;
    xVolTenant: number;
    printPackingLists?: boolean;
    printPickWave?: boolean;
    printSingleOrderSheets?: boolean;
    xVolSite?: number;
    responseFields?: string;
}

/**
 * PickWaveApi - interface
 * 
 * @export
 * @interface PickWaveApiInterface
 */
export interface PickWaveApiInterface {
    /**
     * closePickWave
     * @summary closePickWave
     * @param {number} pickWaveNumber pickWaveNumber
     * @param {number} xVolTenant 
     * @param {ClosePickWave} closePickWaveDto closePickWaveDto
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    closePickWaveUsingPUTRaw(requestParameters: ClosePickWaveUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWave>>;

    /**
     * closePickWave
     * closePickWave
     */
    closePickWaveUsingPUT(requestParameters: ClosePickWaveUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWave>;

    /**
     * createPickWave
     * @summary createPickWave
     * @param {number} xVolTenant 
     * @param {CreatePickWave} createPickWaveDto createPickWaveDto
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    createPickWaveUsingPOSTRaw(requestParameters: CreatePickWaveUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWave>>;

    /**
     * createPickWave
     * createPickWave
     */
    createPickWaveUsingPOST(requestParameters: CreatePickWaveUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWave>;

    /**
     * getOpenPickWaves
     * @summary getOpenPickWaves
     * @param {string} fulfillmentLocationCode fulfillmentLocationCode
     * @param {number} xVolTenant 
     * @param {string} [shipmentType] shipmentType
     * @param {string} [userDisplayName] userDisplayName
     * @param {string} [userId] userId
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    getOpenPickWavesUsingGETRaw(requestParameters: GetOpenPickWavesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfPickWave>>;

    /**
     * getOpenPickWaves
     * getOpenPickWaves
     */
    getOpenPickWavesUsingGET(requestParameters: GetOpenPickWavesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfPickWave>;

    /**
     * getPickWaveDetails
     * @summary getPickWaveDetails
     * @param {number} pickWaveNumber pickWaveNumber
     * @param {number} xVolTenant 
     * @param {string} [sortContentsByLocator] sortContentsByLocator
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    getPickWaveDetailsUsingGETRaw(requestParameters: GetPickWaveDetailsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWaveDetail>>;

    /**
     * getPickWaveDetails
     * getPickWaveDetails
     */
    getPickWaveDetailsUsingGET(requestParameters: GetPickWaveDetailsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWaveDetail>;

    /**
     * getPickWave
     * @summary getPickWave
     * @param {number} pickWaveNumber pickWaveNumber
     * @param {number} xVolTenant 
     * @param {string} [sortContents] 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    getPickWaveUsingGETRaw(requestParameters: GetPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWave>>;

    /**
     * getPickWave
     * getPickWave
     */
    getPickWaveUsingGET(requestParameters: GetPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWave>;

    /**
     * getShipmentsInPickWave
     * @summary getShipmentsInPickWave
     * @param {number} pickWaveNumber pickWaveNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    getShipmentsInPickWaveUsingGETRaw(requestParameters: GetShipmentsInPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>>;

    /**
     * getShipmentsInPickWave
     * getShipmentsInPickWave
     */
    getShipmentsInPickWaveUsingGET(requestParameters: GetShipmentsInPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment>;

    /**
     * renderOrderPickSheets
     * @summary renderOrderPickSheets
     * @param {number} pickWaveNumber pickWaveNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    renderOrderPickSheetsUsingGETRaw(requestParameters: RenderOrderPickSheetsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
     * renderOrderPickSheets
     * renderOrderPickSheets
     */
    renderOrderPickSheetsUsingGET(requestParameters: RenderOrderPickSheetsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

    /**
     * renderPickWave
     * @summary renderPickWave
     * @param {number} pickWaveNumber pickWaveNumber
     * @param {number} xVolTenant 
     * @param {boolean} [printPackingLists] printPackingLists
     * @param {boolean} [printPickWave] printPickWave
     * @param {boolean} [printSingleOrderSheets] printSingleOrderSheets
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PickWaveApiInterface
     */
    renderPickWaveUsingGETRaw(requestParameters: RenderPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
     * renderPickWave
     * renderPickWave
     */
    renderPickWaveUsingGET(requestParameters: RenderPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

}

/**
 * 
 */
export class PickWaveApi extends runtime.BaseAPI implements PickWaveApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * closePickWave
     * closePickWave
     */


    async closePickWaveUsingPUTRaw(requestParameters: ClosePickWaveUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWave>> {
        if (requestParameters.pickWaveNumber === null || requestParameters.pickWaveNumber === undefined) {
            throw new runtime.RequiredError('pickWaveNumber','Required parameter requestParameters.pickWaveNumber was null or undefined when calling closePickWaveUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling closePickWaveUsingPUT.');
        }

        if (requestParameters.closePickWaveDto === null || requestParameters.closePickWaveDto === undefined) {
            throw new runtime.RequiredError('closePickWaveDto','Required parameter requestParameters.closePickWaveDto was null or undefined when calling closePickWaveUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/{pickWaveNumber}/closed`.replace(`{${"pickWaveNumber"}}`, encodeURIComponent(String(requestParameters.pickWaveNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.closePickWaveDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * closePickWave
     * closePickWave
     */
    async closePickWaveUsingPUT(requestParameters: ClosePickWaveUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWave> {
        const response = await this.closePickWaveUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * createPickWave
     * createPickWave
     */


    async createPickWaveUsingPOSTRaw(requestParameters: CreatePickWaveUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWave>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createPickWaveUsingPOST.');
        }

        if (requestParameters.createPickWaveDto === null || requestParameters.createPickWaveDto === undefined) {
            throw new runtime.RequiredError('createPickWaveDto','Required parameter requestParameters.createPickWaveDto was null or undefined when calling createPickWaveUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createPickWaveDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * createPickWave
     * createPickWave
     */
    async createPickWaveUsingPOST(requestParameters: CreatePickWaveUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWave> {
        const response = await this.createPickWaveUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getOpenPickWaves
     * getOpenPickWaves
     */


    async getOpenPickWavesUsingGETRaw(requestParameters: GetOpenPickWavesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfPickWave>> {
        if (requestParameters.fulfillmentLocationCode === null || requestParameters.fulfillmentLocationCode === undefined) {
            throw new runtime.RequiredError('fulfillmentLocationCode','Required parameter requestParameters.fulfillmentLocationCode was null or undefined when calling getOpenPickWavesUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getOpenPickWavesUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.shipmentType !== undefined) {
            queryParameters['shipmentType'] = requestParameters.shipmentType;
        }

        if (requestParameters.userDisplayName !== undefined) {
            queryParameters['userDisplayName'] = requestParameters.userDisplayName;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/open/{fulfillmentLocationCode}`.replace(`{${"fulfillmentLocationCode"}}`, encodeURIComponent(String(requestParameters.fulfillmentLocationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getOpenPickWaves
     * getOpenPickWaves
     */
    async getOpenPickWavesUsingGET(requestParameters: GetOpenPickWavesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfPickWave> {
        const response = await this.getOpenPickWavesUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getPickWaveDetails
     * getPickWaveDetails
     */


    async getPickWaveDetailsUsingGETRaw(requestParameters: GetPickWaveDetailsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWaveDetail>> {
        if (requestParameters.pickWaveNumber === null || requestParameters.pickWaveNumber === undefined) {
            throw new runtime.RequiredError('pickWaveNumber','Required parameter requestParameters.pickWaveNumber was null or undefined when calling getPickWaveDetailsUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getPickWaveDetailsUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortContentsByLocator !== undefined) {
            queryParameters['sortContentsByLocator'] = requestParameters.sortContentsByLocator;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/{pickWaveNumber}/pickWaveDetails`.replace(`{${"pickWaveNumber"}}`, encodeURIComponent(String(requestParameters.pickWaveNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getPickWaveDetails
     * getPickWaveDetails
     */
    async getPickWaveDetailsUsingGET(requestParameters: GetPickWaveDetailsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWaveDetail> {
        const response = await this.getPickWaveDetailsUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getPickWave
     * getPickWave
     */


    async getPickWaveUsingGETRaw(requestParameters: GetPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfPickWave>> {
        if (requestParameters.pickWaveNumber === null || requestParameters.pickWaveNumber === undefined) {
            throw new runtime.RequiredError('pickWaveNumber','Required parameter requestParameters.pickWaveNumber was null or undefined when calling getPickWaveUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getPickWaveUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortContents !== undefined) {
            queryParameters['sortContents'] = requestParameters.sortContents;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/{pickWaveNumber}`.replace(`{${"pickWaveNumber"}}`, encodeURIComponent(String(requestParameters.pickWaveNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getPickWave
     * getPickWave
     */
    async getPickWaveUsingGET(requestParameters: GetPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfPickWave> {
        const response = await this.getPickWaveUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipmentsInPickWave
     * getShipmentsInPickWave
     */


    async getShipmentsInPickWaveUsingGETRaw(requestParameters: GetShipmentsInPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>> {
        if (requestParameters.pickWaveNumber === null || requestParameters.pickWaveNumber === undefined) {
            throw new runtime.RequiredError('pickWaveNumber','Required parameter requestParameters.pickWaveNumber was null or undefined when calling getShipmentsInPickWaveUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentsInPickWaveUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/{pickWaveNumber}/shipments`.replace(`{${"pickWaveNumber"}}`, encodeURIComponent(String(requestParameters.pickWaveNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipmentsInPickWave
     * getShipmentsInPickWave
     */
    async getShipmentsInPickWaveUsingGET(requestParameters: GetShipmentsInPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment> {
        const response = await this.getShipmentsInPickWaveUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderOrderPickSheets
     * renderOrderPickSheets
     */


    async renderOrderPickSheetsUsingGETRaw(requestParameters: RenderOrderPickSheetsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.pickWaveNumber === null || requestParameters.pickWaveNumber === undefined) {
            throw new runtime.RequiredError('pickWaveNumber','Required parameter requestParameters.pickWaveNumber was null or undefined when calling renderOrderPickSheetsUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling renderOrderPickSheetsUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/{pickWaveNumber}/order-pick-sheets/html`.replace(`{${"pickWaveNumber"}}`, encodeURIComponent(String(requestParameters.pickWaveNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderOrderPickSheets
     * renderOrderPickSheets
     */
    async renderOrderPickSheetsUsingGET(requestParameters: RenderOrderPickSheetsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderOrderPickSheetsUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderPickWave
     * renderPickWave
     */


    async renderPickWaveUsingGETRaw(requestParameters: RenderPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.pickWaveNumber === null || requestParameters.pickWaveNumber === undefined) {
            throw new runtime.RequiredError('pickWaveNumber','Required parameter requestParameters.pickWaveNumber was null or undefined when calling renderPickWaveUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling renderPickWaveUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.printPackingLists !== undefined) {
            queryParameters['printPackingLists'] = requestParameters.printPackingLists;
        }

        if (requestParameters.printPickWave !== undefined) {
            queryParameters['printPickWave'] = requestParameters.printPickWave;
        }

        if (requestParameters.printSingleOrderSheets !== undefined) {
            queryParameters['printSingleOrderSheets'] = requestParameters.printSingleOrderSheets;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/pickwaves/{pickWaveNumber}/rendition/html`.replace(`{${"pickWaveNumber"}}`, encodeURIComponent(String(requestParameters.pickWaveNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderPickWave
     * renderPickWave
     */
    async renderPickWaveUsingGET(requestParameters: RenderPickWaveUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderPickWaveUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
