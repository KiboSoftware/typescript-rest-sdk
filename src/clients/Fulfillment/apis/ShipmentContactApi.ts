/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelOfContact,
  UpdateContactRequest,
} from '../models';


export namespace shipmentContactApiParams { 
    export interface DeleteAlternateContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        ifMatch?: string;
        xVolSite?: number;
    }
    export interface GetAlternateContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface GetCustomerContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface GetDestinationContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface UpdateAlternateContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        updateContactRequest: UpdateContactRequest;
        ifMatch?: string;
        xVolSite?: number;
    }
    export interface UpdateCustomerContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        updateContactRequest: UpdateContactRequest;
        ifMatch?: string;
        xVolSite?: number;
    }
    export interface UpdateDestinationContactRequest {
        shipmentNumber: number;
        xVolTenant: number;
        updateContactRequest: UpdateContactRequest;
        ifMatch?: string;
        xVolSite?: number;
    }
}
/**
* ShipmentContactApiService - interface
* 
* @export
* @interface ShipmentContactApi
*/
export interface ShipmentContactApiService {
    /**
    * deleteAlternateContact
    * @summary deleteAlternateContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {string} [ifMatch] If-Match
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    deleteAlternateContactRaw(requestParameters: shipmentContactApiParams.DeleteAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteAlternateContact
    * deleteAlternateContact
    */
    deleteAlternateContact(requestParameters: shipmentContactApiParams.DeleteAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * getAlternateContact
    * @summary getAlternateContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    getAlternateContactRaw(requestParameters: shipmentContactApiParams.GetAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>>;

    /**
    * getAlternateContact
    * getAlternateContact
    */
    getAlternateContact(requestParameters: shipmentContactApiParams.GetAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact>;

    /**
    * getCustomerContact
    * @summary getCustomerContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    getCustomerContactRaw(requestParameters: shipmentContactApiParams.GetCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>>;

    /**
    * getCustomerContact
    * getCustomerContact
    */
    getCustomerContact(requestParameters: shipmentContactApiParams.GetCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact>;

    /**
    * getDestinationContact
    * @summary getDestinationContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    getDestinationContactRaw(requestParameters: shipmentContactApiParams.GetDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>>;

    /**
    * getDestinationContact
    * getDestinationContact
    */
    getDestinationContact(requestParameters: shipmentContactApiParams.GetDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact>;

    /**
    * updateAlternateContact
    * @summary updateAlternateContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {UpdateContactRequest} updateContactRequest updateContactRequest
    * @param {string} [ifMatch] If-Match
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    updateAlternateContactRaw(requestParameters: shipmentContactApiParams.UpdateAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>>;

    /**
    * updateAlternateContact
    * updateAlternateContact
    */
    updateAlternateContact(requestParameters: shipmentContactApiParams.UpdateAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact>;

    /**
    * updateCustomerContact
    * @summary updateCustomerContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {UpdateContactRequest} updateContactRequest updateContactRequest
    * @param {string} [ifMatch] If-Match
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    updateCustomerContactRaw(requestParameters: shipmentContactApiParams.UpdateCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>>;

    /**
    * updateCustomerContact
    * updateCustomerContact
    */
    updateCustomerContact(requestParameters: shipmentContactApiParams.UpdateCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact>;

    /**
    * updateDestinationContact
    * @summary updateDestinationContact
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {UpdateContactRequest} updateContactRequest updateContactRequest
    * @param {string} [ifMatch] If-Match
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentContactApiInterface
    */
    updateDestinationContactRaw(requestParameters: shipmentContactApiParams.UpdateDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>>;

    /**
    * updateDestinationContact
    * updateDestinationContact
    */
    updateDestinationContact(requestParameters: shipmentContactApiParams.UpdateDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact>;

}


/**
 * 
 */
export class ShipmentContactApi extends runtime.BaseAPI implements ShipmentContactApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteAlternateContact
     * deleteAlternateContact
     */


    async deleteAlternateContactRaw(requestParameters: shipmentContactApiParams.DeleteAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteAlternateContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteAlternateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/alternateContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteAlternateContact
     * deleteAlternateContact
     */
    async deleteAlternateContact(requestParameters: shipmentContactApiParams.DeleteAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAlternateContactRaw(requestParameters, initOverrides);
    }

    /**
     * getAlternateContact
     * getAlternateContact
     */


    async getAlternateContactRaw(requestParameters: shipmentContactApiParams.GetAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getAlternateContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getAlternateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/alternateContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getAlternateContact
     * getAlternateContact
     */
    async getAlternateContact(requestParameters: shipmentContactApiParams.GetAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact> {
        const response = await this.getAlternateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getCustomerContact
     * getCustomerContact
     */


    async getCustomerContactRaw(requestParameters: shipmentContactApiParams.GetCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getCustomerContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCustomerContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getCustomerContact
     * getCustomerContact
     */
    async getCustomerContact(requestParameters: shipmentContactApiParams.GetCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact> {
        const response = await this.getCustomerContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getDestinationContact
     * getDestinationContact
     */


    async getDestinationContactRaw(requestParameters: shipmentContactApiParams.GetDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getDestinationContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getDestinationContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/destinationContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getDestinationContact
     * getDestinationContact
     */
    async getDestinationContact(requestParameters: shipmentContactApiParams.GetDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact> {
        const response = await this.getDestinationContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateAlternateContact
     * updateAlternateContact
     */


    async updateAlternateContactRaw(requestParameters: shipmentContactApiParams.UpdateAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateAlternateContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateAlternateContact.');
        }

        if (requestParameters.updateContactRequest === null || requestParameters.updateContactRequest === undefined) {
            throw new runtime.RequiredError('updateContactRequest','Required parameter requestParameters.updateContactRequest was null or undefined when calling updateAlternateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/alternateContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateContactRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateAlternateContact
     * updateAlternateContact
     */
    async updateAlternateContact(requestParameters: shipmentContactApiParams.UpdateAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact> {
        const response = await this.updateAlternateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateCustomerContact
     * updateCustomerContact
     */


    async updateCustomerContactRaw(requestParameters: shipmentContactApiParams.UpdateCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateCustomerContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateCustomerContact.');
        }

        if (requestParameters.updateContactRequest === null || requestParameters.updateContactRequest === undefined) {
            throw new runtime.RequiredError('updateContactRequest','Required parameter requestParameters.updateContactRequest was null or undefined when calling updateCustomerContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateContactRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateCustomerContact
     * updateCustomerContact
     */
    async updateCustomerContact(requestParameters: shipmentContactApiParams.UpdateCustomerContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact> {
        const response = await this.updateCustomerContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateDestinationContact
     * updateDestinationContact
     */


    async updateDestinationContactRaw(requestParameters: shipmentContactApiParams.UpdateDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfContact>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateDestinationContact.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateDestinationContact.');
        }

        if (requestParameters.updateContactRequest === null || requestParameters.updateContactRequest === undefined) {
            throw new runtime.RequiredError('updateContactRequest','Required parameter requestParameters.updateContactRequest was null or undefined when calling updateDestinationContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/destinationContact`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updateContactRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateDestinationContact
     * updateDestinationContact
     */
    async updateDestinationContact(requestParameters: shipmentContactApiParams.UpdateDestinationContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfContact> {
        const response = await this.updateDestinationContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
