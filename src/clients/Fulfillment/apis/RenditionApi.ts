/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelOfstring,
} from '../models';
import {
    EntityModelOfstringFromJSON,
    EntityModelOfstringToJSON,
} from '../models';

export interface RenditionApiRenderOrderSummaryUsingGETRequest {
    orderId: string;
}

export interface RenditionApiRenderReturnReceiptUsingGETRequest {
    returnId: string;
}

/**
 * 
 */
export class RenditionApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Render order summary in HTML format for printing
     * Render Order Summary
     */


    async renderOrderSummaryUsingGETRaw(requestParameters: RenditionApiRenderOrderSummaryUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfstring>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling renderOrderSummaryUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/fulfillment/orders/{orderId}/summary/html`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelOfstringFromJSON(jsonValue));
    }

    /**
     * Render order summary in HTML format for printing
     * Render Order Summary
     */
    async renderOrderSummaryUsingGET(requestParameters: RenditionApiRenderOrderSummaryUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfstring> {
        const response = await this.renderOrderSummaryUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Render return receipt in HTML format for printing
     * Render Return Receipt
     */


    async renderReturnReceiptUsingGETRaw(requestParameters: RenditionApiRenderReturnReceiptUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfstring>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling renderReturnReceiptUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/fulfillment/returns/{returnId}/receipt/html`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntityModelOfstringFromJSON(jsonValue));
    }

    /**
     * Render return receipt in HTML format for printing
     * Render Return Receipt
     */
    async renderReturnReceiptUsingGET(requestParameters: RenditionApiRenderReturnReceiptUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfstring> {
        const response = await this.renderReturnReceiptUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
