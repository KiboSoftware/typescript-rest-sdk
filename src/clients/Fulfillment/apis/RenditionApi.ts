/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelOfRenderedContent,
} from '../models';


export namespace renditionApiParams { 
    export interface RenderOrderSummaryRequest {
        orderId: string;
    }
    export interface RenderReturnReceiptRequest {
        returnId: string;
    }
}
/**
* RenditionApiService - interface
* 
* @export
* @interface RenditionApi
*/
export interface RenditionApiService {
    /**
    * renderOrderSummary
    * @summary renderOrderSummary
    * @param {string} orderId orderId
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RenditionApiInterface
    */
    renderOrderSummaryRaw(requestParameters: renditionApiParams.RenderOrderSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
    * renderOrderSummary
    * renderOrderSummary
    */
    renderOrderSummary(requestParameters: renditionApiParams.RenderOrderSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

    /**
    * renderReturnReceipt
    * @summary renderReturnReceipt
    * @param {string} returnId returnId
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RenditionApiInterface
    */
    renderReturnReceiptRaw(requestParameters: renditionApiParams.RenderReturnReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
    * renderReturnReceipt
    * renderReturnReceipt
    */
    renderReturnReceipt(requestParameters: renditionApiParams.RenderReturnReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

}


/**
 * 
 */
export class RenditionApi extends runtime.BaseAPI implements RenditionApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * renderOrderSummary
     * renderOrderSummary
     */


    async renderOrderSummaryRaw(requestParameters: renditionApiParams.RenderOrderSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling renderOrderSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/orders/{orderId}/summary/html`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderOrderSummary
     * renderOrderSummary
     */
    async renderOrderSummary(requestParameters: renditionApiParams.RenderOrderSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderOrderSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderReturnReceipt
     * renderReturnReceipt
     */


    async renderReturnReceiptRaw(requestParameters: renditionApiParams.RenderReturnReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling renderReturnReceipt.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/returns/{returnId}/receipt/html`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderReturnReceipt
     * renderReturnReceipt
     */
    async renderReturnReceipt(requestParameters: renditionApiParams.RenderReturnReceiptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderReturnReceiptRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
