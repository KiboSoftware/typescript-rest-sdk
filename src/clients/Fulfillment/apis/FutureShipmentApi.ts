/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelOfEntityModelOfShipment,
  EntityModelOfShipment,
  FutureItemsRequest,
  FutureShipmentUpdateDateRequest,
} from '../models';


export namespace futureShipmentApiParams { 
    export interface CreateFutureShipmentsForFutureAllocatableItemsRequest {
        shipmentNumber: number;
        futureItemsRequestDto: FutureItemsRequest;
        ifMatch?: string;
    }
    export interface CreateFutureShipmentsForItemsRequest {
        shipmentNumber: number;
        futureItemsRequestDto: FutureItemsRequest;
        ifMatch?: string;
    }
    export interface FutureShipmentToReadyRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface UpdateFutureShipmentDateRequest {
        shipmentNumber: number;
        futureShipmentUpdateDateRequestDto: FutureShipmentUpdateDateRequest;
        ifMatch?: string;
    }
}
/**
* FutureShipmentApiService - interface
* 
* @export
* @interface FutureShipmentApi
*/
export interface FutureShipmentApiService {
    /**
    * createFutureShipmentsForFutureAllocatableItems
    * @summary createFutureShipmentsForFutureAllocatableItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {FutureItemsRequest} futureItemsRequestDto futureItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FutureShipmentApiInterface
    */
    createFutureShipmentsForFutureAllocatableItemsRaw(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForFutureAllocatableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>>;

    /**
    * createFutureShipmentsForFutureAllocatableItems
    * createFutureShipmentsForFutureAllocatableItems
    */
    createFutureShipmentsForFutureAllocatableItems(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForFutureAllocatableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment>;

    /**
    * createFutureShipmentsForItems
    * @summary createFutureShipmentsForItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {FutureItemsRequest} futureItemsRequestDto futureItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FutureShipmentApiInterface
    */
    createFutureShipmentsForItemsRaw(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>>;

    /**
    * createFutureShipmentsForItems
    * createFutureShipmentsForItems
    */
    createFutureShipmentsForItems(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment>;

    /**
    * futureShipmentToReady
    * @summary futureShipmentToReady
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FutureShipmentApiInterface
    */
    futureShipmentToReadyRaw(requestParameters: futureShipmentApiParams.FutureShipmentToReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * futureShipmentToReady
    * futureShipmentToReady
    */
    futureShipmentToReady(requestParameters: futureShipmentApiParams.FutureShipmentToReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * updateFutureShipmentDate
    * @summary updateFutureShipmentDate
    * @param {number} shipmentNumber shipmentNumber
    * @param {FutureShipmentUpdateDateRequest} futureShipmentUpdateDateRequestDto futureShipmentUpdateDateRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FutureShipmentApiInterface
    */
    updateFutureShipmentDateRaw(requestParameters: futureShipmentApiParams.UpdateFutureShipmentDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * updateFutureShipmentDate
    * updateFutureShipmentDate
    */
    updateFutureShipmentDate(requestParameters: futureShipmentApiParams.UpdateFutureShipmentDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

}


/**
 * 
 */
export class FutureShipmentApi extends runtime.BaseAPI implements FutureShipmentApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * createFutureShipmentsForFutureAllocatableItems
     * createFutureShipmentsForFutureAllocatableItems
     */


    async createFutureShipmentsForFutureAllocatableItemsRaw(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForFutureAllocatableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling createFutureShipmentsForFutureAllocatableItems.');
        }

        if (requestParameters.futureItemsRequestDto === null || requestParameters.futureItemsRequestDto === undefined) {
            throw new runtime.RequiredError('futureItemsRequestDto','Required parameter requestParameters.futureItemsRequestDto was null or undefined when calling createFutureShipmentsForFutureAllocatableItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/futureAllocatableItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.futureItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * createFutureShipmentsForFutureAllocatableItems
     * createFutureShipmentsForFutureAllocatableItems
     */
    async createFutureShipmentsForFutureAllocatableItems(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForFutureAllocatableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment> {
        const response = await this.createFutureShipmentsForFutureAllocatableItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * createFutureShipmentsForItems
     * createFutureShipmentsForItems
     */


    async createFutureShipmentsForItemsRaw(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling createFutureShipmentsForItems.');
        }

        if (requestParameters.futureItemsRequestDto === null || requestParameters.futureItemsRequestDto === undefined) {
            throw new runtime.RequiredError('futureItemsRequestDto','Required parameter requestParameters.futureItemsRequestDto was null or undefined when calling createFutureShipmentsForItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/futureItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.futureItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * createFutureShipmentsForItems
     * createFutureShipmentsForItems
     */
    async createFutureShipmentsForItems(requestParameters: futureShipmentApiParams.CreateFutureShipmentsForItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment> {
        const response = await this.createFutureShipmentsForItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * futureShipmentToReady
     * futureShipmentToReady
     */


    async futureShipmentToReadyRaw(requestParameters: futureShipmentApiParams.FutureShipmentToReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling futureShipmentToReady.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/futureToReady`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * futureShipmentToReady
     * futureShipmentToReady
     */
    async futureShipmentToReady(requestParameters: futureShipmentApiParams.FutureShipmentToReadyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.futureShipmentToReadyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateFutureShipmentDate
     * updateFutureShipmentDate
     */


    async updateFutureShipmentDateRaw(requestParameters: futureShipmentApiParams.UpdateFutureShipmentDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateFutureShipmentDate.');
        }

        if (requestParameters.futureShipmentUpdateDateRequestDto === null || requestParameters.futureShipmentUpdateDateRequestDto === undefined) {
            throw new runtime.RequiredError('futureShipmentUpdateDateRequestDto','Required parameter requestParameters.futureShipmentUpdateDateRequestDto was null or undefined when calling updateFutureShipmentDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/futureUpdateDate`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.futureShipmentUpdateDateRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateFutureShipmentDate
     * updateFutureShipmentDate
     */
    async updateFutureShipmentDate(requestParameters: futureShipmentApiParams.UpdateFutureShipmentDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.updateFutureShipmentDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
