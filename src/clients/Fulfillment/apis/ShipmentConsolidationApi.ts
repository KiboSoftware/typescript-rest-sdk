/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelEntityModelShipmentDto,
  EntityModelPackageConsolidationCandidatesResponseDto,
  EntityModelShipmentDto,
  ErrorItem,
  GetShipmentsRequest,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
  ShipmentConsolidationRequest,
} from '../models';


export namespace shipmentConsolidationApiParams { 
    export interface AddShipmentToConsolidationGroupRequest {
        shipmentNumber: number;
        shipmentNumberToAdd: number;
        shipmentConsolidationId: string;
        ifMatch?: string;
    }
    export interface AddShipmentToConsolidationGroup1Request {
        shipmentNumber: number;
        shipmentNumberToAdd: number;
        shipmentConsolidationId: string;
        ifMatch?: string;
    }
    export interface ConsolidateShipmentsRequest {
        shipmentNumber: number;
        shipmentConsolidationId: string;
        shipmentConsolidationRequest: ShipmentConsolidationRequest;
        ifMatch?: string;
    }
    export interface ConsolidateShipments1Request {
        shipmentNumber: number;
        shipmentConsolidationId: string;
        shipmentConsolidationRequest: ShipmentConsolidationRequest;
        ifMatch?: string;
    }
    export interface GetConsolidatedShipmentsRequest {
        shipmentNumber: number;
        shipmentConsolidationId: string;
    }
    export interface GetConsolidatedShipments1Request {
        shipmentNumber: number;
        shipmentConsolidationId: string;
    }
    export interface GetConsolidationCandidateShipmentsRequest {
        shipmentNumber: number;
        request: GetShipmentsRequest;
    }
    export interface RemoveCurrentShipmentFromConsolidationRequest {
        shipmentNumber: number;
        shipmentConsolidationId: string;
        ifMatch?: string;
    }
    export interface RemoveCurrentShipmentFromConsolidation1Request {
        shipmentNumber: number;
        shipmentConsolidationId: string;
        ifMatch?: string;
    }
    export interface RemoveSpecificShipmentFromConsolidationGroupRequest {
        shipmentNumber: number;
        shipmentNumberToRemove: number;
        shipmentConsolidationId: string;
        ifMatch?: string;
    }
    export interface RemoveSpecificShipmentFromConsolidationGroup1Request {
        shipmentNumber: number;
        shipmentNumberToRemove: number;
        shipmentConsolidationId: string;
        ifMatch?: string;
    }
}
/**
* ShipmentConsolidationApiService - interface
* 
* @export
* @interface ShipmentConsolidationApi
*/
export interface ShipmentConsolidationApiService {
    /**
    * Add Shipment to Consolidation Group
    * @summary Add Shipment to Consolidation Group
    * @param {number} shipmentNumber 
    * @param {number} shipmentNumberToAdd 
    * @param {string} shipmentConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    addShipmentToConsolidationGroupRaw(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>>;

    /**
    * Add Shipment to Consolidation Group
    * Add Shipment to Consolidation Group
    */
    addShipmentToConsolidationGroup(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto>;

    /**
    * Add Shipment to Consolidation Group
    * @summary Add Shipment to Consolidation Group
    * @param {number} shipmentNumber 
    * @param {number} shipmentNumberToAdd 
    * @param {string} shipmentConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    addShipmentToConsolidationGroup1Raw(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>>;

    /**
    * Add Shipment to Consolidation Group
    * Add Shipment to Consolidation Group
    */
    addShipmentToConsolidationGroup1(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto>;

    /**
    * Consolidate Shipments
    * @summary Consolidate Shipments
    * @param {number} shipmentNumber 
    * @param {string} shipmentConsolidationId 
    * @param {ShipmentConsolidationRequest} shipmentConsolidationRequest 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    consolidateShipmentsRaw(requestParameters: shipmentConsolidationApiParams.ConsolidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>>;

    /**
    * Consolidate Shipments
    * Consolidate Shipments
    */
    consolidateShipments(requestParameters: shipmentConsolidationApiParams.ConsolidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto>;

    /**
    * Consolidate Shipments
    * @summary Consolidate Shipments
    * @param {number} shipmentNumber 
    * @param {string} shipmentConsolidationId 
    * @param {ShipmentConsolidationRequest} shipmentConsolidationRequest 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    consolidateShipments1Raw(requestParameters: shipmentConsolidationApiParams.ConsolidateShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>>;

    /**
    * Consolidate Shipments
    * Consolidate Shipments
    */
    consolidateShipments1(requestParameters: shipmentConsolidationApiParams.ConsolidateShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto>;

    /**
    * Get Consolidated Shipments
    * @summary Get Consolidated Shipments
    * @param {number} shipmentNumber 
    * @param {string} shipmentConsolidationId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    getConsolidatedShipmentsRaw(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>>;

    /**
    * Get Consolidated Shipments
    * Get Consolidated Shipments
    */
    getConsolidatedShipments(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto>;

    /**
    * Get Consolidated Shipments
    * @summary Get Consolidated Shipments
    * @param {number} shipmentNumber 
    * @param {string} shipmentConsolidationId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    getConsolidatedShipments1Raw(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>>;

    /**
    * Get Consolidated Shipments
    * Get Consolidated Shipments
    */
    getConsolidatedShipments1(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto>;

    /**
    * Get Consolidation Candidate Shipments
    * @summary Get Consolidation Candidate Shipments
    * @param {number} shipmentNumber 
    * @param {GetShipmentsRequest} request 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    getConsolidationCandidateShipmentsRaw(requestParameters: shipmentConsolidationApiParams.GetConsolidationCandidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationCandidatesResponseDto>>;

    /**
    * Get Consolidation Candidate Shipments
    * Get Consolidation Candidate Shipments
    */
    getConsolidationCandidateShipments(requestParameters: shipmentConsolidationApiParams.GetConsolidationCandidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationCandidatesResponseDto>;

    /**
    * Remove Current Shipment from Consolidation Group
    * @summary Remove Current Shipment from Consolidation Group
    * @param {number} shipmentNumber 
    * @param {string} shipmentConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    removeCurrentShipmentFromConsolidationRaw(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Remove Current Shipment from Consolidation Group
    * Remove Current Shipment from Consolidation Group
    */
    removeCurrentShipmentFromConsolidation(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

    /**
    * Remove Current Shipment from Consolidation Group
    * @summary Remove Current Shipment from Consolidation Group
    * @param {number} shipmentNumber 
    * @param {string} shipmentConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    removeCurrentShipmentFromConsolidation1Raw(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Remove Current Shipment from Consolidation Group
    * Remove Current Shipment from Consolidation Group
    */
    removeCurrentShipmentFromConsolidation1(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

    /**
    * Remove Shipment from Consolidation Group
    * @summary Remove Shipment from Consolidation Group
    * @param {number} shipmentNumber 
    * @param {number} shipmentNumberToRemove 
    * @param {string} shipmentConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    removeSpecificShipmentFromConsolidationGroupRaw(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Remove Shipment from Consolidation Group
    * Remove Shipment from Consolidation Group
    */
    removeSpecificShipmentFromConsolidationGroup(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

    /**
    * Remove Shipment from Consolidation Group
    * @summary Remove Shipment from Consolidation Group
    * @param {number} shipmentNumber 
    * @param {number} shipmentNumberToRemove 
    * @param {string} shipmentConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentConsolidationApiInterface
    */
    removeSpecificShipmentFromConsolidationGroup1Raw(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Remove Shipment from Consolidation Group
    * Remove Shipment from Consolidation Group
    */
    removeSpecificShipmentFromConsolidationGroup1(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

}


/**
 * 
 */
export class ShipmentConsolidationApi extends runtime.BaseAPI implements ShipmentConsolidationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add Shipment to Consolidation Group
     * Add Shipment to Consolidation Group
     */


    async addShipmentToConsolidationGroupRaw(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling addShipmentToConsolidationGroup.');
        }

        if (requestParameters.shipmentNumberToAdd === null || requestParameters.shipmentNumberToAdd === undefined) {
            throw new runtime.RequiredError('shipmentNumberToAdd','Required parameter requestParameters.shipmentNumberToAdd was null or undefined when calling addShipmentToConsolidationGroup.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling addShipmentToConsolidationGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/{shipmentConsolidationId}/add/{shipmentNumberToAdd}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentNumberToAdd"}}`, encodeURIComponent(String(requestParameters.shipmentNumberToAdd))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Shipment to Consolidation Group
     * Add Shipment to Consolidation Group
     */
    async addShipmentToConsolidationGroup(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto> {
        const response = await this.addShipmentToConsolidationGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Shipment to Consolidation Group
     * Add Shipment to Consolidation Group
     */


    async addShipmentToConsolidationGroup1Raw(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling addShipmentToConsolidationGroup1.');
        }

        if (requestParameters.shipmentNumberToAdd === null || requestParameters.shipmentNumberToAdd === undefined) {
            throw new runtime.RequiredError('shipmentNumberToAdd','Required parameter requestParameters.shipmentNumberToAdd was null or undefined when calling addShipmentToConsolidationGroup1.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling addShipmentToConsolidationGroup1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/add/{shipmentNumberToAdd}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentNumberToAdd"}}`, encodeURIComponent(String(requestParameters.shipmentNumberToAdd))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Shipment to Consolidation Group
     * Add Shipment to Consolidation Group
     */
    async addShipmentToConsolidationGroup1(requestParameters: shipmentConsolidationApiParams.AddShipmentToConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto> {
        const response = await this.addShipmentToConsolidationGroup1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Consolidate Shipments
     * Consolidate Shipments
     */


    async consolidateShipmentsRaw(requestParameters: shipmentConsolidationApiParams.ConsolidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling consolidateShipments.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling consolidateShipments.');
        }

        if (requestParameters.shipmentConsolidationRequest === null || requestParameters.shipmentConsolidationRequest === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationRequest','Required parameter requestParameters.shipmentConsolidationRequest was null or undefined when calling consolidateShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/{shipmentConsolidationId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentConsolidationRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Consolidate Shipments
     * Consolidate Shipments
     */
    async consolidateShipments(requestParameters: shipmentConsolidationApiParams.ConsolidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto> {
        const response = await this.consolidateShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Consolidate Shipments
     * Consolidate Shipments
     */


    async consolidateShipments1Raw(requestParameters: shipmentConsolidationApiParams.ConsolidateShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling consolidateShipments1.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling consolidateShipments1.');
        }

        if (requestParameters.shipmentConsolidationRequest === null || requestParameters.shipmentConsolidationRequest === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationRequest','Required parameter requestParameters.shipmentConsolidationRequest was null or undefined when calling consolidateShipments1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentConsolidationRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Consolidate Shipments
     * Consolidate Shipments
     */
    async consolidateShipments1(requestParameters: shipmentConsolidationApiParams.ConsolidateShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto> {
        const response = await this.consolidateShipments1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Consolidated Shipments
     * Get Consolidated Shipments
     */


    async getConsolidatedShipmentsRaw(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getConsolidatedShipments.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling getConsolidatedShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/{shipmentConsolidationId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Consolidated Shipments
     * Get Consolidated Shipments
     */
    async getConsolidatedShipments(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto> {
        const response = await this.getConsolidatedShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Consolidated Shipments
     * Get Consolidated Shipments
     */


    async getConsolidatedShipments1Raw(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelEntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getConsolidatedShipments1.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling getConsolidatedShipments1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Consolidated Shipments
     * Get Consolidated Shipments
     */
    async getConsolidatedShipments1(requestParameters: shipmentConsolidationApiParams.GetConsolidatedShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelEntityModelShipmentDto> {
        const response = await this.getConsolidatedShipments1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Consolidation Candidate Shipments
     * Get Consolidation Candidate Shipments
     */


    async getConsolidationCandidateShipmentsRaw(requestParameters: shipmentConsolidationApiParams.GetConsolidationCandidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationCandidatesResponseDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getConsolidationCandidateShipments.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getConsolidationCandidateShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/candidates`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Consolidation Candidate Shipments
     * Get Consolidation Candidate Shipments
     */
    async getConsolidationCandidateShipments(requestParameters: shipmentConsolidationApiParams.GetConsolidationCandidateShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationCandidatesResponseDto> {
        const response = await this.getConsolidationCandidateShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Current Shipment from Consolidation Group
     * Remove Current Shipment from Consolidation Group
     */


    async removeCurrentShipmentFromConsolidationRaw(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeCurrentShipmentFromConsolidation.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling removeCurrentShipmentFromConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/{shipmentConsolidationId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Current Shipment from Consolidation Group
     * Remove Current Shipment from Consolidation Group
     */
    async removeCurrentShipmentFromConsolidation(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.removeCurrentShipmentFromConsolidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Current Shipment from Consolidation Group
     * Remove Current Shipment from Consolidation Group
     */


    async removeCurrentShipmentFromConsolidation1Raw(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeCurrentShipmentFromConsolidation1.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling removeCurrentShipmentFromConsolidation1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Current Shipment from Consolidation Group
     * Remove Current Shipment from Consolidation Group
     */
    async removeCurrentShipmentFromConsolidation1(requestParameters: shipmentConsolidationApiParams.RemoveCurrentShipmentFromConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.removeCurrentShipmentFromConsolidation1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Shipment from Consolidation Group
     * Remove Shipment from Consolidation Group
     */


    async removeSpecificShipmentFromConsolidationGroupRaw(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeSpecificShipmentFromConsolidationGroup.');
        }

        if (requestParameters.shipmentNumberToRemove === null || requestParameters.shipmentNumberToRemove === undefined) {
            throw new runtime.RequiredError('shipmentNumberToRemove','Required parameter requestParameters.shipmentNumberToRemove was null or undefined when calling removeSpecificShipmentFromConsolidationGroup.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling removeSpecificShipmentFromConsolidationGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/{shipmentConsolidationId}/remove/{shipmentNumberToRemove}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentNumberToRemove"}}`, encodeURIComponent(String(requestParameters.shipmentNumberToRemove))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Shipment from Consolidation Group
     * Remove Shipment from Consolidation Group
     */
    async removeSpecificShipmentFromConsolidationGroup(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.removeSpecificShipmentFromConsolidationGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Shipment from Consolidation Group
     * Remove Shipment from Consolidation Group
     */


    async removeSpecificShipmentFromConsolidationGroup1Raw(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeSpecificShipmentFromConsolidationGroup1.');
        }

        if (requestParameters.shipmentNumberToRemove === null || requestParameters.shipmentNumberToRemove === undefined) {
            throw new runtime.RequiredError('shipmentNumberToRemove','Required parameter requestParameters.shipmentNumberToRemove was null or undefined when calling removeSpecificShipmentFromConsolidationGroup1.');
        }

        if (requestParameters.shipmentConsolidationId === null || requestParameters.shipmentConsolidationId === undefined) {
            throw new runtime.RequiredError('shipmentConsolidationId','Required parameter requestParameters.shipmentConsolidationId was null or undefined when calling removeSpecificShipmentFromConsolidationGroup1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/shipments/remove/{shipmentNumberToRemove}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"shipmentNumberToRemove"}}`, encodeURIComponent(String(requestParameters.shipmentNumberToRemove))).replace(`{${"shipmentConsolidationId"}}`, encodeURIComponent(String(requestParameters.shipmentConsolidationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Shipment from Consolidation Group
     * Remove Shipment from Consolidation Group
     */
    async removeSpecificShipmentFromConsolidationGroup1(requestParameters: shipmentConsolidationApiParams.RemoveSpecificShipmentFromConsolidationGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.removeSpecificShipmentFromConsolidationGroup1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
