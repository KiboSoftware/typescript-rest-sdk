/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BlockActionsRequest,
  EntityModelShipmentDto,
  ErrorItem,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace shipmentMutabilityApiParams { 
    export interface MakeShipmentImmutableRequest {
        shipmentNumber: number;
        ifMatch?: string;
        blockActionsRequest?: BlockActionsRequest;
    }
    export interface MakeShipmentMutableRequest {
        shipmentNumber: number;
        ifMatch?: string;
        blockActionsRequest?: BlockActionsRequest;
    }
}
/**
* ShipmentMutabilityApiService - interface
* 
* @export
* @interface ShipmentMutabilityApi
*/
export interface ShipmentMutabilityApiService {
    /**
    * Make Shipment Immutable
    * @summary Make Shipment Immutable
    * @param {number} shipmentNumber 
    * @param {string} [ifMatch] 
    * @param {BlockActionsRequest} [blockActionsRequest] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentMutabilityApiInterface
    */
    makeShipmentImmutableRaw(requestParameters: shipmentMutabilityApiParams.MakeShipmentImmutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Make Shipment Immutable
    * Make Shipment Immutable
    */
    makeShipmentImmutable(requestParameters: shipmentMutabilityApiParams.MakeShipmentImmutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

    /**
    * Make Shipment Mutable
    * @summary Make Shipment Mutable
    * @param {number} shipmentNumber 
    * @param {string} [ifMatch] 
    * @param {BlockActionsRequest} [blockActionsRequest] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentMutabilityApiInterface
    */
    makeShipmentMutableRaw(requestParameters: shipmentMutabilityApiParams.MakeShipmentMutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Make Shipment Mutable
    * Make Shipment Mutable
    */
    makeShipmentMutable(requestParameters: shipmentMutabilityApiParams.MakeShipmentMutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

}


/**
 * 
 */
export class ShipmentMutabilityApi extends runtime.BaseAPI implements ShipmentMutabilityApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Make Shipment Immutable
     * Make Shipment Immutable
     */


    async makeShipmentImmutableRaw(requestParameters: shipmentMutabilityApiParams.MakeShipmentImmutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling makeShipmentImmutable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/immutable`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.blockActionsRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Make Shipment Immutable
     * Make Shipment Immutable
     */
    async makeShipmentImmutable(requestParameters: shipmentMutabilityApiParams.MakeShipmentImmutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.makeShipmentImmutableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make Shipment Mutable
     * Make Shipment Mutable
     */


    async makeShipmentMutableRaw(requestParameters: shipmentMutabilityApiParams.MakeShipmentMutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling makeShipmentMutable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/mutable`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.blockActionsRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Make Shipment Mutable
     * Make Shipment Mutable
     */
    async makeShipmentMutable(requestParameters: shipmentMutabilityApiParams.MakeShipmentMutableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.makeShipmentMutableRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
