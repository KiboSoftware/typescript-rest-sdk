/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelOfShipment,
  PagedModelOfEntityModelOfShipment,
} from '../models';


export namespace storefrontApiParams { 
    export interface GetShipment1Request {
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface GetShipments1Request {
        xVolTenant: number;
        bypassSearchIndex?: boolean;
        filter?: string;
        isLate?: boolean;
        page?: number;
        pageSize?: number;
        quickSearch?: string;
        sort?: string;
        workflowTaskName?: string;
        xVolSite?: number;
    }
}
/**
* StorefrontApiService - interface
* 
* @export
* @interface StorefrontApi
*/
export interface StorefrontApiService {
    /**
    * getShipment
    * @summary getShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof StorefrontApiInterface
    */
    getShipment1Raw(requestParameters: storefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * getShipment
    * getShipment
    */
    getShipment1(requestParameters: storefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * getShipments
    * @summary getShipments
    * @param {number} xVolTenant 
    * @param {boolean} [bypassSearchIndex] 
    * @param {string} [filter] 
    * @param {boolean} [isLate] 
    * @param {number} [page] 
    * @param {number} [pageSize] 
    * @param {string} [quickSearch] 
    * @param {string} [sort] 
    * @param {string} [workflowTaskName] 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof StorefrontApiInterface
    */
    getShipments1Raw(requestParameters: storefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfShipment>>;

    /**
    * getShipments
    * getShipments
    */
    getShipments1(requestParameters: storefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfShipment>;

}


/**
 * 
 */
export class StorefrontApi extends runtime.BaseAPI implements StorefrontApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * getShipment
     * getShipment
     */


    async getShipment1Raw(requestParameters: storefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipment1.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipment1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/storefront/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipment
     * getShipment
     */
    async getShipment1(requestParameters: storefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.getShipment1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipments
     * getShipments
     */


    async getShipments1Raw(requestParameters: storefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfShipment>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipments1.');
        }

        const queryParameters: any = {};

        if (requestParameters.bypassSearchIndex !== undefined) {
            queryParameters['bypassSearchIndex'] = requestParameters.bypassSearchIndex;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.isLate !== undefined) {
            queryParameters['isLate'] = requestParameters.isLate;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.quickSearch !== undefined) {
            queryParameters['quickSearch'] = requestParameters.quickSearch;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.workflowTaskName !== undefined) {
            queryParameters['workflowTaskName'] = requestParameters.workflowTaskName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/storefront/shipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipments
     * getShipments
     */
    async getShipments1(requestParameters: storefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfShipment> {
        const response = await this.getShipments1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
