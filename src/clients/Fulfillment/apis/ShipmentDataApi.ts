/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';

export interface ShipmentDataApiDeleteShipmentDataByKeyUsingDELETERequest {
    shipmentNumber: number;
    key: string;
}

export interface ShipmentDataApiDeleteShipmentDataUsingDELETERequest {
    shipmentNumber: number;
}

export interface ShipmentDataApiDeleteShipmentItemDataByKeyUsingDELETERequest {
    shipmentNumber: number;
    lineId: number;
    key: string;
}

export interface ShipmentDataApiDeleteShipmentItemDataUsingDELETERequest {
    shipmentNumber: number;
    lineId: number;
}

export interface ShipmentDataApiGetShipmentDataUsingGETRequest {
    shipmentNumber: number;
}

export interface ShipmentDataApiGetShipmentItemDataUsingGETRequest {
    shipmentNumber: number;
    lineId: number;
}

export interface ShipmentDataApiReplaceShipmentDataUsingPUTRequest {
    shipmentNumber: number;
    merge?: boolean;
    requestBody?: { [key: string]: object; };
}

export interface ShipmentDataApiReplaceShipmentItemDataUsingPUTRequest {
    shipmentNumber: number;
    lineId: number;
    merge?: boolean;
    requestBody?: { [key: string]: object; };
}

/**
 * 
 */
export class ShipmentDataApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Shipment Data by Key
     * Delete Shipment Data by Key
     */


    async deleteShipmentDataByKeyUsingDELETERaw(requestParameters: ShipmentDataApiDeleteShipmentDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentDataByKeyUsingDELETE.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentDataByKeyUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Data by Key
     * Delete Shipment Data by Key
     */
    async deleteShipmentDataByKeyUsingDELETE(requestParameters: ShipmentDataApiDeleteShipmentDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataByKeyUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipment Data
     * Delete Shipment Data
     */


    async deleteShipmentDataUsingDELETERaw(requestParameters: ShipmentDataApiDeleteShipmentDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentDataUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Data
     * Delete Shipment Data
     */
    async deleteShipmentDataUsingDELETE(requestParameters: ShipmentDataApiDeleteShipmentDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipment Item Data by Key
     * Delete Shipment Item Data by Key
     */


    async deleteShipmentItemDataByKeyUsingDELETERaw(requestParameters: ShipmentDataApiDeleteShipmentItemDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Item Data by Key
     * Delete Shipment Item Data by Key
     */
    async deleteShipmentItemDataByKeyUsingDELETE(requestParameters: ShipmentDataApiDeleteShipmentItemDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataByKeyUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipment Item Data
     * Delete Shipment Item Data
     */


    async deleteShipmentItemDataUsingDELETERaw(requestParameters: ShipmentDataApiDeleteShipmentItemDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemDataUsingDELETE.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemDataUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Item Data
     * Delete Shipment Item Data
     */
    async deleteShipmentItemDataUsingDELETE(requestParameters: ShipmentDataApiDeleteShipmentItemDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * Get Shipment Data
     * Get Shipment Data
     */


    async getShipmentDataUsingGETRaw(requestParameters: ShipmentDataApiGetShipmentDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentDataUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Shipment Data
     * Get Shipment Data
     */
    async getShipmentDataUsingGET(requestParameters: ShipmentDataApiGetShipmentDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentDataUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipment Item Data
     * Get Shipment Item Data
     */


    async getShipmentItemDataUsingGETRaw(requestParameters: ShipmentDataApiGetShipmentItemDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentItemDataUsingGET.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling getShipmentItemDataUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Shipment Item Data
     * Get Shipment Item Data
     */
    async getShipmentItemDataUsingGET(requestParameters: ShipmentDataApiGetShipmentItemDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentItemDataUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace Shipment Data
     * Replace Shipment Data
     */


    async replaceShipmentDataUsingPUTRaw(requestParameters: ShipmentDataApiReplaceShipmentDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentDataUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Replace Shipment Data
     * Replace Shipment Data
     */
    async replaceShipmentDataUsingPUT(requestParameters: ShipmentDataApiReplaceShipmentDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentDataUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace Shipment Item Data
     * Replace Shipment Item Data
     */


    async replaceShipmentItemDataUsingPUTRaw(requestParameters: ShipmentDataApiReplaceShipmentItemDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentItemDataUsingPUT.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling replaceShipmentItemDataUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Replace Shipment Item Data
     * Replace Shipment Item Data
     */
    async replaceShipmentItemDataUsingPUT(requestParameters: ShipmentDataApiReplaceShipmentItemDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentItemDataUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
