/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';

export interface DeleteShipmentDataByKeyUsingDELETERequest {
    key: string;
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
}

export interface DeleteShipmentDataUsingDELETERequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
}

export interface DeleteShipmentItemDataByKeyUsingDELETERequest {
    key: string;
    lineId: number;
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
}

export interface DeleteShipmentItemDataUsingDELETERequest {
    lineId: number;
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
}

export interface GetShipmentDataUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface GetShipmentItemDataUsingGETRequest {
    lineId: number;
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ReplaceShipmentDataUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    data: { [key: string]: object; };
    merge?: boolean;
    xVolSite?: number;
    responseFields?: string;
}

export interface ReplaceShipmentItemDataUsingPUTRequest {
    lineId: number;
    shipmentNumber: number;
    xVolTenant: number;
    data: { [key: string]: object; };
    merge?: boolean;
    xVolSite?: number;
    responseFields?: string;
}

/**
 * ShipmentDataApi - interface
 * 
 * @export
 * @interface ShipmentDataApiInterface
 */
export interface ShipmentDataApiInterface {
    /**
     * deleteShipmentDataByKey
     * @summary deleteShipmentDataByKey
     * @param {string} key key
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    deleteShipmentDataByKeyUsingDELETERaw(requestParameters: DeleteShipmentDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteShipmentDataByKey
     * deleteShipmentDataByKey
     */
    deleteShipmentDataByKeyUsingDELETE(requestParameters: DeleteShipmentDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * deleteShipmentData
     * @summary deleteShipmentData
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    deleteShipmentDataUsingDELETERaw(requestParameters: DeleteShipmentDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteShipmentData
     * deleteShipmentData
     */
    deleteShipmentDataUsingDELETE(requestParameters: DeleteShipmentDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * deleteShipmentItemDataByKey
     * @summary deleteShipmentItemDataByKey
     * @param {string} key key
     * @param {number} lineId lineId
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    deleteShipmentItemDataByKeyUsingDELETERaw(requestParameters: DeleteShipmentItemDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteShipmentItemDataByKey
     * deleteShipmentItemDataByKey
     */
    deleteShipmentItemDataByKeyUsingDELETE(requestParameters: DeleteShipmentItemDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * deleteShipmentItemData
     * @summary deleteShipmentItemData
     * @param {number} lineId lineId
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    deleteShipmentItemDataUsingDELETERaw(requestParameters: DeleteShipmentItemDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteShipmentItemData
     * deleteShipmentItemData
     */
    deleteShipmentItemDataUsingDELETE(requestParameters: DeleteShipmentItemDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * getShipmentData
     * @summary getShipmentData
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    getShipmentDataUsingGETRaw(requestParameters: GetShipmentDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
     * getShipmentData
     * getShipmentData
     */
    getShipmentDataUsingGET(requestParameters: GetShipmentDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
     * getShipmentItemData
     * @summary getShipmentItemData
     * @param {number} lineId lineId
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    getShipmentItemDataUsingGETRaw(requestParameters: GetShipmentItemDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
     * getShipmentItemData
     * getShipmentItemData
     */
    getShipmentItemDataUsingGET(requestParameters: GetShipmentItemDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
     * replaceShipmentData
     * @summary replaceShipmentData
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {{ [key: string]: object; }} data data
     * @param {boolean} [merge] merge
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    replaceShipmentDataUsingPUTRaw(requestParameters: ReplaceShipmentDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
     * replaceShipmentData
     * replaceShipmentData
     */
    replaceShipmentDataUsingPUT(requestParameters: ReplaceShipmentDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
     * replaceShipmentItemData
     * @summary replaceShipmentItemData
     * @param {number} lineId lineId
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {{ [key: string]: object; }} data data
     * @param {boolean} [merge] merge
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentDataApiInterface
     */
    replaceShipmentItemDataUsingPUTRaw(requestParameters: ReplaceShipmentItemDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
     * replaceShipmentItemData
     * replaceShipmentItemData
     */
    replaceShipmentItemDataUsingPUT(requestParameters: ReplaceShipmentItemDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

}

/**
 * 
 */
export class ShipmentDataApi extends runtime.BaseAPI implements ShipmentDataApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteShipmentDataByKey
     * deleteShipmentDataByKey
     */


    async deleteShipmentDataByKeyUsingDELETERaw(requestParameters: DeleteShipmentDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentDataByKeyUsingDELETE.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentDataByKeyUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentDataByKeyUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentDataByKey
     * deleteShipmentDataByKey
     */
    async deleteShipmentDataByKeyUsingDELETE(requestParameters: DeleteShipmentDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataByKeyUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentData
     * deleteShipmentData
     */


    async deleteShipmentDataUsingDELETERaw(requestParameters: DeleteShipmentDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentDataUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentDataUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentData
     * deleteShipmentData
     */
    async deleteShipmentDataUsingDELETE(requestParameters: DeleteShipmentDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentItemDataByKey
     * deleteShipmentItemDataByKey
     */


    async deleteShipmentItemDataByKeyUsingDELETERaw(requestParameters: DeleteShipmentItemDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentItemDataByKeyUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentItemDataByKey
     * deleteShipmentItemDataByKey
     */
    async deleteShipmentItemDataByKeyUsingDELETE(requestParameters: DeleteShipmentItemDataByKeyUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataByKeyUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentItemData
     * deleteShipmentItemData
     */


    async deleteShipmentItemDataUsingDELETERaw(requestParameters: DeleteShipmentItemDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemDataUsingDELETE.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemDataUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentItemDataUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentItemData
     * deleteShipmentItemData
     */
    async deleteShipmentItemDataUsingDELETE(requestParameters: DeleteShipmentItemDataUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * getShipmentData
     * getShipmentData
     */


    async getShipmentDataUsingGETRaw(requestParameters: GetShipmentDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentDataUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentDataUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getShipmentData
     * getShipmentData
     */
    async getShipmentDataUsingGET(requestParameters: GetShipmentDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentDataUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipmentItemData
     * getShipmentItemData
     */


    async getShipmentItemDataUsingGETRaw(requestParameters: GetShipmentItemDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling getShipmentItemDataUsingGET.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentItemDataUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentItemDataUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getShipmentItemData
     * getShipmentItemData
     */
    async getShipmentItemDataUsingGET(requestParameters: GetShipmentItemDataUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentItemDataUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replaceShipmentData
     * replaceShipmentData
     */


    async replaceShipmentDataUsingPUTRaw(requestParameters: ReplaceShipmentDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentDataUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling replaceShipmentDataUsingPUT.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling replaceShipmentDataUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replaceShipmentData
     * replaceShipmentData
     */
    async replaceShipmentDataUsingPUT(requestParameters: ReplaceShipmentDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentDataUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replaceShipmentItemData
     * replaceShipmentItemData
     */


    async replaceShipmentItemDataUsingPUTRaw(requestParameters: ReplaceShipmentItemDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling replaceShipmentItemDataUsingPUT.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentItemDataUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling replaceShipmentItemDataUsingPUT.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling replaceShipmentItemDataUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replaceShipmentItemData
     * replaceShipmentItemData
     */
    async replaceShipmentItemDataUsingPUT(requestParameters: ReplaceShipmentItemDataUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentItemDataUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
