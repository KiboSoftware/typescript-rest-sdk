/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ErrorItem,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace shipmentDataApiParams { 
    export interface DeleteShipmentDataRequest {
        shipmentNumber: number;
    }
    export interface DeleteShipmentDataByKeyRequest {
        shipmentNumber: number;
        key: string;
    }
    export interface DeleteShipmentItemDataRequest {
        shipmentNumber: number;
        lineId: number;
    }
    export interface DeleteShipmentItemDataByKeyRequest {
        shipmentNumber: number;
        lineId: number;
        key: string;
    }
    export interface GetShipmentDataRequest {
        shipmentNumber: number;
    }
    export interface GetShipmentItemDataRequest {
        shipmentNumber: number;
        lineId: number;
    }
    export interface ReplaceShipmentDataRequest {
        shipmentNumber: number;
        requestBody: { [key: string]: object; };
        merge?: boolean;
    }
    export interface ReplaceShipmentItemDataRequest {
        shipmentNumber: number;
        lineId: number;
        requestBody: { [key: string]: object; };
        merge?: boolean;
    }
}
/**
* ShipmentDataApiService - interface
* 
* @export
* @interface ShipmentDataApi
*/
export interface ShipmentDataApiService {
    /**
    * Delete Shipment Data
    * @summary Delete Shipment Data
    * @param {number} shipmentNumber 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Shipment Data
    * Delete Shipment Data
    */
    deleteShipmentData(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Delete Shipment Data by Key
    * @summary Delete Shipment Data by Key
    * @param {number} shipmentNumber 
    * @param {string} key 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Shipment Data by Key
    * Delete Shipment Data by Key
    */
    deleteShipmentDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Delete Shipment Item Data
    * @summary Delete Shipment Item Data
    * @param {number} shipmentNumber 
    * @param {number} lineId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentItemDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Shipment Item Data
    * Delete Shipment Item Data
    */
    deleteShipmentItemData(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Delete Shipment Item Data by Key
    * @summary Delete Shipment Item Data by Key
    * @param {number} shipmentNumber 
    * @param {number} lineId 
    * @param {string} key 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentItemDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Shipment Item Data by Key
    * Delete Shipment Item Data by Key
    */
    deleteShipmentItemDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get Shipment Data
    * @summary Get Shipment Data
    * @param {number} shipmentNumber 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    getShipmentDataRaw(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Get Shipment Data
    * Get Shipment Data
    */
    getShipmentData(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * Get Shipment Item Data
    * @summary Get Shipment Item Data
    * @param {number} shipmentNumber 
    * @param {number} lineId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    getShipmentItemDataRaw(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Get Shipment Item Data
    * Get Shipment Item Data
    */
    getShipmentItemData(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * Replace Shipment Data
    * @summary Replace Shipment Data
    * @param {number} shipmentNumber 
    * @param {{ [key: string]: object; }} requestBody 
    * @param {boolean} [merge] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    replaceShipmentDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Replace Shipment Data
    * Replace Shipment Data
    */
    replaceShipmentData(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * Replace Shipment Item Data
    * @summary Replace Shipment Item Data
    * @param {number} shipmentNumber 
    * @param {number} lineId 
    * @param {{ [key: string]: object; }} requestBody 
    * @param {boolean} [merge] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    replaceShipmentItemDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Replace Shipment Item Data
    * Replace Shipment Item Data
    */
    replaceShipmentItemData(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

}


/**
 * 
 */
export class ShipmentDataApi extends runtime.BaseAPI implements ShipmentDataApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Shipment Data
     * Delete Shipment Data
     */


    async deleteShipmentDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Data
     * Delete Shipment Data
     */
    async deleteShipmentData(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipment Data by Key
     * Delete Shipment Data by Key
     */


    async deleteShipmentDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentDataByKey.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentDataByKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Data by Key
     * Delete Shipment Data by Key
     */
    async deleteShipmentDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataByKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipment Item Data
     * Delete Shipment Item Data
     */


    async deleteShipmentItemDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemData.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Item Data
     * Delete Shipment Item Data
     */
    async deleteShipmentItemData(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipment Item Data by Key
     * Delete Shipment Item Data by Key
     */


    async deleteShipmentItemDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data/{key}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipment Item Data by Key
     * Delete Shipment Item Data by Key
     */
    async deleteShipmentItemDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataByKeyRaw(requestParameters, initOverrides);
    }

    /**
     * Get Shipment Data
     * Get Shipment Data
     */


    async getShipmentDataRaw(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Shipment Data
     * Get Shipment Data
     */
    async getShipmentData(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipment Item Data
     * Get Shipment Item Data
     */


    async getShipmentItemDataRaw(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentItemData.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling getShipmentItemData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Shipment Item Data
     * Get Shipment Item Data
     */
    async getShipmentItemData(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace Shipment Data
     * Replace Shipment Data
     */


    async replaceShipmentDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentData.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling replaceShipmentData.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Replace Shipment Data
     * Replace Shipment Data
     */
    async replaceShipmentData(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace Shipment Item Data
     * Replace Shipment Item Data
     */


    async replaceShipmentItemDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentItemData.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling replaceShipmentItemData.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling replaceShipmentItemData.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Replace Shipment Item Data
     * Replace Shipment Item Data
     */
    async replaceShipmentItemData(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
