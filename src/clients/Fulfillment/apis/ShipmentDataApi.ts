/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';


export namespace shipmentDataApiParams { 
    export interface DeleteShipmentDataRequest {
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface DeleteShipmentDataByKeyRequest {
        key: string;
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface DeleteShipmentItemDataRequest {
        lineId: number;
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface DeleteShipmentItemDataByKeyRequest {
        key: string;
        lineId: number;
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface GetShipmentDataRequest {
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface GetShipmentItemDataRequest {
        lineId: number;
        shipmentNumber: number;
        xVolTenant: number;
        xVolSite?: number;
    }
    export interface ReplaceShipmentDataRequest {
        shipmentNumber: number;
        xVolTenant: number;
        data: { [key: string]: object; };
        merge?: boolean;
        xVolSite?: number;
    }
    export interface ReplaceShipmentItemDataRequest {
        lineId: number;
        shipmentNumber: number;
        xVolTenant: number;
        data: { [key: string]: object; };
        merge?: boolean;
        xVolSite?: number;
    }
}
/**
* ShipmentDataApiService - interface
* 
* @export
* @interface ShipmentDataApi
*/
export interface ShipmentDataApiService {
    /**
    * deleteShipmentData
    * @summary deleteShipmentData
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteShipmentData
    * deleteShipmentData
    */
    deleteShipmentData(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * deleteShipmentDataByKey
    * @summary deleteShipmentDataByKey
    * @param {string} key key
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteShipmentDataByKey
    * deleteShipmentDataByKey
    */
    deleteShipmentDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * deleteShipmentItemData
    * @summary deleteShipmentItemData
    * @param {number} lineId lineId
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentItemDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteShipmentItemData
    * deleteShipmentItemData
    */
    deleteShipmentItemData(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * deleteShipmentItemDataByKey
    * @summary deleteShipmentItemDataByKey
    * @param {string} key key
    * @param {number} lineId lineId
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    deleteShipmentItemDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteShipmentItemDataByKey
    * deleteShipmentItemDataByKey
    */
    deleteShipmentItemDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * getShipmentData
    * @summary getShipmentData
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    getShipmentDataRaw(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * getShipmentData
    * getShipmentData
    */
    getShipmentData(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * getShipmentItemData
    * @summary getShipmentItemData
    * @param {number} lineId lineId
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    getShipmentItemDataRaw(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * getShipmentItemData
    * getShipmentItemData
    */
    getShipmentItemData(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * replaceShipmentData
    * @summary replaceShipmentData
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {{ [key: string]: object; }} data data
    * @param {boolean} [merge] merge
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    replaceShipmentDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * replaceShipmentData
    * replaceShipmentData
    */
    replaceShipmentData(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * replaceShipmentItemData
    * @summary replaceShipmentItemData
    * @param {number} lineId lineId
    * @param {number} shipmentNumber shipmentNumber
    * @param {number} xVolTenant 
    * @param {{ [key: string]: object; }} data data
    * @param {boolean} [merge] merge
    * @param {number} [xVolSite] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentDataApiInterface
    */
    replaceShipmentItemDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * replaceShipmentItemData
    * replaceShipmentItemData
    */
    replaceShipmentItemData(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

}


/**
 * 
 */
export class ShipmentDataApi extends runtime.BaseAPI implements ShipmentDataApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteShipmentData
     * deleteShipmentData
     */


    async deleteShipmentDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentData
     * deleteShipmentData
     */
    async deleteShipmentData(requestParameters: shipmentDataApiParams.DeleteShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataRaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentDataByKey
     * deleteShipmentDataByKey
     */


    async deleteShipmentDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentDataByKey.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentDataByKey.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentDataByKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentDataByKey
     * deleteShipmentDataByKey
     */
    async deleteShipmentDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentDataByKeyRaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentItemData
     * deleteShipmentItemData
     */


    async deleteShipmentItemDataRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemData.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentItemData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentItemData
     * deleteShipmentItemData
     */
    async deleteShipmentItemData(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataRaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentItemDataByKey
     * deleteShipmentItemDataByKey
     */


    async deleteShipmentItemDataByKeyRaw(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentItemDataByKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentItemDataByKey
     * deleteShipmentItemDataByKey
     */
    async deleteShipmentItemDataByKey(requestParameters: shipmentDataApiParams.DeleteShipmentItemDataByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentItemDataByKeyRaw(requestParameters, initOverrides);
    }

    /**
     * getShipmentData
     * getShipmentData
     */


    async getShipmentDataRaw(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getShipmentData
     * getShipmentData
     */
    async getShipmentData(requestParameters: shipmentDataApiParams.GetShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipmentItemData
     * getShipmentItemData
     */


    async getShipmentItemDataRaw(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling getShipmentItemData.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentItemData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentItemData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * getShipmentItemData
     * getShipmentItemData
     */
    async getShipmentItemData(requestParameters: shipmentDataApiParams.GetShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getShipmentItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replaceShipmentData
     * replaceShipmentData
     */


    async replaceShipmentDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling replaceShipmentData.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling replaceShipmentData.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/data`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replaceShipmentData
     * replaceShipmentData
     */
    async replaceShipmentData(requestParameters: shipmentDataApiParams.ReplaceShipmentDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replaceShipmentItemData
     * replaceShipmentItemData
     */


    async replaceShipmentItemDataRaw(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling replaceShipmentItemData.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentItemData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling replaceShipmentItemData.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling replaceShipmentItemData.');
        }

        const queryParameters: any = {};

        if (requestParameters.merge !== undefined) {
            queryParameters['merge'] = requestParameters.merge;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/data`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.data,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * replaceShipmentItemData
     * replaceShipmentItemData
     */
    async replaceShipmentItemData(requestParameters: shipmentDataApiParams.ReplaceShipmentItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.replaceShipmentItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
