/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ErrorItem,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace fulfillmentApiParams { 
}
/**
* FulfillmentApiService - interface
* 
* @export
* @interface FulfillmentApi
*/
export interface FulfillmentApiService {
    /**
    * Get Fulfillment Feature Flags
    * @summary Get Fulfillment Feature Flags
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FulfillmentApiInterface
    */
    getFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Get Fulfillment Feature Flags
    * Get Fulfillment Feature Flags
    */
    getFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * Get Public Settings
    * @summary Get Public Settings
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FulfillmentApiInterface
    */
    getPublicSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Get Public Settings
    * Get Public Settings
    */
    getPublicSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

    /**
    * Get Fulfillment Tenant Attributes
    * @summary Get Fulfillment Tenant Attributes
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FulfillmentApiInterface
    */
    getTenantAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>>;

    /**
    * Get Fulfillment Tenant Attributes
    * Get Fulfillment Tenant Attributes
    */
    getTenantAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }>;

}


/**
 * 
 */
export class FulfillmentApi extends runtime.BaseAPI implements FulfillmentApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Fulfillment Feature Flags
     * Get Fulfillment Feature Flags
     */


    async getFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Fulfillment Feature Flags
     * Get Fulfillment Feature Flags
     */
    async getFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Public Settings
     * Get Public Settings
     */


    async getPublicSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Public Settings
     * Get Public Settings
     */
    async getPublicSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getPublicSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Fulfillment Tenant Attributes
     * Get Fulfillment Tenant Attributes
     */


    async getTenantAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: object; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/tenantAttributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Fulfillment Tenant Attributes
     * Get Fulfillment Tenant Attributes
     */
    async getTenantAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: object; }> {
        const response = await this.getTenantAttributesRaw(initOverrides);
        return await response.value();
    }

}
