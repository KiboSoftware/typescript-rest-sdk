/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelShipmentDto,
  ErrorItem,
  GetShipmentsRequest,
  PagedModelEntityModelShipmentDto,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace fulfillmentStorefrontApiParams { 
    export interface GetShipment1Request {
        shipmentNumber: number;
    }
    export interface GetShipments1Request {
        request: GetShipmentsRequest;
    }
}
/**
* FulfillmentStorefrontApiService - interface
* 
* @export
* @interface FulfillmentStorefrontApi
*/
export interface FulfillmentStorefrontApiService {
    /**
    * Get shipment information for shopper. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
    * @summary Get Shipment for Shopper
    * @param {number} shipmentNumber 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FulfillmentStorefrontApiInterface
    */
    getShipment1Raw(requestParameters: fulfillmentStorefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Get shipment information for shopper. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
    * Get Shipment for Shopper
    */
    getShipment1(requestParameters: fulfillmentStorefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

    /**
    * Get Shipments for Shopper
    * @summary Get Shipments for Shopper
    * @param {GetShipmentsRequest} request 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FulfillmentStorefrontApiInterface
    */
    getShipments1Raw(requestParameters: fulfillmentStorefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelEntityModelShipmentDto>>;

    /**
    * Get Shipments for Shopper
    * Get Shipments for Shopper
    */
    getShipments1(requestParameters: fulfillmentStorefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelEntityModelShipmentDto>;

}


/**
 * 
 */
export class FulfillmentStorefrontApi extends runtime.BaseAPI implements FulfillmentStorefrontApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get shipment information for shopper. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
     * Get Shipment for Shopper
     */


    async getShipment1Raw(requestParameters: fulfillmentStorefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipment1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/storefront/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get shipment information for shopper. Note that the schema supports both assignedLocationCode and fulfillmentLocationCode fields at the shipment level. These fields are usually the same, except when assignedLocationCode becomes the receiving location code after a transfer shipment is shipped.
     * Get Shipment for Shopper
     */
    async getShipment1(requestParameters: fulfillmentStorefrontApiParams.GetShipment1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.getShipment1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipments for Shopper
     * Get Shipments for Shopper
     */


    async getShipments1Raw(requestParameters: fulfillmentStorefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelEntityModelShipmentDto>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling getShipments1.');
        }

        const queryParameters: any = {};

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/storefront/shipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Shipments for Shopper
     * Get Shipments for Shopper
     */
    async getShipments1(requestParameters: fulfillmentStorefrontApiParams.GetShipments1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelEntityModelShipmentDto> {
        const response = await this.getShipments1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
