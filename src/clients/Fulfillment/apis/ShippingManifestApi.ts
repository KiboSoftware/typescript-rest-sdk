/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelManifestDto,
  CollectionModelShipmentDto,
  EntityModelManifestDto,
  ErrorItem,
  ManifestRequestDto,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace shippingManifestApiParams { 
    export interface CreateManifestRequest {
        manifestRequestDto: ManifestRequestDto;
    }
    export interface GetEligibleShipmentsRequest {
        fulfillmentLocationCode: string;
        carrier: string;
        fromDays?: number;
    }
    export interface GetManifestRequest {
        manifestId: string;
    }
    export interface GetManifestsRequest {
        fulfillmentLocationCode: string;
        fromDays?: number;
    }
}
/**
* ShippingManifestApiService - interface
* 
* @export
* @interface ShippingManifestApi
*/
export interface ShippingManifestApiService {
    /**
    * Create Manifest
    * @summary Create Manifest
    * @param {ManifestRequestDto} manifestRequestDto 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingManifestApiInterface
    */
    createManifestRaw(requestParameters: shippingManifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelManifestDto>>;

    /**
    * Create Manifest
    * Create Manifest
    */
    createManifest(requestParameters: shippingManifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelManifestDto>;

    /**
    * Get Eligible Shipments
    * @summary Get Eligible Shipments
    * @param {string} fulfillmentLocationCode 
    * @param {string} carrier 
    * @param {number} [fromDays] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingManifestApiInterface
    */
    getEligibleShipmentsRaw(requestParameters: shippingManifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelShipmentDto>>;

    /**
    * Get Eligible Shipments
    * Get Eligible Shipments
    */
    getEligibleShipments(requestParameters: shippingManifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelShipmentDto>;

    /**
    * Get Manifest
    * @summary Get Manifest
    * @param {string} manifestId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingManifestApiInterface
    */
    getManifestRaw(requestParameters: shippingManifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelManifestDto>>;

    /**
    * Get Manifest
    * Get Manifest
    */
    getManifest(requestParameters: shippingManifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelManifestDto>;

    /**
    * Get Manifests
    * @summary Get Manifests
    * @param {string} fulfillmentLocationCode 
    * @param {number} [fromDays] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingManifestApiInterface
    */
    getManifestsRaw(requestParameters: shippingManifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelManifestDto>>;

    /**
    * Get Manifests
    * Get Manifests
    */
    getManifests(requestParameters: shippingManifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelManifestDto>;

}


/**
 * 
 */
export class ShippingManifestApi extends runtime.BaseAPI implements ShippingManifestApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Manifest
     * Create Manifest
     */


    async createManifestRaw(requestParameters: shippingManifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelManifestDto>> {
        if (requestParameters.manifestRequestDto === null || requestParameters.manifestRequestDto === undefined) {
            throw new runtime.RequiredError('manifestRequestDto','Required parameter requestParameters.manifestRequestDto was null or undefined when calling createManifest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.manifestRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Manifest
     * Create Manifest
     */
    async createManifest(requestParameters: shippingManifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelManifestDto> {
        const response = await this.createManifestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Eligible Shipments
     * Get Eligible Shipments
     */


    async getEligibleShipmentsRaw(requestParameters: shippingManifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelShipmentDto>> {
        if (requestParameters.fulfillmentLocationCode === null || requestParameters.fulfillmentLocationCode === undefined) {
            throw new runtime.RequiredError('fulfillmentLocationCode','Required parameter requestParameters.fulfillmentLocationCode was null or undefined when calling getEligibleShipments.');
        }

        if (requestParameters.carrier === null || requestParameters.carrier === undefined) {
            throw new runtime.RequiredError('carrier','Required parameter requestParameters.carrier was null or undefined when calling getEligibleShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.fulfillmentLocationCode !== undefined) {
            queryParameters['fulfillmentLocationCode'] = requestParameters.fulfillmentLocationCode;
        }

        if (requestParameters.carrier !== undefined) {
            queryParameters['carrier'] = requestParameters.carrier;
        }

        if (requestParameters.fromDays !== undefined) {
            queryParameters['fromDays'] = requestParameters.fromDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests/eligibleShipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Eligible Shipments
     * Get Eligible Shipments
     */
    async getEligibleShipments(requestParameters: shippingManifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelShipmentDto> {
        const response = await this.getEligibleShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Manifest
     * Get Manifest
     */


    async getManifestRaw(requestParameters: shippingManifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelManifestDto>> {
        if (requestParameters.manifestId === null || requestParameters.manifestId === undefined) {
            throw new runtime.RequiredError('manifestId','Required parameter requestParameters.manifestId was null or undefined when calling getManifest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests/{manifestId}`.replace(`{${"manifestId"}}`, encodeURIComponent(String(requestParameters.manifestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Manifest
     * Get Manifest
     */
    async getManifest(requestParameters: shippingManifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelManifestDto> {
        const response = await this.getManifestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Manifests
     * Get Manifests
     */


    async getManifestsRaw(requestParameters: shippingManifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelManifestDto>> {
        if (requestParameters.fulfillmentLocationCode === null || requestParameters.fulfillmentLocationCode === undefined) {
            throw new runtime.RequiredError('fulfillmentLocationCode','Required parameter requestParameters.fulfillmentLocationCode was null or undefined when calling getManifests.');
        }

        const queryParameters: any = {};

        if (requestParameters.fulfillmentLocationCode !== undefined) {
            queryParameters['fulfillmentLocationCode'] = requestParameters.fulfillmentLocationCode;
        }

        if (requestParameters.fromDays !== undefined) {
            queryParameters['fromDays'] = requestParameters.fromDays;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Manifests
     * Get Manifests
     */
    async getManifests(requestParameters: shippingManifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelManifestDto> {
        const response = await this.getManifestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
