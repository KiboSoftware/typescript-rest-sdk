/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BackorderItemsRequest,
  BackorderItemsUpdateRequest,
  BackorderShipmentRequest,
  CancelItemsRequest,
  CancelShipment,
  CollectionModelOfEntityModelOfShipment,
  CollectionModelOfLocationSummary,
  CollectionModelOfShipment,
  CollectionModelOfTask,
  EntityModelOfDashboardResponse,
  EntityModelOfRenderedContent,
  EntityModelOfShipment,
  FulfillmentAPIProductionProfileDestination,
  FulfillmentAPIProductionProfileItem,
  FulfillmentAPIProductionProfileShipment,
  GiftCardInfoRequest,
  PagedModelOfEntityModelOfShipment,
  PickupItemsRequest,
  ReadyForPrepItemsRequest,
  ReassignItemsRequest,
  ReassignShipment,
  RejectItemsRequest,
  RejectShipment,
  TaskComplete,
  TransferItemsRequest,
  TransferShipment,
} from '../models';

export interface ShipmentApiBackorderItemsUpdateUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    backorderItemsUpdateRequestDto: BackorderItemsUpdateRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiBackorderItemsUsingPOSTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    backorderItemsRequestDto: BackorderItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiBackorderShipmentUsingPOSTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    backorderShipmentRequestDto: BackorderShipmentRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCancelItemsUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    cancelItemsRequestDto: CancelItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCancelShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    cancelShipmentRequestDto: CancelShipment;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCancelShipmentsUsingPUTRequest {
    orderId: string;
    xVolTenant: number;
    cancelShipmentRequestDto: CancelShipment;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCustomerAtCurbsideUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    pickupInfo: { [key: string]: object; };
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCustomerAtStoreUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCustomerCareItemsUsingPOSTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    rejectItemsRequestDto: RejectItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCustomerCareShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    rejectShipmentRequestDto: RejectShipment;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiCustomerInTransitUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiDeleteShipmentUsingDELETERequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
}

export interface ShipmentApiDeleteShipmentsOfOrderUsingDELETERequest {
    orderId: string;
    xVolTenant: number;
    xVolSite?: number;
}

export interface ShipmentApiDestinationUpdateUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    destinationDto: FulfillmentAPIProductionProfileDestination;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiExecuteUsingPUTRequest {
    shipmentNumber: number;
    taskName: string;
    xVolTenant: number;
    taskCompleteDto: TaskComplete;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiFulfillShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiGetLocationSummaryReportUsingGETRequest {
    locationCodes: Array<string>;
    startDateTime: string;
    xVolTenant: number;
    bypassSearchIndex?: boolean;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiGetShipmentStepCountByShipmentTypeUsingGETRequest {
    shipmentType: string;
    xVolTenant: number;
    assignedLocations?: Array<string>;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiGetShipmentUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiGetShipmentsUsingGETRequest {
    xVolTenant: number;
    bypassSearchIndex?: boolean;
    filter?: string;
    isLate?: boolean;
    page?: number;
    pageSize?: number;
    quickSearch?: string;
    sort?: string;
    workflowTaskName?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiGetTasksUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiItemsReadyForPrepUsingPOSTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    readyForPrepItemsRequestDto: ReadyForPrepItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiNewShipmentUsingPOSTRequest {
    xVolTenant: number;
    newShipment: FulfillmentAPIProductionProfileShipment;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiNewShipmentsUsingPOSTRequest {
    xVolTenant: number;
    newShipments: Array<FulfillmentAPIProductionProfileShipment>;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiPickupItemsUsingPOSTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    pickupItemsRequestDto: PickupItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiReassignItemsUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    reassignItemsRequestDto: ReassignItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiReassignShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    reassignShipmentRequestDto: ReassignShipment;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiReceiveTransferUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRefreshShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    shouldLog?: boolean;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRejectItemsUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    rejectItemsRequestDto: RejectItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRejectShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    rejectShipmentRequestDto: RejectShipment;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRenderOrderSummaryUsingGET1Request {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRenderPackingSlipUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiReplaceShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    newShipment: FulfillmentAPIProductionProfileShipment;
    ifMatch?: string;
    updateFields?: Array<string>;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiResendItemEmailUsingPUTRequest {
    lineId: number;
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiResendShipmentEmailUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRetryFulfillingShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiRevertUsingPUTRequest {
    shipmentNumber: number;
    taskName: string;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiSearchAndReceiveTransferUsingPUTRequest {
    search: string;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiSearchReceivableShipmentUsingGETRequest {
    search: string;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiSkipTaskUsingPUTRequest {
    shipmentNumber: number;
    taskName: string;
    xVolTenant: number;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiTransferItemsUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    transferItemsRequestDto: TransferItemsRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiTransferShipmentUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    transferShipmentRequestDto: TransferShipment;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiUpdateFulfillmentFieldsUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    items: Array<FulfillmentAPIProductionProfileItem>;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiUpdateGiftCardInfoUsingPUTRequest {
    shipmentNumber: number;
    xVolTenant: number;
    giftCardInfoRequestDto: GiftCardInfoRequest;
    ifMatch?: string;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiWorkflowDefinitionImageUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

export interface ShipmentApiWorkflowInstanceImageUsingGETRequest {
    shipmentNumber: number;
    xVolTenant: number;
    xVolSite?: number;
    responseFields?: string;
}

/**
 * ShipmentApi - interface
 * 
 * @export
 * @interface ShipmentApiInterface
 */
export interface ShipmentApiInterface {
    /**
     * backorderItemsUpdate
     * @summary backorderItemsUpdate
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {BackorderItemsUpdateRequest} backorderItemsUpdateRequestDto backorderItemsUpdateRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    backorderItemsUpdateUsingPUTRaw(requestParameters: ShipmentApiBackorderItemsUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * backorderItemsUpdate
     * backorderItemsUpdate
     */
    backorderItemsUpdateUsingPUT(requestParameters: ShipmentApiBackorderItemsUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * backorderItems
     * @summary backorderItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {BackorderItemsRequest} backorderItemsRequestDto backorderItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    backorderItemsUsingPOSTRaw(requestParameters: ShipmentApiBackorderItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * backorderItems
     * backorderItems
     */
    backorderItemsUsingPOST(requestParameters: ShipmentApiBackorderItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * backorderShipment
     * @summary backorderShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {BackorderShipmentRequest} backorderShipmentRequestDto backorderShipmentRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    backorderShipmentUsingPOSTRaw(requestParameters: ShipmentApiBackorderShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * backorderShipment
     * backorderShipment
     */
    backorderShipmentUsingPOST(requestParameters: ShipmentApiBackorderShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * cancelItems
     * @summary cancelItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {CancelItemsRequest} cancelItemsRequestDto cancelItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    cancelItemsUsingPUTRaw(requestParameters: ShipmentApiCancelItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * cancelItems
     * cancelItems
     */
    cancelItemsUsingPUT(requestParameters: ShipmentApiCancelItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * cancelShipment
     * @summary cancelShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {CancelShipment} cancelShipmentRequestDto cancelShipmentRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    cancelShipmentUsingPUTRaw(requestParameters: ShipmentApiCancelShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * cancelShipment
     * cancelShipment
     */
    cancelShipmentUsingPUT(requestParameters: ShipmentApiCancelShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * cancelShipments
     * @summary cancelShipments
     * @param {string} orderId orderId
     * @param {number} xVolTenant 
     * @param {CancelShipment} cancelShipmentRequestDto cancelShipmentRequestDto
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    cancelShipmentsUsingPUTRaw(requestParameters: ShipmentApiCancelShipmentsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>>;

    /**
     * cancelShipments
     * cancelShipments
     */
    cancelShipmentsUsingPUT(requestParameters: ShipmentApiCancelShipmentsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment>;

    /**
     * customerAtCurbside
     * @summary customerAtCurbside
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {{ [key: string]: object; }} pickupInfo pickupInfo
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    customerAtCurbsideUsingPUTRaw(requestParameters: ShipmentApiCustomerAtCurbsideUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * customerAtCurbside
     * customerAtCurbside
     */
    customerAtCurbsideUsingPUT(requestParameters: ShipmentApiCustomerAtCurbsideUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * customerAtStore
     * @summary customerAtStore
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    customerAtStoreUsingPUTRaw(requestParameters: ShipmentApiCustomerAtStoreUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * customerAtStore
     * customerAtStore
     */
    customerAtStoreUsingPUT(requestParameters: ShipmentApiCustomerAtStoreUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * customerCareItems
     * @summary customerCareItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {RejectItemsRequest} rejectItemsRequestDto rejectItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    customerCareItemsUsingPOSTRaw(requestParameters: ShipmentApiCustomerCareItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * customerCareItems
     * customerCareItems
     */
    customerCareItemsUsingPOST(requestParameters: ShipmentApiCustomerCareItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * customerCareShipment
     * @summary customerCareShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {RejectShipment} rejectShipmentRequestDto rejectShipmentRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    customerCareShipmentUsingPUTRaw(requestParameters: ShipmentApiCustomerCareShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * customerCareShipment
     * customerCareShipment
     */
    customerCareShipmentUsingPUT(requestParameters: ShipmentApiCustomerCareShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * customerInTransit
     * @summary customerInTransit
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    customerInTransitUsingPUTRaw(requestParameters: ShipmentApiCustomerInTransitUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * customerInTransit
     * customerInTransit
     */
    customerInTransitUsingPUT(requestParameters: ShipmentApiCustomerInTransitUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * deleteShipment
     * @summary deleteShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    deleteShipmentUsingDELETERaw(requestParameters: ShipmentApiDeleteShipmentUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteShipment
     * deleteShipment
     */
    deleteShipmentUsingDELETE(requestParameters: ShipmentApiDeleteShipmentUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * deleteShipmentsOfOrder
     * @summary deleteShipmentsOfOrder
     * @param {string} orderId orderId
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    deleteShipmentsOfOrderUsingDELETERaw(requestParameters: ShipmentApiDeleteShipmentsOfOrderUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteShipmentsOfOrder
     * deleteShipmentsOfOrder
     */
    deleteShipmentsOfOrderUsingDELETE(requestParameters: ShipmentApiDeleteShipmentsOfOrderUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * destinationUpdate
     * @summary destinationUpdate
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {FulfillmentAPIProductionProfileDestination} destinationDto destinationDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    destinationUpdateUsingPUTRaw(requestParameters: ShipmentApiDestinationUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * destinationUpdate
     * destinationUpdate
     */
    destinationUpdateUsingPUT(requestParameters: ShipmentApiDestinationUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * execute
     * @summary execute
     * @param {number} shipmentNumber shipmentNumber
     * @param {string} taskName taskName
     * @param {number} xVolTenant 
     * @param {TaskComplete} taskCompleteDto taskCompleteDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    executeUsingPUTRaw(requestParameters: ShipmentApiExecuteUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * execute
     * execute
     */
    executeUsingPUT(requestParameters: ShipmentApiExecuteUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * fulfillShipment
     * @summary fulfillShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    fulfillShipmentUsingPUTRaw(requestParameters: ShipmentApiFulfillShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * fulfillShipment
     * fulfillShipment
     */
    fulfillShipmentUsingPUT(requestParameters: ShipmentApiFulfillShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * getLocationSummaryReport
     * @summary getLocationSummaryReport
     * @param {Array<string>} locationCodes locationCodes
     * @param {string} startDateTime startDateTime
     * @param {number} xVolTenant 
     * @param {boolean} [bypassSearchIndex] bypassSearchIndex
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    getLocationSummaryReportUsingGETRaw(requestParameters: ShipmentApiGetLocationSummaryReportUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfLocationSummary>>;

    /**
     * getLocationSummaryReport
     * getLocationSummaryReport
     */
    getLocationSummaryReportUsingGET(requestParameters: ShipmentApiGetLocationSummaryReportUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfLocationSummary>;

    /**
     * getShipmentStepCountByShipmentType
     * @summary getShipmentStepCountByShipmentType
     * @param {string} shipmentType shipmentType
     * @param {number} xVolTenant 
     * @param {Array<string>} [assignedLocations] assignedLocations
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    getShipmentStepCountByShipmentTypeUsingGETRaw(requestParameters: ShipmentApiGetShipmentStepCountByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfDashboardResponse>>;

    /**
     * getShipmentStepCountByShipmentType
     * getShipmentStepCountByShipmentType
     */
    getShipmentStepCountByShipmentTypeUsingGET(requestParameters: ShipmentApiGetShipmentStepCountByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfDashboardResponse>;

    /**
     * getShipment
     * @summary getShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    getShipmentUsingGETRaw(requestParameters: ShipmentApiGetShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * getShipment
     * getShipment
     */
    getShipmentUsingGET(requestParameters: ShipmentApiGetShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * getShipments
     * @summary getShipments
     * @param {number} xVolTenant 
     * @param {boolean} [bypassSearchIndex] 
     * @param {string} [filter] 
     * @param {boolean} [isLate] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [quickSearch] 
     * @param {string} [sort] 
     * @param {string} [workflowTaskName] 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    getShipmentsUsingGETRaw(requestParameters: ShipmentApiGetShipmentsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfShipment>>;

    /**
     * getShipments
     * getShipments
     */
    getShipmentsUsingGET(requestParameters: ShipmentApiGetShipmentsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfShipment>;

    /**
     * getTasks
     * @summary getTasks
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    getTasksUsingGETRaw(requestParameters: ShipmentApiGetTasksUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfTask>>;

    /**
     * getTasks
     * getTasks
     */
    getTasksUsingGET(requestParameters: ShipmentApiGetTasksUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfTask>;

    /**
     * itemsReadyForPrep
     * @summary itemsReadyForPrep
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {ReadyForPrepItemsRequest} readyForPrepItemsRequestDto readyForPrepItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    itemsReadyForPrepUsingPOSTRaw(requestParameters: ShipmentApiItemsReadyForPrepUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * itemsReadyForPrep
     * itemsReadyForPrep
     */
    itemsReadyForPrepUsingPOST(requestParameters: ShipmentApiItemsReadyForPrepUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * newShipment
     * @summary newShipment
     * @param {number} xVolTenant 
     * @param {FulfillmentAPIProductionProfileShipment} newShipment newShipment
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    newShipmentUsingPOSTRaw(requestParameters: ShipmentApiNewShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * newShipment
     * newShipment
     */
    newShipmentUsingPOST(requestParameters: ShipmentApiNewShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * newShipments
     * @summary newShipments
     * @param {number} xVolTenant 
     * @param {Array<FulfillmentAPIProductionProfileShipment>} newShipments newShipments
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    newShipmentsUsingPOSTRaw(requestParameters: ShipmentApiNewShipmentsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>>;

    /**
     * newShipments
     * newShipments
     */
    newShipmentsUsingPOST(requestParameters: ShipmentApiNewShipmentsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment>;

    /**
     * pickupItems
     * @summary pickupItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {PickupItemsRequest} pickupItemsRequestDto pickupItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    pickupItemsUsingPOSTRaw(requestParameters: ShipmentApiPickupItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * pickupItems
     * pickupItems
     */
    pickupItemsUsingPOST(requestParameters: ShipmentApiPickupItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * reassignItems
     * @summary reassignItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {ReassignItemsRequest} reassignItemsRequestDto reassignItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    reassignItemsUsingPUTRaw(requestParameters: ShipmentApiReassignItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * reassignItems
     * reassignItems
     */
    reassignItemsUsingPUT(requestParameters: ShipmentApiReassignItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * reassignShipment
     * @summary reassignShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {ReassignShipment} reassignShipmentRequestDto reassignShipmentRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    reassignShipmentUsingPUTRaw(requestParameters: ShipmentApiReassignShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * reassignShipment
     * reassignShipment
     */
    reassignShipmentUsingPUT(requestParameters: ShipmentApiReassignShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * receiveTransfer
     * @summary receiveTransfer
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    receiveTransferUsingPUTRaw(requestParameters: ShipmentApiReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * receiveTransfer
     * receiveTransfer
     */
    receiveTransferUsingPUT(requestParameters: ShipmentApiReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * refreshShipment
     * @summary refreshShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {boolean} [shouldLog] shouldLog
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    refreshShipmentUsingPUTRaw(requestParameters: ShipmentApiRefreshShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * refreshShipment
     * refreshShipment
     */
    refreshShipmentUsingPUT(requestParameters: ShipmentApiRefreshShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * rejectItems
     * @summary rejectItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {RejectItemsRequest} rejectItemsRequestDto rejectItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    rejectItemsUsingPUTRaw(requestParameters: ShipmentApiRejectItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * rejectItems
     * rejectItems
     */
    rejectItemsUsingPUT(requestParameters: ShipmentApiRejectItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * rejectShipment
     * @summary rejectShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {RejectShipment} rejectShipmentRequestDto rejectShipmentRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    rejectShipmentUsingPUTRaw(requestParameters: ShipmentApiRejectShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * rejectShipment
     * rejectShipment
     */
    rejectShipmentUsingPUT(requestParameters: ShipmentApiRejectShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * renderOrderSummary
     * @summary renderOrderSummary
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    renderOrderSummaryUsingGET1Raw(requestParameters: ShipmentApiRenderOrderSummaryUsingGET1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
     * renderOrderSummary
     * renderOrderSummary
     */
    renderOrderSummaryUsingGET1(requestParameters: ShipmentApiRenderOrderSummaryUsingGET1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

    /**
     * renderPackingSlip
     * @summary renderPackingSlip
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    renderPackingSlipUsingGETRaw(requestParameters: ShipmentApiRenderPackingSlipUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
     * renderPackingSlip
     * renderPackingSlip
     */
    renderPackingSlipUsingGET(requestParameters: ShipmentApiRenderPackingSlipUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

    /**
     * replaceShipment
     * @summary replaceShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {FulfillmentAPIProductionProfileShipment} newShipment newShipment
     * @param {string} [ifMatch] If-Match
     * @param {Array<string>} [updateFields] updateFields
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    replaceShipmentUsingPUTRaw(requestParameters: ShipmentApiReplaceShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * replaceShipment
     * replaceShipment
     */
    replaceShipmentUsingPUT(requestParameters: ShipmentApiReplaceShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * resendItemEmail
     * @summary resendItemEmail
     * @param {number} lineId lineId
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    resendItemEmailUsingPUTRaw(requestParameters: ShipmentApiResendItemEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * resendItemEmail
     * resendItemEmail
     */
    resendItemEmailUsingPUT(requestParameters: ShipmentApiResendItemEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * resendShipmentEmail
     * @summary resendShipmentEmail
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    resendShipmentEmailUsingPUTRaw(requestParameters: ShipmentApiResendShipmentEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * resendShipmentEmail
     * resendShipmentEmail
     */
    resendShipmentEmailUsingPUT(requestParameters: ShipmentApiResendShipmentEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * retryFulfillingShipment
     * @summary retryFulfillingShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    retryFulfillingShipmentUsingPUTRaw(requestParameters: ShipmentApiRetryFulfillingShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * retryFulfillingShipment
     * retryFulfillingShipment
     */
    retryFulfillingShipmentUsingPUT(requestParameters: ShipmentApiRetryFulfillingShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * revert
     * @summary revert
     * @param {number} shipmentNumber shipmentNumber
     * @param {string} taskName taskName
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    revertUsingPUTRaw(requestParameters: ShipmentApiRevertUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * revert
     * revert
     */
    revertUsingPUT(requestParameters: ShipmentApiRevertUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * searchAndReceiveTransfer
     * @summary searchAndReceiveTransfer
     * @param {string} search search
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    searchAndReceiveTransferUsingPUTRaw(requestParameters: ShipmentApiSearchAndReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * searchAndReceiveTransfer
     * searchAndReceiveTransfer
     */
    searchAndReceiveTransferUsingPUT(requestParameters: ShipmentApiSearchAndReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * searchReceivableShipment
     * @summary searchReceivableShipment
     * @param {string} search search
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    searchReceivableShipmentUsingGETRaw(requestParameters: ShipmentApiSearchReceivableShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * searchReceivableShipment
     * searchReceivableShipment
     */
    searchReceivableShipmentUsingGET(requestParameters: ShipmentApiSearchReceivableShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * skipTask
     * @summary skipTask
     * @param {number} shipmentNumber shipmentNumber
     * @param {string} taskName taskName
     * @param {number} xVolTenant 
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    skipTaskUsingPUTRaw(requestParameters: ShipmentApiSkipTaskUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * skipTask
     * skipTask
     */
    skipTaskUsingPUT(requestParameters: ShipmentApiSkipTaskUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * transferItems
     * @summary transferItems
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {TransferItemsRequest} transferItemsRequestDto transferItemsRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    transferItemsUsingPUTRaw(requestParameters: ShipmentApiTransferItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * transferItems
     * transferItems
     */
    transferItemsUsingPUT(requestParameters: ShipmentApiTransferItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * transferShipment
     * @summary transferShipment
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {TransferShipment} transferShipmentRequestDto transferShipmentRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    transferShipmentUsingPUTRaw(requestParameters: ShipmentApiTransferShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * transferShipment
     * transferShipment
     */
    transferShipmentUsingPUT(requestParameters: ShipmentApiTransferShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * updateFulfillmentFields
     * @summary updateFulfillmentFields
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {Array<FulfillmentAPIProductionProfileItem>} items items
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    updateFulfillmentFieldsUsingPUTRaw(requestParameters: ShipmentApiUpdateFulfillmentFieldsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * updateFulfillmentFields
     * updateFulfillmentFields
     */
    updateFulfillmentFieldsUsingPUT(requestParameters: ShipmentApiUpdateFulfillmentFieldsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * updateGiftCardInfo
     * @summary updateGiftCardInfo
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {GiftCardInfoRequest} giftCardInfoRequestDto giftCardInfoRequestDto
     * @param {string} [ifMatch] If-Match
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    updateGiftCardInfoUsingPUTRaw(requestParameters: ShipmentApiUpdateGiftCardInfoUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
     * updateGiftCardInfo
     * updateGiftCardInfo
     */
    updateGiftCardInfoUsingPUT(requestParameters: ShipmentApiUpdateGiftCardInfoUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
     * workflowDefinitionImage
     * @summary workflowDefinitionImage
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    workflowDefinitionImageUsingGETRaw(requestParameters: ShipmentApiWorkflowDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * workflowDefinitionImage
     * workflowDefinitionImage
     */
    workflowDefinitionImageUsingGET(requestParameters: ShipmentApiWorkflowDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * workflowInstanceImage
     * @summary workflowInstanceImage
     * @param {number} shipmentNumber shipmentNumber
     * @param {number} xVolTenant 
     * @param {number} [xVolSite] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApiInterface
     */
    workflowInstanceImageUsingGETRaw(requestParameters: ShipmentApiWorkflowInstanceImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * workflowInstanceImage
     * workflowInstanceImage
     */
    workflowInstanceImageUsingGET(requestParameters: ShipmentApiWorkflowInstanceImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class ShipmentApi extends runtime.BaseAPI implements ShipmentApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * backorderItemsUpdate
     * backorderItemsUpdate
     */


    async backorderItemsUpdateUsingPUTRaw(requestParameters: ShipmentApiBackorderItemsUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling backorderItemsUpdateUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling backorderItemsUpdateUsingPUT.');
        }

        if (requestParameters.backorderItemsUpdateRequestDto === null || requestParameters.backorderItemsUpdateRequestDto === undefined) {
            throw new runtime.RequiredError('backorderItemsUpdateRequestDto','Required parameter requestParameters.backorderItemsUpdateRequestDto was null or undefined when calling backorderItemsUpdateUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/backorderedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.backorderItemsUpdateRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * backorderItemsUpdate
     * backorderItemsUpdate
     */
    async backorderItemsUpdateUsingPUT(requestParameters: ShipmentApiBackorderItemsUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.backorderItemsUpdateUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * backorderItems
     * backorderItems
     */


    async backorderItemsUsingPOSTRaw(requestParameters: ShipmentApiBackorderItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling backorderItemsUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling backorderItemsUsingPOST.');
        }

        if (requestParameters.backorderItemsRequestDto === null || requestParameters.backorderItemsRequestDto === undefined) {
            throw new runtime.RequiredError('backorderItemsRequestDto','Required parameter requestParameters.backorderItemsRequestDto was null or undefined when calling backorderItemsUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/backorderedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.backorderItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * backorderItems
     * backorderItems
     */
    async backorderItemsUsingPOST(requestParameters: ShipmentApiBackorderItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.backorderItemsUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * backorderShipment
     * backorderShipment
     */


    async backorderShipmentUsingPOSTRaw(requestParameters: ShipmentApiBackorderShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling backorderShipmentUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling backorderShipmentUsingPOST.');
        }

        if (requestParameters.backorderShipmentRequestDto === null || requestParameters.backorderShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('backorderShipmentRequestDto','Required parameter requestParameters.backorderShipmentRequestDto was null or undefined when calling backorderShipmentUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/backordered`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.backorderShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * backorderShipment
     * backorderShipment
     */
    async backorderShipmentUsingPOST(requestParameters: ShipmentApiBackorderShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.backorderShipmentUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * cancelItems
     * cancelItems
     */


    async cancelItemsUsingPUTRaw(requestParameters: ShipmentApiCancelItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling cancelItemsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling cancelItemsUsingPUT.');
        }

        if (requestParameters.cancelItemsRequestDto === null || requestParameters.cancelItemsRequestDto === undefined) {
            throw new runtime.RequiredError('cancelItemsRequestDto','Required parameter requestParameters.cancelItemsRequestDto was null or undefined when calling cancelItemsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/canceledItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cancelItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * cancelItems
     * cancelItems
     */
    async cancelItemsUsingPUT(requestParameters: ShipmentApiCancelItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.cancelItemsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * cancelShipment
     * cancelShipment
     */


    async cancelShipmentUsingPUTRaw(requestParameters: ShipmentApiCancelShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling cancelShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling cancelShipmentUsingPUT.');
        }

        if (requestParameters.cancelShipmentRequestDto === null || requestParameters.cancelShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('cancelShipmentRequestDto','Required parameter requestParameters.cancelShipmentRequestDto was null or undefined when calling cancelShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/canceled`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cancelShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * cancelShipment
     * cancelShipment
     */
    async cancelShipmentUsingPUT(requestParameters: ShipmentApiCancelShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.cancelShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * cancelShipments
     * cancelShipments
     */


    async cancelShipmentsUsingPUTRaw(requestParameters: ShipmentApiCancelShipmentsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelShipmentsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling cancelShipmentsUsingPUT.');
        }

        if (requestParameters.cancelShipmentRequestDto === null || requestParameters.cancelShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('cancelShipmentRequestDto','Required parameter requestParameters.cancelShipmentRequestDto was null or undefined when calling cancelShipmentsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/order/{orderId}/canceled`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cancelShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * cancelShipments
     * cancelShipments
     */
    async cancelShipmentsUsingPUT(requestParameters: ShipmentApiCancelShipmentsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment> {
        const response = await this.cancelShipmentsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerAtCurbside
     * customerAtCurbside
     */


    async customerAtCurbsideUsingPUTRaw(requestParameters: ShipmentApiCustomerAtCurbsideUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerAtCurbsideUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling customerAtCurbsideUsingPUT.');
        }

        if (requestParameters.pickupInfo === null || requestParameters.pickupInfo === undefined) {
            throw new runtime.RequiredError('pickupInfo','Required parameter requestParameters.pickupInfo was null or undefined when calling customerAtCurbsideUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerAtCurbside`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.pickupInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerAtCurbside
     * customerAtCurbside
     */
    async customerAtCurbsideUsingPUT(requestParameters: ShipmentApiCustomerAtCurbsideUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerAtCurbsideUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerAtStore
     * customerAtStore
     */


    async customerAtStoreUsingPUTRaw(requestParameters: ShipmentApiCustomerAtStoreUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerAtStoreUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling customerAtStoreUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerAtStore`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerAtStore
     * customerAtStore
     */
    async customerAtStoreUsingPUT(requestParameters: ShipmentApiCustomerAtStoreUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerAtStoreUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerCareItems
     * customerCareItems
     */


    async customerCareItemsUsingPOSTRaw(requestParameters: ShipmentApiCustomerCareItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerCareItemsUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling customerCareItemsUsingPOST.');
        }

        if (requestParameters.rejectItemsRequestDto === null || requestParameters.rejectItemsRequestDto === undefined) {
            throw new runtime.RequiredError('rejectItemsRequestDto','Required parameter requestParameters.rejectItemsRequestDto was null or undefined when calling customerCareItemsUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerCaredItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerCareItems
     * customerCareItems
     */
    async customerCareItemsUsingPOST(requestParameters: ShipmentApiCustomerCareItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerCareItemsUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerCareShipment
     * customerCareShipment
     */


    async customerCareShipmentUsingPUTRaw(requestParameters: ShipmentApiCustomerCareShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerCareShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling customerCareShipmentUsingPUT.');
        }

        if (requestParameters.rejectShipmentRequestDto === null || requestParameters.rejectShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('rejectShipmentRequestDto','Required parameter requestParameters.rejectShipmentRequestDto was null or undefined when calling customerCareShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerCared`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerCareShipment
     * customerCareShipment
     */
    async customerCareShipmentUsingPUT(requestParameters: ShipmentApiCustomerCareShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerCareShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerInTransit
     * customerInTransit
     */


    async customerInTransitUsingPUTRaw(requestParameters: ShipmentApiCustomerInTransitUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerInTransitUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling customerInTransitUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerInTransit`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerInTransit
     * customerInTransit
     */
    async customerInTransitUsingPUT(requestParameters: ShipmentApiCustomerInTransitUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerInTransitUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deleteShipment
     * deleteShipment
     */


    async deleteShipmentUsingDELETERaw(requestParameters: ShipmentApiDeleteShipmentUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipmentUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipment
     * deleteShipment
     */
    async deleteShipmentUsingDELETE(requestParameters: ShipmentApiDeleteShipmentUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentsOfOrder
     * deleteShipmentsOfOrder
     */


    async deleteShipmentsOfOrderUsingDELETERaw(requestParameters: ShipmentApiDeleteShipmentsOfOrderUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteShipmentsOfOrderUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteShipmentsOfOrderUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentsOfOrder
     * deleteShipmentsOfOrder
     */
    async deleteShipmentsOfOrderUsingDELETE(requestParameters: ShipmentApiDeleteShipmentsOfOrderUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentsOfOrderUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * destinationUpdate
     * destinationUpdate
     */


    async destinationUpdateUsingPUTRaw(requestParameters: ShipmentApiDestinationUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling destinationUpdateUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling destinationUpdateUsingPUT.');
        }

        if (requestParameters.destinationDto === null || requestParameters.destinationDto === undefined) {
            throw new runtime.RequiredError('destinationDto','Required parameter requestParameters.destinationDto was null or undefined when calling destinationUpdateUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/destination`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.destinationDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * destinationUpdate
     * destinationUpdate
     */
    async destinationUpdateUsingPUT(requestParameters: ShipmentApiDestinationUpdateUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.destinationUpdateUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * execute
     * execute
     */


    async executeUsingPUTRaw(requestParameters: ShipmentApiExecuteUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling executeUsingPUT.');
        }

        if (requestParameters.taskName === null || requestParameters.taskName === undefined) {
            throw new runtime.RequiredError('taskName','Required parameter requestParameters.taskName was null or undefined when calling executeUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling executeUsingPUT.');
        }

        if (requestParameters.taskCompleteDto === null || requestParameters.taskCompleteDto === undefined) {
            throw new runtime.RequiredError('taskCompleteDto','Required parameter requestParameters.taskCompleteDto was null or undefined when calling executeUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks/{taskName}/completed`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"taskName"}}`, encodeURIComponent(String(requestParameters.taskName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.taskCompleteDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * execute
     * execute
     */
    async executeUsingPUT(requestParameters: ShipmentApiExecuteUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.executeUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * fulfillShipment
     * fulfillShipment
     */


    async fulfillShipmentUsingPUTRaw(requestParameters: ShipmentApiFulfillShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling fulfillShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling fulfillShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/fulfilled`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * fulfillShipment
     * fulfillShipment
     */
    async fulfillShipmentUsingPUT(requestParameters: ShipmentApiFulfillShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.fulfillShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getLocationSummaryReport
     * getLocationSummaryReport
     */


    async getLocationSummaryReportUsingGETRaw(requestParameters: ShipmentApiGetLocationSummaryReportUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfLocationSummary>> {
        if (requestParameters.locationCodes === null || requestParameters.locationCodes === undefined) {
            throw new runtime.RequiredError('locationCodes','Required parameter requestParameters.locationCodes was null or undefined when calling getLocationSummaryReportUsingGET.');
        }

        if (requestParameters.startDateTime === null || requestParameters.startDateTime === undefined) {
            throw new runtime.RequiredError('startDateTime','Required parameter requestParameters.startDateTime was null or undefined when calling getLocationSummaryReportUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getLocationSummaryReportUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.bypassSearchIndex !== undefined) {
            queryParameters['bypassSearchIndex'] = requestParameters.bypassSearchIndex;
        }

        if (requestParameters.locationCodes) {
            queryParameters['locationCodes'] = requestParameters.locationCodes;
        }

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/locationSummaryReport`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getLocationSummaryReport
     * getLocationSummaryReport
     */
    async getLocationSummaryReportUsingGET(requestParameters: ShipmentApiGetLocationSummaryReportUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfLocationSummary> {
        const response = await this.getLocationSummaryReportUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipmentStepCountByShipmentType
     * getShipmentStepCountByShipmentType
     */


    async getShipmentStepCountByShipmentTypeUsingGETRaw(requestParameters: ShipmentApiGetShipmentStepCountByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfDashboardResponse>> {
        if (requestParameters.shipmentType === null || requestParameters.shipmentType === undefined) {
            throw new runtime.RequiredError('shipmentType','Required parameter requestParameters.shipmentType was null or undefined when calling getShipmentStepCountByShipmentTypeUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentStepCountByShipmentTypeUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.assignedLocations) {
            queryParameters['assignedLocations'] = requestParameters.assignedLocations;
        }

        if (requestParameters.shipmentType !== undefined) {
            queryParameters['shipmentType'] = requestParameters.shipmentType;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/countsByStep`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipmentStepCountByShipmentType
     * getShipmentStepCountByShipmentType
     */
    async getShipmentStepCountByShipmentTypeUsingGET(requestParameters: ShipmentApiGetShipmentStepCountByShipmentTypeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfDashboardResponse> {
        const response = await this.getShipmentStepCountByShipmentTypeUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipment
     * getShipment
     */


    async getShipmentUsingGETRaw(requestParameters: ShipmentApiGetShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipmentUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipment
     * getShipment
     */
    async getShipmentUsingGET(requestParameters: ShipmentApiGetShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.getShipmentUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipments
     * getShipments
     */


    async getShipmentsUsingGETRaw(requestParameters: ShipmentApiGetShipmentsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfShipment>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getShipmentsUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.bypassSearchIndex !== undefined) {
            queryParameters['bypassSearchIndex'] = requestParameters.bypassSearchIndex;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.isLate !== undefined) {
            queryParameters['isLate'] = requestParameters.isLate;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.quickSearch !== undefined) {
            queryParameters['quickSearch'] = requestParameters.quickSearch;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.workflowTaskName !== undefined) {
            queryParameters['workflowTaskName'] = requestParameters.workflowTaskName;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipments
     * getShipments
     */
    async getShipmentsUsingGET(requestParameters: ShipmentApiGetShipmentsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfShipment> {
        const response = await this.getShipmentsUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getTasks
     * getTasks
     */


    async getTasksUsingGETRaw(requestParameters: ShipmentApiGetTasksUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfTask>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getTasksUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getTasksUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getTasks
     * getTasks
     */
    async getTasksUsingGET(requestParameters: ShipmentApiGetTasksUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfTask> {
        const response = await this.getTasksUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * itemsReadyForPrep
     * itemsReadyForPrep
     */


    async itemsReadyForPrepUsingPOSTRaw(requestParameters: ShipmentApiItemsReadyForPrepUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling itemsReadyForPrepUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling itemsReadyForPrepUsingPOST.');
        }

        if (requestParameters.readyForPrepItemsRequestDto === null || requestParameters.readyForPrepItemsRequestDto === undefined) {
            throw new runtime.RequiredError('readyForPrepItemsRequestDto','Required parameter requestParameters.readyForPrepItemsRequestDto was null or undefined when calling itemsReadyForPrepUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/itemsReadyForPrep`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.readyForPrepItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * itemsReadyForPrep
     * itemsReadyForPrep
     */
    async itemsReadyForPrepUsingPOST(requestParameters: ShipmentApiItemsReadyForPrepUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.itemsReadyForPrepUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * newShipment
     * newShipment
     */


    async newShipmentUsingPOSTRaw(requestParameters: ShipmentApiNewShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling newShipmentUsingPOST.');
        }

        if (requestParameters.newShipment === null || requestParameters.newShipment === undefined) {
            throw new runtime.RequiredError('newShipment','Required parameter requestParameters.newShipment was null or undefined when calling newShipmentUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newShipment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * newShipment
     * newShipment
     */
    async newShipmentUsingPOST(requestParameters: ShipmentApiNewShipmentUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.newShipmentUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * newShipments
     * newShipments
     */


    async newShipmentsUsingPOSTRaw(requestParameters: ShipmentApiNewShipmentsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling newShipmentsUsingPOST.');
        }

        if (requestParameters.newShipments === null || requestParameters.newShipments === undefined) {
            throw new runtime.RequiredError('newShipments','Required parameter requestParameters.newShipments was null or undefined when calling newShipmentsUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newShipments,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * newShipments
     * newShipments
     */
    async newShipmentsUsingPOST(requestParameters: ShipmentApiNewShipmentsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment> {
        const response = await this.newShipmentsUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * pickupItems
     * pickupItems
     */


    async pickupItemsUsingPOSTRaw(requestParameters: ShipmentApiPickupItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling pickupItemsUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling pickupItemsUsingPOST.');
        }

        if (requestParameters.pickupItemsRequestDto === null || requestParameters.pickupItemsRequestDto === undefined) {
            throw new runtime.RequiredError('pickupItemsRequestDto','Required parameter requestParameters.pickupItemsRequestDto was null or undefined when calling pickupItemsUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/pickedUpItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.pickupItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * pickupItems
     * pickupItems
     */
    async pickupItemsUsingPOST(requestParameters: ShipmentApiPickupItemsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.pickupItemsUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reassignItems
     * reassignItems
     */


    async reassignItemsUsingPUTRaw(requestParameters: ShipmentApiReassignItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling reassignItemsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling reassignItemsUsingPUT.');
        }

        if (requestParameters.reassignItemsRequestDto === null || requestParameters.reassignItemsRequestDto === undefined) {
            throw new runtime.RequiredError('reassignItemsRequestDto','Required parameter requestParameters.reassignItemsRequestDto was null or undefined when calling reassignItemsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/reassignedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reassignItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * reassignItems
     * reassignItems
     */
    async reassignItemsUsingPUT(requestParameters: ShipmentApiReassignItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.reassignItemsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reassignShipment
     * reassignShipment
     */


    async reassignShipmentUsingPUTRaw(requestParameters: ShipmentApiReassignShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling reassignShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling reassignShipmentUsingPUT.');
        }

        if (requestParameters.reassignShipmentRequestDto === null || requestParameters.reassignShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('reassignShipmentRequestDto','Required parameter requestParameters.reassignShipmentRequestDto was null or undefined when calling reassignShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/reassigned`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reassignShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * reassignShipment
     * reassignShipment
     */
    async reassignShipmentUsingPUT(requestParameters: ShipmentApiReassignShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.reassignShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * receiveTransfer
     * receiveTransfer
     */


    async receiveTransferUsingPUTRaw(requestParameters: ShipmentApiReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling receiveTransferUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling receiveTransferUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/received`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * receiveTransfer
     * receiveTransfer
     */
    async receiveTransferUsingPUT(requestParameters: ShipmentApiReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.receiveTransferUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * refreshShipment
     * refreshShipment
     */


    async refreshShipmentUsingPUTRaw(requestParameters: ShipmentApiRefreshShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling refreshShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling refreshShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.shouldLog !== undefined) {
            queryParameters['shouldLog'] = requestParameters.shouldLog;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/refresh`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * refreshShipment
     * refreshShipment
     */
    async refreshShipmentUsingPUT(requestParameters: ShipmentApiRefreshShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.refreshShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * rejectItems
     * rejectItems
     */


    async rejectItemsUsingPUTRaw(requestParameters: ShipmentApiRejectItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling rejectItemsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling rejectItemsUsingPUT.');
        }

        if (requestParameters.rejectItemsRequestDto === null || requestParameters.rejectItemsRequestDto === undefined) {
            throw new runtime.RequiredError('rejectItemsRequestDto','Required parameter requestParameters.rejectItemsRequestDto was null or undefined when calling rejectItemsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/rejectedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * rejectItems
     * rejectItems
     */
    async rejectItemsUsingPUT(requestParameters: ShipmentApiRejectItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.rejectItemsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * rejectShipment
     * rejectShipment
     */


    async rejectShipmentUsingPUTRaw(requestParameters: ShipmentApiRejectShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling rejectShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling rejectShipmentUsingPUT.');
        }

        if (requestParameters.rejectShipmentRequestDto === null || requestParameters.rejectShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('rejectShipmentRequestDto','Required parameter requestParameters.rejectShipmentRequestDto was null or undefined when calling rejectShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/rejected`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * rejectShipment
     * rejectShipment
     */
    async rejectShipmentUsingPUT(requestParameters: ShipmentApiRejectShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.rejectShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderOrderSummary
     * renderOrderSummary
     */


    async renderOrderSummaryUsingGET1Raw(requestParameters: ShipmentApiRenderOrderSummaryUsingGET1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling renderOrderSummaryUsingGET1.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling renderOrderSummaryUsingGET1.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/order-summary/html`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderOrderSummary
     * renderOrderSummary
     */
    async renderOrderSummaryUsingGET1(requestParameters: ShipmentApiRenderOrderSummaryUsingGET1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderOrderSummaryUsingGET1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderPackingSlip
     * renderPackingSlip
     */


    async renderPackingSlipUsingGETRaw(requestParameters: ShipmentApiRenderPackingSlipUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling renderPackingSlipUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling renderPackingSlipUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/rendition/html`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderPackingSlip
     * renderPackingSlip
     */
    async renderPackingSlipUsingGET(requestParameters: ShipmentApiRenderPackingSlipUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderPackingSlipUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replaceShipment
     * replaceShipment
     */


    async replaceShipmentUsingPUTRaw(requestParameters: ShipmentApiReplaceShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling replaceShipmentUsingPUT.');
        }

        if (requestParameters.newShipment === null || requestParameters.newShipment === undefined) {
            throw new runtime.RequiredError('newShipment','Required parameter requestParameters.newShipment was null or undefined when calling replaceShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateFields) {
            queryParameters['updateFields'] = requestParameters.updateFields;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newShipment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * replaceShipment
     * replaceShipment
     */
    async replaceShipmentUsingPUT(requestParameters: ShipmentApiReplaceShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.replaceShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * resendItemEmail
     * resendItemEmail
     */


    async resendItemEmailUsingPUTRaw(requestParameters: ShipmentApiResendItemEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling resendItemEmailUsingPUT.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling resendItemEmailUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling resendItemEmailUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/email/resend`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resendItemEmail
     * resendItemEmail
     */
    async resendItemEmailUsingPUT(requestParameters: ShipmentApiResendItemEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendItemEmailUsingPUTRaw(requestParameters, initOverrides);
    }

    /**
     * resendShipmentEmail
     * resendShipmentEmail
     */


    async resendShipmentEmailUsingPUTRaw(requestParameters: ShipmentApiResendShipmentEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling resendShipmentEmailUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling resendShipmentEmailUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/email/resend`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resendShipmentEmail
     * resendShipmentEmail
     */
    async resendShipmentEmailUsingPUT(requestParameters: ShipmentApiResendShipmentEmailUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendShipmentEmailUsingPUTRaw(requestParameters, initOverrides);
    }

    /**
     * retryFulfillingShipment
     * retryFulfillingShipment
     */


    async retryFulfillingShipmentUsingPUTRaw(requestParameters: ShipmentApiRetryFulfillingShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling retryFulfillingShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling retryFulfillingShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/retried`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * retryFulfillingShipment
     * retryFulfillingShipment
     */
    async retryFulfillingShipmentUsingPUT(requestParameters: ShipmentApiRetryFulfillingShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.retryFulfillingShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * revert
     * revert
     */


    async revertUsingPUTRaw(requestParameters: ShipmentApiRevertUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling revertUsingPUT.');
        }

        if (requestParameters.taskName === null || requestParameters.taskName === undefined) {
            throw new runtime.RequiredError('taskName','Required parameter requestParameters.taskName was null or undefined when calling revertUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling revertUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks/{taskName}/reverted`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"taskName"}}`, encodeURIComponent(String(requestParameters.taskName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * revert
     * revert
     */
    async revertUsingPUT(requestParameters: ShipmentApiRevertUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.revertUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * searchAndReceiveTransfer
     * searchAndReceiveTransfer
     */


    async searchAndReceiveTransferUsingPUTRaw(requestParameters: ShipmentApiSearchAndReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling searchAndReceiveTransferUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling searchAndReceiveTransferUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/received/{search}`.replace(`{${"search"}}`, encodeURIComponent(String(requestParameters.search))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * searchAndReceiveTransfer
     * searchAndReceiveTransfer
     */
    async searchAndReceiveTransferUsingPUT(requestParameters: ShipmentApiSearchAndReceiveTransferUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.searchAndReceiveTransferUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * searchReceivableShipment
     * searchReceivableShipment
     */


    async searchReceivableShipmentUsingGETRaw(requestParameters: ShipmentApiSearchReceivableShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling searchReceivableShipmentUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling searchReceivableShipmentUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/receivable/{search}`.replace(`{${"search"}}`, encodeURIComponent(String(requestParameters.search))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * searchReceivableShipment
     * searchReceivableShipment
     */
    async searchReceivableShipmentUsingGET(requestParameters: ShipmentApiSearchReceivableShipmentUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.searchReceivableShipmentUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * skipTask
     * skipTask
     */


    async skipTaskUsingPUTRaw(requestParameters: ShipmentApiSkipTaskUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling skipTaskUsingPUT.');
        }

        if (requestParameters.taskName === null || requestParameters.taskName === undefined) {
            throw new runtime.RequiredError('taskName','Required parameter requestParameters.taskName was null or undefined when calling skipTaskUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling skipTaskUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks/{taskName}/skipped`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"taskName"}}`, encodeURIComponent(String(requestParameters.taskName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * skipTask
     * skipTask
     */
    async skipTaskUsingPUT(requestParameters: ShipmentApiSkipTaskUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.skipTaskUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * transferItems
     * transferItems
     */


    async transferItemsUsingPUTRaw(requestParameters: ShipmentApiTransferItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling transferItemsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling transferItemsUsingPUT.');
        }

        if (requestParameters.transferItemsRequestDto === null || requestParameters.transferItemsRequestDto === undefined) {
            throw new runtime.RequiredError('transferItemsRequestDto','Required parameter requestParameters.transferItemsRequestDto was null or undefined when calling transferItemsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/transferredItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transferItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * transferItems
     * transferItems
     */
    async transferItemsUsingPUT(requestParameters: ShipmentApiTransferItemsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.transferItemsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * transferShipment
     * transferShipment
     */


    async transferShipmentUsingPUTRaw(requestParameters: ShipmentApiTransferShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling transferShipmentUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling transferShipmentUsingPUT.');
        }

        if (requestParameters.transferShipmentRequestDto === null || requestParameters.transferShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('transferShipmentRequestDto','Required parameter requestParameters.transferShipmentRequestDto was null or undefined when calling transferShipmentUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/transferred`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transferShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * transferShipment
     * transferShipment
     */
    async transferShipmentUsingPUT(requestParameters: ShipmentApiTransferShipmentUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.transferShipmentUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateFulfillmentFields
     * updateFulfillmentFields
     */


    async updateFulfillmentFieldsUsingPUTRaw(requestParameters: ShipmentApiUpdateFulfillmentFieldsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateFulfillmentFieldsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateFulfillmentFieldsUsingPUT.');
        }

        if (requestParameters.items === null || requestParameters.items === undefined) {
            throw new runtime.RequiredError('items','Required parameter requestParameters.items was null or undefined when calling updateFulfillmentFieldsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/fulfillmentFields`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.items,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateFulfillmentFields
     * updateFulfillmentFields
     */
    async updateFulfillmentFieldsUsingPUT(requestParameters: ShipmentApiUpdateFulfillmentFieldsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.updateFulfillmentFieldsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateGiftCardInfo
     * updateGiftCardInfo
     */


    async updateGiftCardInfoUsingPUTRaw(requestParameters: ShipmentApiUpdateGiftCardInfoUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateGiftCardInfoUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateGiftCardInfoUsingPUT.');
        }

        if (requestParameters.giftCardInfoRequestDto === null || requestParameters.giftCardInfoRequestDto === undefined) {
            throw new runtime.RequiredError('giftCardInfoRequestDto','Required parameter requestParameters.giftCardInfoRequestDto was null or undefined when calling updateGiftCardInfoUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/giftCardInfo`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.giftCardInfoRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateGiftCardInfo
     * updateGiftCardInfo
     */
    async updateGiftCardInfoUsingPUT(requestParameters: ShipmentApiUpdateGiftCardInfoUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.updateGiftCardInfoUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * workflowDefinitionImage
     * workflowDefinitionImage
     */


    async workflowDefinitionImageUsingGETRaw(requestParameters: ShipmentApiWorkflowDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling workflowDefinitionImageUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling workflowDefinitionImageUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/workflow-definition-image`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * workflowDefinitionImage
     * workflowDefinitionImage
     */
    async workflowDefinitionImageUsingGET(requestParameters: ShipmentApiWorkflowDefinitionImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.workflowDefinitionImageUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * workflowInstanceImage
     * workflowInstanceImage
     */


    async workflowInstanceImageUsingGETRaw(requestParameters: ShipmentApiWorkflowInstanceImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling workflowInstanceImageUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling workflowInstanceImageUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/workflow-instance-image`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * workflowInstanceImage
     * workflowInstanceImage
     */
    async workflowInstanceImageUsingGET(requestParameters: ShipmentApiWorkflowInstanceImageUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.workflowInstanceImageUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
