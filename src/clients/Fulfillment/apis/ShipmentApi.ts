/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  BackorderItemsRequest,
  BackorderItemsUpdateRequest,
  BackorderShipmentRequest,
  CancelItemsRequest,
  CancelShipment,
  CollectionModelOfEntityModelOfShipment,
  CollectionModelOfLocationSummary,
  CollectionModelOfShipment,
  CollectionModelOfTask,
  EntityModelOfDashboardResponse,
  EntityModelOfRenderedContent,
  EntityModelOfShipment,
  FulfillmentAPIProductionProfileDestination,
  FulfillmentAPIProductionProfileItem,
  FulfillmentAPIProductionProfileShipment,
  GiftCardInfoRequest,
  PagedModelOfEntityModelOfShipment,
  PickupItemsRequest,
  ReadyForPrepItemsRequest,
  ReassignItemsRequest,
  ReassignShipment,
  RejectItemsRequest,
  RejectShipment,
  TaskComplete,
  TransferItemsRequest,
  TransferShipment,
} from '../models';


export namespace shipmentApiParams { 
    export interface BackorderItemsOperationRequest {
        shipmentNumber: number;
        backorderItemsRequestDto: BackorderItemsRequest;
        ifMatch?: string;
    }
    export interface BackorderItemsUpdateOperationRequest {
        shipmentNumber: number;
        backorderItemsUpdateRequestDto: BackorderItemsUpdateRequest;
        ifMatch?: string;
    }
    export interface BackorderShipmentOperationRequest {
        shipmentNumber: number;
        backorderShipmentRequestDto: BackorderShipmentRequest;
        ifMatch?: string;
    }
    export interface CancelItemsOperationRequest {
        shipmentNumber: number;
        cancelItemsRequestDto: CancelItemsRequest;
        ifMatch?: string;
    }
    export interface CancelShipmentRequest {
        shipmentNumber: number;
        cancelShipmentRequestDto: CancelShipment;
        ifMatch?: string;
    }
    export interface CancelShipmentsRequest {
        orderId: string;
        cancelShipmentRequestDto: CancelShipment;
    }
    export interface CustomerAtCurbsideRequest {
        shipmentNumber: number;
        pickupInfo: { [key: string]: object; };
        ifMatch?: string;
    }
    export interface CustomerAtStoreRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface CustomerCareItemsRequest {
        shipmentNumber: number;
        rejectItemsRequestDto: RejectItemsRequest;
        ifMatch?: string;
    }
    export interface CustomerCareShipmentRequest {
        shipmentNumber: number;
        rejectShipmentRequestDto: RejectShipment;
        ifMatch?: string;
    }
    export interface CustomerInTransitRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface DeleteShipmentRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface DeleteShipmentsOfOrderRequest {
        orderId: string;
    }
    export interface DestinationUpdateRequest {
        shipmentNumber: number;
        destinationDto: FulfillmentAPIProductionProfileDestination;
        ifMatch?: string;
    }
    export interface ExecuteRequest {
        shipmentNumber: number;
        taskName: string;
        taskCompleteDto: TaskComplete;
        ifMatch?: string;
    }
    export interface FulfillShipmentRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface GetLocationSummaryReportRequest {
        locationCodes: Array<string>;
        startDateTime: string;
        bypassSearchIndex?: boolean;
    }
    export interface GetShipmentRequest {
        shipmentNumber: number;
    }
    export interface GetShipmentStepCountByShipmentTypeRequest {
        shipmentType: string;
        assignedLocations?: Array<string>;
    }
    export interface GetShipmentsRequest {
        bypassSearchIndex?: boolean;
        filter?: string;
        isLate?: boolean;
        page?: number;
        pageSize?: number;
        quickSearch?: string;
        sort?: string;
        workflowTaskName?: string;
    }
    export interface GetTasksRequest {
        shipmentNumber: number;
    }
    export interface ItemsReadyForPrepRequest {
        shipmentNumber: number;
        readyForPrepItemsRequestDto: ReadyForPrepItemsRequest;
        ifMatch?: string;
    }
    export interface NewShipmentRequest {
        newShipment: FulfillmentAPIProductionProfileShipment;
    }
    export interface NewShipmentsRequest {
        newShipments: Array<FulfillmentAPIProductionProfileShipment>;
    }
    export interface PickupItemsOperationRequest {
        shipmentNumber: number;
        pickupItemsRequestDto: PickupItemsRequest;
        ifMatch?: string;
    }
    export interface ReassignItemsOperationRequest {
        shipmentNumber: number;
        reassignItemsRequestDto: ReassignItemsRequest;
        ifMatch?: string;
    }
    export interface ReassignShipmentRequest {
        shipmentNumber: number;
        reassignShipmentRequestDto: ReassignShipment;
        ifMatch?: string;
    }
    export interface ReceiveTransferRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface RefreshShipmentRequest {
        shipmentNumber: number;
        ifMatch?: string;
        shouldLog?: boolean;
    }
    export interface RejectItemsOperationRequest {
        shipmentNumber: number;
        rejectItemsRequestDto: RejectItemsRequest;
        ifMatch?: string;
    }
    export interface RejectShipmentRequest {
        shipmentNumber: number;
        rejectShipmentRequestDto: RejectShipment;
        ifMatch?: string;
    }
    export interface RenderOrderSummary1Request {
        shipmentNumber: number;
    }
    export interface RenderPackingSlipRequest {
        shipmentNumber: number;
    }
    export interface ReplaceShipmentRequest {
        shipmentNumber: number;
        newShipment: FulfillmentAPIProductionProfileShipment;
        ifMatch?: string;
        updateFields?: Array<string>;
    }
    export interface ResendItemEmailRequest {
        lineId: number;
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface ResendShipmentEmailRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface RetryFulfillingShipmentRequest {
        shipmentNumber: number;
        ifMatch?: string;
    }
    export interface RevertRequest {
        shipmentNumber: number;
        taskName: string;
        ifMatch?: string;
    }
    export interface SearchAndReceiveTransferRequest {
        search: string;
        ifMatch?: string;
    }
    export interface SearchReceivableShipmentRequest {
        search: string;
    }
    export interface SkipTaskRequest {
        shipmentNumber: number;
        taskName: string;
        ifMatch?: string;
    }
    export interface TransferItemsOperationRequest {
        shipmentNumber: number;
        transferItemsRequestDto: TransferItemsRequest;
        ifMatch?: string;
    }
    export interface TransferShipmentRequest {
        shipmentNumber: number;
        transferShipmentRequestDto: TransferShipment;
        ifMatch?: string;
    }
    export interface UpdateFulfillmentFieldsRequest {
        shipmentNumber: number;
        items: Array<FulfillmentAPIProductionProfileItem>;
        ifMatch?: string;
    }
    export interface UpdateGiftCardInfoRequest {
        shipmentNumber: number;
        giftCardInfoRequestDto: GiftCardInfoRequest;
        ifMatch?: string;
    }
    export interface WorkflowDefinitionImageRequest {
        shipmentNumber: number;
    }
    export interface WorkflowInstanceImageRequest {
        shipmentNumber: number;
    }
}
/**
* ShipmentApiService - interface
* 
* @export
* @interface ShipmentApi
*/
export interface ShipmentApiService {
    /**
    * backorderItems
    * @summary backorderItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {BackorderItemsRequest} backorderItemsRequestDto backorderItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    backorderItemsRaw(requestParameters: shipmentApiParams.BackorderItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * backorderItems
    * backorderItems
    */
    backorderItems(requestParameters: shipmentApiParams.BackorderItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * backorderItemsUpdate
    * @summary backorderItemsUpdate
    * @param {number} shipmentNumber shipmentNumber
    * @param {BackorderItemsUpdateRequest} backorderItemsUpdateRequestDto backorderItemsUpdateRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    backorderItemsUpdateRaw(requestParameters: shipmentApiParams.BackorderItemsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * backorderItemsUpdate
    * backorderItemsUpdate
    */
    backorderItemsUpdate(requestParameters: shipmentApiParams.BackorderItemsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * backorderShipment
    * @summary backorderShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {BackorderShipmentRequest} backorderShipmentRequestDto backorderShipmentRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    backorderShipmentRaw(requestParameters: shipmentApiParams.BackorderShipmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * backorderShipment
    * backorderShipment
    */
    backorderShipment(requestParameters: shipmentApiParams.BackorderShipmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * cancelItems
    * @summary cancelItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {CancelItemsRequest} cancelItemsRequestDto cancelItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    cancelItemsRaw(requestParameters: shipmentApiParams.CancelItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * cancelItems
    * cancelItems
    */
    cancelItems(requestParameters: shipmentApiParams.CancelItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * cancelShipment
    * @summary cancelShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {CancelShipment} cancelShipmentRequestDto cancelShipmentRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    cancelShipmentRaw(requestParameters: shipmentApiParams.CancelShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * cancelShipment
    * cancelShipment
    */
    cancelShipment(requestParameters: shipmentApiParams.CancelShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * cancelShipments
    * @summary cancelShipments
    * @param {string} orderId orderId
    * @param {CancelShipment} cancelShipmentRequestDto cancelShipmentRequestDto
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    cancelShipmentsRaw(requestParameters: shipmentApiParams.CancelShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>>;

    /**
    * cancelShipments
    * cancelShipments
    */
    cancelShipments(requestParameters: shipmentApiParams.CancelShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment>;

    /**
    * customerAtCurbside
    * @summary customerAtCurbside
    * @param {number} shipmentNumber shipmentNumber
    * @param {{ [key: string]: object; }} pickupInfo pickupInfo
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    customerAtCurbsideRaw(requestParameters: shipmentApiParams.CustomerAtCurbsideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * customerAtCurbside
    * customerAtCurbside
    */
    customerAtCurbside(requestParameters: shipmentApiParams.CustomerAtCurbsideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * customerAtStore
    * @summary customerAtStore
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    customerAtStoreRaw(requestParameters: shipmentApiParams.CustomerAtStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * customerAtStore
    * customerAtStore
    */
    customerAtStore(requestParameters: shipmentApiParams.CustomerAtStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * customerCareItems
    * @summary customerCareItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {RejectItemsRequest} rejectItemsRequestDto rejectItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    customerCareItemsRaw(requestParameters: shipmentApiParams.CustomerCareItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * customerCareItems
    * customerCareItems
    */
    customerCareItems(requestParameters: shipmentApiParams.CustomerCareItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * customerCareShipment
    * @summary customerCareShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {RejectShipment} rejectShipmentRequestDto rejectShipmentRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    customerCareShipmentRaw(requestParameters: shipmentApiParams.CustomerCareShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * customerCareShipment
    * customerCareShipment
    */
    customerCareShipment(requestParameters: shipmentApiParams.CustomerCareShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * customerInTransit
    * @summary customerInTransit
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    customerInTransitRaw(requestParameters: shipmentApiParams.CustomerInTransitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * customerInTransit
    * customerInTransit
    */
    customerInTransit(requestParameters: shipmentApiParams.CustomerInTransitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * deleteShipment
    * @summary deleteShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    deleteShipmentRaw(requestParameters: shipmentApiParams.DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteShipment
    * deleteShipment
    */
    deleteShipment(requestParameters: shipmentApiParams.DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * deleteShipmentsOfOrder
    * @summary deleteShipmentsOfOrder
    * @param {string} orderId orderId
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    deleteShipmentsOfOrderRaw(requestParameters: shipmentApiParams.DeleteShipmentsOfOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteShipmentsOfOrder
    * deleteShipmentsOfOrder
    */
    deleteShipmentsOfOrder(requestParameters: shipmentApiParams.DeleteShipmentsOfOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * destinationUpdate
    * @summary destinationUpdate
    * @param {number} shipmentNumber shipmentNumber
    * @param {FulfillmentAPIProductionProfileDestination} destinationDto destinationDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    destinationUpdateRaw(requestParameters: shipmentApiParams.DestinationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * destinationUpdate
    * destinationUpdate
    */
    destinationUpdate(requestParameters: shipmentApiParams.DestinationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * execute
    * @summary execute
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} taskName taskName
    * @param {TaskComplete} taskCompleteDto taskCompleteDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    executeRaw(requestParameters: shipmentApiParams.ExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * execute
    * execute
    */
    execute(requestParameters: shipmentApiParams.ExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * fulfillShipment
    * @summary fulfillShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    fulfillShipmentRaw(requestParameters: shipmentApiParams.FulfillShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * fulfillShipment
    * fulfillShipment
    */
    fulfillShipment(requestParameters: shipmentApiParams.FulfillShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * getLocationSummaryReport
    * @summary getLocationSummaryReport
    * @param {Array<string>} locationCodes locationCodes
    * @param {string} startDateTime startDateTime
    * @param {boolean} [bypassSearchIndex] bypassSearchIndex
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    getLocationSummaryReportRaw(requestParameters: shipmentApiParams.GetLocationSummaryReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfLocationSummary>>;

    /**
    * getLocationSummaryReport
    * getLocationSummaryReport
    */
    getLocationSummaryReport(requestParameters: shipmentApiParams.GetLocationSummaryReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfLocationSummary>;

    /**
    * getShipment
    * @summary getShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    getShipmentRaw(requestParameters: shipmentApiParams.GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * getShipment
    * getShipment
    */
    getShipment(requestParameters: shipmentApiParams.GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * getShipmentStepCountByShipmentType
    * @summary getShipmentStepCountByShipmentType
    * @param {string} shipmentType shipmentType
    * @param {Array<string>} [assignedLocations] assignedLocations
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    getShipmentStepCountByShipmentTypeRaw(requestParameters: shipmentApiParams.GetShipmentStepCountByShipmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfDashboardResponse>>;

    /**
    * getShipmentStepCountByShipmentType
    * getShipmentStepCountByShipmentType
    */
    getShipmentStepCountByShipmentType(requestParameters: shipmentApiParams.GetShipmentStepCountByShipmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfDashboardResponse>;

    /**
    * getShipments
    * @summary getShipments
    * @param {boolean} [bypassSearchIndex] 
    * @param {string} [filter] 
    * @param {boolean} [isLate] 
    * @param {number} [page] 
    * @param {number} [pageSize] 
    * @param {string} [quickSearch] 
    * @param {string} [sort] 
    * @param {string} [workflowTaskName] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    getShipmentsRaw(requestParameters: shipmentApiParams.GetShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfShipment>>;

    /**
    * getShipments
    * getShipments
    */
    getShipments(requestParameters: shipmentApiParams.GetShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfShipment>;

    /**
    * getTasks
    * @summary getTasks
    * @param {number} shipmentNumber shipmentNumber
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    getTasksRaw(requestParameters: shipmentApiParams.GetTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfTask>>;

    /**
    * getTasks
    * getTasks
    */
    getTasks(requestParameters: shipmentApiParams.GetTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfTask>;

    /**
    * itemsReadyForPrep
    * @summary itemsReadyForPrep
    * @param {number} shipmentNumber shipmentNumber
    * @param {ReadyForPrepItemsRequest} readyForPrepItemsRequestDto readyForPrepItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    itemsReadyForPrepRaw(requestParameters: shipmentApiParams.ItemsReadyForPrepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * itemsReadyForPrep
    * itemsReadyForPrep
    */
    itemsReadyForPrep(requestParameters: shipmentApiParams.ItemsReadyForPrepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * newShipment
    * @summary newShipment
    * @param {FulfillmentAPIProductionProfileShipment} newShipment newShipment
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    newShipmentRaw(requestParameters: shipmentApiParams.NewShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * newShipment
    * newShipment
    */
    newShipment(requestParameters: shipmentApiParams.NewShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * newShipments
    * @summary newShipments
    * @param {Array<FulfillmentAPIProductionProfileShipment>} newShipments newShipments
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    newShipmentsRaw(requestParameters: shipmentApiParams.NewShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>>;

    /**
    * newShipments
    * newShipments
    */
    newShipments(requestParameters: shipmentApiParams.NewShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment>;

    /**
    * pickupItems
    * @summary pickupItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {PickupItemsRequest} pickupItemsRequestDto pickupItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    pickupItemsRaw(requestParameters: shipmentApiParams.PickupItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * pickupItems
    * pickupItems
    */
    pickupItems(requestParameters: shipmentApiParams.PickupItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * reassignItems
    * @summary reassignItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {ReassignItemsRequest} reassignItemsRequestDto reassignItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    reassignItemsRaw(requestParameters: shipmentApiParams.ReassignItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * reassignItems
    * reassignItems
    */
    reassignItems(requestParameters: shipmentApiParams.ReassignItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * reassignShipment
    * @summary reassignShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {ReassignShipment} reassignShipmentRequestDto reassignShipmentRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    reassignShipmentRaw(requestParameters: shipmentApiParams.ReassignShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * reassignShipment
    * reassignShipment
    */
    reassignShipment(requestParameters: shipmentApiParams.ReassignShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * receiveTransfer
    * @summary receiveTransfer
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    receiveTransferRaw(requestParameters: shipmentApiParams.ReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * receiveTransfer
    * receiveTransfer
    */
    receiveTransfer(requestParameters: shipmentApiParams.ReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * refreshShipment
    * @summary refreshShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {boolean} [shouldLog] shouldLog
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    refreshShipmentRaw(requestParameters: shipmentApiParams.RefreshShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * refreshShipment
    * refreshShipment
    */
    refreshShipment(requestParameters: shipmentApiParams.RefreshShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * rejectItems
    * @summary rejectItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {RejectItemsRequest} rejectItemsRequestDto rejectItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    rejectItemsRaw(requestParameters: shipmentApiParams.RejectItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * rejectItems
    * rejectItems
    */
    rejectItems(requestParameters: shipmentApiParams.RejectItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * rejectShipment
    * @summary rejectShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {RejectShipment} rejectShipmentRequestDto rejectShipmentRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    rejectShipmentRaw(requestParameters: shipmentApiParams.RejectShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * rejectShipment
    * rejectShipment
    */
    rejectShipment(requestParameters: shipmentApiParams.RejectShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * renderOrderSummary
    * @summary renderOrderSummary
    * @param {number} shipmentNumber shipmentNumber
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    renderOrderSummary1Raw(requestParameters: shipmentApiParams.RenderOrderSummary1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
    * renderOrderSummary
    * renderOrderSummary
    */
    renderOrderSummary1(requestParameters: shipmentApiParams.RenderOrderSummary1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

    /**
    * renderPackingSlip
    * @summary renderPackingSlip
    * @param {number} shipmentNumber shipmentNumber
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    renderPackingSlipRaw(requestParameters: shipmentApiParams.RenderPackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>>;

    /**
    * renderPackingSlip
    * renderPackingSlip
    */
    renderPackingSlip(requestParameters: shipmentApiParams.RenderPackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent>;

    /**
    * replaceShipment
    * @summary replaceShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {FulfillmentAPIProductionProfileShipment} newShipment newShipment
    * @param {string} [ifMatch] If-Match
    * @param {Array<string>} [updateFields] updateFields
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    replaceShipmentRaw(requestParameters: shipmentApiParams.ReplaceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * replaceShipment
    * replaceShipment
    */
    replaceShipment(requestParameters: shipmentApiParams.ReplaceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * resendItemEmail
    * @summary resendItemEmail
    * @param {number} lineId lineId
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    resendItemEmailRaw(requestParameters: shipmentApiParams.ResendItemEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * resendItemEmail
    * resendItemEmail
    */
    resendItemEmail(requestParameters: shipmentApiParams.ResendItemEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * resendShipmentEmail
    * @summary resendShipmentEmail
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    resendShipmentEmailRaw(requestParameters: shipmentApiParams.ResendShipmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * resendShipmentEmail
    * resendShipmentEmail
    */
    resendShipmentEmail(requestParameters: shipmentApiParams.ResendShipmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * retryFulfillingShipment
    * @summary retryFulfillingShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    retryFulfillingShipmentRaw(requestParameters: shipmentApiParams.RetryFulfillingShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * retryFulfillingShipment
    * retryFulfillingShipment
    */
    retryFulfillingShipment(requestParameters: shipmentApiParams.RetryFulfillingShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * revert
    * @summary revert
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} taskName taskName
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    revertRaw(requestParameters: shipmentApiParams.RevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * revert
    * revert
    */
    revert(requestParameters: shipmentApiParams.RevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * searchAndReceiveTransfer
    * @summary searchAndReceiveTransfer
    * @param {string} search search
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    searchAndReceiveTransferRaw(requestParameters: shipmentApiParams.SearchAndReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * searchAndReceiveTransfer
    * searchAndReceiveTransfer
    */
    searchAndReceiveTransfer(requestParameters: shipmentApiParams.SearchAndReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * searchReceivableShipment
    * @summary searchReceivableShipment
    * @param {string} search search
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    searchReceivableShipmentRaw(requestParameters: shipmentApiParams.SearchReceivableShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * searchReceivableShipment
    * searchReceivableShipment
    */
    searchReceivableShipment(requestParameters: shipmentApiParams.SearchReceivableShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * skipTask
    * @summary skipTask
    * @param {number} shipmentNumber shipmentNumber
    * @param {string} taskName taskName
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    skipTaskRaw(requestParameters: shipmentApiParams.SkipTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * skipTask
    * skipTask
    */
    skipTask(requestParameters: shipmentApiParams.SkipTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * transferItems
    * @summary transferItems
    * @param {number} shipmentNumber shipmentNumber
    * @param {TransferItemsRequest} transferItemsRequestDto transferItemsRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    transferItemsRaw(requestParameters: shipmentApiParams.TransferItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * transferItems
    * transferItems
    */
    transferItems(requestParameters: shipmentApiParams.TransferItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * transferShipment
    * @summary transferShipment
    * @param {number} shipmentNumber shipmentNumber
    * @param {TransferShipment} transferShipmentRequestDto transferShipmentRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    transferShipmentRaw(requestParameters: shipmentApiParams.TransferShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * transferShipment
    * transferShipment
    */
    transferShipment(requestParameters: shipmentApiParams.TransferShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * updateFulfillmentFields
    * @summary updateFulfillmentFields
    * @param {number} shipmentNumber shipmentNumber
    * @param {Array<FulfillmentAPIProductionProfileItem>} items items
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    updateFulfillmentFieldsRaw(requestParameters: shipmentApiParams.UpdateFulfillmentFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * updateFulfillmentFields
    * updateFulfillmentFields
    */
    updateFulfillmentFields(requestParameters: shipmentApiParams.UpdateFulfillmentFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * updateGiftCardInfo
    * @summary updateGiftCardInfo
    * @param {number} shipmentNumber shipmentNumber
    * @param {GiftCardInfoRequest} giftCardInfoRequestDto giftCardInfoRequestDto
    * @param {string} [ifMatch] If-Match
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    updateGiftCardInfoRaw(requestParameters: shipmentApiParams.UpdateGiftCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>>;

    /**
    * updateGiftCardInfo
    * updateGiftCardInfo
    */
    updateGiftCardInfo(requestParameters: shipmentApiParams.UpdateGiftCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment>;

    /**
    * workflowDefinitionImage
    * @summary workflowDefinitionImage
    * @param {number} shipmentNumber shipmentNumber
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    workflowDefinitionImageRaw(requestParameters: shipmentApiParams.WorkflowDefinitionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * workflowDefinitionImage
    * workflowDefinitionImage
    */
    workflowDefinitionImage(requestParameters: shipmentApiParams.WorkflowDefinitionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
    * workflowInstanceImage
    * @summary workflowInstanceImage
    * @param {number} shipmentNumber shipmentNumber
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShipmentApiInterface
    */
    workflowInstanceImageRaw(requestParameters: shipmentApiParams.WorkflowInstanceImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * workflowInstanceImage
    * workflowInstanceImage
    */
    workflowInstanceImage(requestParameters: shipmentApiParams.WorkflowInstanceImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}


/**
 * 
 */
export class ShipmentApi extends runtime.BaseAPI implements ShipmentApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * backorderItems
     * backorderItems
     */


    async backorderItemsRaw(requestParameters: shipmentApiParams.BackorderItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling backorderItems.');
        }

        if (requestParameters.backorderItemsRequestDto === null || requestParameters.backorderItemsRequestDto === undefined) {
            throw new runtime.RequiredError('backorderItemsRequestDto','Required parameter requestParameters.backorderItemsRequestDto was null or undefined when calling backorderItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/backorderedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.backorderItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * backorderItems
     * backorderItems
     */
    async backorderItems(requestParameters: shipmentApiParams.BackorderItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.backorderItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * backorderItemsUpdate
     * backorderItemsUpdate
     */


    async backorderItemsUpdateRaw(requestParameters: shipmentApiParams.BackorderItemsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling backorderItemsUpdate.');
        }

        if (requestParameters.backorderItemsUpdateRequestDto === null || requestParameters.backorderItemsUpdateRequestDto === undefined) {
            throw new runtime.RequiredError('backorderItemsUpdateRequestDto','Required parameter requestParameters.backorderItemsUpdateRequestDto was null or undefined when calling backorderItemsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/backorderedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.backorderItemsUpdateRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * backorderItemsUpdate
     * backorderItemsUpdate
     */
    async backorderItemsUpdate(requestParameters: shipmentApiParams.BackorderItemsUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.backorderItemsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * backorderShipment
     * backorderShipment
     */


    async backorderShipmentRaw(requestParameters: shipmentApiParams.BackorderShipmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling backorderShipment.');
        }

        if (requestParameters.backorderShipmentRequestDto === null || requestParameters.backorderShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('backorderShipmentRequestDto','Required parameter requestParameters.backorderShipmentRequestDto was null or undefined when calling backorderShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/backordered`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.backorderShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * backorderShipment
     * backorderShipment
     */
    async backorderShipment(requestParameters: shipmentApiParams.BackorderShipmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.backorderShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * cancelItems
     * cancelItems
     */


    async cancelItemsRaw(requestParameters: shipmentApiParams.CancelItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling cancelItems.');
        }

        if (requestParameters.cancelItemsRequestDto === null || requestParameters.cancelItemsRequestDto === undefined) {
            throw new runtime.RequiredError('cancelItemsRequestDto','Required parameter requestParameters.cancelItemsRequestDto was null or undefined when calling cancelItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/canceledItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cancelItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * cancelItems
     * cancelItems
     */
    async cancelItems(requestParameters: shipmentApiParams.CancelItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.cancelItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * cancelShipment
     * cancelShipment
     */


    async cancelShipmentRaw(requestParameters: shipmentApiParams.CancelShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling cancelShipment.');
        }

        if (requestParameters.cancelShipmentRequestDto === null || requestParameters.cancelShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('cancelShipmentRequestDto','Required parameter requestParameters.cancelShipmentRequestDto was null or undefined when calling cancelShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/canceled`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cancelShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * cancelShipment
     * cancelShipment
     */
    async cancelShipment(requestParameters: shipmentApiParams.CancelShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.cancelShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * cancelShipments
     * cancelShipments
     */


    async cancelShipmentsRaw(requestParameters: shipmentApiParams.CancelShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelShipments.');
        }

        if (requestParameters.cancelShipmentRequestDto === null || requestParameters.cancelShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('cancelShipmentRequestDto','Required parameter requestParameters.cancelShipmentRequestDto was null or undefined when calling cancelShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/order/{orderId}/canceled`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cancelShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * cancelShipments
     * cancelShipments
     */
    async cancelShipments(requestParameters: shipmentApiParams.CancelShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment> {
        const response = await this.cancelShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerAtCurbside
     * customerAtCurbside
     */


    async customerAtCurbsideRaw(requestParameters: shipmentApiParams.CustomerAtCurbsideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerAtCurbside.');
        }

        if (requestParameters.pickupInfo === null || requestParameters.pickupInfo === undefined) {
            throw new runtime.RequiredError('pickupInfo','Required parameter requestParameters.pickupInfo was null or undefined when calling customerAtCurbside.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerAtCurbside`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.pickupInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerAtCurbside
     * customerAtCurbside
     */
    async customerAtCurbside(requestParameters: shipmentApiParams.CustomerAtCurbsideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerAtCurbsideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerAtStore
     * customerAtStore
     */


    async customerAtStoreRaw(requestParameters: shipmentApiParams.CustomerAtStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerAtStore.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerAtStore`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerAtStore
     * customerAtStore
     */
    async customerAtStore(requestParameters: shipmentApiParams.CustomerAtStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerAtStoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerCareItems
     * customerCareItems
     */


    async customerCareItemsRaw(requestParameters: shipmentApiParams.CustomerCareItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerCareItems.');
        }

        if (requestParameters.rejectItemsRequestDto === null || requestParameters.rejectItemsRequestDto === undefined) {
            throw new runtime.RequiredError('rejectItemsRequestDto','Required parameter requestParameters.rejectItemsRequestDto was null or undefined when calling customerCareItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerCaredItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerCareItems
     * customerCareItems
     */
    async customerCareItems(requestParameters: shipmentApiParams.CustomerCareItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerCareItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerCareShipment
     * customerCareShipment
     */


    async customerCareShipmentRaw(requestParameters: shipmentApiParams.CustomerCareShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerCareShipment.');
        }

        if (requestParameters.rejectShipmentRequestDto === null || requestParameters.rejectShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('rejectShipmentRequestDto','Required parameter requestParameters.rejectShipmentRequestDto was null or undefined when calling customerCareShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerCared`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerCareShipment
     * customerCareShipment
     */
    async customerCareShipment(requestParameters: shipmentApiParams.CustomerCareShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerCareShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customerInTransit
     * customerInTransit
     */


    async customerInTransitRaw(requestParameters: shipmentApiParams.CustomerInTransitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling customerInTransit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/customerInTransit`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * customerInTransit
     * customerInTransit
     */
    async customerInTransit(requestParameters: shipmentApiParams.CustomerInTransitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.customerInTransitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deleteShipment
     * deleteShipment
     */


    async deleteShipmentRaw(requestParameters: shipmentApiParams.DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deleteShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipment
     * deleteShipment
     */
    async deleteShipment(requestParameters: shipmentApiParams.DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * deleteShipmentsOfOrder
     * deleteShipmentsOfOrder
     */


    async deleteShipmentsOfOrderRaw(requestParameters: shipmentApiParams.DeleteShipmentsOfOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteShipmentsOfOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteShipmentsOfOrder
     * deleteShipmentsOfOrder
     */
    async deleteShipmentsOfOrder(requestParameters: shipmentApiParams.DeleteShipmentsOfOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentsOfOrderRaw(requestParameters, initOverrides);
    }

    /**
     * destinationUpdate
     * destinationUpdate
     */


    async destinationUpdateRaw(requestParameters: shipmentApiParams.DestinationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling destinationUpdate.');
        }

        if (requestParameters.destinationDto === null || requestParameters.destinationDto === undefined) {
            throw new runtime.RequiredError('destinationDto','Required parameter requestParameters.destinationDto was null or undefined when calling destinationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/destination`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.destinationDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * destinationUpdate
     * destinationUpdate
     */
    async destinationUpdate(requestParameters: shipmentApiParams.DestinationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.destinationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * execute
     * execute
     */


    async executeRaw(requestParameters: shipmentApiParams.ExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling execute.');
        }

        if (requestParameters.taskName === null || requestParameters.taskName === undefined) {
            throw new runtime.RequiredError('taskName','Required parameter requestParameters.taskName was null or undefined when calling execute.');
        }

        if (requestParameters.taskCompleteDto === null || requestParameters.taskCompleteDto === undefined) {
            throw new runtime.RequiredError('taskCompleteDto','Required parameter requestParameters.taskCompleteDto was null or undefined when calling execute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks/{taskName}/completed`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"taskName"}}`, encodeURIComponent(String(requestParameters.taskName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.taskCompleteDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * execute
     * execute
     */
    async execute(requestParameters: shipmentApiParams.ExecuteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.executeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * fulfillShipment
     * fulfillShipment
     */


    async fulfillShipmentRaw(requestParameters: shipmentApiParams.FulfillShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling fulfillShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/fulfilled`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * fulfillShipment
     * fulfillShipment
     */
    async fulfillShipment(requestParameters: shipmentApiParams.FulfillShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.fulfillShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getLocationSummaryReport
     * getLocationSummaryReport
     */


    async getLocationSummaryReportRaw(requestParameters: shipmentApiParams.GetLocationSummaryReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfLocationSummary>> {
        if (requestParameters.locationCodes === null || requestParameters.locationCodes === undefined) {
            throw new runtime.RequiredError('locationCodes','Required parameter requestParameters.locationCodes was null or undefined when calling getLocationSummaryReport.');
        }

        if (requestParameters.startDateTime === null || requestParameters.startDateTime === undefined) {
            throw new runtime.RequiredError('startDateTime','Required parameter requestParameters.startDateTime was null or undefined when calling getLocationSummaryReport.');
        }

        const queryParameters: any = {};

        if (requestParameters.bypassSearchIndex !== undefined) {
            queryParameters['bypassSearchIndex'] = requestParameters.bypassSearchIndex;
        }

        if (requestParameters.locationCodes) {
            queryParameters['locationCodes'] = requestParameters.locationCodes;
        }

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/locationSummaryReport`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getLocationSummaryReport
     * getLocationSummaryReport
     */
    async getLocationSummaryReport(requestParameters: shipmentApiParams.GetLocationSummaryReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfLocationSummary> {
        const response = await this.getLocationSummaryReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipment
     * getShipment
     */


    async getShipmentRaw(requestParameters: shipmentApiParams.GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipment
     * getShipment
     */
    async getShipment(requestParameters: shipmentApiParams.GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.getShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipmentStepCountByShipmentType
     * getShipmentStepCountByShipmentType
     */


    async getShipmentStepCountByShipmentTypeRaw(requestParameters: shipmentApiParams.GetShipmentStepCountByShipmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfDashboardResponse>> {
        if (requestParameters.shipmentType === null || requestParameters.shipmentType === undefined) {
            throw new runtime.RequiredError('shipmentType','Required parameter requestParameters.shipmentType was null or undefined when calling getShipmentStepCountByShipmentType.');
        }

        const queryParameters: any = {};

        if (requestParameters.assignedLocations) {
            queryParameters['assignedLocations'] = requestParameters.assignedLocations;
        }

        if (requestParameters.shipmentType !== undefined) {
            queryParameters['shipmentType'] = requestParameters.shipmentType;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/countsByStep`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipmentStepCountByShipmentType
     * getShipmentStepCountByShipmentType
     */
    async getShipmentStepCountByShipmentType(requestParameters: shipmentApiParams.GetShipmentStepCountByShipmentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfDashboardResponse> {
        const response = await this.getShipmentStepCountByShipmentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getShipments
     * getShipments
     */


    async getShipmentsRaw(requestParameters: shipmentApiParams.GetShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelOfEntityModelOfShipment>> {
        const queryParameters: any = {};

        if (requestParameters.bypassSearchIndex !== undefined) {
            queryParameters['bypassSearchIndex'] = requestParameters.bypassSearchIndex;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.isLate !== undefined) {
            queryParameters['isLate'] = requestParameters.isLate;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.quickSearch !== undefined) {
            queryParameters['quickSearch'] = requestParameters.quickSearch;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.workflowTaskName !== undefined) {
            queryParameters['workflowTaskName'] = requestParameters.workflowTaskName;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getShipments
     * getShipments
     */
    async getShipments(requestParameters: shipmentApiParams.GetShipmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelOfEntityModelOfShipment> {
        const response = await this.getShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getTasks
     * getTasks
     */


    async getTasksRaw(requestParameters: shipmentApiParams.GetTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfTask>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getTasks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getTasks
     * getTasks
     */
    async getTasks(requestParameters: shipmentApiParams.GetTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfTask> {
        const response = await this.getTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * itemsReadyForPrep
     * itemsReadyForPrep
     */


    async itemsReadyForPrepRaw(requestParameters: shipmentApiParams.ItemsReadyForPrepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling itemsReadyForPrep.');
        }

        if (requestParameters.readyForPrepItemsRequestDto === null || requestParameters.readyForPrepItemsRequestDto === undefined) {
            throw new runtime.RequiredError('readyForPrepItemsRequestDto','Required parameter requestParameters.readyForPrepItemsRequestDto was null or undefined when calling itemsReadyForPrep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/itemsReadyForPrep`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.readyForPrepItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * itemsReadyForPrep
     * itemsReadyForPrep
     */
    async itemsReadyForPrep(requestParameters: shipmentApiParams.ItemsReadyForPrepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.itemsReadyForPrepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * newShipment
     * newShipment
     */


    async newShipmentRaw(requestParameters: shipmentApiParams.NewShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.newShipment === null || requestParameters.newShipment === undefined) {
            throw new runtime.RequiredError('newShipment','Required parameter requestParameters.newShipment was null or undefined when calling newShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newShipment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * newShipment
     * newShipment
     */
    async newShipment(requestParameters: shipmentApiParams.NewShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.newShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * newShipments
     * newShipments
     */


    async newShipmentsRaw(requestParameters: shipmentApiParams.NewShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfEntityModelOfShipment>> {
        if (requestParameters.newShipments === null || requestParameters.newShipments === undefined) {
            throw new runtime.RequiredError('newShipments','Required parameter requestParameters.newShipments was null or undefined when calling newShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newShipments,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * newShipments
     * newShipments
     */
    async newShipments(requestParameters: shipmentApiParams.NewShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfEntityModelOfShipment> {
        const response = await this.newShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * pickupItems
     * pickupItems
     */


    async pickupItemsRaw(requestParameters: shipmentApiParams.PickupItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling pickupItems.');
        }

        if (requestParameters.pickupItemsRequestDto === null || requestParameters.pickupItemsRequestDto === undefined) {
            throw new runtime.RequiredError('pickupItemsRequestDto','Required parameter requestParameters.pickupItemsRequestDto was null or undefined when calling pickupItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/pickedUpItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.pickupItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * pickupItems
     * pickupItems
     */
    async pickupItems(requestParameters: shipmentApiParams.PickupItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.pickupItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reassignItems
     * reassignItems
     */


    async reassignItemsRaw(requestParameters: shipmentApiParams.ReassignItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling reassignItems.');
        }

        if (requestParameters.reassignItemsRequestDto === null || requestParameters.reassignItemsRequestDto === undefined) {
            throw new runtime.RequiredError('reassignItemsRequestDto','Required parameter requestParameters.reassignItemsRequestDto was null or undefined when calling reassignItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/reassignedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reassignItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * reassignItems
     * reassignItems
     */
    async reassignItems(requestParameters: shipmentApiParams.ReassignItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.reassignItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reassignShipment
     * reassignShipment
     */


    async reassignShipmentRaw(requestParameters: shipmentApiParams.ReassignShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling reassignShipment.');
        }

        if (requestParameters.reassignShipmentRequestDto === null || requestParameters.reassignShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('reassignShipmentRequestDto','Required parameter requestParameters.reassignShipmentRequestDto was null or undefined when calling reassignShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/reassigned`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reassignShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * reassignShipment
     * reassignShipment
     */
    async reassignShipment(requestParameters: shipmentApiParams.ReassignShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.reassignShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * receiveTransfer
     * receiveTransfer
     */


    async receiveTransferRaw(requestParameters: shipmentApiParams.ReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling receiveTransfer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/received`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * receiveTransfer
     * receiveTransfer
     */
    async receiveTransfer(requestParameters: shipmentApiParams.ReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.receiveTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * refreshShipment
     * refreshShipment
     */


    async refreshShipmentRaw(requestParameters: shipmentApiParams.RefreshShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling refreshShipment.');
        }

        const queryParameters: any = {};

        if (requestParameters.shouldLog !== undefined) {
            queryParameters['shouldLog'] = requestParameters.shouldLog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/refresh`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * refreshShipment
     * refreshShipment
     */
    async refreshShipment(requestParameters: shipmentApiParams.RefreshShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.refreshShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * rejectItems
     * rejectItems
     */


    async rejectItemsRaw(requestParameters: shipmentApiParams.RejectItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling rejectItems.');
        }

        if (requestParameters.rejectItemsRequestDto === null || requestParameters.rejectItemsRequestDto === undefined) {
            throw new runtime.RequiredError('rejectItemsRequestDto','Required parameter requestParameters.rejectItemsRequestDto was null or undefined when calling rejectItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/rejectedItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * rejectItems
     * rejectItems
     */
    async rejectItems(requestParameters: shipmentApiParams.RejectItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.rejectItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * rejectShipment
     * rejectShipment
     */


    async rejectShipmentRaw(requestParameters: shipmentApiParams.RejectShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling rejectShipment.');
        }

        if (requestParameters.rejectShipmentRequestDto === null || requestParameters.rejectShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('rejectShipmentRequestDto','Required parameter requestParameters.rejectShipmentRequestDto was null or undefined when calling rejectShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/rejected`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rejectShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * rejectShipment
     * rejectShipment
     */
    async rejectShipment(requestParameters: shipmentApiParams.RejectShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.rejectShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderOrderSummary
     * renderOrderSummary
     */


    async renderOrderSummary1Raw(requestParameters: shipmentApiParams.RenderOrderSummary1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling renderOrderSummary1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/order-summary/html`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderOrderSummary
     * renderOrderSummary
     */
    async renderOrderSummary1(requestParameters: shipmentApiParams.RenderOrderSummary1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderOrderSummary1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * renderPackingSlip
     * renderPackingSlip
     */


    async renderPackingSlipRaw(requestParameters: shipmentApiParams.RenderPackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfRenderedContent>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling renderPackingSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/rendition/html`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * renderPackingSlip
     * renderPackingSlip
     */
    async renderPackingSlip(requestParameters: shipmentApiParams.RenderPackingSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfRenderedContent> {
        const response = await this.renderPackingSlipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replaceShipment
     * replaceShipment
     */


    async replaceShipmentRaw(requestParameters: shipmentApiParams.ReplaceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling replaceShipment.');
        }

        if (requestParameters.newShipment === null || requestParameters.newShipment === undefined) {
            throw new runtime.RequiredError('newShipment','Required parameter requestParameters.newShipment was null or undefined when calling replaceShipment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateFields) {
            queryParameters['updateFields'] = requestParameters.updateFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newShipment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * replaceShipment
     * replaceShipment
     */
    async replaceShipment(requestParameters: shipmentApiParams.ReplaceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.replaceShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * resendItemEmail
     * resendItemEmail
     */


    async resendItemEmailRaw(requestParameters: shipmentApiParams.ResendItemEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling resendItemEmail.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling resendItemEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/items/{lineId}/email/resend`.replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resendItemEmail
     * resendItemEmail
     */
    async resendItemEmail(requestParameters: shipmentApiParams.ResendItemEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendItemEmailRaw(requestParameters, initOverrides);
    }

    /**
     * resendShipmentEmail
     * resendShipmentEmail
     */


    async resendShipmentEmailRaw(requestParameters: shipmentApiParams.ResendShipmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling resendShipmentEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/email/resend`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * resendShipmentEmail
     * resendShipmentEmail
     */
    async resendShipmentEmail(requestParameters: shipmentApiParams.ResendShipmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendShipmentEmailRaw(requestParameters, initOverrides);
    }

    /**
     * retryFulfillingShipment
     * retryFulfillingShipment
     */


    async retryFulfillingShipmentRaw(requestParameters: shipmentApiParams.RetryFulfillingShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling retryFulfillingShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/retried`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * retryFulfillingShipment
     * retryFulfillingShipment
     */
    async retryFulfillingShipment(requestParameters: shipmentApiParams.RetryFulfillingShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.retryFulfillingShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * revert
     * revert
     */


    async revertRaw(requestParameters: shipmentApiParams.RevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling revert.');
        }

        if (requestParameters.taskName === null || requestParameters.taskName === undefined) {
            throw new runtime.RequiredError('taskName','Required parameter requestParameters.taskName was null or undefined when calling revert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks/{taskName}/reverted`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"taskName"}}`, encodeURIComponent(String(requestParameters.taskName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * revert
     * revert
     */
    async revert(requestParameters: shipmentApiParams.RevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.revertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * searchAndReceiveTransfer
     * searchAndReceiveTransfer
     */


    async searchAndReceiveTransferRaw(requestParameters: shipmentApiParams.SearchAndReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling searchAndReceiveTransfer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/received/{search}`.replace(`{${"search"}}`, encodeURIComponent(String(requestParameters.search))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * searchAndReceiveTransfer
     * searchAndReceiveTransfer
     */
    async searchAndReceiveTransfer(requestParameters: shipmentApiParams.SearchAndReceiveTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.searchAndReceiveTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * searchReceivableShipment
     * searchReceivableShipment
     */


    async searchReceivableShipmentRaw(requestParameters: shipmentApiParams.SearchReceivableShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling searchReceivableShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/receivable/{search}`.replace(`{${"search"}}`, encodeURIComponent(String(requestParameters.search))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * searchReceivableShipment
     * searchReceivableShipment
     */
    async searchReceivableShipment(requestParameters: shipmentApiParams.SearchReceivableShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.searchReceivableShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * skipTask
     * skipTask
     */


    async skipTaskRaw(requestParameters: shipmentApiParams.SkipTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling skipTask.');
        }

        if (requestParameters.taskName === null || requestParameters.taskName === undefined) {
            throw new runtime.RequiredError('taskName','Required parameter requestParameters.taskName was null or undefined when calling skipTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/tasks/{taskName}/skipped`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"taskName"}}`, encodeURIComponent(String(requestParameters.taskName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * skipTask
     * skipTask
     */
    async skipTask(requestParameters: shipmentApiParams.SkipTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.skipTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * transferItems
     * transferItems
     */


    async transferItemsRaw(requestParameters: shipmentApiParams.TransferItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling transferItems.');
        }

        if (requestParameters.transferItemsRequestDto === null || requestParameters.transferItemsRequestDto === undefined) {
            throw new runtime.RequiredError('transferItemsRequestDto','Required parameter requestParameters.transferItemsRequestDto was null or undefined when calling transferItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/transferredItems`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transferItemsRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * transferItems
     * transferItems
     */
    async transferItems(requestParameters: shipmentApiParams.TransferItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.transferItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * transferShipment
     * transferShipment
     */


    async transferShipmentRaw(requestParameters: shipmentApiParams.TransferShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling transferShipment.');
        }

        if (requestParameters.transferShipmentRequestDto === null || requestParameters.transferShipmentRequestDto === undefined) {
            throw new runtime.RequiredError('transferShipmentRequestDto','Required parameter requestParameters.transferShipmentRequestDto was null or undefined when calling transferShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/transferred`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transferShipmentRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * transferShipment
     * transferShipment
     */
    async transferShipment(requestParameters: shipmentApiParams.TransferShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.transferShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateFulfillmentFields
     * updateFulfillmentFields
     */


    async updateFulfillmentFieldsRaw(requestParameters: shipmentApiParams.UpdateFulfillmentFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateFulfillmentFields.');
        }

        if (requestParameters.items === null || requestParameters.items === undefined) {
            throw new runtime.RequiredError('items','Required parameter requestParameters.items was null or undefined when calling updateFulfillmentFields.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/fulfillmentFields`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.items,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateFulfillmentFields
     * updateFulfillmentFields
     */
    async updateFulfillmentFields(requestParameters: shipmentApiParams.UpdateFulfillmentFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.updateFulfillmentFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateGiftCardInfo
     * updateGiftCardInfo
     */


    async updateGiftCardInfoRaw(requestParameters: shipmentApiParams.UpdateGiftCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateGiftCardInfo.');
        }

        if (requestParameters.giftCardInfoRequestDto === null || requestParameters.giftCardInfoRequestDto === undefined) {
            throw new runtime.RequiredError('giftCardInfoRequestDto','Required parameter requestParameters.giftCardInfoRequestDto was null or undefined when calling updateGiftCardInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/giftCardInfo`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.giftCardInfoRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateGiftCardInfo
     * updateGiftCardInfo
     */
    async updateGiftCardInfo(requestParameters: shipmentApiParams.UpdateGiftCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfShipment> {
        const response = await this.updateGiftCardInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * workflowDefinitionImage
     * workflowDefinitionImage
     */


    async workflowDefinitionImageRaw(requestParameters: shipmentApiParams.WorkflowDefinitionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling workflowDefinitionImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/workflow-definition-image`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * workflowDefinitionImage
     * workflowDefinitionImage
     */
    async workflowDefinitionImage(requestParameters: shipmentApiParams.WorkflowDefinitionImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.workflowDefinitionImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * workflowInstanceImage
     * workflowInstanceImage
     */


    async workflowInstanceImageRaw(requestParameters: shipmentApiParams.WorkflowInstanceImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling workflowInstanceImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/workflow-instance-image`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * workflowInstanceImage
     * workflowInstanceImage
     */
    async workflowInstanceImage(requestParameters: shipmentApiParams.WorkflowInstanceImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.workflowInstanceImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
