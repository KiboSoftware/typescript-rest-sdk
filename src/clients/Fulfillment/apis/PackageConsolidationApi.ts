/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityModelPackageConsolidationResponseDto,
  EntityModelShipmentDto,
  ErrorItem,
  PackageConsolidationRequestDto,
  PackageDto,
  RemoveSpecificShipmentFromConsolidationGroup400Response,
} from '../models';


export namespace packageConsolidationApiParams { 
    export interface AddPackageToPackageConsolidationRequest {
        shipmentNumber: number;
        packageConsolidationId: string;
        packageId: string;
        ifMatch?: string;
    }
    export interface AddTrackingForConsolidationRequest {
        shipmentNumber: number;
        packageConsolidationId: string;
        packageDto: PackageDto;
        ifMatch?: string;
    }
    export interface AddTrackingForConsolidation1Request {
        shipmentNumber: number;
        packageConsolidationId: string;
        packageDto: PackageDto;
        ifMatch?: string;
    }
    export interface CreatePackageConsolidationRequest {
        shipmentNumber: number;
        packageConsolidationRequestDto: PackageConsolidationRequestDto;
        ifMatch?: string;
    }
    export interface DeletePackageConsolidationRequest {
        shipmentNumber: number;
        packageConsolidationId: string;
        ifMatch?: string;
    }
    export interface GetPackageConsolidationRequest {
        shipmentNumber: number;
        packageConsolidationId: string;
    }
    export interface RemoveAllPackageConsolidationsFromShipmentRequest {
        shipmentNumber: number;
    }
    export interface RemoveShipmentFromPackageConsolidationRequest {
        shipmentNumber: number;
        packageConsolidationId: string;
        packageId: string;
        ifMatch?: string;
    }
    export interface RemoveShipmentFromPackageConsolidation1Request {
        shipmentNumber: number;
        packageConsolidationId: string;
        packageId: string;
        ifMatch?: string;
    }
}
/**
* PackageConsolidationApiService - interface
* 
* @export
* @interface PackageConsolidationApi
*/
export interface PackageConsolidationApiService {
    /**
    * Add Package to Package Consolidation
    * @summary Add Package to Package Consolidation
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {string} packageId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    addPackageToPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.AddPackageToPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>>;

    /**
    * Add Package to Package Consolidation
    * Add Package to Package Consolidation
    */
    addPackageToPackageConsolidation(requestParameters: packageConsolidationApiParams.AddPackageToPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto>;

    /**
    * Add Package Consolidation Tracking
    * @summary Add Package Consolidation Tracking
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {PackageDto} packageDto 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    addTrackingForConsolidationRaw(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>>;

    /**
    * Add Package Consolidation Tracking
    * Add Package Consolidation Tracking
    */
    addTrackingForConsolidation(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto>;

    /**
    * Add Package Consolidation Tracking
    * @summary Add Package Consolidation Tracking
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {PackageDto} packageDto 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    addTrackingForConsolidation1Raw(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>>;

    /**
    * Add Package Consolidation Tracking
    * Add Package Consolidation Tracking
    */
    addTrackingForConsolidation1(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto>;

    /**
    * Create Package Consolidation
    * @summary Create Package Consolidation
    * @param {number} shipmentNumber 
    * @param {PackageConsolidationRequestDto} packageConsolidationRequestDto 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    createPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.CreatePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>>;

    /**
    * Create Package Consolidation
    * Create Package Consolidation
    */
    createPackageConsolidation(requestParameters: packageConsolidationApiParams.CreatePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto>;

    /**
    * Remove Package Consolidation
    * @summary Remove Package Consolidation
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    deletePackageConsolidationRaw(requestParameters: packageConsolidationApiParams.DeletePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Remove Package Consolidation
    * Remove Package Consolidation
    */
    deletePackageConsolidation(requestParameters: packageConsolidationApiParams.DeletePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get Package Consolidation
    * @summary Get Package Consolidation
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    getPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.GetPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>>;

    /**
    * Get Package Consolidation
    * Get Package Consolidation
    */
    getPackageConsolidation(requestParameters: packageConsolidationApiParams.GetPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto>;

    /**
    * Remove Shipment Package Consolidations
    * @summary Remove Shipment Package Consolidations
    * @param {number} shipmentNumber 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    removeAllPackageConsolidationsFromShipmentRaw(requestParameters: packageConsolidationApiParams.RemoveAllPackageConsolidationsFromShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Remove Shipment Package Consolidations
    * Remove Shipment Package Consolidations
    */
    removeAllPackageConsolidationsFromShipment(requestParameters: packageConsolidationApiParams.RemoveAllPackageConsolidationsFromShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Remove Shipment from Package Consolidation
    * @summary Remove Shipment from Package Consolidation
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {string} packageId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    removeShipmentFromPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Remove Shipment from Package Consolidation
    * Remove Shipment from Package Consolidation
    */
    removeShipmentFromPackageConsolidation(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Remove Shipment from Package Consolidation
    * @summary Remove Shipment from Package Consolidation
    * @param {number} shipmentNumber 
    * @param {string} packageConsolidationId 
    * @param {string} packageId 
    * @param {string} [ifMatch] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PackageConsolidationApiInterface
    */
    removeShipmentFromPackageConsolidation1Raw(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Remove Shipment from Package Consolidation
    * Remove Shipment from Package Consolidation
    */
    removeShipmentFromPackageConsolidation1(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}


/**
 * 
 */
export class PackageConsolidationApi extends runtime.BaseAPI implements PackageConsolidationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add Package to Package Consolidation
     * Add Package to Package Consolidation
     */


    async addPackageToPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.AddPackageToPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelShipmentDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling addPackageToPackageConsolidation.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling addPackageToPackageConsolidation.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling addPackageToPackageConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/{packageConsolidationId}/add/{packageId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Package to Package Consolidation
     * Add Package to Package Consolidation
     */
    async addPackageToPackageConsolidation(requestParameters: packageConsolidationApiParams.AddPackageToPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelShipmentDto> {
        const response = await this.addPackageToPackageConsolidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Package Consolidation Tracking
     * Add Package Consolidation Tracking
     */


    async addTrackingForConsolidationRaw(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling addTrackingForConsolidation.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling addTrackingForConsolidation.');
        }

        if (requestParameters.packageDto === null || requestParameters.packageDto === undefined) {
            throw new runtime.RequiredError('packageDto','Required parameter requestParameters.packageDto was null or undefined when calling addTrackingForConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/{packageConsolidationId}/tracking`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.packageDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Package Consolidation Tracking
     * Add Package Consolidation Tracking
     */
    async addTrackingForConsolidation(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto> {
        const response = await this.addTrackingForConsolidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Package Consolidation Tracking
     * Add Package Consolidation Tracking
     */


    async addTrackingForConsolidation1Raw(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling addTrackingForConsolidation1.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling addTrackingForConsolidation1.');
        }

        if (requestParameters.packageDto === null || requestParameters.packageDto === undefined) {
            throw new runtime.RequiredError('packageDto','Required parameter requestParameters.packageDto was null or undefined when calling addTrackingForConsolidation1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/tracking`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.packageDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Package Consolidation Tracking
     * Add Package Consolidation Tracking
     */
    async addTrackingForConsolidation1(requestParameters: packageConsolidationApiParams.AddTrackingForConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto> {
        const response = await this.addTrackingForConsolidation1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Package Consolidation
     * Create Package Consolidation
     */


    async createPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.CreatePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling createPackageConsolidation.');
        }

        if (requestParameters.packageConsolidationRequestDto === null || requestParameters.packageConsolidationRequestDto === undefined) {
            throw new runtime.RequiredError('packageConsolidationRequestDto','Required parameter requestParameters.packageConsolidationRequestDto was null or undefined when calling createPackageConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.packageConsolidationRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Package Consolidation
     * Create Package Consolidation
     */
    async createPackageConsolidation(requestParameters: packageConsolidationApiParams.CreatePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto> {
        const response = await this.createPackageConsolidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Package Consolidation
     * Remove Package Consolidation
     */


    async deletePackageConsolidationRaw(requestParameters: packageConsolidationApiParams.DeletePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling deletePackageConsolidation.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling deletePackageConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/{packageConsolidationId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Package Consolidation
     * Remove Package Consolidation
     */
    async deletePackageConsolidation(requestParameters: packageConsolidationApiParams.DeletePackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageConsolidationRaw(requestParameters, initOverrides);
    }

    /**
     * Get Package Consolidation
     * Get Package Consolidation
     */


    async getPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.GetPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelPackageConsolidationResponseDto>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling getPackageConsolidation.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling getPackageConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/{packageConsolidationId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Package Consolidation
     * Get Package Consolidation
     */
    async getPackageConsolidation(requestParameters: packageConsolidationApiParams.GetPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelPackageConsolidationResponseDto> {
        const response = await this.getPackageConsolidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Shipment Package Consolidations
     * Remove Shipment Package Consolidations
     */


    async removeAllPackageConsolidationsFromShipmentRaw(requestParameters: packageConsolidationApiParams.RemoveAllPackageConsolidationsFromShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeAllPackageConsolidationsFromShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/remove/bulk`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Shipment Package Consolidations
     * Remove Shipment Package Consolidations
     */
    async removeAllPackageConsolidationsFromShipment(requestParameters: packageConsolidationApiParams.RemoveAllPackageConsolidationsFromShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAllPackageConsolidationsFromShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Shipment from Package Consolidation
     * Remove Shipment from Package Consolidation
     */


    async removeShipmentFromPackageConsolidationRaw(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeShipmentFromPackageConsolidation.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling removeShipmentFromPackageConsolidation.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling removeShipmentFromPackageConsolidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/{packageConsolidationId}/remove/{packageId}`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Shipment from Package Consolidation
     * Remove Shipment from Package Consolidation
     */
    async removeShipmentFromPackageConsolidation(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeShipmentFromPackageConsolidationRaw(requestParameters, initOverrides);
    }

    /**
     * Remove Shipment from Package Consolidation
     * Remove Shipment from Package Consolidation
     */


    async removeShipmentFromPackageConsolidation1Raw(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling removeShipmentFromPackageConsolidation1.');
        }

        if (requestParameters.packageConsolidationId === null || requestParameters.packageConsolidationId === undefined) {
            throw new runtime.RequiredError('packageConsolidationId','Required parameter requestParameters.packageConsolidationId was null or undefined when calling removeShipmentFromPackageConsolidation1.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling removeShipmentFromPackageConsolidation1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifMatch !== undefined && requestParameters.ifMatch !== null) {
            headerParameters['If-Match'] = String(requestParameters.ifMatch);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipments/{shipmentNumber}/consolidated/packages/{packageConsolidationId}/remove`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"packageConsolidationId"}}`, encodeURIComponent(String(requestParameters.packageConsolidationId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Shipment from Package Consolidation
     * Remove Shipment from Package Consolidation
     */
    async removeShipmentFromPackageConsolidation1(requestParameters: packageConsolidationApiParams.RemoveShipmentFromPackageConsolidation1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeShipmentFromPackageConsolidation1Raw(requestParameters, initOverrides);
    }

}
