/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment API - Production Profile
 * REST API backing the Kibo Fulfiller User Interface
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CollectionModelOfManifest,
  CollectionModelOfShipment,
  EntityModelOfManifest,
  ManifestRequest,
} from '../models';


export namespace manifestApiParams { 
    export interface CreateManifestRequest {
        manifestRequestDto: ManifestRequest;
    }
    export interface GetEligibleShipmentsRequest {
        carrier: string;
        fulfillmentLocationCode: string;
        fromDays?: number;
    }
    export interface GetManifestRequest {
        manifestId: string;
    }
    export interface GetManifestsRequest {
        fulfillmentLocationCode: string;
        fromDays?: number;
    }
}
/**
* ManifestApiService - interface
* 
* @export
* @interface ManifestApi
*/
export interface ManifestApiService {
    /**
    * createManifest
    * @summary createManifest
    * @param {ManifestRequest} manifestRequestDto manifestRequestDto
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ManifestApiInterface
    */
    createManifestRaw(requestParameters: manifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfManifest>>;

    /**
    * createManifest
    * createManifest
    */
    createManifest(requestParameters: manifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfManifest>;

    /**
    * getEligibleShipments
    * @summary getEligibleShipments
    * @param {string} carrier carrier
    * @param {string} fulfillmentLocationCode fulfillmentLocationCode
    * @param {number} [fromDays] fromDays
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ManifestApiInterface
    */
    getEligibleShipmentsRaw(requestParameters: manifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>>;

    /**
    * getEligibleShipments
    * getEligibleShipments
    */
    getEligibleShipments(requestParameters: manifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment>;

    /**
    * getManifest
    * @summary getManifest
    * @param {string} manifestId manifestId
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ManifestApiInterface
    */
    getManifestRaw(requestParameters: manifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfManifest>>;

    /**
    * getManifest
    * getManifest
    */
    getManifest(requestParameters: manifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfManifest>;

    /**
    * getManifests
    * @summary getManifests
    * @param {string} fulfillmentLocationCode fulfillmentLocationCode
    * @param {number} [fromDays] fromDays
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ManifestApiInterface
    */
    getManifestsRaw(requestParameters: manifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfManifest>>;

    /**
    * getManifests
    * getManifests
    */
    getManifests(requestParameters: manifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfManifest>;

}


/**
 * 
 */
export class ManifestApi extends runtime.BaseAPI implements ManifestApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * createManifest
     * createManifest
     */


    async createManifestRaw(requestParameters: manifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfManifest>> {
        if (requestParameters.manifestRequestDto === null || requestParameters.manifestRequestDto === undefined) {
            throw new runtime.RequiredError('manifestRequestDto','Required parameter requestParameters.manifestRequestDto was null or undefined when calling createManifest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.manifestRequestDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * createManifest
     * createManifest
     */
    async createManifest(requestParameters: manifestApiParams.CreateManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfManifest> {
        const response = await this.createManifestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getEligibleShipments
     * getEligibleShipments
     */


    async getEligibleShipmentsRaw(requestParameters: manifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfShipment>> {
        if (requestParameters.carrier === null || requestParameters.carrier === undefined) {
            throw new runtime.RequiredError('carrier','Required parameter requestParameters.carrier was null or undefined when calling getEligibleShipments.');
        }

        if (requestParameters.fulfillmentLocationCode === null || requestParameters.fulfillmentLocationCode === undefined) {
            throw new runtime.RequiredError('fulfillmentLocationCode','Required parameter requestParameters.fulfillmentLocationCode was null or undefined when calling getEligibleShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.carrier !== undefined) {
            queryParameters['carrier'] = requestParameters.carrier;
        }

        if (requestParameters.fromDays !== undefined) {
            queryParameters['fromDays'] = requestParameters.fromDays;
        }

        if (requestParameters.fulfillmentLocationCode !== undefined) {
            queryParameters['fulfillmentLocationCode'] = requestParameters.fulfillmentLocationCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests/eligibleShipments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getEligibleShipments
     * getEligibleShipments
     */
    async getEligibleShipments(requestParameters: manifestApiParams.GetEligibleShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfShipment> {
        const response = await this.getEligibleShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getManifest
     * getManifest
     */


    async getManifestRaw(requestParameters: manifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityModelOfManifest>> {
        if (requestParameters.manifestId === null || requestParameters.manifestId === undefined) {
            throw new runtime.RequiredError('manifestId','Required parameter requestParameters.manifestId was null or undefined when calling getManifest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests/{manifestId}`.replace(`{${"manifestId"}}`, encodeURIComponent(String(requestParameters.manifestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getManifest
     * getManifest
     */
    async getManifest(requestParameters: manifestApiParams.GetManifestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityModelOfManifest> {
        const response = await this.getManifestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getManifests
     * getManifests
     */


    async getManifestsRaw(requestParameters: manifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionModelOfManifest>> {
        if (requestParameters.fulfillmentLocationCode === null || requestParameters.fulfillmentLocationCode === undefined) {
            throw new runtime.RequiredError('fulfillmentLocationCode','Required parameter requestParameters.fulfillmentLocationCode was null or undefined when calling getManifests.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromDays !== undefined) {
            queryParameters['fromDays'] = requestParameters.fromDays;
        }

        if (requestParameters.fulfillmentLocationCode !== undefined) {
            queryParameters['fulfillmentLocationCode'] = requestParameters.fulfillmentLocationCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/fulfillment/shipping/manifests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getManifests
     * getManifests
     */
    async getManifests(requestParameters: manifestApiParams.GetManifestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionModelOfManifest> {
        const response = await this.getManifestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
