/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppeasementReason } from './AppeasementReason';
import {
    AppeasementReasonFromJSON,
    AppeasementReasonFromJSONTyped,
    AppeasementReasonToJSON,
} from './AppeasementReason';
import type { AuditInfo0 } from './AuditInfo0';
import {
    AuditInfo0FromJSON,
    AuditInfo0FromJSONTyped,
    AuditInfo0ToJSON,
} from './AuditInfo0';
import type { FulfillmentField } from './FulfillmentField';
import {
    FulfillmentFieldFromJSON,
    FulfillmentFieldFromJSONTyped,
    FulfillmentFieldToJSON,
} from './FulfillmentField';
import type { GiftCard } from './GiftCard';
import {
    GiftCardFromJSON,
    GiftCardFromJSONTyped,
    GiftCardToJSON,
} from './GiftCard';
import type { InventoryTag } from './InventoryTag';
import {
    InventoryTagFromJSON,
    InventoryTagFromJSONTyped,
    InventoryTagToJSON,
} from './InventoryTag';
import type { ProductOption } from './ProductOption';
import {
    ProductOptionFromJSON,
    ProductOptionFromJSONTyped,
    ProductOptionToJSON,
} from './ProductOption';
import type { ReassignedReason } from './ReassignedReason';
import {
    ReassignedReasonFromJSON,
    ReassignedReasonFromJSONTyped,
    ReassignedReasonToJSON,
} from './ReassignedReason';

/**
 * 
 * @export
 * @interface ReassignedItem
 */
export interface ReassignedItem {
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    actualPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    allocatedQuantity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    allowsBackOrder?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    allowsFutureAllocate?: boolean;
    /**
     * 
     * @type {AppeasementReason}
     * @memberof ReassignedItem
     */
    appeasementReason?: AppeasementReason;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ReassignedItem
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {AuditInfo0}
     * @memberof ReassignedItem
     */
    auditInfo?: AuditInfo0;
    /**
     * 
     * @type {Date}
     * @memberof ReassignedItem
     */
    backorderReleaseDate?: Date;
    /**
     * If true, order routing will not suggest that any shipments with these items be assigned to the original location. This persists until the inventory records for these items are updated. When the records are updated, blockAssignment will automatically be disabled again to allow new assignments. This is an optional parameter and defaults to false if not provided in the request.
     * @type {boolean}
     * @memberof ReassignedItem
     */
    blockAssignment?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    cartItemId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReassignedItem
     */
    childItemIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    creditCurrencyCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    creditValue?: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ReassignedItem
     */
    data?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    duty?: number;
    /**
     * 
     * @type {Date}
     * @memberof ReassignedItem
     */
    expectedDeliveryDate?: Date;
    /**
     * 
     * @type {Array<FulfillmentField>}
     * @memberof ReassignedItem
     */
    fulfillmentFields?: Array<FulfillmentField>;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    fulfillmentLocationCode?: string;
    /**
     * 
     * @type {Array<GiftCard>}
     * @memberof ReassignedItem
     */
    giftCards?: Array<GiftCard>;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    goodsType?: ReassignedItemGoodsTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    handling: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    handlingDiscount?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    handlingTax: number;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    imageUrl?: string;
    /**
     * 
     * @type {Array<InventoryTag>}
     * @memberof ReassignedItem
     */
    inventoryTags?: Array<InventoryTag>;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    isAssemblyRequired?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    isPackagedStandAlone?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    isReservedInventory?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    isTaxable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    itemDiscount?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    itemTax: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    lineId: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    lineItemAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    lineItemCost?: number;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    locatorName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignedItem
     */
    manageStock?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    optionAttributeFQN?: string;
    /**
     * 
     * @type {Array<ProductOption>}
     * @memberof ReassignedItem
     */
    options?: Array<ProductOption>;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    originalOrderItemId?: string;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    originalQuantity?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    overridePrice?: number;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    parentItemId?: string;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    partNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    productCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    quantity: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    readyForPickupQuantity?: number;
    /**
     * 
     * @type {ReassignedReason}
     * @memberof ReassignedItem
     */
    reassignedReason?: ReassignedReason;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    shipping: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    shippingDiscount?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    shippingTax: number;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    sku?: string;
    /**
     * 
     * @type {object}
     * @memberof ReassignedItem
     */
    taxData?: object;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    taxableHandling?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    taxableLineItemCost?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    taxableShipping?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    transferQuantity?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    trueTransferQuantity?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    upc?: string;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    variationProductCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof ReassignedItem
     */
    weightUnit?: string;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedDutyAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedHandlingAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedHandlingTaxAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedLineItemTaxAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedShipmentAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedShippingAdjustment?: number;
    /**
     * 
     * @type {number}
     * @memberof ReassignedItem
     */
    weightedShippingTaxAdjustment?: number;
}


/**
 * @export
 */
export const ReassignedItemGoodsTypeEnum = {
    Digital: 'Digital',
    DigitalCredit: 'DigitalCredit',
    DigitalGiftCard: 'DigitalGiftCard',
    Physical: 'Physical',
    Service: 'Service'
} as const;
export type ReassignedItemGoodsTypeEnum = typeof ReassignedItemGoodsTypeEnum[keyof typeof ReassignedItemGoodsTypeEnum];


/**
 * Check if a given object implements the ReassignedItem interface.
 */
export function instanceOfReassignedItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "handling" in value;
    isInstance = isInstance && "handlingTax" in value;
    isInstance = isInstance && "itemTax" in value;
    isInstance = isInstance && "lineId" in value;
    isInstance = isInstance && "quantity" in value;
    isInstance = isInstance && "shipping" in value;
    isInstance = isInstance && "shippingTax" in value;

    return isInstance;
}

export function ReassignedItemFromJSON(json: any): ReassignedItem {
    return ReassignedItemFromJSONTyped(json, false);
}

export function ReassignedItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReassignedItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actualPrice': !exists(json, 'actualPrice') ? undefined : json['actualPrice'],
        'allocatedQuantity': !exists(json, 'allocatedQuantity') ? undefined : json['allocatedQuantity'],
        'allowsBackOrder': !exists(json, 'allowsBackOrder') ? undefined : json['allowsBackOrder'],
        'allowsFutureAllocate': !exists(json, 'allowsFutureAllocate') ? undefined : json['allowsFutureAllocate'],
        'appeasementReason': !exists(json, 'appeasementReason') ? undefined : AppeasementReasonFromJSON(json['appeasementReason']),
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfo0FromJSON(json['auditInfo']),
        'backorderReleaseDate': !exists(json, 'backorderReleaseDate') ? undefined : (new Date(json['backorderReleaseDate'])),
        'blockAssignment': !exists(json, 'blockAssignment') ? undefined : json['blockAssignment'],
        'cartItemId': !exists(json, 'cartItemId') ? undefined : json['cartItemId'],
        'childItemIds': !exists(json, 'childItemIds') ? undefined : json['childItemIds'],
        'creditCurrencyCode': !exists(json, 'creditCurrencyCode') ? undefined : json['creditCurrencyCode'],
        'creditValue': !exists(json, 'creditValue') ? undefined : json['creditValue'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'duty': !exists(json, 'duty') ? undefined : json['duty'],
        'expectedDeliveryDate': !exists(json, 'expectedDeliveryDate') ? undefined : (new Date(json['expectedDeliveryDate'])),
        'fulfillmentFields': !exists(json, 'fulfillmentFields') ? undefined : ((json['fulfillmentFields'] as Array<any>).map(FulfillmentFieldFromJSON)),
        'fulfillmentLocationCode': !exists(json, 'fulfillmentLocationCode') ? undefined : json['fulfillmentLocationCode'],
        'giftCards': !exists(json, 'giftCards') ? undefined : ((json['giftCards'] as Array<any>).map(GiftCardFromJSON)),
        'goodsType': !exists(json, 'goodsType') ? undefined : json['goodsType'],
        'handling': json['handling'],
        'handlingDiscount': !exists(json, 'handlingDiscount') ? undefined : json['handlingDiscount'],
        'handlingTax': json['handlingTax'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'inventoryTags': !exists(json, 'inventoryTags') ? undefined : ((json['inventoryTags'] as Array<any>).map(InventoryTagFromJSON)),
        'isAssemblyRequired': !exists(json, 'isAssemblyRequired') ? undefined : json['isAssemblyRequired'],
        'isPackagedStandAlone': !exists(json, 'isPackagedStandAlone') ? undefined : json['isPackagedStandAlone'],
        'isReservedInventory': !exists(json, 'isReservedInventory') ? undefined : json['isReservedInventory'],
        'isTaxable': !exists(json, 'isTaxable') ? undefined : json['isTaxable'],
        'itemDiscount': !exists(json, 'itemDiscount') ? undefined : json['itemDiscount'],
        'itemTax': json['itemTax'],
        'lineId': json['lineId'],
        'lineItemAdjustment': !exists(json, 'lineItemAdjustment') ? undefined : json['lineItemAdjustment'],
        'lineItemCost': !exists(json, 'lineItemCost') ? undefined : json['lineItemCost'],
        'locatorName': !exists(json, 'locatorName') ? undefined : json['locatorName'],
        'manageStock': !exists(json, 'manageStock') ? undefined : json['manageStock'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'optionAttributeFQN': !exists(json, 'optionAttributeFQN') ? undefined : json['optionAttributeFQN'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(ProductOptionFromJSON)),
        'originalOrderItemId': !exists(json, 'originalOrderItemId') ? undefined : json['originalOrderItemId'],
        'originalQuantity': !exists(json, 'originalQuantity') ? undefined : json['originalQuantity'],
        'overridePrice': !exists(json, 'overridePrice') ? undefined : json['overridePrice'],
        'parentItemId': !exists(json, 'parentItemId') ? undefined : json['parentItemId'],
        'partNumber': !exists(json, 'partNumber') ? undefined : json['partNumber'],
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'quantity': json['quantity'],
        'readyForPickupQuantity': !exists(json, 'readyForPickupQuantity') ? undefined : json['readyForPickupQuantity'],
        'reassignedReason': !exists(json, 'reassignedReason') ? undefined : ReassignedReasonFromJSON(json['reassignedReason']),
        'shipping': json['shipping'],
        'shippingDiscount': !exists(json, 'shippingDiscount') ? undefined : json['shippingDiscount'],
        'shippingTax': json['shippingTax'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'taxData': !exists(json, 'taxData') ? undefined : json['taxData'],
        'taxableHandling': !exists(json, 'taxableHandling') ? undefined : json['taxableHandling'],
        'taxableLineItemCost': !exists(json, 'taxableLineItemCost') ? undefined : json['taxableLineItemCost'],
        'taxableShipping': !exists(json, 'taxableShipping') ? undefined : json['taxableShipping'],
        'transferQuantity': !exists(json, 'transferQuantity') ? undefined : json['transferQuantity'],
        'trueTransferQuantity': !exists(json, 'trueTransferQuantity') ? undefined : json['trueTransferQuantity'],
        'unitPrice': !exists(json, 'unitPrice') ? undefined : json['unitPrice'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'variationProductCode': !exists(json, 'variationProductCode') ? undefined : json['variationProductCode'],
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
        'weightUnit': !exists(json, 'weightUnit') ? undefined : json['weightUnit'],
        'weightedDutyAdjustment': !exists(json, 'weightedDutyAdjustment') ? undefined : json['weightedDutyAdjustment'],
        'weightedHandlingAdjustment': !exists(json, 'weightedHandlingAdjustment') ? undefined : json['weightedHandlingAdjustment'],
        'weightedHandlingTaxAdjustment': !exists(json, 'weightedHandlingTaxAdjustment') ? undefined : json['weightedHandlingTaxAdjustment'],
        'weightedLineItemTaxAdjustment': !exists(json, 'weightedLineItemTaxAdjustment') ? undefined : json['weightedLineItemTaxAdjustment'],
        'weightedShipmentAdjustment': !exists(json, 'weightedShipmentAdjustment') ? undefined : json['weightedShipmentAdjustment'],
        'weightedShippingAdjustment': !exists(json, 'weightedShippingAdjustment') ? undefined : json['weightedShippingAdjustment'],
        'weightedShippingTaxAdjustment': !exists(json, 'weightedShippingTaxAdjustment') ? undefined : json['weightedShippingTaxAdjustment'],
    };
}

export function ReassignedItemToJSON(value?: ReassignedItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actualPrice': value.actualPrice,
        'allocatedQuantity': value.allocatedQuantity,
        'allowsBackOrder': value.allowsBackOrder,
        'allowsFutureAllocate': value.allowsFutureAllocate,
        'appeasementReason': AppeasementReasonToJSON(value.appeasementReason),
        'attributes': value.attributes,
        'auditInfo': AuditInfo0ToJSON(value.auditInfo),
        'backorderReleaseDate': value.backorderReleaseDate === undefined ? undefined : (value.backorderReleaseDate.toISOString()),
        'blockAssignment': value.blockAssignment,
        'cartItemId': value.cartItemId,
        'childItemIds': value.childItemIds,
        'creditCurrencyCode': value.creditCurrencyCode,
        'creditValue': value.creditValue,
        'data': value.data,
        'duty': value.duty,
        'expectedDeliveryDate': value.expectedDeliveryDate === undefined ? undefined : (value.expectedDeliveryDate.toISOString()),
        'fulfillmentFields': value.fulfillmentFields === undefined ? undefined : ((value.fulfillmentFields as Array<any>).map(FulfillmentFieldToJSON)),
        'fulfillmentLocationCode': value.fulfillmentLocationCode,
        'giftCards': value.giftCards === undefined ? undefined : ((value.giftCards as Array<any>).map(GiftCardToJSON)),
        'goodsType': value.goodsType,
        'handling': value.handling,
        'handlingDiscount': value.handlingDiscount,
        'handlingTax': value.handlingTax,
        'imageUrl': value.imageUrl,
        'inventoryTags': value.inventoryTags === undefined ? undefined : ((value.inventoryTags as Array<any>).map(InventoryTagToJSON)),
        'isAssemblyRequired': value.isAssemblyRequired,
        'isPackagedStandAlone': value.isPackagedStandAlone,
        'isReservedInventory': value.isReservedInventory,
        'isTaxable': value.isTaxable,
        'itemDiscount': value.itemDiscount,
        'itemTax': value.itemTax,
        'lineId': value.lineId,
        'lineItemAdjustment': value.lineItemAdjustment,
        'lineItemCost': value.lineItemCost,
        'locatorName': value.locatorName,
        'manageStock': value.manageStock,
        'name': value.name,
        'optionAttributeFQN': value.optionAttributeFQN,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(ProductOptionToJSON)),
        'originalOrderItemId': value.originalOrderItemId,
        'originalQuantity': value.originalQuantity,
        'overridePrice': value.overridePrice,
        'parentItemId': value.parentItemId,
        'partNumber': value.partNumber,
        'productCode': value.productCode,
        'quantity': value.quantity,
        'readyForPickupQuantity': value.readyForPickupQuantity,
        'reassignedReason': ReassignedReasonToJSON(value.reassignedReason),
        'shipping': value.shipping,
        'shippingDiscount': value.shippingDiscount,
        'shippingTax': value.shippingTax,
        'sku': value.sku,
        'taxData': value.taxData,
        'taxableHandling': value.taxableHandling,
        'taxableLineItemCost': value.taxableLineItemCost,
        'taxableShipping': value.taxableShipping,
        'transferQuantity': value.transferQuantity,
        'trueTransferQuantity': value.trueTransferQuantity,
        'unitPrice': value.unitPrice,
        'upc': value.upc,
        'variationProductCode': value.variationProductCode,
        'weight': value.weight,
        'weightUnit': value.weightUnit,
        'weightedDutyAdjustment': value.weightedDutyAdjustment,
        'weightedHandlingAdjustment': value.weightedHandlingAdjustment,
        'weightedHandlingTaxAdjustment': value.weightedHandlingTaxAdjustment,
        'weightedLineItemTaxAdjustment': value.weightedLineItemTaxAdjustment,
        'weightedShipmentAdjustment': value.weightedShipmentAdjustment,
        'weightedShippingAdjustment': value.weightedShippingAdjustment,
        'weightedShippingTaxAdjustment': value.weightedShippingTaxAdjustment,
    };
}

