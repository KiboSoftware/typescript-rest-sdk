/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { TaskDefinition } from './TaskDefinition';
import {
    TaskDefinitionFromJSON,
    TaskDefinitionFromJSONTyped,
    TaskDefinitionToJSON,
} from './TaskDefinition';
import type { WorkflowProcessVariable } from './WorkflowProcessVariable';
import {
    WorkflowProcessVariableFromJSON,
    WorkflowProcessVariableFromJSONTyped,
    WorkflowProcessVariableToJSON,
} from './WorkflowProcessVariable';

/**
 * 
 * @export
 * @interface EntityModelOfWorkflowProcess
 */
export interface EntityModelOfWorkflowProcess {
    /**
     * 
     * @type {Links}
     * @memberof EntityModelOfWorkflowProcess
     */
    links?: Links;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EntityModelOfWorkflowProcess
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfWorkflowProcess
     */
    containerAlias?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfWorkflowProcess
     */
    containerId?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfWorkflowProcess
     */
    id?: string;
    /**
     * 
     * @type {Array<TaskDefinition>}
     * @memberof EntityModelOfWorkflowProcess
     */
    tasks?: Array<TaskDefinition>;
    /**
     * 
     * @type {Array<WorkflowProcessVariable>}
     * @memberof EntityModelOfWorkflowProcess
     */
    variables?: Array<WorkflowProcessVariable>;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfWorkflowProcess
     */
    version?: string;
}

/**
 * Check if a given object implements the EntityModelOfWorkflowProcess interface.
 */
export function instanceOfEntityModelOfWorkflowProcess(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EntityModelOfWorkflowProcessFromJSON(json: any): EntityModelOfWorkflowProcess {
    return EntityModelOfWorkflowProcessFromJSONTyped(json, false);
}

export function EntityModelOfWorkflowProcessFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityModelOfWorkflowProcess {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, '_links') ? undefined : LinksFromJSON(json['_links']),
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'containerAlias': !exists(json, 'containerAlias') ? undefined : json['containerAlias'],
        'containerId': !exists(json, 'containerId') ? undefined : json['containerId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tasks': !exists(json, 'tasks') ? undefined : ((json['tasks'] as Array<any>).map(TaskDefinitionFromJSON)),
        'variables': !exists(json, 'variables') ? undefined : ((json['variables'] as Array<any>).map(WorkflowProcessVariableFromJSON)),
        'version': !exists(json, 'version') ? undefined : json['version'],
    };
}

export function EntityModelOfWorkflowProcessToJSON(value?: EntityModelOfWorkflowProcess | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_links': LinksToJSON(value.links),
        'attributes': value.attributes,
        'containerAlias': value.containerAlias,
        'containerId': value.containerId,
        'id': value.id,
        'tasks': value.tasks === undefined ? undefined : ((value.tasks as Array<any>).map(TaskDefinitionToJSON)),
        'variables': value.variables === undefined ? undefined : ((value.variables as Array<any>).map(WorkflowProcessVariableToJSON)),
        'version': value.version,
    };
}

