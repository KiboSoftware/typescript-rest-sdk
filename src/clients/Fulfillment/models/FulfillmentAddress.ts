/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FulfillmentAddress
 */
export interface FulfillmentAddress {
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    address3?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    address4?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    addressType?: FulfillmentAddressAddressTypeEnum;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof FulfillmentAddress
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    cityOrTown?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    countryCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FulfillmentAddress
     */
    isValidated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    latitude?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    longitude?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    postalOrZipCode?: string;
    /**
     * 
     * @type {string}
     * @memberof FulfillmentAddress
     */
    stateOrProvince?: string;
}


/**
 * @export
 */
export const FulfillmentAddressAddressTypeEnum = {
    Commercial: 'Commercial',
    Residential: 'Residential'
} as const;
export type FulfillmentAddressAddressTypeEnum = typeof FulfillmentAddressAddressTypeEnum[keyof typeof FulfillmentAddressAddressTypeEnum];


/**
 * Check if a given object implements the FulfillmentAddress interface.
 */
export function instanceOfFulfillmentAddress(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FulfillmentAddressFromJSON(json: any): FulfillmentAddress {
    return FulfillmentAddressFromJSONTyped(json, false);
}

export function FulfillmentAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): FulfillmentAddress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address1': !exists(json, 'address1') ? undefined : json['address1'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'address3': !exists(json, 'address3') ? undefined : json['address3'],
        'address4': !exists(json, 'address4') ? undefined : json['address4'],
        'addressType': !exists(json, 'addressType') ? undefined : json['addressType'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'cityOrTown': !exists(json, 'cityOrTown') ? undefined : json['cityOrTown'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'isValidated': !exists(json, 'isValidated') ? undefined : json['isValidated'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'postalOrZipCode': !exists(json, 'postalOrZipCode') ? undefined : json['postalOrZipCode'],
        'stateOrProvince': !exists(json, 'stateOrProvince') ? undefined : json['stateOrProvince'],
    };
}

export function FulfillmentAddressToJSON(value?: FulfillmentAddress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address1': value.address1,
        'address2': value.address2,
        'address3': value.address3,
        'address4': value.address4,
        'addressType': value.addressType,
        'attributes': value.attributes,
        'cityOrTown': value.cityOrTown,
        'countryCode': value.countryCode,
        'isValidated': value.isValidated,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'postalOrZipCode': value.postalOrZipCode,
        'stateOrProvince': value.stateOrProvince,
    };
}

