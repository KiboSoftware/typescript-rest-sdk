/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { Phone } from './Phone';
import {
    PhoneFromJSON,
    PhoneFromJSONTyped,
    PhoneToJSON,
} from './Phone';

/**
 * 
 * @export
 * @interface EntityModelOfContact
 */
export interface EntityModelOfContact {
    /**
     * 
     * @type {Links}
     * @memberof EntityModelOfContact
     */
    links?: Links;
    /**
     * 
     * @type {Address}
     * @memberof EntityModelOfContact
     */
    address?: Address;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof EntityModelOfContact
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    companyOrOrganization?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    fullName?: string;
    /**
     * 
     * @type {number}
     * @memberof EntityModelOfContact
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    lastNameOrSurname?: string;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    middleNameOrInitial?: string;
    /**
     * 
     * @type {Phone}
     * @memberof EntityModelOfContact
     */
    phoneNumbers?: Phone;
    /**
     * 
     * @type {string}
     * @memberof EntityModelOfContact
     */
    shortFullName?: string;
}

/**
 * Check if a given object implements the EntityModelOfContact interface.
 */
export function instanceOfEntityModelOfContact(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EntityModelOfContactFromJSON(json: any): EntityModelOfContact {
    return EntityModelOfContactFromJSONTyped(json, false);
}

export function EntityModelOfContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntityModelOfContact {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, '_links') ? undefined : LinksFromJSON(json['_links']),
        'address': !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'companyOrOrganization': !exists(json, 'companyOrOrganization') ? undefined : json['companyOrOrganization'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lastNameOrSurname': !exists(json, 'lastNameOrSurname') ? undefined : json['lastNameOrSurname'],
        'middleNameOrInitial': !exists(json, 'middleNameOrInitial') ? undefined : json['middleNameOrInitial'],
        'phoneNumbers': !exists(json, 'phoneNumbers') ? undefined : PhoneFromJSON(json['phoneNumbers']),
        'shortFullName': !exists(json, 'shortFullName') ? undefined : json['shortFullName'],
    };
}

export function EntityModelOfContactToJSON(value?: EntityModelOfContact | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '_links': LinksToJSON(value.links),
        'address': AddressToJSON(value.address),
        'attributes': value.attributes,
        'companyOrOrganization': value.companyOrOrganization,
        'email': value.email,
        'firstName': value.firstName,
        'fullName': value.fullName,
        'id': value.id,
        'lastNameOrSurname': value.lastNameOrSurname,
        'middleNameOrInitial': value.middleNameOrInitial,
        'phoneNumbers': PhoneToJSON(value.phoneNumbers),
        'shortFullName': value.shortFullName,
    };
}

