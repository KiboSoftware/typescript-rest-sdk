/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RejectedReason } from './RejectedReason';
import {
    RejectedReasonFromJSON,
    RejectedReasonFromJSONTyped,
    RejectedReasonToJSON,
} from './RejectedReason';

/**
 * 
 * @export
 * @interface RejectItem
 */
export interface RejectItem {
    /**
     * If true, order routing will not suggest that any shipments with these items be assigned to the original location. This persists until the inventory records for these items are updated. When the records are updated, blockAssignment will automatically be disabled again to allow new assignments. This is an optional parameter and defaults to false if not provided in the request.
     * @type {boolean}
     * @memberof RejectItem
     */
    blockAssignment?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RejectItem
     */
    lineId: number;
    /**
     * 
     * @type {number}
     * @memberof RejectItem
     */
    quantity: number;
    /**
     * 
     * @type {RejectedReason}
     * @memberof RejectItem
     */
    rejectedReason?: RejectedReason;
}

/**
 * Check if a given object implements the RejectItem interface.
 */
export function instanceOfRejectItem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "lineId" in value;
    isInstance = isInstance && "quantity" in value;

    return isInstance;
}

export function RejectItemFromJSON(json: any): RejectItem {
    return RejectItemFromJSONTyped(json, false);
}

export function RejectItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): RejectItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAssignment': !exists(json, 'blockAssignment') ? undefined : json['blockAssignment'],
        'lineId': json['lineId'],
        'quantity': json['quantity'],
        'rejectedReason': !exists(json, 'rejectedReason') ? undefined : RejectedReasonFromJSON(json['rejectedReason']),
    };
}

export function RejectItemToJSON(value?: RejectItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAssignment': value.blockAssignment,
        'lineId': value.lineId,
        'quantity': value.quantity,
        'rejectedReason': RejectedReasonToJSON(value.rejectedReason),
    };
}

