/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RejectItem } from './RejectItem';
import {
    RejectItemFromJSON,
    RejectItemFromJSONTyped,
    RejectItemToJSON,
} from './RejectItem';
import type { RejectedReason } from './RejectedReason';
import {
    RejectedReasonFromJSON,
    RejectedReasonFromJSONTyped,
    RejectedReasonToJSON,
} from './RejectedReason';

/**
 * 
 * @export
 * @interface RejectShipment
 */
export interface RejectShipment {
    /**
     * 
     * @type {boolean}
     * @memberof RejectShipment
     */
    blockAssignment?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RejectShipment
     */
    isUserAction?: boolean;
    /**
     * 
     * @type {Array<RejectItem>}
     * @memberof RejectShipment
     */
    items?: Array<RejectItem>;
    /**
     * 
     * @type {RejectedReason}
     * @memberof RejectShipment
     */
    rejectedReason?: RejectedReason;
}

/**
 * Check if a given object implements the RejectShipment interface.
 */
export function instanceOfRejectShipment(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RejectShipmentFromJSON(json: any): RejectShipment {
    return RejectShipmentFromJSONTyped(json, false);
}

export function RejectShipmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): RejectShipment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAssignment': !exists(json, 'blockAssignment') ? undefined : json['blockAssignment'],
        'isUserAction': !exists(json, 'isUserAction') ? undefined : json['isUserAction'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(RejectItemFromJSON)),
        'rejectedReason': !exists(json, 'rejectedReason') ? undefined : RejectedReasonFromJSON(json['rejectedReason']),
    };
}

export function RejectShipmentToJSON(value?: RejectShipment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAssignment': value.blockAssignment,
        'isUserAction': value.isUserAction,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(RejectItemToJSON)),
        'rejectedReason': RejectedReasonToJSON(value.rejectedReason),
    };
}

