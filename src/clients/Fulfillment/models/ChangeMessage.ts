/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppeasementReason } from './AppeasementReason';
import {
    AppeasementReasonFromJSON,
    AppeasementReasonFromJSONTyped,
    AppeasementReasonToJSON,
} from './AppeasementReason';

/**
 * 
 * @export
 * @interface ChangeMessage
 */
export interface ChangeMessage {
    /**
     * 
     * @type {number}
     * @memberof ChangeMessage
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    appId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    appKey?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    appName?: string;
    /**
     * 
     * @type {AppeasementReason}
     * @memberof ChangeMessage
     */
    appeasementReason?: AppeasementReason;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ChangeMessage
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    changeMessageId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    correlationId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ChangeMessage
     */
    createdDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    identifier?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    newValue?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    oldValue?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    subjectType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChangeMessage
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    userDisplayName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    userFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    userLastName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeMessage
     */
    verb?: string;
}

/**
 * Check if a given object implements the ChangeMessage interface.
 */
export function instanceOfChangeMessage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeMessageFromJSON(json: any): ChangeMessage {
    return ChangeMessageFromJSONTyped(json, false);
}

export function ChangeMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'appKey': !exists(json, 'appKey') ? undefined : json['appKey'],
        'appName': !exists(json, 'appName') ? undefined : json['appName'],
        'appeasementReason': !exists(json, 'appeasementReason') ? undefined : AppeasementReasonFromJSON(json['appeasementReason']),
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'changeMessageId': !exists(json, 'changeMessageId') ? undefined : json['changeMessageId'],
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
        'identifier': !exists(json, 'identifier') ? undefined : json['identifier'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'newValue': !exists(json, 'newValue') ? undefined : json['newValue'],
        'oldValue': !exists(json, 'oldValue') ? undefined : json['oldValue'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'subjectType': !exists(json, 'subjectType') ? undefined : json['subjectType'],
        'success': !exists(json, 'success') ? undefined : json['success'],
        'userDisplayName': !exists(json, 'userDisplayName') ? undefined : json['userDisplayName'],
        'userFirstName': !exists(json, 'userFirstName') ? undefined : json['userFirstName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'userLastName': !exists(json, 'userLastName') ? undefined : json['userLastName'],
        'verb': !exists(json, 'verb') ? undefined : json['verb'],
    };
}

export function ChangeMessageToJSON(value?: ChangeMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'appId': value.appId,
        'appKey': value.appKey,
        'appName': value.appName,
        'appeasementReason': AppeasementReasonToJSON(value.appeasementReason),
        'attributes': value.attributes,
        'changeMessageId': value.changeMessageId,
        'correlationId': value.correlationId,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
        'identifier': value.identifier,
        'message': value.message,
        'metadata': value.metadata,
        'newValue': value.newValue,
        'oldValue': value.oldValue,
        'subject': value.subject,
        'subjectType': value.subjectType,
        'success': value.success,
        'userDisplayName': value.userDisplayName,
        'userFirstName': value.userFirstName,
        'userId': value.userId,
        'userLastName': value.userLastName,
        'verb': value.verb,
    };
}

