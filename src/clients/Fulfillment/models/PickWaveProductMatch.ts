/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PickWaveProductMatch
 */
export interface PickWaveProductMatch {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PickWaveProductMatch
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof PickWaveProductMatch
     */
    identifier: PickWaveProductMatchIdentifierEnum;
    /**
     * 
     * @type {string}
     * @memberof PickWaveProductMatch
     */
    matchType: PickWaveProductMatchMatchTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PickWaveProductMatch
     */
    value?: string;
}


/**
 * @export
 */
export const PickWaveProductMatchIdentifierEnum = {
    ProductCode: 'PRODUCT_CODE',
    Upc: 'UPC'
} as const;
export type PickWaveProductMatchIdentifierEnum = typeof PickWaveProductMatchIdentifierEnum[keyof typeof PickWaveProductMatchIdentifierEnum];

/**
 * @export
 */
export const PickWaveProductMatchMatchTypeEnum = {
    Contains: 'CONTAINS',
    EndsWith: 'ENDS_WITH',
    Exact: 'EXACT',
    StartsWith: 'STARTS_WITH'
} as const;
export type PickWaveProductMatchMatchTypeEnum = typeof PickWaveProductMatchMatchTypeEnum[keyof typeof PickWaveProductMatchMatchTypeEnum];


/**
 * Check if a given object implements the PickWaveProductMatch interface.
 */
export function instanceOfPickWaveProductMatch(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "matchType" in value;

    return isInstance;
}

export function PickWaveProductMatchFromJSON(json: any): PickWaveProductMatch {
    return PickWaveProductMatchFromJSONTyped(json, false);
}

export function PickWaveProductMatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): PickWaveProductMatch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'identifier': json['identifier'],
        'matchType': json['matchType'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function PickWaveProductMatchToJSON(value?: PickWaveProductMatch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': value.attributes,
        'identifier': value.identifier,
        'matchType': value.matchType,
        'value': value.value,
    };
}

