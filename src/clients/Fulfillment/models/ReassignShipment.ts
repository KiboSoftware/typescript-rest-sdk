/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReassignItem } from './ReassignItem';
import {
    ReassignItemFromJSON,
    ReassignItemFromJSONTyped,
    ReassignItemToJSON,
} from './ReassignItem';
import type { ReassignedReason } from './ReassignedReason';
import {
    ReassignedReasonFromJSON,
    ReassignedReasonFromJSONTyped,
    ReassignedReasonToJSON,
} from './ReassignedReason';

/**
 * 
 * @export
 * @interface ReassignShipment
 */
export interface ReassignShipment {
    /**
     * If true, order routing will not suggest that any shipments with these items be assigned to the original location. This persists until the inventory records for these items are updated. When the records are updated, blockAssignment will automatically be disabled again to allow new assignments. This is an optional parameter and defaults to false if not provided in the request.
     * @type {boolean}
     * @memberof ReassignShipment
     */
    blockAssignment?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReassignShipment
     */
    fulfillmentLocationCode?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReassignShipment
     */
    isUserAction?: boolean;
    /**
     * 
     * @type {Array<ReassignItem>}
     * @memberof ReassignShipment
     */
    items?: Array<ReassignItem>;
    /**
     * 
     * @type {ReassignedReason}
     * @memberof ReassignShipment
     */
    reassignedReason?: ReassignedReason;
}

/**
 * Check if a given object implements the ReassignShipment interface.
 */
export function instanceOfReassignShipment(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReassignShipmentFromJSON(json: any): ReassignShipment {
    return ReassignShipmentFromJSONTyped(json, false);
}

export function ReassignShipmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReassignShipment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAssignment': !exists(json, 'blockAssignment') ? undefined : json['blockAssignment'],
        'fulfillmentLocationCode': !exists(json, 'fulfillmentLocationCode') ? undefined : json['fulfillmentLocationCode'],
        'isUserAction': !exists(json, 'isUserAction') ? undefined : json['isUserAction'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(ReassignItemFromJSON)),
        'reassignedReason': !exists(json, 'reassignedReason') ? undefined : ReassignedReasonFromJSON(json['reassignedReason']),
    };
}

export function ReassignShipmentToJSON(value?: ReassignShipment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAssignment': value.blockAssignment,
        'fulfillmentLocationCode': value.fulfillmentLocationCode,
        'isUserAction': value.isUserAction,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(ReassignItemToJSON)),
        'reassignedReason': ReassignedReasonToJSON(value.reassignedReason),
    };
}

