/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { PickWaveContent0 } from './PickWaveContent0';
import {
    PickWaveContent0FromJSON,
    PickWaveContent0FromJSONTyped,
    PickWaveContent0ToJSON,
} from './PickWaveContent0';

/**
 * 
 * @export
 * @interface ContentGroup
 */
export interface ContentGroup {
    /**
     * 
     * @type {AuditInfo}
     * @memberof ContentGroup
     */
    auditInfo?: AuditInfo;
    /**
     * 
     * @type {Array<PickWaveContent0>}
     * @memberof ContentGroup
     */
    contents?: Array<PickWaveContent0>;
    /**
     * 
     * @type {string}
     * @memberof ContentGroup
     */
    imageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentGroup
     */
    locatorName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentGroup
     */
    productCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ContentGroup
     */
    quantity?: number;
    /**
     * 
     * @type {string}
     * @memberof ContentGroup
     */
    upc?: string;
}

/**
 * Check if a given object implements the ContentGroup interface.
 */
export function instanceOfContentGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContentGroupFromJSON(json: any): ContentGroup {
    return ContentGroupFromJSONTyped(json, false);
}

export function ContentGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'contents': !exists(json, 'contents') ? undefined : ((json['contents'] as Array<any>).map(PickWaveContent0FromJSON)),
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'locatorName': !exists(json, 'locatorName') ? undefined : json['locatorName'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
    };
}

export function ContentGroupToJSON(value?: ContentGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'contents': value.contents === undefined ? undefined : ((value.contents as Array<any>).map(PickWaveContent0ToJSON)),
        'imageUrl': value.imageUrl,
        'locatorName': value.locatorName,
        'name': value.name,
        'productCode': value.productCode,
        'quantity': value.quantity,
        'upc': value.upc,
    };
}

