/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PickWaveBinRange } from './PickWaveBinRange';
import {
    PickWaveBinRangeFromJSON,
    PickWaveBinRangeFromJSONTyped,
    PickWaveBinRangeToJSON,
} from './PickWaveBinRange';
import type { PickWaveProductMatch } from './PickWaveProductMatch';
import {
    PickWaveProductMatchFromJSON,
    PickWaveProductMatchFromJSONTyped,
    PickWaveProductMatchToJSON,
} from './PickWaveProductMatch';

/**
 * 
 * @export
 * @interface CreatePickWave
 */
export interface CreatePickWave {
    /**
     * 
     * @type {boolean}
     * @memberof CreatePickWave
     */
    allowEmptyWave?: boolean;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CreatePickWave
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {Array<PickWaveBinRange>}
     * @memberof CreatePickWave
     */
    binRanges?: Array<PickWaveBinRange>;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePickWave
     */
    fulfillableShipmentsOnly?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreatePickWave
     */
    fulfillmentLocationCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePickWave
     */
    includeZeroInventory?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePickWave
     */
    lockWave?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreatePickWave
     */
    maxShipments: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePickWave
     */
    pickWaveType?: CreatePickWavePickWaveTypeEnum;
    /**
     * 
     * @type {Array<PickWaveProductMatch>}
     * @memberof CreatePickWave
     */
    products?: Array<PickWaveProductMatch>;
    /**
     * 
     * @type {Date}
     * @memberof CreatePickWave
     */
    shipmentDateEnd?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CreatePickWave
     */
    shipmentDateStart?: Date;
    /**
     * 
     * @type {string}
     * @memberof CreatePickWave
     */
    shipmentType: CreatePickWaveShipmentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreatePickWave
     */
    shippingOption?: CreatePickWaveShippingOptionEnum;
}


/**
 * @export
 */
export const CreatePickWavePickWaveTypeEnum = {
    Multiple: 'MULTIPLE',
    Normal: 'NORMAL',
    Single: 'SINGLE'
} as const;
export type CreatePickWavePickWaveTypeEnum = typeof CreatePickWavePickWaveTypeEnum[keyof typeof CreatePickWavePickWaveTypeEnum];

/**
 * @export
 */
export const CreatePickWaveShipmentTypeEnum = {
    Bopis: 'BOPIS',
    Sth: 'STH'
} as const;
export type CreatePickWaveShipmentTypeEnum = typeof CreatePickWaveShipmentTypeEnum[keyof typeof CreatePickWaveShipmentTypeEnum];

/**
 * @export
 */
export const CreatePickWaveShippingOptionEnum = {
    All: 'ALL',
    ExpressOnly: 'EXPRESS_ONLY',
    StandardOnly: 'STANDARD_ONLY'
} as const;
export type CreatePickWaveShippingOptionEnum = typeof CreatePickWaveShippingOptionEnum[keyof typeof CreatePickWaveShippingOptionEnum];


/**
 * Check if a given object implements the CreatePickWave interface.
 */
export function instanceOfCreatePickWave(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fulfillmentLocationCode" in value;
    isInstance = isInstance && "maxShipments" in value;
    isInstance = isInstance && "shipmentType" in value;

    return isInstance;
}

export function CreatePickWaveFromJSON(json: any): CreatePickWave {
    return CreatePickWaveFromJSONTyped(json, false);
}

export function CreatePickWaveFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreatePickWave {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowEmptyWave': !exists(json, 'allowEmptyWave') ? undefined : json['allowEmptyWave'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'binRanges': !exists(json, 'binRanges') ? undefined : ((json['binRanges'] as Array<any>).map(PickWaveBinRangeFromJSON)),
        'fulfillableShipmentsOnly': !exists(json, 'fulfillableShipmentsOnly') ? undefined : json['fulfillableShipmentsOnly'],
        'fulfillmentLocationCode': json['fulfillmentLocationCode'],
        'includeZeroInventory': !exists(json, 'includeZeroInventory') ? undefined : json['includeZeroInventory'],
        'lockWave': !exists(json, 'lockWave') ? undefined : json['lockWave'],
        'maxShipments': json['maxShipments'],
        'pickWaveType': !exists(json, 'pickWaveType') ? undefined : json['pickWaveType'],
        'products': !exists(json, 'products') ? undefined : ((json['products'] as Array<any>).map(PickWaveProductMatchFromJSON)),
        'shipmentDateEnd': !exists(json, 'shipmentDateEnd') ? undefined : (new Date(json['shipmentDateEnd'])),
        'shipmentDateStart': !exists(json, 'shipmentDateStart') ? undefined : (new Date(json['shipmentDateStart'])),
        'shipmentType': json['shipmentType'],
        'shippingOption': !exists(json, 'shippingOption') ? undefined : json['shippingOption'],
    };
}

export function CreatePickWaveToJSON(value?: CreatePickWave | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowEmptyWave': value.allowEmptyWave,
        'attributes': value.attributes,
        'binRanges': value.binRanges === undefined ? undefined : ((value.binRanges as Array<any>).map(PickWaveBinRangeToJSON)),
        'fulfillableShipmentsOnly': value.fulfillableShipmentsOnly,
        'fulfillmentLocationCode': value.fulfillmentLocationCode,
        'includeZeroInventory': value.includeZeroInventory,
        'lockWave': value.lockWave,
        'maxShipments': value.maxShipments,
        'pickWaveType': value.pickWaveType,
        'products': value.products === undefined ? undefined : ((value.products as Array<any>).map(PickWaveProductMatchToJSON)),
        'shipmentDateEnd': value.shipmentDateEnd === undefined ? undefined : (value.shipmentDateEnd.toISOString()),
        'shipmentDateStart': value.shipmentDateStart === undefined ? undefined : (value.shipmentDateStart.toISOString()),
        'shipmentType': value.shipmentType,
        'shippingOption': value.shippingOption,
    };
}

