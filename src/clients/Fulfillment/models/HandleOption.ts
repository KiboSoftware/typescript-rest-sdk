/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Fulfillment Service
 * OpenAPI Spec for Kibo Fulfillment Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Item } from './Item';
import {
    ItemFromJSON,
    ItemFromJSONTyped,
    ItemToJSON,
} from './Item';
import type { TaskReason } from './TaskReason';
import {
    TaskReasonFromJSON,
    TaskReasonFromJSONTyped,
    TaskReasonToJSON,
} from './TaskReason';

/**
 * 
 * @export
 * @interface HandleOption
 */
export interface HandleOption {
    /**
     * 
     * @type {boolean}
     * @memberof HandleOption
     */
    blockAssignment?: boolean;
    /**
     * 
     * @type {Array<Item>}
     * @memberof HandleOption
     */
    items?: Array<Item>;
    /**
     * 
     * @type {TaskReason}
     * @memberof HandleOption
     */
    reason?: TaskReason;
}

/**
 * Check if a given object implements the HandleOption interface.
 */
export function instanceOfHandleOption(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HandleOptionFromJSON(json: any): HandleOption {
    return HandleOptionFromJSONTyped(json, false);
}

export function HandleOptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): HandleOption {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockAssignment': !exists(json, 'blockAssignment') ? undefined : json['blockAssignment'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(ItemFromJSON)),
        'reason': !exists(json, 'reason') ? undefined : TaskReasonFromJSON(json['reason']),
    };
}

export function HandleOptionToJSON(value?: HandleOption | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockAssignment': value.blockAssignment,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(ItemToJSON)),
        'reason': TaskReasonToJSON(value.reason),
    };
}

