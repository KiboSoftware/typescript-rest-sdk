/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ReturnSettings,
} from '../models';

export interface CreateReturnSettingsRequest {
    responseFields?: string;
    returnSettings?: ReturnSettings;
}

export interface GetReturnSettingsRequest {
    responseFields?: string;
}

export interface UpdateReturnSettingsRequest {
    responseFields?: string;
    returnSettings?: ReturnSettings;
}

/**
 * ReturnSettingsApi - interface
 * 
 * @export
 * @interface ReturnSettingsApiInterface
 */
export interface ReturnSettingsApiInterface {
    /**
     * Creates return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * @summary Create Return Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReturnSettings} [returnSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnSettingsApiInterface
     */
    createReturnSettingsRaw(requestParameters: CreateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>>;

    /**
     * Creates return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Create Return Settings
     */
    createReturnSettings(requestParameters: CreateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings>;

    /**
     * Retrieves return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * @summary Get Return Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnSettingsApiInterface
     */
    getReturnSettingsRaw(requestParameters: GetReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>>;

    /**
     * Retrieves return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Get Return Settings
     */
    getReturnSettings(requestParameters: GetReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings>;

    /**
     * Modifies existing fulfillment settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * @summary Update Return Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReturnSettings} [returnSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnSettingsApiInterface
     */
    updateReturnSettingsRaw(requestParameters: UpdateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>>;

    /**
     * Modifies existing fulfillment settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Update Return Settings
     */
    updateReturnSettings(requestParameters: UpdateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings>;

}

/**
 * 
 */
export class ReturnSettingsApi extends runtime.BaseAPI implements ReturnSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Create Return Settings
     */


    async createReturnSettingsRaw(requestParameters: CreateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/return/returnsettings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Create Return Settings
     */
    async createReturnSettings(requestParameters: CreateReturnSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings> {
        const response = await this.createReturnSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Get Return Settings
     */


    async getReturnSettingsRaw(requestParameters: GetReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/return/returnsettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Get Return Settings
     */
    async getReturnSettings(requestParameters: GetReturnSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings> {
        const response = await this.getReturnSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies existing fulfillment settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Update Return Settings
     */


    async updateReturnSettingsRaw(requestParameters: UpdateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/return/returnsettings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies existing fulfillment settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Update Return Settings
     */
    async updateReturnSettings(requestParameters: UpdateReturnSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings> {
        const response = await this.updateReturnSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
