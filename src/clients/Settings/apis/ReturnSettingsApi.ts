/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ReturnSettings,
} from '../models';
import {
    ReturnSettingsFromJSON,
    ReturnSettingsToJSON,
} from '../models';

export interface ReturnSettingsApiCreateReturnSettingsRequest {
    returnSettings?: ReturnSettings;
}

export interface ReturnSettingsApiUpdateReturnSettingsRequest {
    returnSettings?: ReturnSettings;
}

/**
 * 
 */
export class ReturnSettingsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Create Return Settings
     */


    async createReturnSettingsRaw(requestParameters: ReturnSettingsApiCreateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/return/returnsettings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnSettingsToJSON(requestParameters.returnSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnSettingsFromJSON(jsonValue));
    }

    /**
     * Creates return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Create Return Settings
     */
    async createReturnSettings(requestParameters: ReturnSettingsApiCreateReturnSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings> {
        const response = await this.createReturnSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Get Return Settings
     */


    async getReturnSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/return/returnsettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnSettingsFromJSON(jsonValue));
    }

    /**
     * Retrieves return settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Get Return Settings
     */
    async getReturnSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings> {
        const response = await this.getReturnSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Modifies existing fulfillment settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Update Return Settings
     */


    async updateReturnSettingsRaw(requestParameters: ReturnSettingsApiUpdateReturnSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/return/returnsettings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnSettingsToJSON(requestParameters.returnSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnSettingsFromJSON(jsonValue));
    }

    /**
     * Modifies existing fulfillment settings which includes return processing fee, return shipping location   and return label creation on fulfillment
     * Update Return Settings
     */
    async updateReturnSettings(requestParameters: ReturnSettingsApiUpdateReturnSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnSettings> {
        const response = await this.updateReturnSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
