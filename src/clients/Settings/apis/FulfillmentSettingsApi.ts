/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  FulfillmentSettings,
} from '../models';

export interface CreateFulfillmentSettingsRequest {
    responseFields?: string;
    fulfillmentSettings?: FulfillmentSettings;
}

export interface GetFulfillmentSettingsRequest {
    responseFields?: string;
}

export interface UpdateFulfillmentSettingsRequest {
    responseFields?: string;
    fulfillmentSettings?: FulfillmentSettings;
}

/**
 * FulfillmentSettingsApi - interface
 * 
 * @export
 * @interface FulfillmentSettingsApiInterface
 */
export interface FulfillmentSettingsApiInterface {
    /**
     * Creates fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * @summary Create Fulfillment Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {FulfillmentSettings} [fulfillmentSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentSettingsApiInterface
     */
    createFulfillmentSettingsRaw(requestParameters: CreateFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentSettings>>;

    /**
     * Creates fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * Create Fulfillment Settings
     */
    createFulfillmentSettings(requestParameters: CreateFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentSettings>;

    /**
     * Retrieves existing fulfillment settings defined on the site
     * @summary Get Fulfillment Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentSettingsApiInterface
     */
    getFulfillmentSettingsRaw(requestParameters: GetFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentSettings>>;

    /**
     * Retrieves existing fulfillment settings defined on the site
     * Get Fulfillment Settings
     */
    getFulfillmentSettings(requestParameters: GetFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentSettings>;

    /**
     * Modifies existing fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * @summary Update Fulfillment Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {FulfillmentSettings} [fulfillmentSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FulfillmentSettingsApiInterface
     */
    updateFulfillmentSettingsRaw(requestParameters: UpdateFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentSettings>>;

    /**
     * Modifies existing fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * Update Fulfillment Settings
     */
    updateFulfillmentSettings(requestParameters: UpdateFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentSettings>;

}

/**
 * 
 */
export class FulfillmentSettingsApi extends runtime.BaseAPI implements FulfillmentSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * Create Fulfillment Settings
     */


    async createFulfillmentSettingsRaw(requestParameters: CreateFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/fulfillment/fulfillmentsettings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fulfillmentSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * Create Fulfillment Settings
     */
    async createFulfillmentSettings(requestParameters: CreateFulfillmentSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentSettings> {
        const response = await this.createFulfillmentSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves existing fulfillment settings defined on the site
     * Get Fulfillment Settings
     */


    async getFulfillmentSettingsRaw(requestParameters: GetFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/fulfillment/fulfillmentsettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves existing fulfillment settings defined on the site
     * Get Fulfillment Settings
     */
    async getFulfillmentSettings(requestParameters: GetFulfillmentSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentSettings> {
        const response = await this.getFulfillmentSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies existing fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * Update Fulfillment Settings
     */


    async updateFulfillmentSettingsRaw(requestParameters: UpdateFulfillmentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/fulfillment/fulfillmentsettings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fulfillmentSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies existing fulfillment settings for the site, which includes bpm settings, ship to store, back order days etc.
     * Update Fulfillment Settings
     */
    async updateFulfillmentSettings(requestParameters: UpdateFulfillmentSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentSettings> {
        const response = await this.updateFulfillmentSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
