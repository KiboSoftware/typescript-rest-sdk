/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CheckoutSettings,
  CustomerCheckoutSettings,
  ExternalPaymentWorkflowDefinition,
} from '../models';
import {
    CheckoutSettingsFromJSON,
    CheckoutSettingsToJSON,
    CustomerCheckoutSettingsFromJSON,
    CustomerCheckoutSettingsToJSON,
    ExternalPaymentWorkflowDefinitionFromJSON,
    ExternalPaymentWorkflowDefinitionToJSON,
} from '../models';

export interface CheckoutSettingsApiAddThirdPartyPaymentWorkflowRequest {
    externalPaymentWorkflowDefinition?: ExternalPaymentWorkflowDefinition;
}

export interface CheckoutSettingsApiDeleteThirdPartyPaymentWorkflowRequest {
    fullyQualifiedName: string;
}

export interface CheckoutSettingsApiGetThirdPartyPaymentWorkflowWithValuesRequest {
    fullyQualifiedName: string;
}

export interface CheckoutSettingsApiUpdateCustomerCheckoutSettingsRequest {
    customerCheckoutSettings?: CustomerCheckoutSettings;
}

/**
 * 
 */
export class CheckoutSettingsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a third party payment workflow definition in the context of a site
     * Add Third Party Payment Workflow
     */


    async addThirdPartyPaymentWorkflowRaw(requestParameters: CheckoutSettingsApiAddThirdPartyPaymentWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout/paymentsettings/thirdpartyworkflows`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExternalPaymentWorkflowDefinitionToJSON(requestParameters.externalPaymentWorkflowDefinition),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a third party payment workflow definition in the context of a site
     * Add Third Party Payment Workflow
     */
    async addThirdPartyPaymentWorkflow(requestParameters: CheckoutSettingsApiAddThirdPartyPaymentWorkflowRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addThirdPartyPaymentWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a third party payment workflow definition defined for the site
     * Delete Third Party Payment Workflow
     */


    async deleteThirdPartyPaymentWorkflowRaw(requestParameters: CheckoutSettingsApiDeleteThirdPartyPaymentWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fullyQualifiedName === null || requestParameters.fullyQualifiedName === undefined) {
            throw new runtime.RequiredError('fullyQualifiedName','Required parameter requestParameters.fullyQualifiedName was null or undefined when calling deleteThirdPartyPaymentWorkflow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout/paymentsettings/thirdpartyworkflows/{fullyQualifiedName}`.replace(`{${"fullyQualifiedName"}}`, encodeURIComponent(String(requestParameters.fullyQualifiedName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a third party payment workflow definition defined for the site
     * Delete Third Party Payment Workflow
     */
    async deleteThirdPartyPaymentWorkflow(requestParameters: CheckoutSettingsApiDeleteThirdPartyPaymentWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteThirdPartyPaymentWorkflowRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials,   supported credit cards, and more; Customer Checkout settings, such as whether login is required, and any   custom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.
     * Get Checkout Settings
     */


    async getCheckoutSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutSettingsFromJSON(jsonValue));
    }

    /**
     * Retrieves all checkout settings defined for the site: Payment settings, such as the payment gateway ID and credentials,   supported credit cards, and more; Customer Checkout settings, such as whether login is required, and any   custom attributes; and Order Processing settings, such as when payment is authorized and captured, and any custom attributes.
     * Get Checkout Settings
     */
    async getCheckoutSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutSettings> {
        const response = await this.getCheckoutSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves existing customer checkout settings including the checkout type, which determines whether the   customer must be logged in when placing an order. Also lists any custom customer checkout attributes.
     * Get Customer Checkout Settings
     */


    async getCustomerCheckoutSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCheckoutSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout/customercheckoutsettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerCheckoutSettingsFromJSON(jsonValue));
    }

    /**
     * Retrieves existing customer checkout settings including the checkout type, which determines whether the   customer must be logged in when placing an order. Also lists any custom customer checkout attributes.
     * Get Customer Checkout Settings
     */
    async getCustomerCheckoutSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCheckoutSettings> {
        const response = await this.getCustomerCheckoutSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets a third party payment workflow specified by workflow definition which includes credential values
     * Get Third Party Payment Workflow With Values
     */


    async getThirdPartyPaymentWorkflowWithValuesRaw(requestParameters: CheckoutSettingsApiGetThirdPartyPaymentWorkflowWithValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExternalPaymentWorkflowDefinition>> {
        if (requestParameters.fullyQualifiedName === null || requestParameters.fullyQualifiedName === undefined) {
            throw new runtime.RequiredError('fullyQualifiedName','Required parameter requestParameters.fullyQualifiedName was null or undefined when calling getThirdPartyPaymentWorkflowWithValues.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout/paymentsettings/thirdpartyworkflow/{fullyQualifiedName}`.replace(`{${"fullyQualifiedName"}}`, encodeURIComponent(String(requestParameters.fullyQualifiedName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalPaymentWorkflowDefinitionFromJSON(jsonValue));
    }

    /**
     * Gets a third party payment workflow specified by workflow definition which includes credential values
     * Get Third Party Payment Workflow With Values
     */
    async getThirdPartyPaymentWorkflowWithValues(requestParameters: CheckoutSettingsApiGetThirdPartyPaymentWorkflowWithValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExternalPaymentWorkflowDefinition> {
        const response = await this.getThirdPartyPaymentWorkflowWithValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves list of external payment workflow definitions.
     * Get Third Party Payment Workflows
     */


    async getThirdPartyPaymentWorkflowsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExternalPaymentWorkflowDefinition>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout/paymentsettings/thirdpartyworkflows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExternalPaymentWorkflowDefinitionFromJSON));
    }

    /**
     * Retrieves list of external payment workflow definitions.
     * Get Third Party Payment Workflows
     */
    async getThirdPartyPaymentWorkflows(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExternalPaymentWorkflowDefinition>> {
        const response = await this.getThirdPartyPaymentWorkflowsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Modifies existing customer checkout settings. When a shopper starts the process of checking out,   the Checkout Service checks these settings to render the checkout page.   This is where you can specify whether shoppers must be logged in \"LoginRequired\"  or not \"LoginOptional\" to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.
     * Update Customer Checkout Settings
     */


    async updateCustomerCheckoutSettingsRaw(requestParameters: CheckoutSettingsApiUpdateCustomerCheckoutSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCheckoutSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/checkout/customercheckoutsettings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerCheckoutSettingsToJSON(requestParameters.customerCheckoutSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerCheckoutSettingsFromJSON(jsonValue));
    }

    /**
     * Modifies existing customer checkout settings. When a shopper starts the process of checking out,   the Checkout Service checks these settings to render the checkout page.   This is where you can specify whether shoppers must be logged in \"LoginRequired\"  or not \"LoginOptional\" to checkout. You can also update your own customer checkout requirements, for example, to add a tracking code.
     * Update Customer Checkout Settings
     */
    async updateCustomerCheckoutSettings(requestParameters: CheckoutSettingsApiUpdateCustomerCheckoutSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCheckoutSettings> {
        const response = await this.updateCustomerCheckoutSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
