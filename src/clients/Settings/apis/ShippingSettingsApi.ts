/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SiteShippingHandlingFee,
  SiteShippingSettings,
} from '../models';

export interface CreateOrderHandlingFeeRequest {
    responseFields?: string;
    siteShippingHandlingFee?: SiteShippingHandlingFee;
}

export interface GetOrderHandlingFeeRequest {
    responseFields?: string;
}

export interface GetSiteShippingSettingsRequest {
    responseFields?: string;
}

export interface UpdateOrderHandlingFeeRequest {
    responseFields?: string;
    siteShippingHandlingFee?: SiteShippingHandlingFee;
}

/**
 * ShippingSettingsApi - interface
 * 
 * @export
 * @interface ShippingSettingsApiInterface
 */
export interface ShippingSettingsApiInterface {
    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Creates site\'s shipping handling fee.
     * @summary Creates the site\'s order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {SiteShippingHandlingFee} [siteShippingHandlingFee] New order handling fee to create. Required properties: Amount.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ShippingSettingsApiInterface
     */
    createOrderHandlingFeeRaw(requestParameters: CreateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>>;

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Creates site\'s shipping handling fee.
     * Creates the site\'s order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.
     */
    createOrderHandlingFee(requestParameters: CreateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee>;

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Retrieves the site\'s shipping handling fee.
     * @summary Get Order Handling Fee
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ShippingSettingsApiInterface
     */
    getOrderHandlingFeeRaw(requestParameters: GetOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>>;

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Retrieves the site\'s shipping handling fee.
     * Get Order Handling Fee
     */
    getOrderHandlingFee(requestParameters: GetOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee>;

    /**
     * Retrievs site\'s current shipping settings including information about the active shipping rate provider,  return address, shipping methods, and which countries that you can ship to.
     * @summary Get Site Shipping Settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingSettingsApiInterface
     */
    getSiteShippingSettingsRaw(requestParameters: GetSiteShippingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingSettings>>;

    /**
     * Retrievs site\'s current shipping settings including information about the active shipping rate provider,  return address, shipping methods, and which countries that you can ship to.
     * Get Site Shipping Settings
     */
    getSiteShippingSettings(requestParameters: GetSiteShippingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingSettings>;

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Updates the site\'s shipping handling fee.
     * @summary Updates the site\'s shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {SiteShippingHandlingFee} [siteShippingHandlingFee] Properties of the site\&#39;s order handling fee. Required properties: Amount.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ShippingSettingsApiInterface
     */
    updateOrderHandlingFeeRaw(requestParameters: UpdateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>>;

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Updates the site\'s shipping handling fee.
     * Updates the site\'s shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.
     */
    updateOrderHandlingFee(requestParameters: UpdateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee>;

}

/**
 * 
 */
export class ShippingSettingsApi extends runtime.BaseAPI implements ShippingSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Creates site\'s shipping handling fee.
     * Creates the site\'s order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.
     */


    async createOrderHandlingFeeRaw(requestParameters: CreateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping/orderhandlingfee`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.siteShippingHandlingFee,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Creates site\'s shipping handling fee.
     * Creates the site\'s order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.
     */
    async createOrderHandlingFee(requestParameters: CreateOrderHandlingFeeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee> {
        const response = await this.createOrderHandlingFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Retrieves the site\'s shipping handling fee.
     * Get Order Handling Fee
     */


    async getOrderHandlingFeeRaw(requestParameters: GetOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping/orderhandlingfee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Retrieves the site\'s shipping handling fee.
     * Get Order Handling Fee
     */
    async getOrderHandlingFee(requestParameters: GetOrderHandlingFeeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee> {
        const response = await this.getOrderHandlingFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrievs site\'s current shipping settings including information about the active shipping rate provider,  return address, shipping methods, and which countries that you can ship to.
     * Get Site Shipping Settings
     */


    async getSiteShippingSettingsRaw(requestParameters: GetSiteShippingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrievs site\'s current shipping settings including information about the active shipping rate provider,  return address, shipping methods, and which countries that you can ship to.
     * Get Site Shipping Settings
     */
    async getSiteShippingSettings(requestParameters: GetSiteShippingSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingSettings> {
        const response = await this.getSiteShippingSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Updates the site\'s shipping handling fee.
     * Updates the site\'s shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.
     */


    async updateOrderHandlingFeeRaw(requestParameters: UpdateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping/orderhandlingfee`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.siteShippingHandlingFee,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Updates the site\'s shipping handling fee.
     * Updates the site\'s shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.
     */
    async updateOrderHandlingFee(requestParameters: UpdateOrderHandlingFeeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee> {
        const response = await this.updateOrderHandlingFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
