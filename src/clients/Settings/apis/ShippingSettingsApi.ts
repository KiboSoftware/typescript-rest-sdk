/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SiteShippingHandlingFee,
  SiteShippingSettings,
} from '../models';
import {
    SiteShippingHandlingFeeFromJSON,
    SiteShippingHandlingFeeToJSON,
    SiteShippingSettingsFromJSON,
    SiteShippingSettingsToJSON,
} from '../models';

export interface ShippingSettingsApiCreateOrderHandlingFeeRequest {
    siteShippingHandlingFee?: SiteShippingHandlingFee;
}

export interface ShippingSettingsApiUpdateOrderHandlingFeeRequest {
    siteShippingHandlingFee?: SiteShippingHandlingFee;
}

/**
 * 
 */
export class ShippingSettingsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Creates site\'s shipping handling fee.
     * Creates the site\'s order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.
     */


    async createOrderHandlingFeeRaw(requestParameters: ShippingSettingsApiCreateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping/orderhandlingfee`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteShippingHandlingFeeToJSON(requestParameters.siteShippingHandlingFee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteShippingHandlingFeeFromJSON(jsonValue));
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Creates site\'s shipping handling fee.
     * Creates the site\'s order handling fee as it appears in shipping settings. Allows you to add the return address in shipping settings without modifying any other settings.
     */
    async createOrderHandlingFee(requestParameters: ShippingSettingsApiCreateOrderHandlingFeeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee> {
        const response = await this.createOrderHandlingFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Retrieves the site\'s shipping handling fee.
     * Get Order Handling Fee
     */


    async getOrderHandlingFeeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping/orderhandlingfee`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteShippingHandlingFeeFromJSON(jsonValue));
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Retrieves the site\'s shipping handling fee.
     * Get Order Handling Fee
     */
    async getOrderHandlingFee(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee> {
        const response = await this.getOrderHandlingFeeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrievs site\'s current shipping settings including information about the active shipping rate provider,  return address, shipping methods, and which countries that you can ship to.
     * Get Site Shipping Settings
     */


    async getSiteShippingSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteShippingSettingsFromJSON(jsonValue));
    }

    /**
     * Retrievs site\'s current shipping settings including information about the active shipping rate provider,  return address, shipping methods, and which countries that you can ship to.
     * Get Site Shipping Settings
     */
    async getSiteShippingSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingSettings> {
        const response = await this.getSiteShippingSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Updates the site\'s shipping handling fee.
     * Updates the site\'s shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.
     */


    async updateOrderHandlingFeeRaw(requestParameters: ShippingSettingsApiUpdateOrderHandlingFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteShippingHandlingFee>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/shipping/orderhandlingfee`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SiteShippingHandlingFeeToJSON(requestParameters.siteShippingHandlingFee),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteShippingHandlingFeeFromJSON(jsonValue));
    }

    /**
     * OBSOLETE: Handling fees are now defined via shipping admin   Updates the site\'s shipping handling fee.
     * Updates the site\'s shipping return address as it appears in shipping settings. Allows you to update the address in shipping settings without modifying any other settings.
     */
    async updateOrderHandlingFee(requestParameters: ShippingSettingsApiUpdateOrderHandlingFeeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteShippingHandlingFee> {
        const response = await this.updateOrderHandlingFeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
