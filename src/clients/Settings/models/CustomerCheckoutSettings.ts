/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';

/**
 * Checkout requirements for customers, for example, whether they must login before purchasing from your store. 
 * Other customized checkout requirements can be defined.
 * @export
 * @interface CustomerCheckoutSettings
 */
export interface CustomerCheckoutSettings {
    /**
     * Checkout login setting. Value can be either "LoginOptional," where shoppers are prompted to sign in
     * but are not required to do so, or "LoginRequired," where shopppers must login before purchasing.
     * @type {string}
     * @memberof CustomerCheckoutSettings
     */
    customerCheckoutType?: string | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof CustomerCheckoutSettings
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the CustomerCheckoutSettings interface.
 */
export function instanceOfCustomerCheckoutSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomerCheckoutSettingsFromJSON(json: any): CustomerCheckoutSettings {
    return CustomerCheckoutSettingsFromJSONTyped(json, false);
}

export function CustomerCheckoutSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerCheckoutSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customerCheckoutType': !exists(json, 'customerCheckoutType') ? undefined : json['customerCheckoutType'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function CustomerCheckoutSettingsToJSON(value?: CustomerCheckoutSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customerCheckoutType': value.customerCheckoutType,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

