/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { ThirdPartyPaymentSetting } from './ThirdPartyPaymentSetting';
import {
    ThirdPartyPaymentSettingFromJSON,
    ThirdPartyPaymentSettingFromJSONTyped,
    ThirdPartyPaymentSettingToJSON,
} from './ThirdPartyPaymentSetting';

/**
 * Order processing (credit card payment authorization) setting defined for this site. 
 * Can choose when the shopperâ€™s credit card is authorized and charged. Possibilities include, "authorize and charge the shopper's credit card for the full 
 * order amount when the order is placed," "authorize the shopper's credit card for the full amount when the order is placed and charge the credit card when the order is shipped," or 
 * "authorize and charge the shopper's credit card for the full amount when the order is shipped."
 * @export
 * @interface OrderProcessingSettings
 */
export interface OrderProcessingSettings {
    /**
     * Credit card payment authorization setting. Options can be authorize and charge the shopper's credit card when the order is placed, "AuthorizeAndCaptureOnOrderPlacement," 
     * authorize the shopper's credit card when the order is placed and charge the credit card when the shipped, "AuthorizeOnOrderPlacementAndCaptureOnOrderShipment," 
     * or authorize and charge the shopper's credit card for the full amount when the order is shipped, "AuthorizeAndCaptureOnOrderShipment."
     * @type {string}
     * @memberof OrderProcessingSettings
     */
    paymentProcessingFlowType?: string | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof OrderProcessingSettings
     */
    auditInfo?: AuditInfo;
    /**
     * Use the override price on products to calculate discounts
     * @type {boolean}
     * @memberof OrderProcessingSettings
     */
    useOverridePriceToCalculateDiscounts?: boolean;
    /**
     * Abandoned Order Threshold in minutes indicates the number of minutes until a pending order is considered abandoned.
     * @type {number}
     * @memberof OrderProcessingSettings
     */
    abandonedOrderThresholdInMinutes?: number | null;
    /**
     * Gift card payment authorization setting. Options can be authorize and charge the shopper's credit card when the order is placed, "AuthorizeAndCaptureOnOrderPlacement," 
     * authorize the shopper's gift card when the order is placed and charge the gift card when it is shipped, "AuthorizeOnOrderPlacementAndCaptureOnOrderShipment," 
     * or authorize and charge the shopper's gift card for the full amount when the order is shipped, "AuthorizeAndCaptureOnOrderShipment."
     * @type {string}
     * @memberof OrderProcessingSettings
     */
    giftCardProcessingType?: string | null;
    /**
     * GiftCrd Refund/Credit flow, wither to existing or new giftcard
     * @type {string}
     * @memberof OrderProcessingSettings
     */
    giftCardRefundCreditProcessingType?: string | null;
    /**
     * Order processing settings for Third party payments
     * Ex- ApplePay using AuthorizeOnOrderPlacementAndCaptureOnOrderShipment for processing orders
     * @type {Array<ThirdPartyPaymentSetting>}
     * @memberof OrderProcessingSettings
     */
    thirdPartyPaymentSettings?: Array<ThirdPartyPaymentSetting> | null;
}

/**
 * Check if a given object implements the OrderProcessingSettings interface.
 */
export function instanceOfOrderProcessingSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderProcessingSettingsFromJSON(json: any): OrderProcessingSettings {
    return OrderProcessingSettingsFromJSONTyped(json, false);
}

export function OrderProcessingSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderProcessingSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'paymentProcessingFlowType': !exists(json, 'paymentProcessingFlowType') ? undefined : json['paymentProcessingFlowType'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'useOverridePriceToCalculateDiscounts': !exists(json, 'useOverridePriceToCalculateDiscounts') ? undefined : json['useOverridePriceToCalculateDiscounts'],
        'abandonedOrderThresholdInMinutes': !exists(json, 'abandonedOrderThresholdInMinutes') ? undefined : json['abandonedOrderThresholdInMinutes'],
        'giftCardProcessingType': !exists(json, 'giftCardProcessingType') ? undefined : json['giftCardProcessingType'],
        'giftCardRefundCreditProcessingType': !exists(json, 'giftCardRefundCreditProcessingType') ? undefined : json['giftCardRefundCreditProcessingType'],
        'thirdPartyPaymentSettings': !exists(json, 'thirdPartyPaymentSettings') ? undefined : (json['thirdPartyPaymentSettings'] === null ? null : (json['thirdPartyPaymentSettings'] as Array<any>).map(ThirdPartyPaymentSettingFromJSON)),
    };
}

export function OrderProcessingSettingsToJSON(value?: OrderProcessingSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'paymentProcessingFlowType': value.paymentProcessingFlowType,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'useOverridePriceToCalculateDiscounts': value.useOverridePriceToCalculateDiscounts,
        'abandonedOrderThresholdInMinutes': value.abandonedOrderThresholdInMinutes,
        'giftCardProcessingType': value.giftCardProcessingType,
        'giftCardRefundCreditProcessingType': value.giftCardRefundCreditProcessingType,
        'thirdPartyPaymentSettings': value.thirdPartyPaymentSettings === undefined ? undefined : (value.thirdPartyPaymentSettings === null ? null : (value.thirdPartyPaymentSettings as Array<any>).map(ThirdPartyPaymentSettingToJSON)),
    };
}

