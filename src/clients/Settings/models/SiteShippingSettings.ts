/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { SiteShippingHandlingFee } from './SiteShippingHandlingFee';
import {
    SiteShippingHandlingFeeFromJSON,
    SiteShippingHandlingFeeFromJSONTyped,
    SiteShippingHandlingFeeToJSON,
} from './SiteShippingHandlingFee';
import type { SiteShippingSignatureRequirement } from './SiteShippingSignatureRequirement';
import {
    SiteShippingSignatureRequirementFromJSON,
    SiteShippingSignatureRequirementFromJSONTyped,
    SiteShippingSignatureRequirementToJSON,
} from './SiteShippingSignatureRequirement';

/**
 * Defines the site setting for the active shipping rate provider that rate provider calculates domestic and international shipping rates.
 * Your site may have multiple shipping rate providers, for example, FedEx, DHL, USPS. However, only one shipping rate provider can be active at the same time.
 * @export
 * @interface SiteShippingSettings
 */
export interface SiteShippingSettings {
    /**
     * 
     * @type {SiteShippingHandlingFee}
     * @memberof SiteShippingSettings
     */
    orderHandlingFee?: SiteShippingHandlingFee;
    /**
     * 
     * @type {SiteShippingSignatureRequirement}
     * @memberof SiteShippingSettings
     */
    signatureRequirement?: SiteShippingSignatureRequirement;
    /**
     * 
     * @type {AuditInfo}
     * @memberof SiteShippingSettings
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the SiteShippingSettings interface.
 */
export function instanceOfSiteShippingSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SiteShippingSettingsFromJSON(json: any): SiteShippingSettings {
    return SiteShippingSettingsFromJSONTyped(json, false);
}

export function SiteShippingSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteShippingSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderHandlingFee': !exists(json, 'orderHandlingFee') ? undefined : SiteShippingHandlingFeeFromJSON(json['orderHandlingFee']),
        'signatureRequirement': !exists(json, 'signatureRequirement') ? undefined : SiteShippingSignatureRequirementFromJSON(json['signatureRequirement']),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function SiteShippingSettingsToJSON(value?: SiteShippingSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orderHandlingFee': SiteShippingHandlingFeeToJSON(value.orderHandlingFee),
        'signatureRequirement': SiteShippingSignatureRequirementToJSON(value.signatureRequirement),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

