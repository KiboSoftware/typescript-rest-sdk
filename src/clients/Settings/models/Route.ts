/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    template?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Route
     */
    defaults?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    internalRoute?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    functionId?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof Route
     */
    mappings?: { [key: string]: Array<string>; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof Route
     */
    canonical?: boolean | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof Route
     */
    validators?: { [key: string]: Array<string>; } | null;
    /**
     * 
     * @type {string}
     * @memberof Route
     */
    urlScheme?: string | null;
}

/**
 * Check if a given object implements the Route interface.
 */
export function instanceOfRoute(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RouteFromJSON(json: any): Route {
    return RouteFromJSONTyped(json, false);
}

export function RouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Route {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'template': !exists(json, 'template') ? undefined : json['template'],
        'defaults': !exists(json, 'defaults') ? undefined : json['defaults'],
        'internalRoute': !exists(json, 'internalRoute') ? undefined : json['internalRoute'],
        'functionId': !exists(json, 'functionId') ? undefined : json['functionId'],
        'mappings': !exists(json, 'mappings') ? undefined : json['mappings'],
        'canonical': !exists(json, 'canonical') ? undefined : json['canonical'],
        'validators': !exists(json, 'validators') ? undefined : json['validators'],
        'urlScheme': !exists(json, 'urlScheme') ? undefined : json['urlScheme'],
    };
}

export function RouteToJSON(value?: Route | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'template': value.template,
        'defaults': value.defaults,
        'internalRoute': value.internalRoute,
        'functionId': value.functionId,
        'mappings': value.mappings,
        'canonical': value.canonical,
        'validators': value.validators,
        'urlScheme': value.urlScheme,
    };
}

