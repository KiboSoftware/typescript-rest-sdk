/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { CacheSettings } from './CacheSettings';
import {
    CacheSettingsFromJSON,
    CacheSettingsFromJSONTyped,
    CacheSettingsToJSON,
} from './CacheSettings';
import type { CustomRouteSettings } from './CustomRouteSettings';
import {
    CustomRouteSettingsFromJSON,
    CustomRouteSettingsFromJSONTyped,
    CustomRouteSettingsToJSON,
} from './CustomRouteSettings';
import type { EmailTransactionSettings } from './EmailTransactionSettings';
import {
    EmailTransactionSettingsFromJSON,
    EmailTransactionSettingsFromJSONTyped,
    EmailTransactionSettingsToJSON,
} from './EmailTransactionSettings';
import type { EmailTypeSetting } from './EmailTypeSetting';
import {
    EmailTypeSettingFromJSON,
    EmailTypeSettingFromJSONTyped,
    EmailTypeSettingToJSON,
} from './EmailTypeSetting';
import type { ReCaptchaSettings } from './ReCaptchaSettings';
import {
    ReCaptchaSettingsFromJSON,
    ReCaptchaSettingsFromJSONTyped,
    ReCaptchaSettingsToJSON,
} from './ReCaptchaSettings';
import type { SMSTransactionSettings } from './SMSTransactionSettings';
import {
    SMSTransactionSettingsFromJSON,
    SMSTransactionSettingsFromJSONTyped,
    SMSTransactionSettingsToJSON,
} from './SMSTransactionSettings';
import type { SMSTypeSetting } from './SMSTypeSetting';
import {
    SMSTypeSettingFromJSON,
    SMSTypeSettingFromJSONTyped,
    SMSTypeSettingToJSON,
} from './SMSTypeSetting';
import type { TaxableTerritory } from './TaxableTerritory';
import {
    TaxableTerritoryFromJSON,
    TaxableTerritoryFromJSONTyped,
    TaxableTerritoryToJSON,
} from './TaxableTerritory';
import type { ViewAuthorizations } from './ViewAuthorizations';
import {
    ViewAuthorizationsFromJSON,
    ViewAuthorizationsFromJSONTyped,
    ViewAuthorizationsToJSON,
} from './ViewAuthorizations';

/**
 * 
 * @export
 * @interface GeneralSettings
 */
export interface GeneralSettings {
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    isMozuWebSite?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    websiteName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    customCdnHostName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    missingImageSubstitute?: string | null;
    /**
     * 
     * @type {CacheSettings}
     * @memberof GeneralSettings
     */
    cacheSettings?: CacheSettings;
    /**
     * 
     * @type {number}
     * @memberof GeneralSettings
     */
    templateSiteId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    siteTimeZone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    siteTimeFormat?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    senderEmailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    senderEmailAlias?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    replyToEmailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    bccEmailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    favIconPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    favIconMobilePath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    logoText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    logoPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    theme?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    mobileTheme?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    tabletTheme?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GeneralSettings
     */
    googleAnalyticsCode?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    isGoogleAnalyticsEnabled?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    isGoogleAnalyticsEcommerceEnabled?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    isWishlistCreationEnabled?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    isMultishipEnabled?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    isAddressValidationEnabled?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralSettings
     */
    allowInvalidAddresses?: boolean | null;
    /**
     * 
     * @type {Array<TaxableTerritory>}
     * @memberof GeneralSettings
     */
    taxableTerritories?: Array<TaxableTerritory> | null;
    /**
     * 
     * @type {EmailTransactionSettings}
     * @memberof GeneralSettings
     */
    supressedEmailTransactions?: EmailTransactionSettings;
    /**
     * 
     * @type {EmailTransactionSettings}
     * @memberof GeneralSettings
     */
    emailTransactionsOnlyOnRequest?: EmailTransactionSettings;
    /**
     * 
     * @type {AuditInfo}
     * @memberof GeneralSettings
     */
    auditInfo?: AuditInfo;
    /**
     * 
     * @type {ViewAuthorizations}
     * @memberof GeneralSettings
     */
    viewAuthorizations?: ViewAuthorizations;
    /**
     * 
     * @type {CustomRouteSettings}
     * @memberof GeneralSettings
     */
    customRoutes?: CustomRouteSettings;
    /**
     * 
     * @type {Array<EmailTypeSetting>}
     * @memberof GeneralSettings
     */
    emailTypes?: Array<EmailTypeSetting> | null;
    /**
     * 
     * @type {SMSTransactionSettings}
     * @memberof GeneralSettings
     */
    supressedSmsTransactions?: SMSTransactionSettings;
    /**
     * 
     * @type {Array<SMSTypeSetting>}
     * @memberof GeneralSettings
     */
    smsTypes?: Array<SMSTypeSetting> | null;
    /**
     * 
     * @type {ReCaptchaSettings}
     * @memberof GeneralSettings
     */
    reCaptchaSettings?: ReCaptchaSettings;
}

/**
 * Check if a given object implements the GeneralSettings interface.
 */
export function instanceOfGeneralSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GeneralSettingsFromJSON(json: any): GeneralSettings {
    return GeneralSettingsFromJSONTyped(json, false);
}

export function GeneralSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneralSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isMozuWebSite': !exists(json, 'isMozuWebSite') ? undefined : json['isMozuWebSite'],
        'websiteName': !exists(json, 'websiteName') ? undefined : json['websiteName'],
        'customCdnHostName': !exists(json, 'customCdnHostName') ? undefined : json['customCdnHostName'],
        'missingImageSubstitute': !exists(json, 'missingImageSubstitute') ? undefined : json['missingImageSubstitute'],
        'cacheSettings': !exists(json, 'cacheSettings') ? undefined : CacheSettingsFromJSON(json['cacheSettings']),
        'templateSiteId': !exists(json, 'templateSiteId') ? undefined : json['templateSiteId'],
        'siteTimeZone': !exists(json, 'siteTimeZone') ? undefined : json['siteTimeZone'],
        'siteTimeFormat': !exists(json, 'siteTimeFormat') ? undefined : json['siteTimeFormat'],
        'senderEmailAddress': !exists(json, 'senderEmailAddress') ? undefined : json['senderEmailAddress'],
        'senderEmailAlias': !exists(json, 'senderEmailAlias') ? undefined : json['senderEmailAlias'],
        'replyToEmailAddress': !exists(json, 'replyToEmailAddress') ? undefined : json['replyToEmailAddress'],
        'bccEmailAddress': !exists(json, 'bccEmailAddress') ? undefined : json['bccEmailAddress'],
        'favIconPath': !exists(json, 'favIconPath') ? undefined : json['favIconPath'],
        'favIconMobilePath': !exists(json, 'favIconMobilePath') ? undefined : json['favIconMobilePath'],
        'logoText': !exists(json, 'logoText') ? undefined : json['logoText'],
        'logoPath': !exists(json, 'logoPath') ? undefined : json['logoPath'],
        'theme': !exists(json, 'theme') ? undefined : json['theme'],
        'mobileTheme': !exists(json, 'mobileTheme') ? undefined : json['mobileTheme'],
        'tabletTheme': !exists(json, 'tabletTheme') ? undefined : json['tabletTheme'],
        'googleAnalyticsCode': !exists(json, 'googleAnalyticsCode') ? undefined : json['googleAnalyticsCode'],
        'isGoogleAnalyticsEnabled': !exists(json, 'isGoogleAnalyticsEnabled') ? undefined : json['isGoogleAnalyticsEnabled'],
        'isGoogleAnalyticsEcommerceEnabled': !exists(json, 'isGoogleAnalyticsEcommerceEnabled') ? undefined : json['isGoogleAnalyticsEcommerceEnabled'],
        'isWishlistCreationEnabled': !exists(json, 'isWishlistCreationEnabled') ? undefined : json['isWishlistCreationEnabled'],
        'isMultishipEnabled': !exists(json, 'isMultishipEnabled') ? undefined : json['isMultishipEnabled'],
        'isAddressValidationEnabled': !exists(json, 'isAddressValidationEnabled') ? undefined : json['isAddressValidationEnabled'],
        'allowInvalidAddresses': !exists(json, 'allowInvalidAddresses') ? undefined : json['allowInvalidAddresses'],
        'taxableTerritories': !exists(json, 'taxableTerritories') ? undefined : (json['taxableTerritories'] === null ? null : (json['taxableTerritories'] as Array<any>).map(TaxableTerritoryFromJSON)),
        'supressedEmailTransactions': !exists(json, 'supressedEmailTransactions') ? undefined : EmailTransactionSettingsFromJSON(json['supressedEmailTransactions']),
        'emailTransactionsOnlyOnRequest': !exists(json, 'emailTransactionsOnlyOnRequest') ? undefined : EmailTransactionSettingsFromJSON(json['emailTransactionsOnlyOnRequest']),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'viewAuthorizations': !exists(json, 'viewAuthorizations') ? undefined : ViewAuthorizationsFromJSON(json['viewAuthorizations']),
        'customRoutes': !exists(json, 'customRoutes') ? undefined : CustomRouteSettingsFromJSON(json['customRoutes']),
        'emailTypes': !exists(json, 'emailTypes') ? undefined : (json['emailTypes'] === null ? null : (json['emailTypes'] as Array<any>).map(EmailTypeSettingFromJSON)),
        'supressedSmsTransactions': !exists(json, 'supressedSmsTransactions') ? undefined : SMSTransactionSettingsFromJSON(json['supressedSmsTransactions']),
        'smsTypes': !exists(json, 'smsTypes') ? undefined : (json['smsTypes'] === null ? null : (json['smsTypes'] as Array<any>).map(SMSTypeSettingFromJSON)),
        'reCaptchaSettings': !exists(json, 'reCaptchaSettings') ? undefined : ReCaptchaSettingsFromJSON(json['reCaptchaSettings']),
    };
}

export function GeneralSettingsToJSON(value?: GeneralSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isMozuWebSite': value.isMozuWebSite,
        'websiteName': value.websiteName,
        'customCdnHostName': value.customCdnHostName,
        'missingImageSubstitute': value.missingImageSubstitute,
        'cacheSettings': CacheSettingsToJSON(value.cacheSettings),
        'templateSiteId': value.templateSiteId,
        'siteTimeZone': value.siteTimeZone,
        'siteTimeFormat': value.siteTimeFormat,
        'senderEmailAddress': value.senderEmailAddress,
        'senderEmailAlias': value.senderEmailAlias,
        'replyToEmailAddress': value.replyToEmailAddress,
        'bccEmailAddress': value.bccEmailAddress,
        'favIconPath': value.favIconPath,
        'favIconMobilePath': value.favIconMobilePath,
        'logoText': value.logoText,
        'logoPath': value.logoPath,
        'theme': value.theme,
        'mobileTheme': value.mobileTheme,
        'tabletTheme': value.tabletTheme,
        'googleAnalyticsCode': value.googleAnalyticsCode,
        'isGoogleAnalyticsEnabled': value.isGoogleAnalyticsEnabled,
        'isGoogleAnalyticsEcommerceEnabled': value.isGoogleAnalyticsEcommerceEnabled,
        'isWishlistCreationEnabled': value.isWishlistCreationEnabled,
        'isMultishipEnabled': value.isMultishipEnabled,
        'isAddressValidationEnabled': value.isAddressValidationEnabled,
        'allowInvalidAddresses': value.allowInvalidAddresses,
        'taxableTerritories': value.taxableTerritories === undefined ? undefined : (value.taxableTerritories === null ? null : (value.taxableTerritories as Array<any>).map(TaxableTerritoryToJSON)),
        'supressedEmailTransactions': EmailTransactionSettingsToJSON(value.supressedEmailTransactions),
        'emailTransactionsOnlyOnRequest': EmailTransactionSettingsToJSON(value.emailTransactionsOnlyOnRequest),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'viewAuthorizations': ViewAuthorizationsToJSON(value.viewAuthorizations),
        'customRoutes': CustomRouteSettingsToJSON(value.customRoutes),
        'emailTypes': value.emailTypes === undefined ? undefined : (value.emailTypes === null ? null : (value.emailTypes as Array<any>).map(EmailTypeSettingToJSON)),
        'supressedSmsTransactions': SMSTransactionSettingsToJSON(value.supressedSmsTransactions),
        'smsTypes': value.smsTypes === undefined ? undefined : (value.smsTypes === null ? null : (value.smsTypes as Array<any>).map(SMSTypeSettingToJSON)),
        'reCaptchaSettings': ReCaptchaSettingsToJSON(value.reCaptchaSettings),
    };
}

