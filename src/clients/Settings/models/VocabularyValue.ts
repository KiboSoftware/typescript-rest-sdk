/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LocalizedContent } from './LocalizedContent';
import {
    LocalizedContentFromJSON,
    LocalizedContentFromJSONTyped,
    LocalizedContentToJSON,
} from './LocalizedContent';

/**
 * 
 * @export
 * @interface VocabularyValue
 */
export interface VocabularyValue {
    /**
     * 
     * @type {string}
     * @memberof VocabularyValue
     */
    key?: string | null;
    /**
     * 
     * @type {Array<LocalizedContent>}
     * @memberof VocabularyValue
     */
    contents?: Array<LocalizedContent> | null;
}

/**
 * Check if a given object implements the VocabularyValue interface.
 */
export function instanceOfVocabularyValue(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VocabularyValueFromJSON(json: any): VocabularyValue {
    return VocabularyValueFromJSONTyped(json, false);
}

export function VocabularyValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): VocabularyValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'key': !exists(json, 'key') ? undefined : json['key'],
        'contents': !exists(json, 'contents') ? undefined : (json['contents'] === null ? null : (json['contents'] as Array<any>).map(LocalizedContentFromJSON)),
    };
}

export function VocabularyValueToJSON(value?: VocabularyValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': value.key,
        'contents': value.contents === undefined ? undefined : (value.contents === null ? null : (value.contents as Array<any>).map(LocalizedContentToJSON)),
    };
}

