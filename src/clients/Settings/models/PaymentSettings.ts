/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { ExternalPaymentWorkflowDefinition } from './ExternalPaymentWorkflowDefinition';
import {
    ExternalPaymentWorkflowDefinitionFromJSON,
    ExternalPaymentWorkflowDefinitionFromJSONTyped,
    ExternalPaymentWorkflowDefinitionToJSON,
} from './ExternalPaymentWorkflowDefinition';
import type { Gateway } from './Gateway';
import {
    GatewayFromJSON,
    GatewayFromJSONTyped,
    GatewayToJSON,
} from './Gateway';
import type { OrderJobSettings } from './OrderJobSettings';
import {
    OrderJobSettingsFromJSON,
    OrderJobSettingsFromJSONTyped,
    OrderJobSettingsToJSON,
} from './OrderJobSettings';
import type { PurchaseOrderPaymentDefinition } from './PurchaseOrderPaymentDefinition';
import {
    PurchaseOrderPaymentDefinitionFromJSON,
    PurchaseOrderPaymentDefinitionFromJSONTyped,
    PurchaseOrderPaymentDefinitionToJSON,
} from './PurchaseOrderPaymentDefinition';

/**
 * Payment gateway settings defined for this site. A payment gateway is an e-commerce application service provider that authorizes 
 * payments for e-businesses and online retailers. You can define multiple payment gateway settings but only one is active at a time. 
 * Authorize.net is the only payment gateway supported currently.
 * @export
 * @interface PaymentSettings
 */
export interface PaymentSettings {
    /**
     * 
     * @type {Array<Gateway>}
     * @memberof PaymentSettings
     */
    gateways?: Array<Gateway> | null;
    /**
     * 
     * @type {Array<ExternalPaymentWorkflowDefinition>}
     * @memberof PaymentSettings
     */
    externalPaymentWorkflowDefinitions?: Array<ExternalPaymentWorkflowDefinition> | null;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentSettings
     */
    payByMail?: boolean;
    /**
     * 
     * @type {PurchaseOrderPaymentDefinition}
     * @memberof PaymentSettings
     */
    purchaseOrder?: PurchaseOrderPaymentDefinition;
    /**
     * 
     * @type {OrderJobSettings}
     * @memberof PaymentSettings
     */
    jobSettings?: OrderJobSettings;
    /**
     * 
     * @type {string}
     * @memberof PaymentSettings
     */
    paymentRanking?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentSettings
     */
    refundRanking?: string | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof PaymentSettings
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the PaymentSettings interface.
 */
export function instanceOfPaymentSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentSettingsFromJSON(json: any): PaymentSettings {
    return PaymentSettingsFromJSONTyped(json, false);
}

export function PaymentSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gateways': !exists(json, 'gateways') ? undefined : (json['gateways'] === null ? null : (json['gateways'] as Array<any>).map(GatewayFromJSON)),
        'externalPaymentWorkflowDefinitions': !exists(json, 'externalPaymentWorkflowDefinitions') ? undefined : (json['externalPaymentWorkflowDefinitions'] === null ? null : (json['externalPaymentWorkflowDefinitions'] as Array<any>).map(ExternalPaymentWorkflowDefinitionFromJSON)),
        'payByMail': !exists(json, 'payByMail') ? undefined : json['payByMail'],
        'purchaseOrder': !exists(json, 'purchaseOrder') ? undefined : PurchaseOrderPaymentDefinitionFromJSON(json['purchaseOrder']),
        'jobSettings': !exists(json, 'jobSettings') ? undefined : OrderJobSettingsFromJSON(json['jobSettings']),
        'paymentRanking': !exists(json, 'paymentRanking') ? undefined : json['paymentRanking'],
        'refundRanking': !exists(json, 'refundRanking') ? undefined : json['refundRanking'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function PaymentSettingsToJSON(value?: PaymentSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gateways': value.gateways === undefined ? undefined : (value.gateways === null ? null : (value.gateways as Array<any>).map(GatewayToJSON)),
        'externalPaymentWorkflowDefinitions': value.externalPaymentWorkflowDefinitions === undefined ? undefined : (value.externalPaymentWorkflowDefinitions === null ? null : (value.externalPaymentWorkflowDefinitions as Array<any>).map(ExternalPaymentWorkflowDefinitionToJSON)),
        'payByMail': value.payByMail,
        'purchaseOrder': PurchaseOrderPaymentDefinitionToJSON(value.purchaseOrder),
        'jobSettings': OrderJobSettingsToJSON(value.jobSettings),
        'paymentRanking': value.paymentRanking,
        'refundRanking': value.refundRanking,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

