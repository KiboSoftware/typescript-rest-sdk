/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Mapping
 */
export interface Mapping {
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    type?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Mapping
     */
    beforeRouting?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    listFqn?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    docId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    mapTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    facetId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    pattern?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Mapping
     */
    replacement?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Mapping
     */
    mappings?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the Mapping interface.
 */
export function instanceOfMapping(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MappingFromJSON(json: any): Mapping {
    return MappingFromJSONTyped(json, false);
}

export function MappingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Mapping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'beforeRouting': !exists(json, 'beforeRouting') ? undefined : json['beforeRouting'],
        'listFqn': !exists(json, 'listFqn') ? undefined : json['listFqn'],
        'docId': !exists(json, 'docId') ? undefined : json['docId'],
        'mapTo': !exists(json, 'mapTo') ? undefined : json['mapTo'],
        'facetId': !exists(json, 'facetId') ? undefined : json['facetId'],
        'pattern': !exists(json, 'pattern') ? undefined : json['pattern'],
        'replacement': !exists(json, 'replacement') ? undefined : json['replacement'],
        'mappings': !exists(json, 'mappings') ? undefined : json['mappings'],
    };
}

export function MappingToJSON(value?: Mapping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'beforeRouting': value.beforeRouting,
        'listFqn': value.listFqn,
        'docId': value.docId,
        'mapTo': value.mapTo,
        'facetId': value.facetId,
        'pattern': value.pattern,
        'replacement': value.replacement,
        'mappings': value.mappings,
    };
}

