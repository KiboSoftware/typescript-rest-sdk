/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PreAuthorizeTransactionTypeDataContract } from './PreAuthorizeTransactionTypeDataContract';
import {
    PreAuthorizeTransactionTypeDataContractFromJSON,
    PreAuthorizeTransactionTypeDataContractFromJSONTyped,
    PreAuthorizeTransactionTypeDataContractToJSON,
} from './PreAuthorizeTransactionTypeDataContract';

/**
 * 
 * @export
 * @interface PreAuthorizeDefinition
 */
export interface PreAuthorizeDefinition {
    /**
     * 
     * @type {number}
     * @memberof PreAuthorizeDefinition
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PreAuthorizeDefinition
     */
    preAuthorizeTestUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PreAuthorizeDefinition
     */
    preAuthorizeProdUrl?: string | null;
    /**
     * 
     * @type {PreAuthorizeTransactionTypeDataContract}
     * @memberof PreAuthorizeDefinition
     */
    type?: PreAuthorizeTransactionTypeDataContract;
}

/**
 * Check if a given object implements the PreAuthorizeDefinition interface.
 */
export function instanceOfPreAuthorizeDefinition(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PreAuthorizeDefinitionFromJSON(json: any): PreAuthorizeDefinition {
    return PreAuthorizeDefinitionFromJSONTyped(json, false);
}

export function PreAuthorizeDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PreAuthorizeDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'preAuthorizeTestUrl': !exists(json, 'preAuthorizeTestUrl') ? undefined : json['preAuthorizeTestUrl'],
        'preAuthorizeProdUrl': !exists(json, 'preAuthorizeProdUrl') ? undefined : json['preAuthorizeProdUrl'],
        'type': !exists(json, 'type') ? undefined : PreAuthorizeTransactionTypeDataContractFromJSON(json['type']),
    };
}

export function PreAuthorizeDefinitionToJSON(value?: PreAuthorizeDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'preAuthorizeTestUrl': value.preAuthorizeTestUrl,
        'preAuthorizeProdUrl': value.preAuthorizeProdUrl,
        'type': PreAuthorizeTransactionTypeDataContractToJSON(value.type),
    };
}

