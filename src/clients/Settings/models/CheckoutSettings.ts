/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomerCheckoutSettings } from './CustomerCheckoutSettings';
import {
    CustomerCheckoutSettingsFromJSON,
    CustomerCheckoutSettingsFromJSONTyped,
    CustomerCheckoutSettingsToJSON,
} from './CustomerCheckoutSettings';
import type { OrderProcessingSettings } from './OrderProcessingSettings';
import {
    OrderProcessingSettingsFromJSON,
    OrderProcessingSettingsFromJSONTyped,
    OrderProcessingSettingsToJSON,
} from './OrderProcessingSettings';
import type { PaymentSettings } from './PaymentSettings';
import {
    PaymentSettingsFromJSON,
    PaymentSettingsFromJSONTyped,
    PaymentSettingsToJSON,
} from './PaymentSettings';

/**
 * Checkout and payment settings defined for this site. Can set which payment gateway to use, whether a shopper is required to login to place an order,
 * when credit cards are authorized and charged (when the order is placed or shipped), and, in the future, 
 * whether the checkout page displays an option for shoppers to receive your email marketing campaigns.
 * @export
 * @interface CheckoutSettings
 */
export interface CheckoutSettings {
    /**
     * 
     * @type {PaymentSettings}
     * @memberof CheckoutSettings
     */
    paymentSettings?: PaymentSettings;
    /**
     * 
     * @type {CustomerCheckoutSettings}
     * @memberof CheckoutSettings
     */
    customerCheckoutSettings?: CustomerCheckoutSettings;
    /**
     * 
     * @type {OrderProcessingSettings}
     * @memberof CheckoutSettings
     */
    orderProcessingSettings?: OrderProcessingSettings;
}

/**
 * Check if a given object implements the CheckoutSettings interface.
 */
export function instanceOfCheckoutSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CheckoutSettingsFromJSON(json: any): CheckoutSettings {
    return CheckoutSettingsFromJSONTyped(json, false);
}

export function CheckoutSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'paymentSettings': !exists(json, 'paymentSettings') ? undefined : PaymentSettingsFromJSON(json['paymentSettings']),
        'customerCheckoutSettings': !exists(json, 'customerCheckoutSettings') ? undefined : CustomerCheckoutSettingsFromJSON(json['customerCheckoutSettings']),
        'orderProcessingSettings': !exists(json, 'orderProcessingSettings') ? undefined : OrderProcessingSettingsFromJSON(json['orderProcessingSettings']),
    };
}

export function CheckoutSettingsToJSON(value?: CheckoutSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'paymentSettings': PaymentSettingsToJSON(value.paymentSettings),
        'customerCheckoutSettings': CustomerCheckoutSettingsToJSON(value.customerCheckoutSettings),
        'orderProcessingSettings': OrderProcessingSettingsToJSON(value.orderProcessingSettings),
    };
}

