/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SiteSettings Service
 * OpenAPI Spec for Kibo SiteSettings Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { InventoryExportJob } from './InventoryExportJob';
import {
    InventoryExportJobFromJSON,
    InventoryExportJobFromJSONTyped,
    InventoryExportJobToJSON,
} from './InventoryExportJob';
import type { LocationFulfillmentTypeSetting } from './LocationFulfillmentTypeSetting';
import {
    LocationFulfillmentTypeSettingFromJSON,
    LocationFulfillmentTypeSettingFromJSONTyped,
    LocationFulfillmentTypeSettingToJSON,
} from './LocationFulfillmentTypeSetting';

/**
 * 
 * @export
 * @interface InventorySettings
 */
export interface InventorySettings {
    /**
     * 
     * @type {InventoryExportJob}
     * @memberof InventorySettings
     */
    inventoryExportJob?: InventoryExportJob;
    /**
     * 
     * @type {number}
     * @memberof InventorySettings
     */
    reserveCartInventoryInterval?: number;
    /**
     * 
     * @type {Array<LocationFulfillmentTypeSetting>}
     * @memberof InventorySettings
     */
    locationFulfillmentTypeSettings?: Array<LocationFulfillmentTypeSetting> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof InventorySettings
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the InventorySettings interface.
 */
export function instanceOfInventorySettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventorySettingsFromJSON(json: any): InventorySettings {
    return InventorySettingsFromJSONTyped(json, false);
}

export function InventorySettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventorySettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'inventoryExportJob': !exists(json, 'inventoryExportJob') ? undefined : InventoryExportJobFromJSON(json['inventoryExportJob']),
        'reserveCartInventoryInterval': !exists(json, 'reserveCartInventoryInterval') ? undefined : json['reserveCartInventoryInterval'],
        'locationFulfillmentTypeSettings': !exists(json, 'locationFulfillmentTypeSettings') ? undefined : (json['locationFulfillmentTypeSettings'] === null ? null : (json['locationFulfillmentTypeSettings'] as Array<any>).map(LocationFulfillmentTypeSettingFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function InventorySettingsToJSON(value?: InventorySettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'inventoryExportJob': InventoryExportJobToJSON(value.inventoryExportJob),
        'reserveCartInventoryInterval': value.reserveCartInventoryInterval,
        'locationFulfillmentTypeSettings': value.locationFulfillmentTypeSettings === undefined ? undefined : (value.locationFulfillmentTypeSettings === null ? null : (value.locationFulfillmentTypeSettings as Array<any>).map(LocationFulfillmentTypeSettingToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

