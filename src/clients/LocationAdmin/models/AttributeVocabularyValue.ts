/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: v1_admin
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttributeValueLocalizedContent } from './AttributeValueLocalizedContent';
import {
    AttributeValueLocalizedContentFromJSON,
    AttributeValueLocalizedContentFromJSONTyped,
    AttributeValueLocalizedContentToJSON,
} from './AttributeValueLocalizedContent';

/**
 * 
 * @export
 * @interface AttributeVocabularyValue
 */
export interface AttributeVocabularyValue {
    /**
     * 
     * @type {string}
     * @memberof AttributeVocabularyValue
     */
    value: string;
    /**
     * 
     * @type {number}
     * @memberof AttributeVocabularyValue
     */
    sequence?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof AttributeVocabularyValue
     */
    isHidden?: boolean | null;
    /**
     * 
     * @type {AttributeValueLocalizedContent}
     * @memberof AttributeVocabularyValue
     */
    content?: AttributeValueLocalizedContent;
}

/**
 * Check if a given object implements the AttributeVocabularyValue interface.
 */
export function instanceOfAttributeVocabularyValue(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function AttributeVocabularyValueFromJSON(json: any): AttributeVocabularyValue {
    return AttributeVocabularyValueFromJSONTyped(json, false);
}

export function AttributeVocabularyValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttributeVocabularyValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': json['value'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'isHidden': !exists(json, 'isHidden') ? undefined : json['isHidden'],
        'content': !exists(json, 'content') ? undefined : AttributeValueLocalizedContentFromJSON(json['content']),
    };
}

export function AttributeVocabularyValueToJSON(value?: AttributeVocabularyValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'sequence': value.sequence,
        'isHidden': value.isHidden,
        'content': AttributeValueLocalizedContentToJSON(value.content),
    };
}

