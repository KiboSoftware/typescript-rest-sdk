/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: v1_admin
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';

/**
 * 
 * @export
 * @interface LocationUsage
 */
export interface LocationUsage {
    /**
     * 
     * @type {string}
     * @memberof LocationUsage
     */
    locationUsageTypeCode?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationUsage
     */
    locationTypeCodes?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationUsage
     */
    locationCodes?: Array<string> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof LocationUsage
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the LocationUsage interface.
 */
export function instanceOfLocationUsage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationUsageFromJSON(json: any): LocationUsage {
    return LocationUsageFromJSONTyped(json, false);
}

export function LocationUsageFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationUsage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locationUsageTypeCode': !exists(json, 'locationUsageTypeCode') ? undefined : json['locationUsageTypeCode'],
        'locationTypeCodes': !exists(json, 'locationTypeCodes') ? undefined : json['locationTypeCodes'],
        'locationCodes': !exists(json, 'locationCodes') ? undefined : json['locationCodes'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function LocationUsageToJSON(value?: LocationUsage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'locationUsageTypeCode': value.locationUsageTypeCode,
        'locationTypeCodes': value.locationTypeCodes,
        'locationCodes': value.locationCodes,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

