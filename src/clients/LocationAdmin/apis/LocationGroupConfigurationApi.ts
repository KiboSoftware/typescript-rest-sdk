/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: v1_admin
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  LocationGroupConfiguration,
} from '../models';
import {
    LocationGroupConfigurationFromJSON,
    LocationGroupConfigurationToJSON,
} from '../models';

export interface LocationGroupConfigurationApiGetLocationGroupConfigurationRequest {
    locationGroupCode: string;
}

export interface LocationGroupConfigurationApiGetLocationGroupConfigurationByLocationCodeRequest {
    locationCode: string;
}

export interface LocationGroupConfigurationApiSetLocationGroupConfigurationRequest {
    locationGroupCode: string;
    locationGroupConfiguration?: LocationGroupConfiguration;
}

/**
 * 
 */
export class LocationGroupConfigurationApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get this tenants Location Group Configuration Values by locationGroupCode.
     * Get Location Group Configuration
     */


    async getLocationGroupConfigurationRaw(requestParameters: LocationGroupConfigurationApiGetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>> {
        if (requestParameters.locationGroupCode === null || requestParameters.locationGroupCode === undefined) {
            throw new runtime.RequiredError('locationGroupCode','Required parameter requestParameters.locationGroupCode was null or undefined when calling getLocationGroupConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/admin/locationGroupConfiguration/{locationGroupCode}`.replace(`{${"locationGroupCode"}}`, encodeURIComponent(String(requestParameters.locationGroupCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationGroupConfigurationFromJSON(jsonValue));
    }

    /**
     * Get this tenants Location Group Configuration Values by locationGroupCode.
     * Get Location Group Configuration
     */
    async getLocationGroupConfiguration(requestParameters: LocationGroupConfigurationApiGetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration> {
        const response = await this.getLocationGroupConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get this tenants Location Group Configuration Values.
     * Get Location Group Configuration By Location Code
     */


    async getLocationGroupConfigurationByLocationCodeRaw(requestParameters: LocationGroupConfigurationApiGetLocationGroupConfigurationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocationGroupConfigurationByLocationCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/admin/locationGroupConfiguration/location/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationGroupConfigurationFromJSON(jsonValue));
    }

    /**
     * Get this tenants Location Group Configuration Values.
     * Get Location Group Configuration By Location Code
     */
    async getLocationGroupConfigurationByLocationCode(requestParameters: LocationGroupConfigurationApiGetLocationGroupConfigurationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration> {
        const response = await this.getLocationGroupConfigurationByLocationCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set this tenants Location Group Configuration Values.
     * Set Location Group Configuration
     */


    async setLocationGroupConfigurationRaw(requestParameters: LocationGroupConfigurationApiSetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>> {
        if (requestParameters.locationGroupCode === null || requestParameters.locationGroupCode === undefined) {
            throw new runtime.RequiredError('locationGroupCode','Required parameter requestParameters.locationGroupCode was null or undefined when calling setLocationGroupConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/admin/locationGroupConfiguration/{locationGroupCode}`.replace(`{${"locationGroupCode"}}`, encodeURIComponent(String(requestParameters.locationGroupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LocationGroupConfigurationToJSON(requestParameters.locationGroupConfiguration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationGroupConfigurationFromJSON(jsonValue));
    }

    /**
     * Set this tenants Location Group Configuration Values.
     * Set Location Group Configuration
     */
    async setLocationGroupConfiguration(requestParameters: LocationGroupConfigurationApiSetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration> {
        const response = await this.setLocationGroupConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
