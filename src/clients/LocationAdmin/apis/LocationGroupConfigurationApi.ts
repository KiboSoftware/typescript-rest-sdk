/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  LocationGroupConfiguration,
} from '../models';


export namespace locationGroupConfigurationApiParams { 
    export interface GetLocationGroupConfigurationRequest {
        locationGroupCode: string;
        responseFields?: string;
    }
    export interface GetLocationGroupConfigurationByLocationCodeRequest {
        locationCode: string;
        responseFields?: string;
    }
    export interface SetLocationGroupConfigurationRequest {
        locationGroupCode: string;
        responseFields?: string;
        locationGroupConfiguration?: LocationGroupConfiguration;
    }
}
/**
* LocationGroupConfigurationApiService - interface
* 
* @export
* @interface LocationGroupConfigurationApi
*/
export interface LocationGroupConfigurationApiService {
    /**
    * Get this tenants Location Group Configuration Values by locationGroupCode.
    * @summary Get Location Group Configuration
    * @param {string} locationGroupCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationGroupConfigurationApiInterface
    */
    getLocationGroupConfigurationRaw(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>>;

    /**
    * Get this tenants Location Group Configuration Values by locationGroupCode.
    * Get Location Group Configuration
    */
    getLocationGroupConfiguration(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration>;

    /**
    * Get this tenants Location Group Configuration Values.
    * @summary Get Location Group Configuration By Location Code
    * @param {string} locationCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationGroupConfigurationApiInterface
    */
    getLocationGroupConfigurationByLocationCodeRaw(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>>;

    /**
    * Get this tenants Location Group Configuration Values.
    * Get Location Group Configuration By Location Code
    */
    getLocationGroupConfigurationByLocationCode(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration>;

    /**
    * Set this tenants Location Group Configuration Values.
    * @summary Set Location Group Configuration
    * @param {string} locationGroupCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {LocationGroupConfiguration} [locationGroupConfiguration] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationGroupConfigurationApiInterface
    */
    setLocationGroupConfigurationRaw(requestParameters: locationGroupConfigurationApiParams.SetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>>;

    /**
    * Set this tenants Location Group Configuration Values.
    * Set Location Group Configuration
    */
    setLocationGroupConfiguration(requestParameters: locationGroupConfigurationApiParams.SetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration>;

}


/**
 * 
 */
export class LocationGroupConfigurationApi extends runtime.BaseAPI implements LocationGroupConfigurationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get this tenants Location Group Configuration Values by locationGroupCode.
     * Get Location Group Configuration
     */


    async getLocationGroupConfigurationRaw(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>> {
        if (requestParameters.locationGroupCode === null || requestParameters.locationGroupCode === undefined) {
            throw new runtime.RequiredError('locationGroupCode','Required parameter requestParameters.locationGroupCode was null or undefined when calling getLocationGroupConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationGroupConfiguration/{locationGroupCode}`.replace(`{${"locationGroupCode"}}`, encodeURIComponent(String(requestParameters.locationGroupCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get this tenants Location Group Configuration Values by locationGroupCode.
     * Get Location Group Configuration
     */
    async getLocationGroupConfiguration(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration> {
        const response = await this.getLocationGroupConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get this tenants Location Group Configuration Values.
     * Get Location Group Configuration By Location Code
     */


    async getLocationGroupConfigurationByLocationCodeRaw(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocationGroupConfigurationByLocationCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationGroupConfiguration/location/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get this tenants Location Group Configuration Values.
     * Get Location Group Configuration By Location Code
     */
    async getLocationGroupConfigurationByLocationCode(requestParameters: locationGroupConfigurationApiParams.GetLocationGroupConfigurationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration> {
        const response = await this.getLocationGroupConfigurationByLocationCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set this tenants Location Group Configuration Values.
     * Set Location Group Configuration
     */


    async setLocationGroupConfigurationRaw(requestParameters: locationGroupConfigurationApiParams.SetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationGroupConfiguration>> {
        if (requestParameters.locationGroupCode === null || requestParameters.locationGroupCode === undefined) {
            throw new runtime.RequiredError('locationGroupCode','Required parameter requestParameters.locationGroupCode was null or undefined when calling setLocationGroupConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationGroupConfiguration/{locationGroupCode}`.replace(`{${"locationGroupCode"}}`, encodeURIComponent(String(requestParameters.locationGroupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationGroupConfiguration,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set this tenants Location Group Configuration Values.
     * Set Location Group Configuration
     */
    async setLocationGroupConfiguration(requestParameters: locationGroupConfigurationApiParams.SetLocationGroupConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationGroupConfiguration> {
        const response = await this.setLocationGroupConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
