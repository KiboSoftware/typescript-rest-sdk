/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: v1_admin
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  LocationUsage,
  LocationUsageCollection,
} from '../models';
import {
    LocationUsageFromJSON,
    LocationUsageToJSON,
    LocationUsageCollectionFromJSON,
    LocationUsageCollectionToJSON,
} from '../models';

export interface LocationSettingsApiGetLocationUsageRequest {
    code: string;
}

export interface LocationSettingsApiUpdateLocationUsageAsyncRequest {
    code: string;
    locationUsage?: LocationUsage;
}

/**
 * 
 */
export class LocationSettingsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get a locationUsage for the Site.
     * Get Location Usage
     */


    async getLocationUsageRaw(requestParameters: LocationSettingsApiGetLocationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationUsage>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getLocationUsage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/locationUsages/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationUsageFromJSON(jsonValue));
    }

    /**
     * Get a locationUsage for the Site.
     * Get Location Usage
     */
    async getLocationUsage(requestParameters: LocationSettingsApiGetLocationUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationUsage> {
        const response = await this.getLocationUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the locationUsages for the Site.
     * Get Location Usages
     */


    async getLocationUsagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationUsageCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/locationUsages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationUsageCollectionFromJSON(jsonValue));
    }

    /**
     * Get the locationUsages for the Site.
     * Get Location Usages
     */
    async getLocationUsages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationUsageCollection> {
        const response = await this.getLocationUsagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a locationUsage for the Site.
     * Update Location Usage Async
     */


    async updateLocationUsageAsyncRaw(requestParameters: LocationSettingsApiUpdateLocationUsageAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationUsage>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateLocationUsageAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/settings/locationUsages/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LocationUsageToJSON(requestParameters.locationUsage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationUsageFromJSON(jsonValue));
    }

    /**
     * Update a locationUsage for the Site.
     * Update Location Usage Async
     */
    async updateLocationUsageAsync(requestParameters: LocationSettingsApiUpdateLocationUsageAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationUsage> {
        const response = await this.updateLocationUsageAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
