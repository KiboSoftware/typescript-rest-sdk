/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: v1_admin
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  LocationType,
  LocationTypeCollection,
} from '../models';
import {
    LocationTypeFromJSON,
    LocationTypeToJSON,
    LocationTypeCollectionFromJSON,
    LocationTypeCollectionToJSON,
} from '../models';

export interface LocationTypeApiAddLocationTypeAsyncRequest {
    locationType?: LocationType;
}

export interface LocationTypeApiDeleteLocationTypeRequest {
    locationTypeCode: string;
}

export interface LocationTypeApiGetLocationTypeRequest {
    locationTypeCode: string;
}

export interface LocationTypeApiGetLocationTypesWithPaginationRequest {
    startIndex?: number;
    pageSize?: number;
}

export interface LocationTypeApiUpdateLocationTypeRequest {
    locationTypeCode: string;
    locationType?: LocationType;
}

/**
 * 
 */
export class LocationTypeApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create a LocationType.
     * Add Location Type Async
     */


    async addLocationTypeAsyncRaw(requestParameters: LocationTypeApiAddLocationTypeAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationTypeToJSON(requestParameters.locationType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationTypeFromJSON(jsonValue));
    }

    /**
     * Create a LocationType.
     * Add Location Type Async
     */
    async addLocationTypeAsync(requestParameters: LocationTypeApiAddLocationTypeAsyncRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationType> {
        const response = await this.addLocationTypeAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Location Type.
     * Delete Location Type
     */


    async deleteLocationTypeRaw(requestParameters: LocationTypeApiDeleteLocationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.locationTypeCode === null || requestParameters.locationTypeCode === undefined) {
            throw new runtime.RequiredError('locationTypeCode','Required parameter requestParameters.locationTypeCode was null or undefined when calling deleteLocationType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationtypes/{locationTypeCode}`.replace(`{${"locationTypeCode"}}`, encodeURIComponent(String(requestParameters.locationTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Location Type.
     * Delete Location Type
     */
    async deleteLocationType(requestParameters: LocationTypeApiDeleteLocationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocationTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Get a LocationType.
     * Get Location Type
     */


    async getLocationTypeRaw(requestParameters: LocationTypeApiGetLocationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationType>> {
        if (requestParameters.locationTypeCode === null || requestParameters.locationTypeCode === undefined) {
            throw new runtime.RequiredError('locationTypeCode','Required parameter requestParameters.locationTypeCode was null or undefined when calling getLocationType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationtypes/{locationTypeCode}`.replace(`{${"locationTypeCode"}}`, encodeURIComponent(String(requestParameters.locationTypeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationTypeFromJSON(jsonValue));
    }

    /**
     * Get a LocationType.
     * Get Location Type
     */
    async getLocationType(requestParameters: LocationTypeApiGetLocationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationType> {
        const response = await this.getLocationTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a collection of LocationTypes.
     * Get Location Types
     */


    async getLocationTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationTypeFromJSON));
    }

    /**
     * Get a collection of LocationTypes.
     * Get Location Types
     */
    async getLocationTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationType>> {
        const response = await this.getLocationTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a collection of LocationTypes.
     * Get Location Types  <param name=\"pageSize\"></param><param name=\"sortBy\"></param>
     */


    async getLocationTypesWithPaginationRaw(requestParameters: LocationTypeApiGetLocationTypesWithPaginationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationtypes/withpagination`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationTypeCollectionFromJSON(jsonValue));
    }

    /**
     * Get a collection of LocationTypes.
     * Get Location Types  <param name=\"pageSize\"></param><param name=\"sortBy\"></param>
     */
    async getLocationTypesWithPagination(requestParameters: LocationTypeApiGetLocationTypesWithPaginationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationTypeCollection> {
        const response = await this.getLocationTypesWithPaginationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a LocationType.
     * Update Location Type
     */


    async updateLocationTypeRaw(requestParameters: LocationTypeApiUpdateLocationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationType>> {
        if (requestParameters.locationTypeCode === null || requestParameters.locationTypeCode === undefined) {
            throw new runtime.RequiredError('locationTypeCode','Required parameter requestParameters.locationTypeCode was null or undefined when calling updateLocationType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locationtypes/{locationTypeCode}`.replace(`{${"locationTypeCode"}}`, encodeURIComponent(String(requestParameters.locationTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LocationTypeToJSON(requestParameters.locationType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationTypeFromJSON(jsonValue));
    }

    /**
     * Update a LocationType.
     * Update Location Type
     */
    async updateLocationType(requestParameters: LocationTypeApiUpdateLocationTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationType> {
        const response = await this.updateLocationTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
