/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Location Admin Service
 * OpenAPI Spec for Kibo Location Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Location,
  LocationCollection,
} from '../models';


export namespace locationAdminApiParams { 
    export interface AddLocationRequest {
        responseFields?: string;
        location?: Location;
    }
    export interface GetLocationRequest {
        locationCode: string;
        responseFields?: string;
    }
    export interface GetLocationsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface UpdateLocationRequest {
        locationCode: string;
        responseFields?: string;
        location?: Location;
    }
}
/**
* LocationAdminApiService - interface
* 
* @export
* @interface LocationAdminApi
*/
export interface LocationAdminApiService {
    /**
    * Add a new location.
    * @summary Add Location
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Location} [location] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationAdminApiInterface
    */
    addLocationRaw(requestParameters: locationAdminApiParams.AddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
    * Add a new location.
    * Add Location
    */
    addLocation(requestParameters: locationAdminApiParams.AddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
    * Get a location by its unique locationCode.
    * @summary Get Location
    * @param {string} locationCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationAdminApiInterface
    */
    getLocationRaw(requestParameters: locationAdminApiParams.GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
    * Get a location by its unique locationCode.
    * Get Location
    */
    getLocation(requestParameters: locationAdminApiParams.GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

    /**
    * Get locations with optional filtering and paging.
    * @summary Get Locations
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationAdminApiInterface
    */
    getLocationsRaw(requestParameters: locationAdminApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>>;

    /**
    * Get locations with optional filtering and paging.
    * Get Locations
    */
    getLocations(requestParameters: locationAdminApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection>;

    /**
    * Update a location by providing its locationCode.
    * @summary Update Location
    * @param {string} locationCode the unique code for a location
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Location} [location] the location update
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof LocationAdminApiInterface
    */
    updateLocationRaw(requestParameters: locationAdminApiParams.UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>>;

    /**
    * Update a location by providing its locationCode.
    * Update Location
    */
    updateLocation(requestParameters: locationAdminApiParams.UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location>;

}


/**
 * 
 */
export class LocationAdminApi extends runtime.BaseAPI implements LocationAdminApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add a new location.
     * Add Location
     */


    async addLocationRaw(requestParameters: locationAdminApiParams.AddLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.location,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add a new location.
     * Add Location
     */
    async addLocation(requestParameters: locationAdminApiParams.AddLocationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.addLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a location by its unique locationCode.
     * Get Location
     */


    async getLocationRaw(requestParameters: locationAdminApiParams.GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a location by its unique locationCode.
     * Get Location
     */
    async getLocation(requestParameters: locationAdminApiParams.GetLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.getLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get locations with optional filtering and paging.
     * Get Locations
     */


    async getLocationsRaw(requestParameters: locationAdminApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get locations with optional filtering and paging.
     * Get Locations
     */
    async getLocations(requestParameters: locationAdminApiParams.GetLocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationCollection> {
        const response = await this.getLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a location by providing its locationCode.
     * Update Location
     */


    async updateLocationRaw(requestParameters: locationAdminApiParams.UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Location>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling updateLocation.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/admin/locations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.location,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a location by providing its locationCode.
     * Update Location
     */
    async updateLocation(requestParameters: locationAdminApiParams.UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Location> {
        const response = await this.updateLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
