/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CommerceRuntimeShippingRate,
  Frequency,
  FulfillmentInfo,
  InstallmentPlanRequest,
  InventoryTags,
  Order,
  Payment,
  SubscriptionAction,
  SubscriptionAdjustment,
  SubscriptionAttribute,
  SubscriptionCoupons,
  SubscriptionItem,
  SubscriptionNextOrderDate,
  SubscriptionPriceList,
  SubscriptionReason,
  SubscriptionReasonCollection,
  SubscriptionRuntimeSubscription,
  SubscriptionRuntimeSubscriptionCollection,
} from '../models';


export namespace subscriptionApiParams { 
    export interface AddSubscriptionItemRequest {
        subscriptionId: string;
        updateMode?: string;
        responseFields?: string;
        subscriptionItem?: SubscriptionItem;
    }
    export interface ApplyCouponRequest {
        subscriptionId: string;
        couponCode: string;
        updateMode?: string;
        responseFields?: string;
    }
    export interface ChangePricelistOnSubscriptionRequest {
        subscriptionId: string;
        updateMode?: string;
        responseFields?: string;
        subscriptionPriceList?: SubscriptionPriceList;
    }
    export interface ClearSubscriptionDraftRequest {
        subscriptionId: string;
        responseFields?: string;
    }
    export interface ConvertToOrderRequest {
        subscriptionId: string;
        responseFields?: string;
    }
    export interface CreateSubscriptionRequest {
        responseFields?: string;
        subscriptionRuntimeSubscription?: SubscriptionRuntimeSubscription;
    }
    export interface CreateSubscriptionAttributesRequest {
        subscriptionId: string;
        responseFields?: string;
        subscriptionAttribute?: Array<SubscriptionAttribute>;
    }
    export interface DeleteSubscriptionDataRequest {
        subscriptionId: string;
        subscriptionDataId: string;
        updateMode?: string;
    }
    export interface DeleteSubscriptionItemRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        updateMode?: string;
        responseFields?: string;
        subscriptionReason?: SubscriptionReason;
    }
    export interface DeleteSubscriptionItemDataRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        subscriptionItemDataId: string;
        updateMode?: string;
    }
    export interface GetAvailableShipmentMethodsRequest {
        subscriptionId: string;
        draft?: boolean;
        responseFields?: string;
    }
    export interface GetReasonsRequest {
        category?: string;
        responseFields?: string;
    }
    export interface GetSubscriptionRequest {
        subscriptionId: string;
        draft?: boolean;
        responseFields?: string;
    }
    export interface GetSubscriptionAttributesRequest {
        subscriptionId: string;
        responseFields?: string;
    }
    export interface GetSubscriptionDataRequest {
        subscriptionId: string;
        draft?: boolean;
        responseFields?: string;
    }
    export interface GetSubscriptionItemDataRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        draft?: boolean;
        responseFields?: string;
    }
    export interface GetSubscriptionsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        q?: string;
        qLimit?: number;
        responseFields?: string;
    }
    export interface OrderNowRequest {
        subscriptionId: string;
        responseFields?: string;
    }
    export interface OrderPartialSubscriptionRequest {
        subscriptionId: string;
        responseFields?: string;
    }
    export interface PerformSubscriptionActionRequest {
        subscriptionId: string;
        responseFields?: string;
        subscriptionAction?: SubscriptionAction;
    }
    export interface RemoveCouponRequest {
        subscriptionId: string;
        updateMode?: string;
        responseFields?: string;
        subscriptionCoupons?: SubscriptionCoupons;
    }
    export interface SkipSubscriptionRequest {
        subscriptionId: string;
        responseFields?: string;
    }
    export interface UpdateAdjustmentsRequest {
        subscriptionId: string;
        responseFields?: string;
        subscriptionAdjustment?: SubscriptionAdjustment;
    }
    export interface UpdateFulfillmentInfoRequest {
        subscriptionId: string;
        updateMode?: string;
        responseFields?: string;
        fulfillmentInfo?: FulfillmentInfo;
    }
    export interface UpdateInstallmentPlanRequest {
        subscriptionId: string;
        updateMode?: string;
        responseFields?: string;
        installmentPlanRequest?: InstallmentPlanRequest;
    }
    export interface UpdateItemFulfillmentRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        updateMode?: string;
        responseFields?: string;
        subscriptionItem?: SubscriptionItem;
    }
    export interface UpdateItemQuantityRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        quantity: number;
        updateMode?: string;
        responseFields?: string;
        subscriptionReason?: SubscriptionReason;
    }
    export interface UpdateNextOrderDateRequest {
        subscriptionId: string;
        responseFields?: string;
        subscriptionNextOrderDate?: SubscriptionNextOrderDate;
    }
    export interface UpdatePaymentRequest {
        subscriptionId: string;
        updateMode?: string;
        responseFields?: string;
        payment?: Payment;
    }
    export interface UpdateSubscriptionRequest {
        subscriptionId: string;
        responseFields?: string;
        subscriptionRuntimeSubscription?: SubscriptionRuntimeSubscription;
    }
    export interface UpdateSubscriptionAttributeRequest {
        subscriptionId: string;
        removeMissing?: boolean;
        responseFields?: string;
        subscriptionAttribute?: Array<SubscriptionAttribute>;
    }
    export interface UpdateSubscriptionDataRequest {
        subscriptionId: string;
        subscriptionDataId: string;
        updateMode?: string;
        responseFields?: string;
        body?: any | null;
    }
    export interface UpdateSubscriptionFrequencyRequest {
        subscriptionId: string;
        responseFields?: string;
        frequency?: Frequency;
    }
    export interface UpdateSubscriptionItemDataRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        subscriptionItemDataId: string;
        updateMode?: string;
        responseFields?: string;
        body?: any | null;
    }
    export interface UpsertInventoryTagsRequest {
        subscriptionId: string;
        subscriptionItemId: string;
        updateMode?: string;
        responseFields?: string;
        inventoryTags?: Array<InventoryTags>;
    }
}
/**
* SubscriptionApiService - interface
* 
* @export
* @interface SubscriptionApi
*/
export interface SubscriptionApiService {
    /**
    * Add a subscription item in existing subscription.
    * @summary Add Subscription Item
    * @param {string} subscriptionId subscription id
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionItem} [subscriptionItem] subscription item to add.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    addSubscriptionItemRaw(requestParameters: subscriptionApiParams.AddSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Add a subscription item in existing subscription.
    * Add Subscription Item
    */
    addSubscriptionItem(requestParameters: subscriptionApiParams.AddSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Apply coupon to the Subscription.
    * @summary Apply Coupon
    * @param {string} subscriptionId Unique identifier of the Subscription with which to associate the coupon.
    * @param {string} couponCode Coupon code that the customer supplies to get the discounted price.
    * @param {string} [updateMode] updateMode\&quot;&gt;Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    applyCouponRaw(requestParameters: subscriptionApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Apply coupon to the Subscription.
    * Apply Coupon
    */
    applyCoupon(requestParameters: subscriptionApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Updates the price list on the subscription.
    * @summary Change Pricelist On Subscription
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionPriceList} [subscriptionPriceList] The price list to be applied.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    changePricelistOnSubscriptionRaw(requestParameters: subscriptionApiParams.ChangePricelistOnSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Updates the price list on the subscription.
    * Change Pricelist On Subscription
    */
    changePricelistOnSubscription(requestParameters: subscriptionApiParams.ChangePricelistOnSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Delete subscription draft
    * @summary Delete subscription draft
    * @param {string} subscriptionId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    clearSubscriptionDraftRaw(requestParameters: subscriptionApiParams.ClearSubscriptionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Delete subscription draft
    * Delete subscription draft
    */
    clearSubscriptionDraft(requestParameters: subscriptionApiParams.ClearSubscriptionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Convert the subscription to order.
    * @summary Convert To Order
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    convertToOrderRaw(requestParameters: subscriptionApiParams.ConvertToOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
    * Convert the subscription to order.
    * Convert To Order
    */
    convertToOrder(requestParameters: subscriptionApiParams.ConvertToOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
    * Creates and validates a new subscription.
    * @summary Creates Subscription
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionRuntimeSubscription} [subscriptionRuntimeSubscription] The subscription.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    createSubscriptionRaw(requestParameters: subscriptionApiParams.CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Creates and validates a new subscription.
    * Creates Subscription
    */
    createSubscription(requestParameters: subscriptionApiParams.CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Creates list of subscription attributes specified by subscription Id.
    * @summary Create Subscription Attributes
    * @param {string} subscriptionId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<SubscriptionAttribute>} [subscriptionAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    createSubscriptionAttributesRaw(requestParameters: subscriptionApiParams.CreateSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionAttribute>>>;

    /**
    * Creates list of subscription attributes specified by subscription Id.
    * Create Subscription Attributes
    */
    createSubscriptionAttributes(requestParameters: subscriptionApiParams.CreateSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionAttribute>>;

    /**
    * Delete Value of the given Key in the SubscriptionData bag.
    * @summary Delete Subscription Data
    * @param {string} subscriptionId Unique Identifier of the Subscription you want to Delete the Databag for
    * @param {string} subscriptionDataId URLEncoded Key for the Value you want to Delete from the Subscription DataBag
    * @param {string} [updateMode] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    deleteSubscriptionDataRaw(requestParameters: subscriptionApiParams.DeleteSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Delete Value of the given Key in the SubscriptionData bag.
    * Delete Subscription Data
    */
    deleteSubscriptionData(requestParameters: subscriptionApiParams.DeleteSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Removes a particular subscription item from the subscription
    * @summary Delete Subscription Item
    * @param {string} subscriptionId subscription id
    * @param {string} subscriptionItemId subscription item id
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionReason} [subscriptionReason] cancellation reason
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    deleteSubscriptionItemRaw(requestParameters: subscriptionApiParams.DeleteSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Removes a particular subscription item from the subscription
    * Delete Subscription Item
    */
    deleteSubscriptionItem(requestParameters: subscriptionApiParams.DeleteSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Deletes the Value of the given Key in the SubscriptionItem Data bag.
    * @summary Delete Subscription Item Data
    * @param {string} subscriptionId Unique Identifier of the Subscription you want to get the Items for
    * @param {string} subscriptionItemId Unique Identifier of the SubscriptionItem you want to delete the Databag for
    * @param {string} subscriptionItemDataId URLEncoded Key for the Value you want to Delete from the SubscriptionItem DataBag
    * @param {string} [updateMode] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    deleteSubscriptionItemDataRaw(requestParameters: subscriptionApiParams.DeleteSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Deletes the Value of the given Key in the SubscriptionItem Data bag.
    * Delete Subscription Item Data
    */
    deleteSubscriptionItemData(requestParameters: subscriptionApiParams.DeleteSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Gets valid shipping methods for subscription
    * @summary Get Available Shipment Methods
    * @param {string} subscriptionId 
    * @param {boolean} [draft] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getAvailableShipmentMethodsRaw(requestParameters: subscriptionApiParams.GetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeShippingRate>>>;

    /**
    * Gets valid shipping methods for subscription
    * Get Available Shipment Methods
    */
    getAvailableShipmentMethods(requestParameters: subscriptionApiParams.GetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeShippingRate>>;

    /**
    * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
    * @summary Get Reasons
    * @param {string} [category] Action to get available reasons for. Defaults to CANCEL
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getReasonsRaw(requestParameters: subscriptionApiParams.GetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionReasonCollection>>;

    /**
    * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
    * Get Reasons
    */
    getReasons(requestParameters: subscriptionApiParams.GetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionReasonCollection>;

    /**
    * Retrieves the details of a subscription specified by the subscription ID.
    * @summary Gets Subscription
    * @param {string} subscriptionId The subscription identifier.
    * @param {boolean} [draft] return draft version of subscription.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getSubscriptionRaw(requestParameters: subscriptionApiParams.GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Retrieves the details of a subscription specified by the subscription ID.
    * Gets Subscription
    */
    getSubscription(requestParameters: subscriptionApiParams.GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Gets the list of attributes specified by subscription Id.
    * @summary Get Subscription Attributes
    * @param {string} subscriptionId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getSubscriptionAttributesRaw(requestParameters: subscriptionApiParams.GetSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionAttribute>>>;

    /**
    * Gets the list of attributes specified by subscription Id.
    * Get Subscription Attributes
    */
    getSubscriptionAttributes(requestParameters: subscriptionApiParams.GetSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionAttribute>>;

    /**
    * Retrieves all the values in the Subscription Data bag
    * @summary Get subscription Data
    * @param {string} subscriptionId Unique Identifier of the Subscription whose Data you want to get
    * @param {boolean} [draft] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getSubscriptionDataRaw(requestParameters: subscriptionApiParams.GetSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Retrieves all the values in the Subscription Data bag
    * Get subscription Data
    */
    getSubscriptionData(requestParameters: subscriptionApiParams.GetSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Retrieves a specific value in the SubscriptionItem Data bag.
    * @summary Get Subscription Item Data
    * @param {string} subscriptionId Unique Identifier of the Subscription you want to get the Subscription Items for
    * @param {string} subscriptionItemId Unique Identifier of the SubscriptionItem whose Data you want to get
    * @param {boolean} [draft] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getSubscriptionItemDataRaw(requestParameters: subscriptionApiParams.GetSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Retrieves a specific value in the SubscriptionItem Data bag.
    * Get Subscription Item Data
    */
    getSubscriptionItemData(requestParameters: subscriptionApiParams.GetSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
    * @summary Get Subscriptions
    * @param {number} [startIndex] The start index.
    * @param {number} [pageSize] Size of the page.
    * @param {string} [sortBy] The sort by.
    * @param {string} [filter] The filter.
    * @param {string} [q] The q.
    * @param {number} [qLimit] The q limit.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getSubscriptionsRaw(requestParameters: subscriptionApiParams.GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscriptionCollection>>;

    /**
    * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
    * Get Subscriptions
    */
    getSubscriptions(requestParameters: subscriptionApiParams.GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscriptionCollection>;

    /**
    * Lets the user place an instant order from the subscription.
    * @summary Order Now
    * @param {string} subscriptionId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    orderNowRaw(requestParameters: subscriptionApiParams.OrderNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Lets the user place an instant order from the subscription.
    * Order Now
    */
    orderNow(requestParameters: subscriptionApiParams.OrderNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Lets the user place an order from Partial Draft.
    * @summary Order Partial Subscription
    * @param {string} subscriptionId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    orderPartialSubscriptionRaw(requestParameters: subscriptionApiParams.OrderPartialSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Lets the user place an order from Partial Draft.
    * Order Partial Subscription
    */
    orderPartialSubscription(requestParameters: subscriptionApiParams.OrderPartialSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
    * @summary Perform Subscription Action
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionAction} [subscriptionAction] Action to perform, which can be \&quot;Activate,\&quot; \&quot;Pause,\&quot; \&quot;Cancel\&quot;.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    performSubscriptionActionRaw(requestParameters: subscriptionApiParams.PerformSubscriptionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
    * Perform Subscription Action
    */
    performSubscriptionAction(requestParameters: subscriptionApiParams.PerformSubscriptionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Remove coupons from subscription and draft
    * @summary Remove coupons from subscription and draft
    * @param {string} subscriptionId 
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionCoupons} [subscriptionCoupons] CouponCodes
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    removeCouponRaw(requestParameters: subscriptionApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Remove coupons from subscription and draft
    * Remove coupons from subscription and draft
    */
    removeCoupon(requestParameters: subscriptionApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Skips the next continuity order for the subscription.
    * @summary Skip Subscription
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    skipSubscriptionRaw(requestParameters: subscriptionApiParams.SkipSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Skips the next continuity order for the subscription.
    * Skip Subscription
    */
    skipSubscription(requestParameters: subscriptionApiParams.SkipSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Update item, shipping and handling adjustments on the subscription.
    * @summary Update Adjustments
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionAdjustment} [subscriptionAdjustment] Adjustments for subscription.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateAdjustmentsRaw(requestParameters: subscriptionApiParams.UpdateAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Update item, shipping and handling adjustments on the subscription.
    * Update Adjustments
    */
    updateAdjustments(requestParameters: subscriptionApiParams.UpdateAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Modifies the Fulfillment Info for a subscription.
    * @summary Update Fulfillment Info
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {FulfillmentInfo} [fulfillmentInfo] New fulfillment info for subscription.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateFulfillmentInfoRaw(requestParameters: subscriptionApiParams.UpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>>;

    /**
    * Modifies the Fulfillment Info for a subscription.
    * Update Fulfillment Info
    */
    updateFulfillmentInfo(requestParameters: subscriptionApiParams.UpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo>;

    /**
    * Updates the installment plan on the subscription.
    * @summary Update Installment plan
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {InstallmentPlanRequest} [installmentPlanRequest] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateInstallmentPlanRaw(requestParameters: subscriptionApiParams.UpdateInstallmentPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Updates the installment plan on the subscription.
    * Update Installment plan
    */
    updateInstallmentPlan(requestParameters: subscriptionApiParams.UpdateInstallmentPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Update Item fulfillment type on existing subscription.
    * @summary Update Item fulfillment type.
    * @param {string} subscriptionId subscription id
    * @param {string} subscriptionItemId subscription item id
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionItem} [subscriptionItem] subscription item id
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateItemFulfillmentRaw(requestParameters: subscriptionApiParams.UpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Update Item fulfillment type on existing subscription.
    * Update Item fulfillment type.
    */
    updateItemFulfillment(requestParameters: subscriptionApiParams.UpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Update Item Quantity on existing subscription.
    * @summary Update Item Quantity
    * @param {string} subscriptionId subscription id
    * @param {string} subscriptionItemId subscription item id
    * @param {number} quantity New quantity for the specified subscription item.
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionReason} [subscriptionReason] cancellation reason if item quantity is decreased.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateItemQuantityRaw(requestParameters: subscriptionApiParams.UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Update Item Quantity on existing subscription.
    * Update Item Quantity
    */
    updateItemQuantity(requestParameters: subscriptionApiParams.UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Updates the next order date on an existing subscription
    * @summary Update Next Order Date
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionNextOrderDate} [subscriptionNextOrderDate] The Next Order date to be set.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateNextOrderDateRaw(requestParameters: subscriptionApiParams.UpdateNextOrderDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Updates the next order date on an existing subscription
    * Update Next Order Date
    */
    updateNextOrderDate(requestParameters: subscriptionApiParams.UpdateNextOrderDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Updates the payment on the subscription.
    * @summary Update Payment
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [updateMode] Determines the update strategy for this update (ApplyToOriginal, ApplyToDraft).
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Payment} [payment] The new payment to be applied.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updatePaymentRaw(requestParameters: subscriptionApiParams.UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Updates the payment on the subscription.
    * Update Payment
    */
    updatePayment(requestParameters: subscriptionApiParams.UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Update the info for an existing subscription
    * @summary Update Subscription
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionRuntimeSubscription} [subscriptionRuntimeSubscription] The subscription.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateSubscriptionRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Update the info for an existing subscription
    * Update Subscription
    */
    updateSubscription(requestParameters: subscriptionApiParams.UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Updates the list of subscription attributes specified by subscription id and removes the missing attributes if not passed when removeMissing flag is set.
    * @summary Update Subscription Attribute
    * @param {string} subscriptionId 
    * @param {boolean} [removeMissing] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<SubscriptionAttribute>} [subscriptionAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateSubscriptionAttributeRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionAttribute>>>;

    /**
    * Updates the list of subscription attributes specified by subscription id and removes the missing attributes if not passed when removeMissing flag is set.
    * Update Subscription Attribute
    */
    updateSubscriptionAttribute(requestParameters: subscriptionApiParams.UpdateSubscriptionAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionAttribute>>;

    /**
    * Insert / Updates the Value of the given Key in the Subscription Data bag.
    * @summary Update Subscription Data
    * @param {string} subscriptionId Unique Identifier of the Subscription you want to insert / update the Databag for
    * @param {string} subscriptionDataId URLEncoded Key for the Value you want to Insert / Update from the Subscription DataBag
    * @param {string} [updateMode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {any} [body] Data Object you are trying to insert / update
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateSubscriptionDataRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Insert / Updates the Value of the given Key in the Subscription Data bag.
    * Update Subscription Data
    */
    updateSubscriptionData(requestParameters: subscriptionApiParams.UpdateSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Update the frequency on an existing subscription
    * @summary Update Subscription Frequency
    * @param {string} subscriptionId The subscription identifier.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Frequency} [frequency] The requested frequency for update
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateSubscriptionFrequencyRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionFrequencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Update the frequency on an existing subscription
    * Update Subscription Frequency
    */
    updateSubscriptionFrequency(requestParameters: subscriptionApiParams.UpdateSubscriptionFrequencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

    /**
    * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
    * @summary Update Subscription Item Data
    * @param {string} subscriptionId Unique Identifier of the Subscription you want to get the Items for
    * @param {string} subscriptionItemId Unique Identifier of the SubscriptionItem you want to Insert / Update the Databag for
    * @param {string} subscriptionItemDataId URLEncoded Key for the Value you want to Insert / Update from the SubscriptionItem DataBag
    * @param {string} [updateMode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {any} [body] Data Object you are trying to insert / update
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    updateSubscriptionItemDataRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
    * Update Subscription Item Data
    */
    updateSubscriptionItemData(requestParameters: subscriptionApiParams.UpdateSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Upsert Inventory Tags
    * @summary Upsert Inventory Tags
    * @param {string} subscriptionId 
    * @param {string} subscriptionItemId 
    * @param {string} [updateMode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<InventoryTags>} [inventoryTags] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    upsertInventoryTagsRaw(requestParameters: subscriptionApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>>;

    /**
    * Upsert Inventory Tags
    * Upsert Inventory Tags
    */
    upsertInventoryTags(requestParameters: subscriptionApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription>;

}


/**
 * 
 */
export class SubscriptionApi extends runtime.BaseAPI implements SubscriptionApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add a subscription item in existing subscription.
     * Add Subscription Item
     */


    async addSubscriptionItemRaw(requestParameters: subscriptionApiParams.AddSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling addSubscriptionItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add a subscription item in existing subscription.
     * Add Subscription Item
     */
    async addSubscriptionItem(requestParameters: subscriptionApiParams.AddSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.addSubscriptionItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply coupon to the Subscription.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: subscriptionApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/coupons/{couponCode}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply coupon to the Subscription.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: subscriptionApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the price list on the subscription.
     * Change Pricelist On Subscription
     */


    async changePricelistOnSubscriptionRaw(requestParameters: subscriptionApiParams.ChangePricelistOnSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling changePricelistOnSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/priceList`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionPriceList,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the price list on the subscription.
     * Change Pricelist On Subscription
     */
    async changePricelistOnSubscription(requestParameters: subscriptionApiParams.ChangePricelistOnSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.changePricelistOnSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete subscription draft
     * Delete subscription draft
     */


    async clearSubscriptionDraftRaw(requestParameters: subscriptionApiParams.ClearSubscriptionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling clearSubscriptionDraft.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/cleardraft`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete subscription draft
     * Delete subscription draft
     */
    async clearSubscriptionDraft(requestParameters: subscriptionApiParams.ClearSubscriptionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.clearSubscriptionDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Convert the subscription to order.
     * Convert To Order
     */


    async convertToOrderRaw(requestParameters: subscriptionApiParams.ConvertToOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling convertToOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/converttoorder`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Convert the subscription to order.
     * Convert To Order
     */
    async convertToOrder(requestParameters: subscriptionApiParams.ConvertToOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.convertToOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates and validates a new subscription.
     * Creates Subscription
     */


    async createSubscriptionRaw(requestParameters: subscriptionApiParams.CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionRuntimeSubscription,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates and validates a new subscription.
     * Creates Subscription
     */
    async createSubscription(requestParameters: subscriptionApiParams.CreateSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates list of subscription attributes specified by subscription Id.
     * Create Subscription Attributes
     */


    async createSubscriptionAttributesRaw(requestParameters: subscriptionApiParams.CreateSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionAttribute>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling createSubscriptionAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/attributes`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates list of subscription attributes specified by subscription Id.
     * Create Subscription Attributes
     */
    async createSubscriptionAttributes(requestParameters: subscriptionApiParams.CreateSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionAttribute>> {
        const response = await this.createSubscriptionAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Value of the given Key in the SubscriptionData bag.
     * Delete Subscription Data
     */


    async deleteSubscriptionDataRaw(requestParameters: subscriptionApiParams.DeleteSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptionData.');
        }

        if (requestParameters.subscriptionDataId === null || requestParameters.subscriptionDataId === undefined) {
            throw new runtime.RequiredError('subscriptionDataId','Required parameter requestParameters.subscriptionDataId was null or undefined when calling deleteSubscriptionData.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/data/{subscriptionDataId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionDataId"}}`, encodeURIComponent(String(requestParameters.subscriptionDataId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete Value of the given Key in the SubscriptionData bag.
     * Delete Subscription Data
     */
    async deleteSubscriptionData(requestParameters: subscriptionApiParams.DeleteSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteSubscriptionDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a particular subscription item from the subscription
     * Delete Subscription Item
     */


    async deleteSubscriptionItemRaw(requestParameters: subscriptionApiParams.DeleteSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptionItem.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling deleteSubscriptionItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/remove`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionReason,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a particular subscription item from the subscription
     * Delete Subscription Item
     */
    async deleteSubscriptionItem(requestParameters: subscriptionApiParams.DeleteSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.deleteSubscriptionItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the Value of the given Key in the SubscriptionItem Data bag.
     * Delete Subscription Item Data
     */


    async deleteSubscriptionItemDataRaw(requestParameters: subscriptionApiParams.DeleteSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptionItemData.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling deleteSubscriptionItemData.');
        }

        if (requestParameters.subscriptionItemDataId === null || requestParameters.subscriptionItemDataId === undefined) {
            throw new runtime.RequiredError('subscriptionItemDataId','Required parameter requestParameters.subscriptionItemDataId was null or undefined when calling deleteSubscriptionItemData.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/item/{subscriptionItemId}/data/{subscriptionItemDataId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))).replace(`{${"subscriptionItemDataId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemDataId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes the Value of the given Key in the SubscriptionItem Data bag.
     * Delete Subscription Item Data
     */
    async deleteSubscriptionItemData(requestParameters: subscriptionApiParams.DeleteSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteSubscriptionItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets valid shipping methods for subscription
     * Get Available Shipment Methods
     */


    async getAvailableShipmentMethodsRaw(requestParameters: subscriptionApiParams.GetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeShippingRate>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getAvailableShipmentMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/shipments/methods`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets valid shipping methods for subscription
     * Get Available Shipment Methods
     */
    async getAvailableShipmentMethods(requestParameters: subscriptionApiParams.GetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeShippingRate>> {
        const response = await this.getAvailableShipmentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * Get Reasons
     */


    async getReasonsRaw(requestParameters: subscriptionApiParams.GetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionReasonCollection>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/reasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * Get Reasons
     */
    async getReasons(requestParameters: subscriptionApiParams.GetReasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionReasonCollection> {
        const response = await this.getReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a subscription specified by the subscription ID.
     * Gets Subscription
     */


    async getSubscriptionRaw(requestParameters: subscriptionApiParams.GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a subscription specified by the subscription ID.
     * Gets Subscription
     */
    async getSubscription(requestParameters: subscriptionApiParams.GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of attributes specified by subscription Id.
     * Get Subscription Attributes
     */


    async getSubscriptionAttributesRaw(requestParameters: subscriptionApiParams.GetSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionAttribute>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscriptionAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/attributes`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the list of attributes specified by subscription Id.
     * Get Subscription Attributes
     */
    async getSubscriptionAttributes(requestParameters: subscriptionApiParams.GetSubscriptionAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionAttribute>> {
        const response = await this.getSubscriptionAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the values in the Subscription Data bag
     * Get subscription Data
     */


    async getSubscriptionDataRaw(requestParameters: subscriptionApiParams.GetSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscriptionData.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/data`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves all the values in the Subscription Data bag
     * Get subscription Data
     */
    async getSubscriptionData(requestParameters: subscriptionApiParams.GetSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getSubscriptionDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific value in the SubscriptionItem Data bag.
     * Get Subscription Item Data
     */


    async getSubscriptionItemDataRaw(requestParameters: subscriptionApiParams.GetSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscriptionItemData.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling getSubscriptionItemData.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/item/{subscriptionItemId}/data`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves a specific value in the SubscriptionItem Data bag.
     * Get Subscription Item Data
     */
    async getSubscriptionItemData(requestParameters: subscriptionApiParams.GetSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getSubscriptionItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * Get Subscriptions
     */


    async getSubscriptionsRaw(requestParameters: subscriptionApiParams.GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscriptionCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * Get Subscriptions
     */
    async getSubscriptions(requestParameters: subscriptionApiParams.GetSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscriptionCollection> {
        const response = await this.getSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lets the user place an instant order from the subscription.
     * Order Now
     */


    async orderNowRaw(requestParameters: subscriptionApiParams.OrderNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling orderNow.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/ordernow`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Lets the user place an instant order from the subscription.
     * Order Now
     */
    async orderNow(requestParameters: subscriptionApiParams.OrderNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.orderNowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lets the user place an order from Partial Draft.
     * Order Partial Subscription
     */


    async orderPartialSubscriptionRaw(requestParameters: subscriptionApiParams.OrderPartialSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling orderPartialSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/orderpartialdraft`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Lets the user place an order from Partial Draft.
     * Order Partial Subscription
     */
    async orderPartialSubscription(requestParameters: subscriptionApiParams.OrderPartialSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.orderPartialSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * Perform Subscription Action
     */


    async performSubscriptionActionRaw(requestParameters: subscriptionApiParams.PerformSubscriptionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling performSubscriptionAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/actions`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * Perform Subscription Action
     */
    async performSubscriptionAction(requestParameters: subscriptionApiParams.PerformSubscriptionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.performSubscriptionActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove coupons from subscription and draft
     * Remove coupons from subscription and draft
     */


    async removeCouponRaw(requestParameters: subscriptionApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/removecoupon`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionCoupons,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove coupons from subscription and draft
     * Remove coupons from subscription and draft
     */
    async removeCoupon(requestParameters: subscriptionApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Skips the next continuity order for the subscription.
     * Skip Subscription
     */


    async skipSubscriptionRaw(requestParameters: subscriptionApiParams.SkipSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling skipSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/skip`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Skips the next continuity order for the subscription.
     * Skip Subscription
     */
    async skipSubscription(requestParameters: subscriptionApiParams.SkipSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.skipSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update item, shipping and handling adjustments on the subscription.
     * Update Adjustments
     */


    async updateAdjustmentsRaw(requestParameters: subscriptionApiParams.UpdateAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateAdjustments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/adjustments`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionAdjustment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update item, shipping and handling adjustments on the subscription.
     * Update Adjustments
     */
    async updateAdjustments(requestParameters: subscriptionApiParams.UpdateAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the Fulfillment Info for a subscription.
     * Update Fulfillment Info
     */


    async updateFulfillmentInfoRaw(requestParameters: subscriptionApiParams.UpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateFulfillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/fulfillmentinfo`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fulfillmentInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies the Fulfillment Info for a subscription.
     * Update Fulfillment Info
     */
    async updateFulfillmentInfo(requestParameters: subscriptionApiParams.UpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo> {
        const response = await this.updateFulfillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the installment plan on the subscription.
     * Update Installment plan
     */


    async updateInstallmentPlanRaw(requestParameters: subscriptionApiParams.UpdateInstallmentPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateInstallmentPlan.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/installmentPlan`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.installmentPlanRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the installment plan on the subscription.
     * Update Installment plan
     */
    async updateInstallmentPlan(requestParameters: subscriptionApiParams.UpdateInstallmentPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateInstallmentPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Item fulfillment type on existing subscription.
     * Update Item fulfillment type.
     */


    async updateItemFulfillmentRaw(requestParameters: subscriptionApiParams.UpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateItemFulfillment.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling updateItemFulfillment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/fulfillment`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Item fulfillment type on existing subscription.
     * Update Item fulfillment type.
     */
    async updateItemFulfillment(requestParameters: subscriptionApiParams.UpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateItemFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Item Quantity on existing subscription.
     * Update Item Quantity
     */


    async updateItemQuantityRaw(requestParameters: subscriptionApiParams.UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/quantity/{quantity}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionReason,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Item Quantity on existing subscription.
     * Update Item Quantity
     */
    async updateItemQuantity(requestParameters: subscriptionApiParams.UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the next order date on an existing subscription
     * Update Next Order Date
     */


    async updateNextOrderDateRaw(requestParameters: subscriptionApiParams.UpdateNextOrderDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateNextOrderDate.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/nextorderdate`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionNextOrderDate,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the next order date on an existing subscription
     * Update Next Order Date
     */
    async updateNextOrderDate(requestParameters: subscriptionApiParams.UpdateNextOrderDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateNextOrderDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the payment on the subscription.
     * Update Payment
     */


    async updatePaymentRaw(requestParameters: subscriptionApiParams.UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updatePayment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/payment`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.payment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the payment on the subscription.
     * Update Payment
     */
    async updatePayment(requestParameters: subscriptionApiParams.UpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updatePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the info for an existing subscription
     * Update Subscription
     */


    async updateSubscriptionRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionRuntimeSubscription,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the info for an existing subscription
     * Update Subscription
     */
    async updateSubscription(requestParameters: subscriptionApiParams.UpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the list of subscription attributes specified by subscription id and removes the missing attributes if not passed when removeMissing flag is set.
     * Update Subscription Attribute
     */


    async updateSubscriptionAttributeRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SubscriptionAttribute>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.removeMissing !== undefined) {
            queryParameters['removeMissing'] = requestParameters.removeMissing;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/attributes`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the list of subscription attributes specified by subscription id and removes the missing attributes if not passed when removeMissing flag is set.
     * Update Subscription Attribute
     */
    async updateSubscriptionAttribute(requestParameters: subscriptionApiParams.UpdateSubscriptionAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SubscriptionAttribute>> {
        const response = await this.updateSubscriptionAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert / Updates the Value of the given Key in the Subscription Data bag.
     * Update Subscription Data
     */


    async updateSubscriptionDataRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionData.');
        }

        if (requestParameters.subscriptionDataId === null || requestParameters.subscriptionDataId === undefined) {
            throw new runtime.RequiredError('subscriptionDataId','Required parameter requestParameters.subscriptionDataId was null or undefined when calling updateSubscriptionData.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/data/{subscriptionDataId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionDataId"}}`, encodeURIComponent(String(requestParameters.subscriptionDataId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Insert / Updates the Value of the given Key in the Subscription Data bag.
     * Update Subscription Data
     */
    async updateSubscriptionData(requestParameters: subscriptionApiParams.UpdateSubscriptionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateSubscriptionDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the frequency on an existing subscription
     * Update Subscription Frequency
     */


    async updateSubscriptionFrequencyRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionFrequencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionFrequency.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/frequency`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.frequency,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the frequency on an existing subscription
     * Update Subscription Frequency
     */
    async updateSubscriptionFrequency(requestParameters: subscriptionApiParams.UpdateSubscriptionFrequencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.updateSubscriptionFrequencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
     * Update Subscription Item Data
     */


    async updateSubscriptionItemDataRaw(requestParameters: subscriptionApiParams.UpdateSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionItemData.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling updateSubscriptionItemData.');
        }

        if (requestParameters.subscriptionItemDataId === null || requestParameters.subscriptionItemDataId === undefined) {
            throw new runtime.RequiredError('subscriptionItemDataId','Required parameter requestParameters.subscriptionItemDataId was null or undefined when calling updateSubscriptionItemData.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/item/{subscriptionItemId}/data/{subscriptionItemDataId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))).replace(`{${"subscriptionItemDataId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemDataId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Insert / Updates the Value of the given Key in the SubscriptionItem Data bag.
     * Update Subscription Item Data
     */
    async updateSubscriptionItemData(requestParameters: subscriptionApiParams.UpdateSubscriptionItemDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateSubscriptionItemDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     */


    async upsertInventoryTagsRaw(requestParameters: subscriptionApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionRuntimeSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling upsertInventoryTags.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling upsertInventoryTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/upsertinventorytags`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.inventoryTags,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     */
    async upsertInventoryTags(requestParameters: subscriptionApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionRuntimeSubscription> {
        const response = await this.upsertInventoryTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
