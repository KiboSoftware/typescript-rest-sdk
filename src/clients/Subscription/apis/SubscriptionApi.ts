/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Frequency,
  FulfillmentInfo,
  OneTimeCoupons,
  Order,
  Payment,
  ShippingRate,
  Subscription,
  SubscriptionAction,
  SubscriptionAdjustment,
  SubscriptionCollection,
  SubscriptionItem,
  SubscriptionNextOrderDate,
  SubscriptionReason,
  SubscriptionReasonCollection,
} from '../models';
import {
    FrequencyFromJSON,
    FrequencyToJSON,
    FulfillmentInfoFromJSON,
    FulfillmentInfoToJSON,
    OneTimeCouponsFromJSON,
    OneTimeCouponsToJSON,
    OrderFromJSON,
    OrderToJSON,
    PaymentFromJSON,
    PaymentToJSON,
    ShippingRateFromJSON,
    ShippingRateToJSON,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionActionFromJSON,
    SubscriptionActionToJSON,
    SubscriptionAdjustmentFromJSON,
    SubscriptionAdjustmentToJSON,
    SubscriptionCollectionFromJSON,
    SubscriptionCollectionToJSON,
    SubscriptionItemFromJSON,
    SubscriptionItemToJSON,
    SubscriptionNextOrderDateFromJSON,
    SubscriptionNextOrderDateToJSON,
    SubscriptionReasonFromJSON,
    SubscriptionReasonToJSON,
    SubscriptionReasonCollectionFromJSON,
    SubscriptionReasonCollectionToJSON,
} from '../models';

export interface SubscriptionApiAddSubscriptionItemRequest {
    subscriptionId: string;
    updateMode?: string;
    subscriptionItem?: SubscriptionItem;
}

export interface SubscriptionApiApplyCouponRequest {
    subscriptionId: string;
    couponCode: string;
    updateMode?: string;
}

export interface SubscriptionApiClearSubscriptionDraftRequest {
    subscriptionId: string;
}

export interface SubscriptionApiConvertToOrderRequest {
    subscriptionId: string;
}

export interface SubscriptionApiCreateSubscriptionRequest {
    subscription?: Subscription;
}

export interface SubscriptionApiDeleteSubscriptionItemRequest {
    subscriptionId: string;
    subscriptionItemId: string;
    updateMode?: string;
    subscriptionReason?: SubscriptionReason;
}

export interface SubscriptionApiGetAvailableShipmentMethodsRequest {
    subscriptionId: string;
    draft?: boolean;
}

export interface SubscriptionApiGetReasonsRequest {
    category?: string;
}

export interface SubscriptionApiGetSubscriptionRequest {
    subscriptionId: string;
    draft?: boolean;
}

export interface SubscriptionApiGetSubscriptionsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
}

export interface SubscriptionApiOrderNowRequest {
    subscriptionId: string;
}

export interface SubscriptionApiPerformSubscriptionActionRequest {
    subscriptionId: string;
    subscriptionAction?: SubscriptionAction;
}

export interface SubscriptionApiRemoveOneTimeCouponRequest {
    subscriptionId: string;
    updateMode?: string;
    oneTimeCoupons?: OneTimeCoupons;
}

export interface SubscriptionApiSkipSubscriptionRequest {
    subscriptionId: string;
}

export interface SubscriptionApiUpdateAdjustmentsRequest {
    subscriptionId: string;
    subscriptionAdjustment?: SubscriptionAdjustment;
}

export interface SubscriptionApiUpdateFulfillmentInfoRequest {
    subscriptionId: string;
    updateMode?: string;
    fulfillmentInfo?: FulfillmentInfo;
}

export interface SubscriptionApiUpdateItemQuantityRequest {
    subscriptionId: string;
    subscriptionItemId: string;
    quantity: number;
    updateMode?: string;
    subscriptionReason?: SubscriptionReason;
}

export interface SubscriptionApiUpdateNextOrderDateRequest {
    subscriptionId: string;
    subscriptionNextOrderDate?: SubscriptionNextOrderDate;
}

export interface SubscriptionApiUpdatePaymentRequest {
    subscriptionId: string;
    updateMode?: string;
    payment?: Payment;
}

export interface SubscriptionApiUpdateSubscriptionRequest {
    subscriptionId: string;
    subscription?: Subscription;
}

export interface SubscriptionApiUpdateSubscriptionFrequencyRequest {
    subscriptionId: string;
    frequency?: Frequency;
}

/**
 * 
 */
export class SubscriptionApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add a subscription item in existing subscription.
     * Add Subscription Item
     */


    async addSubscriptionItemRaw(requestParameters: SubscriptionApiAddSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling addSubscriptionItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionItemToJSON(requestParameters.subscriptionItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Add a subscription item in existing subscription.
     * Add Subscription Item
     */
    async addSubscriptionItem(requestParameters: SubscriptionApiAddSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.addSubscriptionItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply coupon to the Subscription.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: SubscriptionApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/coupons/{couponCode}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Apply coupon to the Subscription.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: SubscriptionApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete subscription draft
     * Delete subscription draft
     */


    async clearSubscriptionDraftRaw(requestParameters: SubscriptionApiClearSubscriptionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling clearSubscriptionDraft.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/cleardraft`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Delete subscription draft
     * Delete subscription draft
     */
    async clearSubscriptionDraft(requestParameters: SubscriptionApiClearSubscriptionDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.clearSubscriptionDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Convert the subscription to order.
     * Convert To Order
     */


    async convertToOrderRaw(requestParameters: SubscriptionApiConvertToOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling convertToOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/converttoorder`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Convert the subscription to order.
     * Convert To Order
     */
    async convertToOrder(requestParameters: SubscriptionApiConvertToOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.convertToOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates and validates a new subscription.
     * Creates Subscription
     */


    async createSubscriptionRaw(requestParameters: SubscriptionApiCreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionToJSON(requestParameters.subscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Creates and validates a new subscription.
     * Creates Subscription
     */
    async createSubscription(requestParameters: SubscriptionApiCreateSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a particular subscription item from the subscription
     * Delete Subscription Item
     */


    async deleteSubscriptionItemRaw(requestParameters: SubscriptionApiDeleteSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling deleteSubscriptionItem.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling deleteSubscriptionItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/remove`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionReasonToJSON(requestParameters.subscriptionReason),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Removes a particular subscription item from the subscription
     * Delete Subscription Item
     */
    async deleteSubscriptionItem(requestParameters: SubscriptionApiDeleteSubscriptionItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.deleteSubscriptionItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets valid shipping methods for subscription
     * Get Available Shipment Methods
     */


    async getAvailableShipmentMethodsRaw(requestParameters: SubscriptionApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingRate>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getAvailableShipmentMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/shipments/methods`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingRateFromJSON));
    }

    /**
     * Gets valid shipping methods for subscription
     * Get Available Shipment Methods
     */
    async getAvailableShipmentMethods(requestParameters: SubscriptionApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingRate>> {
        const response = await this.getAvailableShipmentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * Get Reasons
     */


    async getReasonsRaw(requestParameters: SubscriptionApiGetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionReasonCollection>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/reasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionReasonCollectionFromJSON(jsonValue));
    }

    /**
     * Gets available subscription action reasons for the given category. If no category is supplied will give available Cancel action reasons.
     * Get Reasons
     */
    async getReasons(requestParameters: SubscriptionApiGetReasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionReasonCollection> {
        const response = await this.getReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a subscription specified by the subscription ID.
     * Gets Subscription
     */


    async getSubscriptionRaw(requestParameters: SubscriptionApiGetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a subscription specified by the subscription ID.
     * Gets Subscription
     */
    async getSubscription(requestParameters: SubscriptionApiGetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * Get Subscriptions
     */


    async getSubscriptionsRaw(requestParameters: SubscriptionApiGetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of subscriptions according to any specified filter criteria and sort options.
     * Get Subscriptions
     */
    async getSubscriptions(requestParameters: SubscriptionApiGetSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionCollection> {
        const response = await this.getSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lets the user place an instant order from the subscription.
     * Order Now
     */


    async orderNowRaw(requestParameters: SubscriptionApiOrderNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling orderNow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/ordernow`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Lets the user place an instant order from the subscription.
     * Order Now
     */
    async orderNow(requestParameters: SubscriptionApiOrderNowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.orderNowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * Perform Subscription Action
     */


    async performSubscriptionActionRaw(requestParameters: SubscriptionApiPerformSubscriptionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling performSubscriptionAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/actions`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionActionToJSON(requestParameters.subscriptionAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Perform the specified action on subscription. Available actions are Activate, Pause, and Cancel.
     * Perform Subscription Action
     */
    async performSubscriptionAction(requestParameters: SubscriptionApiPerformSubscriptionActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.performSubscriptionActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove one time coupons from subscription
     * Remove one time coupons from subscription
     */


    async removeOneTimeCouponRaw(requestParameters: SubscriptionApiRemoveOneTimeCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling removeOneTimeCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/removeonetimecoupon`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OneTimeCouponsToJSON(requestParameters.oneTimeCoupons),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Remove one time coupons from subscription
     * Remove one time coupons from subscription
     */
    async removeOneTimeCoupon(requestParameters: SubscriptionApiRemoveOneTimeCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.removeOneTimeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Skips the next continuity order for the subscription.
     * Skip Subscription
     */


    async skipSubscriptionRaw(requestParameters: SubscriptionApiSkipSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling skipSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/skip`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Skips the next continuity order for the subscription.
     * Skip Subscription
     */
    async skipSubscription(requestParameters: SubscriptionApiSkipSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.skipSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update item, shipping and handling adjustments on the subscription.
     * Update Adjustments
     */


    async updateAdjustmentsRaw(requestParameters: SubscriptionApiUpdateAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateAdjustments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/adjustments`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionAdjustmentToJSON(requestParameters.subscriptionAdjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Update item, shipping and handling adjustments on the subscription.
     * Update Adjustments
     */
    async updateAdjustments(requestParameters: SubscriptionApiUpdateAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the Fulfillment Info for a subscription.
     * Update Fulfillment Info
     */


    async updateFulfillmentInfoRaw(requestParameters: SubscriptionApiUpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateFulfillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/fulfillmentinfo`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FulfillmentInfoToJSON(requestParameters.fulfillmentInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FulfillmentInfoFromJSON(jsonValue));
    }

    /**
     * Modifies the Fulfillment Info for a subscription.
     * Update Fulfillment Info
     */
    async updateFulfillmentInfo(requestParameters: SubscriptionApiUpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo> {
        const response = await this.updateFulfillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Item Quantity on existing subscription.
     * Update Item Quantity
     */


    async updateItemQuantityRaw(requestParameters: SubscriptionApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.subscriptionItemId === null || requestParameters.subscriptionItemId === undefined) {
            throw new runtime.RequiredError('subscriptionItemId','Required parameter requestParameters.subscriptionItemId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/items/{subscriptionItemId}/quantity/{quantity}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"subscriptionItemId"}}`, encodeURIComponent(String(requestParameters.subscriptionItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionReasonToJSON(requestParameters.subscriptionReason),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Update Item Quantity on existing subscription.
     * Update Item Quantity
     */
    async updateItemQuantity(requestParameters: SubscriptionApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the next order date on an existing subscription
     * Update Next Order Date
     */


    async updateNextOrderDateRaw(requestParameters: SubscriptionApiUpdateNextOrderDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateNextOrderDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/nextorderdate`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionNextOrderDateToJSON(requestParameters.subscriptionNextOrderDate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Updates the next order date on an existing subscription
     * Update Next Order Date
     */
    async updateNextOrderDate(requestParameters: SubscriptionApiUpdateNextOrderDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateNextOrderDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the payment on the subscription.
     * Update Payment
     */


    async updatePaymentRaw(requestParameters: SubscriptionApiUpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updatePayment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/payment`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentToJSON(requestParameters.payment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Updates the payment on the subscription.
     * Update Payment
     */
    async updatePayment(requestParameters: SubscriptionApiUpdatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updatePaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the info for an existing subscription
     * Update Subscription
     */


    async updateSubscriptionRaw(requestParameters: SubscriptionApiUpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionToJSON(requestParameters.subscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Update the info for an existing subscription
     * Update Subscription
     */
    async updateSubscription(requestParameters: SubscriptionApiUpdateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the frequency on an existing subscription
     * Update Subscription Frequency
     */


    async updateSubscriptionFrequencyRaw(requestParameters: SubscriptionApiUpdateSubscriptionFrequencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling updateSubscriptionFrequency.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/subscriptions/{subscriptionId}/frequency`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FrequencyToJSON(requestParameters.frequency),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Update the frequency on an existing subscription
     * Update Subscription Frequency
     */
    async updateSubscriptionFrequency(requestParameters: SubscriptionApiUpdateSubscriptionFrequencyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateSubscriptionFrequencyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
