/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Adjustment } from './Adjustment';
import {
    AdjustmentFromJSON,
    AdjustmentFromJSONTyped,
    AdjustmentToJSON,
} from './Adjustment';
import type { AlternateContact } from './AlternateContact';
import {
    AlternateContactFromJSON,
    AlternateContactFromJSONTyped,
    AlternateContactToJSON,
} from './AlternateContact';
import type { AppliedDiscount } from './AppliedDiscount';
import {
    AppliedDiscountFromJSON,
    AppliedDiscountFromJSONTyped,
    AppliedDiscountToJSON,
} from './AppliedDiscount';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { BillingInfo } from './BillingInfo';
import {
    BillingInfoFromJSON,
    BillingInfoFromJSONTyped,
    BillingInfoToJSON,
} from './BillingInfo';
import type { ChangeMessage } from './ChangeMessage';
import {
    ChangeMessageFromJSON,
    ChangeMessageFromJSONTyped,
    ChangeMessageToJSON,
} from './ChangeMessage';
import type { Credit } from './Credit';
import {
    CreditFromJSON,
    CreditFromJSONTyped,
    CreditToJSON,
} from './Credit';
import type { DigitalPackage } from './DigitalPackage';
import {
    DigitalPackageFromJSON,
    DigitalPackageFromJSONTyped,
    DigitalPackageToJSON,
} from './DigitalPackage';
import type { ExtendedProperty } from './ExtendedProperty';
import {
    ExtendedPropertyFromJSON,
    ExtendedPropertyFromJSONTyped,
    ExtendedPropertyToJSON,
} from './ExtendedProperty';
import type { FulfillmentInfo } from './FulfillmentInfo';
import {
    FulfillmentInfoFromJSON,
    FulfillmentInfoFromJSONTyped,
    FulfillmentInfoToJSON,
} from './FulfillmentInfo';
import type { InvalidCoupon } from './InvalidCoupon';
import {
    InvalidCouponFromJSON,
    InvalidCouponFromJSONTyped,
    InvalidCouponToJSON,
} from './InvalidCoupon';
import type { OrderAttribute } from './OrderAttribute';
import {
    OrderAttributeFromJSON,
    OrderAttributeFromJSONTyped,
    OrderAttributeToJSON,
} from './OrderAttribute';
import type { OrderItem } from './OrderItem';
import {
    OrderItemFromJSON,
    OrderItemFromJSONTyped,
    OrderItemToJSON,
} from './OrderItem';
import type { OrderNote } from './OrderNote';
import {
    OrderNoteFromJSON,
    OrderNoteFromJSONTyped,
    OrderNoteToJSON,
} from './OrderNote';
import type { OrderValidationResult } from './OrderValidationResult';
import {
    OrderValidationResultFromJSON,
    OrderValidationResultFromJSONTyped,
    OrderValidationResultToJSON,
} from './OrderValidationResult';
import type { Package } from './Package';
import {
    PackageFromJSON,
    PackageFromJSONTyped,
    PackageToJSON,
} from './Package';
import type { Payment } from './Payment';
import {
    PaymentFromJSON,
    PaymentFromJSONTyped,
    PaymentToJSON,
} from './Payment';
import type { Pickup } from './Pickup';
import {
    PickupFromJSON,
    PickupFromJSONTyped,
    PickupToJSON,
} from './Pickup';
import type { Refund } from './Refund';
import {
    RefundFromJSON,
    RefundFromJSONTyped,
    RefundToJSON,
} from './Refund';
import type { Shipment } from './Shipment';
import {
    ShipmentFromJSON,
    ShipmentFromJSONTyped,
    ShipmentToJSON,
} from './Shipment';
import type { ShippingDiscount } from './ShippingDiscount';
import {
    ShippingDiscountFromJSON,
    ShippingDiscountFromJSONTyped,
    ShippingDiscountToJSON,
} from './ShippingDiscount';
import type { ShopperNotes } from './ShopperNotes';
import {
    ShopperNotesFromJSON,
    ShopperNotesFromJSONTyped,
    ShopperNotesToJSON,
} from './ShopperNotes';
import type { SuggestedDiscount } from './SuggestedDiscount';
import {
    SuggestedDiscountFromJSON,
    SuggestedDiscountFromJSONTyped,
    SuggestedDiscountToJSON,
} from './SuggestedDiscount';
import type { ThresholdMessage } from './ThresholdMessage';
import {
    ThresholdMessageFromJSON,
    ThresholdMessageFromJSONTyped,
    ThresholdMessageToJSON,
} from './ThresholdMessage';

/**
 * Order form.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Order Number. This is an integer that is only assigned after an order is placed and enters the open state.
     * @type {number}
     * @memberof Order
     */
    orderNumber?: number | null;
    /**
     * Identifies the location at which the order was placed if the order was placed externally.
     * @type {string}
     * @memberof Order
     */
    locationCode?: string | null;
    /**
     * Version for concurrency purposes
     * @type {string}
     * @memberof Order
     */
    version?: string | null;
    /**
     * If this Order has a parent order, this should be the parent's ID.
     * @type {string}
     * @memberof Order
     */
    parentOrderId?: string | null;
    /**
     * If this order has a parent order, this should be the parent's Mozu.CommerceRuntime.Contracts.Orders.Order.OrderNumber.
     * @type {number}
     * @memberof Order
     */
    parentOrderNumber?: number | null;
    /**
     * If this order originated from a multi-ship enabled site, this is the identifier of the originating checkout.
     * @type {string}
     * @memberof Order
     */
    parentCheckoutId?: string | null;
    /**
     * If this order originated from a multi-ship enabled site, this is the number of the originating checkout.
     * @type {number}
     * @memberof Order
     */
    parentCheckoutNumber?: number | null;
    /**
     * If this order originated from a checkout, this is a sequence number out of the total orders created from that checkout.
     * @type {number}
     * @memberof Order
     */
    partialOrderNumber?: number | null;
    /**
     * If this order originated from a checkout, this is the total number of orders created from that checkout.
     * @type {number}
     * @memberof Order
     */
    partialOrderCount?: number | null;
    /**
     * Returns {true} if this order originated from a checkout and has sibling partial orders, otherwise {false}.
     * @type {boolean}
     * @memberof Order
     */
    isPartialOrder?: boolean;
    /**
     * If this order was created as part of a return, this should be the return's ID.
     * @type {string}
     * @memberof Order
     */
    parentReturnId?: string | null;
    /**
     * If this order was created as part of a return, this should be the return's ReturnNumber.
     * @type {number}
     * @memberof Order
     */
    parentReturnNumber?: number | null;
    /**
     * Unique identifier for the cart that was converted to order.
     * @type {string}
     * @memberof Order
     */
    originalCartId?: string | null;
    /**
     * If this order originated from a quote, this is the identifier of the originating quote.
     * @type {string}
     * @memberof Order
     */
    originalQuoteId?: string | null;
    /**
     * If this order originated from a quote, this is the number of the originating quote.
     * @type {number}
     * @memberof Order
     */
    originalQuoteNumber?: number | null;
    /**
     * Pricelist code for the order
     * @type {string}
     * @memberof Order
     */
    priceListCode?: string | null;
    /**
     * Actions available to the payment
     * @type {Array<string>}
     * @memberof Order
     */
    availableActions?: Array<string> | null;
    /**
     * 
     * @type {ShopperNotes}
     * @memberof Order
     */
    shopperNotes?: ShopperNotes;
    /**
     * Unique identifier of the customer account.
     * @type {number}
     * @memberof Order
     */
    customerAccountId?: number | null;
    /**
     * The customers tax ID.  If Customer Account ID exists in the system, will set this.
     * @type {string}
     * @memberof Order
     */
    customerTaxId?: string | null;
    /**
     * Unique identifier of the customer account.
     * @type {boolean}
     * @memberof Order
     */
    isTaxExempt?: boolean | null;
    /**
     * Email address of the customer at the time the order is placed.
     * @type {string}
     * @memberof Order
     */
    email?: string | null;
    /**
     * 
     * @type {AlternateContact}
     * @memberof Order
     */
    alternateContact?: AlternateContact;
    /**
     * IP address of the user placing the order. (User or customer?)
     * @type {string}
     * @memberof Order
     */
    ipAddress?: string | null;
    /**
     * Source device of the user placing the order. (User or customer?)
     * @type {string}
     * @memberof Order
     */
    sourceDevice?: string | null;
    /**
     * Does the customer accept marketing
     * @type {boolean}
     * @memberof Order
     */
    acceptsMarketing?: boolean | null;
    /**
     * Current status of the order, which can be viewed in OrderStatusConst. System-supplied and read-only.
     * @type {string}
     * @memberof Order
     */
    status?: string | null;
    /**
     * Is this Order Online or Offline? Online means shopper entered at checkout, offline means a phone order.
     * @type {string}
     * @memberof Order
     */
    type?: string | null;
    /**
     * Current status of payment, which can be "Null," "AwaitingCheck," "AwaitingPayment," "Paid," "Authorized," or "Void." 
     * System-supplied and read-only.
     * @type {string}
     * @memberof Order
     */
    paymentStatus?: string | null;
    /**
     * System-supplied and read-only.
     * @type {string}
     * @memberof Order
     */
    returnStatus?: string | null;
    /**
     * Marker for determining if the order is a) complete or b) has some items that are shipped and not part of any other return
     * @type {boolean}
     * @memberof Order
     */
    isEligibleForReturns?: boolean;
    /**
     * Total amount of money collected on the order via payments.
     * @type {number}
     * @memberof Order
     */
    totalCollected?: number;
    /**
     * 
     * @type {Array<OrderAttribute>}
     * @memberof Order
     */
    attributes?: Array<OrderAttribute> | null;
    /**
     * 
     * @type {Adjustment}
     * @memberof Order
     */
    adjustment?: Adjustment;
    /**
     * 
     * @type {Adjustment}
     * @memberof Order
     */
    shippingAdjustment?: Adjustment;
    /**
     * 
     * @type {Adjustment}
     * @memberof Order
     */
    handlingAdjustment?: Adjustment;
    /**
     * 
     * @type {Array<ShippingDiscount>}
     * @memberof Order
     */
    shippingDiscounts?: Array<ShippingDiscount> | null;
    /**
     * The list of historically-applied handling discounts.  The active one will have IsExcluded == false
     * @type {Array<AppliedDiscount>}
     * @memberof Order
     */
    handlingDiscounts?: Array<AppliedDiscount> | null;
    /**
     * Order level handling fees excluding any discounts.
     * @type {number}
     * @memberof Order
     */
    handlingAmount?: number | null;
    /**
     * Handling fees for the Order as well as OrderItems (e.g. if the Order has a $5 handling fee and an OrderItem has a $2 handling fee per item quantity and the quantity of items is 2 then the value in this property would be $9)
     * @type {number}
     * @memberof Order
     */
    handlingSubTotal?: number | null;
    /**
     * Handling fees including any discounts.
     * @type {number}
     * @memberof Order
     */
    handlingTotal?: number | null;
    /**
     * Order level duty or tariff amount. Does not take into account duties or tariffs specifically on items on the order
     * @type {number}
     * @memberof Order
     */
    dutyAmount?: number | null;
    /**
     * Duties or tariffs for the Order as well as OrderItems (e.g. if the Order has a $5 duty or tariff for any reason and an OrderItem has a $2 duty or tariff then the value in this property would be $7)
     * @type {number}
     * @memberof Order
     */
    dutyTotal?: number | null;
    /**
     * Current fulfillment status, which can be "NotFulfilled,", "PartiallyFulfilled", or "Fufilled." 
     * System-supplied and read-only.  Values are available in FulfillmentStatusConst of this class.
     * @type {string}
     * @memberof Order
     */
    fulfillmentStatus?: string | null;
    /**
     * Flag to indicate whether it is safe to proceed with fulfillment on shipments on the order.
     * @type {boolean}
     * @memberof Order
     */
    isFulfillable?: boolean;
    /**
     * When the customer placed (submitted) the order.
     * @type {Date}
     * @memberof Order
     */
    submittedDate?: Date | null;
    /**
     * Date the order was cancelled.
     * @type {Date}
     * @memberof Order
     */
    cancelledDate?: Date | null;
    /**
     * Date the order was closed. A closed order means that the order has been processed and items shipped.
     * @type {Date}
     * @memberof Order
     */
    closedDate?: Date | null;
    /**
     * When the order was accepted by the merchant
     * @type {Date}
     * @memberof Order
     */
    acceptedDate?: Date | null;
    /**
     * Internal notes that a merchant may add to the order. Maximum 250 characters.
     * @type {Array<OrderNote>}
     * @memberof Order
     */
    notes?: Array<OrderNote> | null;
    /**
     * List of items in the order.
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    items?: Array<OrderItem> | null;
    /**
     * Validation results for the order when processes against validation capabilities.
     * @type {Array<OrderValidationResult>}
     * @memberof Order
     */
    validationResults?: Array<OrderValidationResult> | null;
    /**
     * 
     * @type {BillingInfo}
     * @memberof Order
     */
    billingInfo?: BillingInfo;
    /**
     * Payment transaction associated with this order. It is the entire payment interchange between the merchant 
     * who is forwarding the customer's payment information and the payment service who is authorizing and 
     * capturing payment. Payment can be either by credit card, check, or PayPal.
     * @type {Array<Payment>}
     * @memberof Order
     */
    payments?: Array<Payment> | null;
    /**
     * Refunds associated with this order. A refund is a single exchange of money from merchant to customer
     * that either encapsulates a refund to a credit card or an issuance of a store credit.
     * Refunds does not reduce the 'amount collected' on an order and it is possible for refunds to exceed the total order amount.
     * @type {Array<Refund>}
     * @memberof Order
     */
    refunds?: Array<Refund> | null;
    /**
     * 
     * @type {Array<Credit>}
     * @memberof Order
     */
    credits?: Array<Credit> | null;
    /**
     * Shipping package associated with this order.
     * @type {Array<Package>}
     * @memberof Order
     */
    packages?: Array<Package> | null;
    /**
     * Fulfillment pickups associated with this order.
     * @type {Array<Pickup>}
     * @memberof Order
     */
    pickups?: Array<Pickup> | null;
    /**
     * Fulfillment digital packages associated with this order.
     * @type {Array<DigitalPackage>}
     * @memberof Order
     */
    digitalPackages?: Array<DigitalPackage> | null;
    /**
     * Package shipments associated with this order.
     * @type {Array<Shipment>}
     * @memberof Order
     */
    shipments?: Array<Shipment> | null;
    /**
     * Is this order a draft version
     * @type {boolean}
     * @memberof Order
     */
    isDraft?: boolean | null;
    /**
     * Does this order have a draft version.
     * @type {boolean}
     * @memberof Order
     */
    hasDraft?: boolean | null;
    /**
     * Was this order initiated from an external system
     * @type {boolean}
     * @memberof Order
     */
    isImport?: boolean | null;
    /**
     * Indicates this was an order in a terminal state (completed/canceled) that was imported into the system for historical purposes.
     * @type {boolean}
     * @memberof Order
     */
    isHistoricalImport?: boolean | null;
    /**
     * Date this item was imported
     * @type {Date}
     * @memberof Order
     */
    importDate?: Date | null;
    /**
     * Was this order created by the Unified platform.
     * @type {boolean}
     * @memberof Order
     */
    isUnified?: boolean;
    /**
     * An order number to link this order to an external system
     * @type {string}
     * @memberof Order
     */
    externalId?: string | null;
    /**
     * Coupon codes associated with this order.  Only set on order import.
     * @type {Array<string>}
     * @memberof Order
     */
    couponCodes?: Array<string> | null;
    /**
     * A list of invalid coupons that were attempted on the order
     * @type {Array<InvalidCoupon>}
     * @memberof Order
     */
    invalidCoupons?: Array<InvalidCoupon> | null;
    /**
     * This property represents AmountCaptured - AmountRefunded via returns.
     * It is read only.
     * @type {number}
     * @memberof Order
     */
    amountAvailableForRefund?: number;
    /**
     * A counter for how much of the order total has not been claimed by payments.
     * This is computed by Order.Total-(sum of Order.Payments where State is not voided/declined)
     * @type {number}
     * @memberof Order
     */
    amountRemainingForPayment?: number;
    /**
     * A counter for how much money has been issued in refunds.
     * This calculated field does NOT include refunds issued in returns.
     * @type {number}
     * @memberof Order
     */
    amountRefunded?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    readyToCapture?: boolean;
    /**
     * Whether the shopper opts in to curbside text notifications.
     * @type {boolean}
     * @memberof Order
     */
    isOptInForSms?: boolean;
    /**
     * All the subscriptions associated with the current order.
     * @type {Array<string>}
     * @memberof Order
     */
    subscriptionIds?: Array<string> | null;
    /**
     * The ordinal to track the Continuity order.
     * @type {number}
     * @memberof Order
     */
    continuityOrderOrdinal?: number;
    /**
     * Inventory Reservation id for order.
     * @type {string}
     * @memberof Order
     */
    reservationId?: string | null;
    /**
     * Unique identifier of the shopper who created the cart.
     * @type {string}
     * @memberof Order
     */
    userId?: string | null;
    /**
     * Unique identifier of the CommerceAggregate object (e.g. order, cart, wishlist, etc.).
     * @type {string}
     * @memberof Order
     */
    id?: string | null;
    /**
     * Unique identifier of the Tenant.
     * @type {number}
     * @memberof Order
     */
    tenantId?: number | null;
    /**
     * Unique identifier of the Site.
     * @type {number}
     * @memberof Order
     */
    siteId?: number | null;
    /**
     * Unique identifier of the channel for this item.
     * @type {string}
     * @memberof Order
     */
    channelCode?: string | null;
    /**
     * ISO Currency Code. Currently, only USD is supported.
     * @type {string}
     * @memberof Order
     */
    currencyCode?: string | null;
    /**
     * Identifies the Visit ID that was current when the order was placed or when the cart was last updated.
     * @type {string}
     * @memberof Order
     */
    visitId?: string | null;
    /**
     * Identifies the web session used to place the order or last update the cart.
     * @type {string}
     * @memberof Order
     */
    webSessionId?: string | null;
    /**
     * Determines the interaction type that a customer will use to create this object.
     * Valid values are: Website, Store, Call, Unknown
     * @type {string}
     * @memberof Order
     */
    customerInteractionType?: string | null;
    /**
     * 
     * @type {FulfillmentInfo}
     * @memberof Order
     */
    fulfillmentInfo?: FulfillmentInfo;
    /**
     * The discount that has been applied to the cart itself. If multiple discounts exist, this is the discount that the system applies because it offers the best savings for the shopper. This is a negative number.
     * @type {Array<AppliedDiscount>}
     * @memberof Order
     */
    orderDiscounts?: Array<AppliedDiscount> | null;
    /**
     * 
     * @type {Array<SuggestedDiscount>}
     * @memberof Order
     */
    suggestedDiscounts?: Array<SuggestedDiscount> | null;
    /**
     * 
     * @type {Array<SuggestedDiscount>}
     * @memberof Order
     */
    rejectedDiscounts?: Array<SuggestedDiscount> | null;
    /**
     * Custom data for a given vendor set within the commerce process.
     * @type {object}
     * @memberof Order
     */
    data?: object | null;
    /**
     * Storage for any additional/custom tax data.
     * @type {object}
     * @memberof Order
     */
    taxData?: object | null;
    /**
     * Combined price for all cart items, including all selected options but excluding any discounts.
     * @type {number}
     * @memberof Order
     */
    subtotal?: number | null;
    /**
     * Combined price for all cart items, including all selected options as well as any discounts.
     * @type {number}
     * @memberof Order
     */
    discountedSubtotal?: number | null;
    /**
     * Amount of the discounts applied to all items in the cart. This is a negative number.  This also includes the order level discounts.
     * @type {number}
     * @memberof Order
     */
    discountTotal?: number | null;
    /**
     * Subtotal minus the discounted total
     * @type {number}
     * @memberof Order
     */
    discountedTotal?: number | null;
    /**
     * Shipping does not appear on cart.
     * @type {number}
     * @memberof Order
     */
    shippingTotal?: number | null;
    /**
     * Shipping total without discounts applied.
     * @type {number}
     * @memberof Order
     */
    shippingSubTotal?: number | null;
    /**
     * Not implemented. Tax does not appear on cart.
     * @type {number}
     * @memberof Order
     */
    shippingTaxTotal?: number | null;
    /**
     * Total tax on handling
     * @type {number}
     * @memberof Order
     */
    handlingTaxTotal?: number | null;
    /**
     * Not implemented. Tax does not appear on cart.
     * @type {number}
     * @memberof Order
     */
    itemTaxTotal?: number | null;
    /**
     * Tax does not appear on cart.
     * @type {number}
     * @memberof Order
     */
    taxTotal?: number | null;
    /**
     * Not implemented. Total cost of fees for all items in the cart.
     * @type {number}
     * @memberof Order
     */
    feeTotal?: number | null;
    /**
     * Final total amount of the order including all discounts, shipping, and tax.
     * @type {number}
     * @memberof Order
     */
    total?: number | null;
    /**
     * Line Item Subtotals with Order Adjustments
     * @type {number}
     * @memberof Order
     */
    lineItemSubtotalWithOrderAdjustments?: number | null;
    /**
     * Shipping Amount before discount and adjustments
     * @type {number}
     * @memberof Order
     */
    shippingAmountBeforeDiscountsAndAdjustments?: number | null;
    /**
     * Occasionally the commerce runtime may validate that item/product names, descriptions, and prices have not changed. 
     * If changed, it updates LastValidationDate.
     * @type {Date}
     * @memberof Order
     */
    lastValidationDate?: Date | null;
    /**
     * When the order will no longer be active. That is, the order is considered abandoned. 
     * Orders of anonymous shoppers expire after 14 days of inactivity. 
     * An order never expires for shoppers who are logged into their account. 
     * Date in UTC Date/Time.
     * @type {Date}
     * @memberof Order
     */
    expirationDate?: Date | null;
    /**
     * List of messages displayed by the system based on the last cart action, for example, when a product price has changed or is out-of-stock. System-supplied and read-only.
     * @type {Array<ChangeMessage>}
     * @memberof Order
     */
    changeMessages?: Array<ChangeMessage> | null;
    /**
     * Extra properties (key-value pairs) that extend the primary object. Think of this as a property bag of string keys and string values.
     * @type {Array<ExtendedProperty>}
     * @memberof Order
     */
    extendedProperties?: Array<ExtendedProperty> | null;
    /**
     * List of Mozu.CommerceRuntime.Contracts.Commerce.ThresholdMessage objects that are valid for the current value of the cart/order.
     * @type {Array<ThresholdMessage>}
     * @memberof Order
     */
    discountThresholdMessages?: Array<ThresholdMessage> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof Order
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderNumber': !exists(json, 'orderNumber') ? undefined : json['orderNumber'],
        'locationCode': !exists(json, 'locationCode') ? undefined : json['locationCode'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'parentOrderId': !exists(json, 'parentOrderId') ? undefined : json['parentOrderId'],
        'parentOrderNumber': !exists(json, 'parentOrderNumber') ? undefined : json['parentOrderNumber'],
        'parentCheckoutId': !exists(json, 'parentCheckoutId') ? undefined : json['parentCheckoutId'],
        'parentCheckoutNumber': !exists(json, 'parentCheckoutNumber') ? undefined : json['parentCheckoutNumber'],
        'partialOrderNumber': !exists(json, 'partialOrderNumber') ? undefined : json['partialOrderNumber'],
        'partialOrderCount': !exists(json, 'partialOrderCount') ? undefined : json['partialOrderCount'],
        'isPartialOrder': !exists(json, 'isPartialOrder') ? undefined : json['isPartialOrder'],
        'parentReturnId': !exists(json, 'parentReturnId') ? undefined : json['parentReturnId'],
        'parentReturnNumber': !exists(json, 'parentReturnNumber') ? undefined : json['parentReturnNumber'],
        'originalCartId': !exists(json, 'originalCartId') ? undefined : json['originalCartId'],
        'originalQuoteId': !exists(json, 'originalQuoteId') ? undefined : json['originalQuoteId'],
        'originalQuoteNumber': !exists(json, 'originalQuoteNumber') ? undefined : json['originalQuoteNumber'],
        'priceListCode': !exists(json, 'priceListCode') ? undefined : json['priceListCode'],
        'availableActions': !exists(json, 'availableActions') ? undefined : json['availableActions'],
        'shopperNotes': !exists(json, 'shopperNotes') ? undefined : ShopperNotesFromJSON(json['shopperNotes']),
        'customerAccountId': !exists(json, 'customerAccountId') ? undefined : json['customerAccountId'],
        'customerTaxId': !exists(json, 'customerTaxId') ? undefined : json['customerTaxId'],
        'isTaxExempt': !exists(json, 'isTaxExempt') ? undefined : json['isTaxExempt'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'alternateContact': !exists(json, 'alternateContact') ? undefined : AlternateContactFromJSON(json['alternateContact']),
        'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
        'sourceDevice': !exists(json, 'sourceDevice') ? undefined : json['sourceDevice'],
        'acceptsMarketing': !exists(json, 'acceptsMarketing') ? undefined : json['acceptsMarketing'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'paymentStatus': !exists(json, 'paymentStatus') ? undefined : json['paymentStatus'],
        'returnStatus': !exists(json, 'returnStatus') ? undefined : json['returnStatus'],
        'isEligibleForReturns': !exists(json, 'isEligibleForReturns') ? undefined : json['isEligibleForReturns'],
        'totalCollected': !exists(json, 'totalCollected') ? undefined : json['totalCollected'],
        'attributes': !exists(json, 'attributes') ? undefined : (json['attributes'] === null ? null : (json['attributes'] as Array<any>).map(OrderAttributeFromJSON)),
        'adjustment': !exists(json, 'adjustment') ? undefined : AdjustmentFromJSON(json['adjustment']),
        'shippingAdjustment': !exists(json, 'shippingAdjustment') ? undefined : AdjustmentFromJSON(json['shippingAdjustment']),
        'handlingAdjustment': !exists(json, 'handlingAdjustment') ? undefined : AdjustmentFromJSON(json['handlingAdjustment']),
        'shippingDiscounts': !exists(json, 'shippingDiscounts') ? undefined : (json['shippingDiscounts'] === null ? null : (json['shippingDiscounts'] as Array<any>).map(ShippingDiscountFromJSON)),
        'handlingDiscounts': !exists(json, 'handlingDiscounts') ? undefined : (json['handlingDiscounts'] === null ? null : (json['handlingDiscounts'] as Array<any>).map(AppliedDiscountFromJSON)),
        'handlingAmount': !exists(json, 'handlingAmount') ? undefined : json['handlingAmount'],
        'handlingSubTotal': !exists(json, 'handlingSubTotal') ? undefined : json['handlingSubTotal'],
        'handlingTotal': !exists(json, 'handlingTotal') ? undefined : json['handlingTotal'],
        'dutyAmount': !exists(json, 'dutyAmount') ? undefined : json['dutyAmount'],
        'dutyTotal': !exists(json, 'dutyTotal') ? undefined : json['dutyTotal'],
        'fulfillmentStatus': !exists(json, 'fulfillmentStatus') ? undefined : json['fulfillmentStatus'],
        'isFulfillable': !exists(json, 'isFulfillable') ? undefined : json['isFulfillable'],
        'submittedDate': !exists(json, 'submittedDate') ? undefined : (json['submittedDate'] === null ? null : new Date(json['submittedDate'])),
        'cancelledDate': !exists(json, 'cancelledDate') ? undefined : (json['cancelledDate'] === null ? null : new Date(json['cancelledDate'])),
        'closedDate': !exists(json, 'closedDate') ? undefined : (json['closedDate'] === null ? null : new Date(json['closedDate'])),
        'acceptedDate': !exists(json, 'acceptedDate') ? undefined : (json['acceptedDate'] === null ? null : new Date(json['acceptedDate'])),
        'notes': !exists(json, 'notes') ? undefined : (json['notes'] === null ? null : (json['notes'] as Array<any>).map(OrderNoteFromJSON)),
        'items': !exists(json, 'items') ? undefined : (json['items'] === null ? null : (json['items'] as Array<any>).map(OrderItemFromJSON)),
        'validationResults': !exists(json, 'validationResults') ? undefined : (json['validationResults'] === null ? null : (json['validationResults'] as Array<any>).map(OrderValidationResultFromJSON)),
        'billingInfo': !exists(json, 'billingInfo') ? undefined : BillingInfoFromJSON(json['billingInfo']),
        'payments': !exists(json, 'payments') ? undefined : (json['payments'] === null ? null : (json['payments'] as Array<any>).map(PaymentFromJSON)),
        'refunds': !exists(json, 'refunds') ? undefined : (json['refunds'] === null ? null : (json['refunds'] as Array<any>).map(RefundFromJSON)),
        'credits': !exists(json, 'credits') ? undefined : (json['credits'] === null ? null : (json['credits'] as Array<any>).map(CreditFromJSON)),
        'packages': !exists(json, 'packages') ? undefined : (json['packages'] === null ? null : (json['packages'] as Array<any>).map(PackageFromJSON)),
        'pickups': !exists(json, 'pickups') ? undefined : (json['pickups'] === null ? null : (json['pickups'] as Array<any>).map(PickupFromJSON)),
        'digitalPackages': !exists(json, 'digitalPackages') ? undefined : (json['digitalPackages'] === null ? null : (json['digitalPackages'] as Array<any>).map(DigitalPackageFromJSON)),
        'shipments': !exists(json, 'shipments') ? undefined : (json['shipments'] === null ? null : (json['shipments'] as Array<any>).map(ShipmentFromJSON)),
        'isDraft': !exists(json, 'isDraft') ? undefined : json['isDraft'],
        'hasDraft': !exists(json, 'hasDraft') ? undefined : json['hasDraft'],
        'isImport': !exists(json, 'isImport') ? undefined : json['isImport'],
        'isHistoricalImport': !exists(json, 'isHistoricalImport') ? undefined : json['isHistoricalImport'],
        'importDate': !exists(json, 'importDate') ? undefined : (json['importDate'] === null ? null : new Date(json['importDate'])),
        'isUnified': !exists(json, 'isUnified') ? undefined : json['isUnified'],
        'externalId': !exists(json, 'externalId') ? undefined : json['externalId'],
        'couponCodes': !exists(json, 'couponCodes') ? undefined : json['couponCodes'],
        'invalidCoupons': !exists(json, 'invalidCoupons') ? undefined : (json['invalidCoupons'] === null ? null : (json['invalidCoupons'] as Array<any>).map(InvalidCouponFromJSON)),
        'amountAvailableForRefund': !exists(json, 'amountAvailableForRefund') ? undefined : json['amountAvailableForRefund'],
        'amountRemainingForPayment': !exists(json, 'amountRemainingForPayment') ? undefined : json['amountRemainingForPayment'],
        'amountRefunded': !exists(json, 'amountRefunded') ? undefined : json['amountRefunded'],
        'readyToCapture': !exists(json, 'readyToCapture') ? undefined : json['readyToCapture'],
        'isOptInForSms': !exists(json, 'isOptInForSms') ? undefined : json['isOptInForSms'],
        'subscriptionIds': !exists(json, 'subscriptionIds') ? undefined : json['subscriptionIds'],
        'continuityOrderOrdinal': !exists(json, 'continuityOrderOrdinal') ? undefined : json['continuityOrderOrdinal'],
        'reservationId': !exists(json, 'reservationId') ? undefined : json['reservationId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'channelCode': !exists(json, 'channelCode') ? undefined : json['channelCode'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'visitId': !exists(json, 'visitId') ? undefined : json['visitId'],
        'webSessionId': !exists(json, 'webSessionId') ? undefined : json['webSessionId'],
        'customerInteractionType': !exists(json, 'customerInteractionType') ? undefined : json['customerInteractionType'],
        'fulfillmentInfo': !exists(json, 'fulfillmentInfo') ? undefined : FulfillmentInfoFromJSON(json['fulfillmentInfo']),
        'orderDiscounts': !exists(json, 'orderDiscounts') ? undefined : (json['orderDiscounts'] === null ? null : (json['orderDiscounts'] as Array<any>).map(AppliedDiscountFromJSON)),
        'suggestedDiscounts': !exists(json, 'suggestedDiscounts') ? undefined : (json['suggestedDiscounts'] === null ? null : (json['suggestedDiscounts'] as Array<any>).map(SuggestedDiscountFromJSON)),
        'rejectedDiscounts': !exists(json, 'rejectedDiscounts') ? undefined : (json['rejectedDiscounts'] === null ? null : (json['rejectedDiscounts'] as Array<any>).map(SuggestedDiscountFromJSON)),
        'data': !exists(json, 'data') ? undefined : json['data'],
        'taxData': !exists(json, 'taxData') ? undefined : json['taxData'],
        'subtotal': !exists(json, 'subtotal') ? undefined : json['subtotal'],
        'discountedSubtotal': !exists(json, 'discountedSubtotal') ? undefined : json['discountedSubtotal'],
        'discountTotal': !exists(json, 'discountTotal') ? undefined : json['discountTotal'],
        'discountedTotal': !exists(json, 'discountedTotal') ? undefined : json['discountedTotal'],
        'shippingTotal': !exists(json, 'shippingTotal') ? undefined : json['shippingTotal'],
        'shippingSubTotal': !exists(json, 'shippingSubTotal') ? undefined : json['shippingSubTotal'],
        'shippingTaxTotal': !exists(json, 'shippingTaxTotal') ? undefined : json['shippingTaxTotal'],
        'handlingTaxTotal': !exists(json, 'handlingTaxTotal') ? undefined : json['handlingTaxTotal'],
        'itemTaxTotal': !exists(json, 'itemTaxTotal') ? undefined : json['itemTaxTotal'],
        'taxTotal': !exists(json, 'taxTotal') ? undefined : json['taxTotal'],
        'feeTotal': !exists(json, 'feeTotal') ? undefined : json['feeTotal'],
        'total': !exists(json, 'total') ? undefined : json['total'],
        'lineItemSubtotalWithOrderAdjustments': !exists(json, 'lineItemSubtotalWithOrderAdjustments') ? undefined : json['lineItemSubtotalWithOrderAdjustments'],
        'shippingAmountBeforeDiscountsAndAdjustments': !exists(json, 'shippingAmountBeforeDiscountsAndAdjustments') ? undefined : json['shippingAmountBeforeDiscountsAndAdjustments'],
        'lastValidationDate': !exists(json, 'lastValidationDate') ? undefined : (json['lastValidationDate'] === null ? null : new Date(json['lastValidationDate'])),
        'expirationDate': !exists(json, 'expirationDate') ? undefined : (json['expirationDate'] === null ? null : new Date(json['expirationDate'])),
        'changeMessages': !exists(json, 'changeMessages') ? undefined : (json['changeMessages'] === null ? null : (json['changeMessages'] as Array<any>).map(ChangeMessageFromJSON)),
        'extendedProperties': !exists(json, 'extendedProperties') ? undefined : (json['extendedProperties'] === null ? null : (json['extendedProperties'] as Array<any>).map(ExtendedPropertyFromJSON)),
        'discountThresholdMessages': !exists(json, 'discountThresholdMessages') ? undefined : (json['discountThresholdMessages'] === null ? null : (json['discountThresholdMessages'] as Array<any>).map(ThresholdMessageFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orderNumber': value.orderNumber,
        'locationCode': value.locationCode,
        'version': value.version,
        'parentOrderId': value.parentOrderId,
        'parentOrderNumber': value.parentOrderNumber,
        'parentCheckoutId': value.parentCheckoutId,
        'parentCheckoutNumber': value.parentCheckoutNumber,
        'partialOrderNumber': value.partialOrderNumber,
        'partialOrderCount': value.partialOrderCount,
        'isPartialOrder': value.isPartialOrder,
        'parentReturnId': value.parentReturnId,
        'parentReturnNumber': value.parentReturnNumber,
        'originalCartId': value.originalCartId,
        'originalQuoteId': value.originalQuoteId,
        'originalQuoteNumber': value.originalQuoteNumber,
        'priceListCode': value.priceListCode,
        'availableActions': value.availableActions,
        'shopperNotes': ShopperNotesToJSON(value.shopperNotes),
        'customerAccountId': value.customerAccountId,
        'customerTaxId': value.customerTaxId,
        'isTaxExempt': value.isTaxExempt,
        'email': value.email,
        'alternateContact': AlternateContactToJSON(value.alternateContact),
        'ipAddress': value.ipAddress,
        'sourceDevice': value.sourceDevice,
        'acceptsMarketing': value.acceptsMarketing,
        'status': value.status,
        'type': value.type,
        'paymentStatus': value.paymentStatus,
        'returnStatus': value.returnStatus,
        'isEligibleForReturns': value.isEligibleForReturns,
        'totalCollected': value.totalCollected,
        'attributes': value.attributes === undefined ? undefined : (value.attributes === null ? null : (value.attributes as Array<any>).map(OrderAttributeToJSON)),
        'adjustment': AdjustmentToJSON(value.adjustment),
        'shippingAdjustment': AdjustmentToJSON(value.shippingAdjustment),
        'handlingAdjustment': AdjustmentToJSON(value.handlingAdjustment),
        'shippingDiscounts': value.shippingDiscounts === undefined ? undefined : (value.shippingDiscounts === null ? null : (value.shippingDiscounts as Array<any>).map(ShippingDiscountToJSON)),
        'handlingDiscounts': value.handlingDiscounts === undefined ? undefined : (value.handlingDiscounts === null ? null : (value.handlingDiscounts as Array<any>).map(AppliedDiscountToJSON)),
        'handlingAmount': value.handlingAmount,
        'handlingSubTotal': value.handlingSubTotal,
        'handlingTotal': value.handlingTotal,
        'dutyAmount': value.dutyAmount,
        'dutyTotal': value.dutyTotal,
        'fulfillmentStatus': value.fulfillmentStatus,
        'isFulfillable': value.isFulfillable,
        'submittedDate': value.submittedDate === undefined ? undefined : (value.submittedDate === null ? null : value.submittedDate.toISOString()),
        'cancelledDate': value.cancelledDate === undefined ? undefined : (value.cancelledDate === null ? null : value.cancelledDate.toISOString()),
        'closedDate': value.closedDate === undefined ? undefined : (value.closedDate === null ? null : value.closedDate.toISOString()),
        'acceptedDate': value.acceptedDate === undefined ? undefined : (value.acceptedDate === null ? null : value.acceptedDate.toISOString()),
        'notes': value.notes === undefined ? undefined : (value.notes === null ? null : (value.notes as Array<any>).map(OrderNoteToJSON)),
        'items': value.items === undefined ? undefined : (value.items === null ? null : (value.items as Array<any>).map(OrderItemToJSON)),
        'validationResults': value.validationResults === undefined ? undefined : (value.validationResults === null ? null : (value.validationResults as Array<any>).map(OrderValidationResultToJSON)),
        'billingInfo': BillingInfoToJSON(value.billingInfo),
        'payments': value.payments === undefined ? undefined : (value.payments === null ? null : (value.payments as Array<any>).map(PaymentToJSON)),
        'refunds': value.refunds === undefined ? undefined : (value.refunds === null ? null : (value.refunds as Array<any>).map(RefundToJSON)),
        'credits': value.credits === undefined ? undefined : (value.credits === null ? null : (value.credits as Array<any>).map(CreditToJSON)),
        'packages': value.packages === undefined ? undefined : (value.packages === null ? null : (value.packages as Array<any>).map(PackageToJSON)),
        'pickups': value.pickups === undefined ? undefined : (value.pickups === null ? null : (value.pickups as Array<any>).map(PickupToJSON)),
        'digitalPackages': value.digitalPackages === undefined ? undefined : (value.digitalPackages === null ? null : (value.digitalPackages as Array<any>).map(DigitalPackageToJSON)),
        'shipments': value.shipments === undefined ? undefined : (value.shipments === null ? null : (value.shipments as Array<any>).map(ShipmentToJSON)),
        'isDraft': value.isDraft,
        'hasDraft': value.hasDraft,
        'isImport': value.isImport,
        'isHistoricalImport': value.isHistoricalImport,
        'importDate': value.importDate === undefined ? undefined : (value.importDate === null ? null : value.importDate.toISOString()),
        'isUnified': value.isUnified,
        'externalId': value.externalId,
        'couponCodes': value.couponCodes,
        'invalidCoupons': value.invalidCoupons === undefined ? undefined : (value.invalidCoupons === null ? null : (value.invalidCoupons as Array<any>).map(InvalidCouponToJSON)),
        'amountAvailableForRefund': value.amountAvailableForRefund,
        'amountRemainingForPayment': value.amountRemainingForPayment,
        'amountRefunded': value.amountRefunded,
        'readyToCapture': value.readyToCapture,
        'isOptInForSms': value.isOptInForSms,
        'subscriptionIds': value.subscriptionIds,
        'continuityOrderOrdinal': value.continuityOrderOrdinal,
        'reservationId': value.reservationId,
        'userId': value.userId,
        'id': value.id,
        'tenantId': value.tenantId,
        'siteId': value.siteId,
        'channelCode': value.channelCode,
        'currencyCode': value.currencyCode,
        'visitId': value.visitId,
        'webSessionId': value.webSessionId,
        'customerInteractionType': value.customerInteractionType,
        'fulfillmentInfo': FulfillmentInfoToJSON(value.fulfillmentInfo),
        'orderDiscounts': value.orderDiscounts === undefined ? undefined : (value.orderDiscounts === null ? null : (value.orderDiscounts as Array<any>).map(AppliedDiscountToJSON)),
        'suggestedDiscounts': value.suggestedDiscounts === undefined ? undefined : (value.suggestedDiscounts === null ? null : (value.suggestedDiscounts as Array<any>).map(SuggestedDiscountToJSON)),
        'rejectedDiscounts': value.rejectedDiscounts === undefined ? undefined : (value.rejectedDiscounts === null ? null : (value.rejectedDiscounts as Array<any>).map(SuggestedDiscountToJSON)),
        'data': value.data,
        'taxData': value.taxData,
        'subtotal': value.subtotal,
        'discountedSubtotal': value.discountedSubtotal,
        'discountTotal': value.discountTotal,
        'discountedTotal': value.discountedTotal,
        'shippingTotal': value.shippingTotal,
        'shippingSubTotal': value.shippingSubTotal,
        'shippingTaxTotal': value.shippingTaxTotal,
        'handlingTaxTotal': value.handlingTaxTotal,
        'itemTaxTotal': value.itemTaxTotal,
        'taxTotal': value.taxTotal,
        'feeTotal': value.feeTotal,
        'total': value.total,
        'lineItemSubtotalWithOrderAdjustments': value.lineItemSubtotalWithOrderAdjustments,
        'shippingAmountBeforeDiscountsAndAdjustments': value.shippingAmountBeforeDiscountsAndAdjustments,
        'lastValidationDate': value.lastValidationDate === undefined ? undefined : (value.lastValidationDate === null ? null : value.lastValidationDate.toISOString()),
        'expirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate === null ? null : value.expirationDate.toISOString()),
        'changeMessages': value.changeMessages === undefined ? undefined : (value.changeMessages === null ? null : (value.changeMessages as Array<any>).map(ChangeMessageToJSON)),
        'extendedProperties': value.extendedProperties === undefined ? undefined : (value.extendedProperties === null ? null : (value.extendedProperties as Array<any>).map(ExtendedPropertyToJSON)),
        'discountThresholdMessages': value.discountThresholdMessages === undefined ? undefined : (value.discountThresholdMessages === null ? null : (value.discountThresholdMessages as Array<any>).map(ThresholdMessageToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

