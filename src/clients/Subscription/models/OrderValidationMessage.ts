/* tslint:disable */
/* eslint-disable */
/**
 * Kibo SubscriptionRuntime Service
 * OpenAPI Spec for Kibo SubscriptionRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Validation message returned by an order validator.
 * @export
 * @interface OrderValidationMessage
 */
export interface OrderValidationMessage {
    /**
     * Order item id that this message applies to.  Can be empty.
     * @type {string}
     * @memberof OrderValidationMessage
     */
    orderItemId?: string | null;
    /**
     * Identifier to indicate the type of the message, See OrderValidatorMessageTypeConst for options.
     * @type {string}
     * @memberof OrderValidationMessage
     */
    messageType?: string | null;
    /**
     * Actual message returned by the validator.
     * @type {string}
     * @memberof OrderValidationMessage
     */
    message?: string | null;
}

/**
 * Check if a given object implements the OrderValidationMessage interface.
 */
export function instanceOfOrderValidationMessage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderValidationMessageFromJSON(json: any): OrderValidationMessage {
    return OrderValidationMessageFromJSONTyped(json, false);
}

export function OrderValidationMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderValidationMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderItemId': !exists(json, 'orderItemId') ? undefined : json['orderItemId'],
        'messageType': !exists(json, 'messageType') ? undefined : json['messageType'],
        'message': !exists(json, 'message') ? undefined : json['message'],
    };
}

export function OrderValidationMessageToJSON(value?: OrderValidationMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orderItemId': value.orderItemId,
        'messageType': value.messageType,
        'message': value.message,
    };
}

