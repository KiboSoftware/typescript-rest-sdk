/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SchemaDefinitionField
 */
export interface SchemaDefinitionField {
    /**
     * 
     * @type {string}
     * @memberof SchemaDefinitionField
     */
    fieldName: string;
    /**
     * 
     * @type {string}
     * @memberof SchemaDefinitionField
     */
    fieldDefinition: string;
    /**
     * 
     * @type {string}
     * @memberof SchemaDefinitionField
     */
    friendlyName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchemaDefinitionField
     */
    searchFieldName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchemaDefinitionField
     */
    ingestFieldName?: string | null;
}

/**
 * Check if a given object implements the SchemaDefinitionField interface.
 */
export function instanceOfSchemaDefinitionField(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fieldName" in value;
    isInstance = isInstance && "fieldDefinition" in value;

    return isInstance;
}

export function SchemaDefinitionFieldFromJSON(json: any): SchemaDefinitionField {
    return SchemaDefinitionFieldFromJSONTyped(json, false);
}

export function SchemaDefinitionFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaDefinitionField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fieldName': json['fieldName'],
        'fieldDefinition': json['fieldDefinition'],
        'friendlyName': !exists(json, 'friendlyName') ? undefined : json['friendlyName'],
        'searchFieldName': !exists(json, 'searchFieldName') ? undefined : json['searchFieldName'],
        'ingestFieldName': !exists(json, 'ingestFieldName') ? undefined : json['ingestFieldName'],
    };
}

export function SchemaDefinitionFieldToJSON(value?: SchemaDefinitionField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fieldName': value.fieldName,
        'fieldDefinition': value.fieldDefinition,
        'friendlyName': value.friendlyName,
        'searchFieldName': value.searchFieldName,
        'ingestFieldName': value.ingestFieldName,
    };
}

