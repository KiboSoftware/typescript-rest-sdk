/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FieldTypeDefinitionRepositoryEntry
 */
export interface FieldTypeDefinitionRepositoryEntry {
    /**
     * 
     * @type {string}
     * @memberof FieldTypeDefinitionRepositoryEntry
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FieldTypeDefinitionRepositoryEntry
     */
    suffix?: string | null;
    /**
     * 
     * @type {any}
     * @memberof FieldTypeDefinitionRepositoryEntry
     */
    solrFieldType?: any | null;
    /**
     * 
     * @type {string}
     * @memberof FieldTypeDefinitionRepositoryEntry
     */
    description?: string | null;
    /**
     * Restricts the fields used by specific SOLR analyzer.
     * Originally developed for entity entraction/ aka noun_extraction
     * (e.g. searching for sofa tables should return tables, not sofas)
     * @type {any}
     * @memberof FieldTypeDefinitionRepositoryEntry
     */
    usageRestrictions?: any | null;
}

/**
 * Check if a given object implements the FieldTypeDefinitionRepositoryEntry interface.
 */
export function instanceOfFieldTypeDefinitionRepositoryEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FieldTypeDefinitionRepositoryEntryFromJSON(json: any): FieldTypeDefinitionRepositoryEntry {
    return FieldTypeDefinitionRepositoryEntryFromJSONTyped(json, false);
}

export function FieldTypeDefinitionRepositoryEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldTypeDefinitionRepositoryEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'suffix': !exists(json, 'suffix') ? undefined : json['suffix'],
        'solrFieldType': !exists(json, 'solrFieldType') ? undefined : json['solrFieldType'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'usageRestrictions': !exists(json, 'usageRestrictions') ? undefined : json['usageRestrictions'],
    };
}

export function FieldTypeDefinitionRepositoryEntryToJSON(value?: FieldTypeDefinitionRepositoryEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'suffix': value.suffix,
        'solrFieldType': value.solrFieldType,
        'description': value.description,
        'usageRestrictions': value.usageRestrictions,
    };
}

