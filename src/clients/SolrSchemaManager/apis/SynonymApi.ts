/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';


export namespace synonymApiParams { 
    export interface ListSynonymsRequest {
        language?: string;
        responseFields?: string;
    }
    export interface UpdateSynonymsRequest {
        responseFields?: string;
    }
}
/**
* SynonymApiService - interface
* 
* @export
* @interface SynonymApi
*/
export interface SynonymApiService {
    /**
    * List Synonyms
    * @summary List Synonyms
    * @param {string} [language] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SynonymApiInterface
    */
    listSynonymsRaw(requestParameters: synonymApiParams.ListSynonymsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * List Synonyms
    * List Synonyms
    */
    listSynonyms(requestParameters: synonymApiParams.ListSynonymsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
    * Update Synonyms
    * @summary Update Synonyms
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SynonymApiInterface
    */
    updateSynonymsRaw(requestParameters: synonymApiParams.UpdateSynonymsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
    * Update Synonyms
    * Update Synonyms
    */
    updateSynonyms(requestParameters: synonymApiParams.UpdateSynonymsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

}


/**
 * 
 */
export class SynonymApi extends runtime.BaseAPI implements SynonymApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * List Synonyms
     * List Synonyms
     */


    async listSynonymsRaw(requestParameters: synonymApiParams.ListSynonymsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/synonyms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * List Synonyms
     * List Synonyms
     */
    async listSynonyms(requestParameters: synonymApiParams.ListSynonymsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.listSynonymsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Synonyms
     * Update Synonyms
     */


    async updateSynonymsRaw(requestParameters: synonymApiParams.UpdateSynonymsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/synonyms/reload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update Synonyms
     * Update Synonyms
     */
    async updateSynonyms(requestParameters: synonymApiParams.UpdateSynonymsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.updateSynonymsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
