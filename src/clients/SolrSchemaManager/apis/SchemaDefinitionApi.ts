/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SchemaDefinition,
} from '../models';

export interface SchemaDefinitionApiGetSchemaDefinitionRequest {
    language: string;
    published?: boolean;
    responseFields?: string;
}

export interface SchemaDefinitionApiListSchemaDefinitionsRequest {
    responseFields?: string;
}

export interface SchemaDefinitionApiPublishRequest {
    language: string;
    reindex?: boolean;
    responseFields?: string;
}

export interface SchemaDefinitionApiRevertRequest {
    language: string;
    responseFields?: string;
}

export interface SchemaDefinitionApiUpdateSchemaDefinitionRequest {
    language: string;
    responseFields?: string;
    schemaDefinition?: SchemaDefinition;
}

/**
 * SchemaDefinitionApi - interface
 * 
 * @export
 * @interface SchemaDefinitionApiInterface
 */
export interface SchemaDefinitionApiInterface {
    /**
     * Get Schema Definition
     * @summary Get Schema Definition
     * @param {string} language 
     * @param {boolean} [published] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaDefinitionApiInterface
     */
    getSchemaDefinitionRaw(requestParameters: SchemaDefinitionApiGetSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDefinition>>;

    /**
     * Get Schema Definition
     * Get Schema Definition
     */
    getSchemaDefinition(requestParameters: SchemaDefinitionApiGetSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDefinition>;

    /**
     * List Schema Definitions
     * @summary List Schema Definitions
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaDefinitionApiInterface
     */
    listSchemaDefinitionsRaw(requestParameters: SchemaDefinitionApiListSchemaDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchemaDefinition>>>;

    /**
     * List Schema Definitions
     * List Schema Definitions
     */
    listSchemaDefinitions(requestParameters: SchemaDefinitionApiListSchemaDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchemaDefinition>>;

    /**
     * Publish
     * @summary Publish
     * @param {string} language 
     * @param {boolean} [reindex] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaDefinitionApiInterface
     */
    publishRaw(requestParameters: SchemaDefinitionApiPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     * Publish
     * Publish
     */
    publish(requestParameters: SchemaDefinitionApiPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

    /**
     * Revert
     * @summary Revert
     * @param {string} language 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaDefinitionApiInterface
     */
    revertRaw(requestParameters: SchemaDefinitionApiRevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     * Revert
     * Revert
     */
    revert(requestParameters: SchemaDefinitionApiRevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

    /**
     * Update Schema Definition
     * @summary Update Schema Definition
     * @param {string} language 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {SchemaDefinition} [schemaDefinition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaDefinitionApiInterface
     */
    updateSchemaDefinitionRaw(requestParameters: SchemaDefinitionApiUpdateSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDefinition>>;

    /**
     * Update Schema Definition
     * Update Schema Definition
     */
    updateSchemaDefinition(requestParameters: SchemaDefinitionApiUpdateSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDefinition>;

}

/**
 * 
 */
export class SchemaDefinitionApi extends runtime.BaseAPI implements SchemaDefinitionApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Schema Definition
     * Get Schema Definition
     */


    async getSchemaDefinitionRaw(requestParameters: SchemaDefinitionApiGetSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDefinition>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling getSchemaDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.published !== undefined) {
            queryParameters['published'] = requestParameters.published;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/definition/{language}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Schema Definition
     * Get Schema Definition
     */
    async getSchemaDefinition(requestParameters: SchemaDefinitionApiGetSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDefinition> {
        const response = await this.getSchemaDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Schema Definitions
     * List Schema Definitions
     */


    async listSchemaDefinitionsRaw(requestParameters: SchemaDefinitionApiListSchemaDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SchemaDefinition>>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/definition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List Schema Definitions
     * List Schema Definitions
     */
    async listSchemaDefinitions(requestParameters: SchemaDefinitionApiListSchemaDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SchemaDefinition>> {
        const response = await this.listSchemaDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish
     * Publish
     */


    async publishRaw(requestParameters: SchemaDefinitionApiPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling publish.');
        }

        const queryParameters: any = {};

        if (requestParameters.reindex !== undefined) {
            queryParameters['reindex'] = requestParameters.reindex;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/definition/{language}/publish`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Publish
     * Publish
     */
    async publish(requestParameters: SchemaDefinitionApiPublishRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.publishRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revert
     * Revert
     */


    async revertRaw(requestParameters: SchemaDefinitionApiRevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling revert.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/definition/{language}/revert`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Revert
     * Revert
     */
    async revert(requestParameters: SchemaDefinitionApiRevertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.revertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Schema Definition
     * Update Schema Definition
     */


    async updateSchemaDefinitionRaw(requestParameters: SchemaDefinitionApiUpdateSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaDefinition>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling updateSchemaDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/definition/{language}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.schemaDefinition,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Schema Definition
     * Update Schema Definition
     */
    async updateSchemaDefinition(requestParameters: SchemaDefinitionApiUpdateSchemaDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaDefinition> {
        const response = await this.updateSchemaDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
