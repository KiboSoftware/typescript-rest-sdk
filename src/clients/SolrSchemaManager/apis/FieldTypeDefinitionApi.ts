/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  FieldTypeDefinitionRepositoryEntry,
} from '../models';
import {
    FieldTypeDefinitionRepositoryEntryFromJSON,
    FieldTypeDefinitionRepositoryEntryToJSON,
} from '../models';

export interface FieldTypeDefinitionApiGetFieldTypeDefinitionsRequest {
    language: string;
}

/**
 * 
 */
export class FieldTypeDefinitionApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Field Type Definitions
     * Get Field Type Definitions
     */


    async getFieldTypeDefinitionsRaw(requestParameters: FieldTypeDefinitionApiGetFieldTypeDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FieldTypeDefinitionRepositoryEntry>>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling getFieldTypeDefinitions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/fieldTypes/{language}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FieldTypeDefinitionRepositoryEntryFromJSON));
    }

    /**
     * Get Field Type Definitions
     * Get Field Type Definitions
     */
    async getFieldTypeDefinitions(requestParameters: FieldTypeDefinitionApiGetFieldTypeDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FieldTypeDefinitionRepositoryEntry>> {
        const response = await this.getFieldTypeDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
