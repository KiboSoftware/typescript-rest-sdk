/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ProductRuntime Service
 * OpenAPI Spec for Kibo ProductRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';


export namespace stopWordsApiParams { 
    export interface DownLoadStopWordsRequest {
        language: string;
        responseFields?: string;
    }
    export interface UploadStopWordsRequest {
        language: string;
        responseFields?: string;
    }
}
/**
* StopWordsApiService - interface
* 
* @export
* @interface StopWordsApi
*/
export interface StopWordsApiService {
    /**
    * Downloads the stopwords file for the language
    * @summary Downloads the stopwords file for the language
    * @param {string} language Language code (en, es, fr)
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof StopWordsApiInterface
    */
    downLoadStopWordsRaw(requestParameters: stopWordsApiParams.DownLoadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Downloads the stopwords file for the language
    * Downloads the stopwords file for the language
    */
    downLoadStopWords(requestParameters: stopWordsApiParams.DownLoadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Upload a stopwords file for a language as a list of strings
    * @summary Upload a stopwords file for a language as a list of strings
    * @param {string} language Language code use by the site (en, es, fr)
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof StopWordsApiInterface
    */
    uploadStopWordsRaw(requestParameters: stopWordsApiParams.UploadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
    * Upload a stopwords file for a language as a list of strings
    * Upload a stopwords file for a language as a list of strings
    */
    uploadStopWords(requestParameters: stopWordsApiParams.UploadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

}


/**
 * 
 */
export class StopWordsApi extends runtime.BaseAPI implements StopWordsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Downloads the stopwords file for the language
     * Downloads the stopwords file for the language
     */


    async downLoadStopWordsRaw(requestParameters: stopWordsApiParams.DownLoadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling downLoadStopWords.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/stopwords/{language}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Downloads the stopwords file for the language
     * Downloads the stopwords file for the language
     */
    async downLoadStopWords(requestParameters: stopWordsApiParams.DownLoadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downLoadStopWordsRaw(requestParameters, initOverrides);
    }

    /**
     * Upload a stopwords file for a language as a list of strings
     * Upload a stopwords file for a language as a list of strings
     */


    async uploadStopWordsRaw(requestParameters: stopWordsApiParams.UploadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling uploadStopWords.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchSchema/stopwords/{language}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Upload a stopwords file for a language as a list of strings
     * Upload a stopwords file for a language as a list of strings
     */
    async uploadStopWords(requestParameters: stopWordsApiParams.UploadStopWordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.uploadStopWordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
