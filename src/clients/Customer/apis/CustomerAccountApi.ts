/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AccountPasswordInfoCollection,
  Card,
  CardCollection,
  ChangePasswordResultCollection,
  ConfirmationInfo,
  CustomerAccount,
  CustomerAccountAndAuthInfo,
  CustomerAccountCollection,
  CustomerAttribute,
  CustomerAttributeCollection,
  CustomerAuditEntryCollection,
  CustomerAuthTicket,
  CustomerContact,
  CustomerContactCollection,
  CustomerLoginInfo,
  CustomerNote,
  CustomerNoteCollection,
  CustomerPasswordInfo,
  CustomerPurchaseOrderAccount,
  CustomerPurchaseOrderAccountCollection,
  CustomerResetPasswordInfo,
  CustomerSegmentCollection,
  LoginState,
  PurchaseOrderTransaction,
  PurchaseOrderTransactionCollection,
  Transaction,
} from '../models';

export interface AddAccountRequest {
    responseFields?: string;
    customerAccount?: CustomerAccount;
}

export interface AddAccountAndLoginRequest {
    responseFields?: string;
    customerAccountAndAuthInfo?: CustomerAccountAndAuthInfo;
}

export interface AddAccountAttributeRequest {
    accountId: number;
    userId?: string;
    responseFields?: string;
    customerAttribute?: CustomerAttribute;
}

export interface AddAccountCardRequest {
    accountId: number;
    responseFields?: string;
    card?: Card;
}

export interface AddAccountContactRequest {
    accountId: number;
    responseFields?: string;
    customerContact?: CustomerContact;
}

export interface AddAccountContactListRequest {
    accountId: number;
    responseFields?: string;
    customerContact?: Array<CustomerContact>;
}

export interface AddAccountNoteRequest {
    accountId: number;
    responseFields?: string;
    customerNote?: CustomerNote;
}

export interface AddAccountsRequest {
    responseFields?: string;
    customerAccountAndAuthInfo?: Array<CustomerAccountAndAuthInfo>;
}

export interface AddLoginToExistingCustomerRequest {
    accountId: number;
    responseFields?: string;
    customerLoginInfo?: CustomerLoginInfo;
}

export interface AddTransactionRequest {
    accountId: number;
    responseFields?: string;
    transaction?: Transaction;
}

export interface ChangePasswordRequest {
    accountId: number;
    unlockAccount?: boolean;
    userId?: string;
    responseFields?: string;
    customerPasswordInfo?: CustomerPasswordInfo;
}

export interface ChangePasswordsRequest {
    responseFields?: string;
    accountPasswordInfoCollection?: AccountPasswordInfoCollection;
}

export interface CreateCustomerPurchaseOrderAccountRequest {
    accountId: number;
    responseFields?: string;
    customerPurchaseOrderAccount?: CustomerPurchaseOrderAccount;
}

export interface CreatePurchaseOrderTransactionRequest {
    accountId: number;
    responseFields?: string;
    purchaseOrderTransaction?: PurchaseOrderTransaction;
}

export interface DeleteAccountRequest {
    accountId: number;
}

export interface DeleteAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    userId?: string;
}

export interface DeleteAccountCardRequest {
    accountId: number;
    cardId: string;
}

export interface DeleteAccountContactRequest {
    accountId: number;
    contactId: number;
}

export interface DeleteAccountNoteRequest {
    accountId: number;
    noteId: number;
}

export interface GetAccountRequest {
    accountId: number;
    responseGroups?: string;
    userId?: string;
    responseFields?: string;
}

export interface GetAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    userId?: string;
    responseFields?: string;
}

export interface GetAccountAttributesRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    userId?: string;
    responseFields?: string;
}

export interface GetAccountAuditLogRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface GetAccountCardRequest {
    accountId: number;
    cardId: string;
    responseFields?: string;
}

export interface GetAccountCardsRequest {
    accountId: number;
    responseFields?: string;
}

export interface GetAccountContactRequest {
    accountId: number;
    contactId: number;
    userId?: string;
    responseFields?: string;
}

export interface GetAccountContactsRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    userId?: string;
    responseFields?: string;
}

export interface GetAccountNoteRequest {
    accountId: number;
    noteId: number;
    responseFields?: string;
}

export interface GetAccountNotesRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface GetAccountSegmentsRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface GetAccountsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    fields?: string;
    q?: string;
    qLimit?: number;
    isAnonymous?: boolean;
    responseGroups?: string;
    responseFields?: string;
}

export interface GetCurrentAccountRequest {
    responseGroups?: string;
    responseFields?: string;
}

export interface GetCustomerPurchaseOrderAccountRequest {
    accountId: number;
    responseFields?: string;
}

export interface GetCustomerPurchaseOrderTransactionsRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface GetCustomersPurchaseOrderAccountsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    accountType?: string;
    responseFields?: string;
}

export interface GetLoginStateRequest {
    accountId: number;
    userId?: string;
    responseFields?: string;
}

export interface GetLoginStateByEmailAddressRequest {
    emailAddress?: string;
    customerSetCode?: string;
    responseFields?: string;
}

export interface GetLoginStateByUserNameRequest {
    userName?: string;
    customerSetCode?: string;
    responseFields?: string;
}

export interface GetTransactionsRequest {
    accountId: number;
    responseFields?: string;
}

export interface RecomputeCustomerLifetimeValueRequest {
    accountId: number;
    responseFields?: string;
}

export interface RemoveTransactionRequest {
    accountId: number;
    transactionId: string;
}

export interface ResetPasswordRequest {
    responseFields?: string;
    customerResetPasswordInfo?: CustomerResetPasswordInfo;
}

export interface SetLoginLockedRequest {
    accountId: number;
    userId?: string;
    responseFields?: string;
    body?: boolean;
}

export interface SetPasswordChangeRequiredRequest {
    accountId: number;
    userId?: string;
    responseFields?: string;
    body?: boolean;
}

export interface UpdateAccountRequest {
    accountId: number;
    responseFields?: string;
    customerAccount?: CustomerAccount;
}

export interface UpdateAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    userId?: string;
    responseFields?: string;
    customerAttribute?: CustomerAttribute;
}

export interface UpdateAccountCardRequest {
    accountId: number;
    cardId: string;
    responseFields?: string;
    card?: Card;
}

export interface UpdateAccountContactRequest {
    accountId: number;
    contactId: number;
    userId?: string;
    responseFields?: string;
    customerContact?: CustomerContact;
}

export interface UpdateAccountNoteRequest {
    accountId: number;
    noteId: number;
    responseFields?: string;
    customerNote?: CustomerNote;
}

export interface UpdateCustomerPurchaseOrderAccountRequest {
    accountId: number;
    responseFields?: string;
    customerPurchaseOrderAccount?: CustomerPurchaseOrderAccount;
}

export interface UpdateForgottenPasswordRequest {
    responseFields?: string;
    confirmationInfo?: ConfirmationInfo;
}

/**
 * CustomerAccountApi - interface
 * 
 * @export
 * @interface CustomerAccountApiInterface
 */
export interface CustomerAccountApiInterface {
    /**
     * Creates a new customer account.
     * @summary Add Account
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerAccount} [customerAccount] Properties of the new customer account to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountRaw(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>>;

    /**
     * Creates a new customer account.
     * Add Account
     */
    addAccount(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount>;

    /**
     * Adds a customer to the account.
     * @summary Add Account And Login
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerAccountAndAuthInfo} [customerAccountAndAuthInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountAndLoginRaw(requestParameters: AddAccountAndLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>>;

    /**
     * Adds a customer to the account.
     * Add Account And Login
     */
    addAccountAndLogin(requestParameters: AddAccountAndLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket>;

    /**
     * Adds a new account attribute.
     * @summary Add Account Attribute
     * @param {number} accountId 
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerAttribute} [customerAttribute] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountAttributeRaw(requestParameters: AddAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>>;

    /**
     * Adds a new account attribute.
     * Add Account Attribute
     */
    addAccountAttribute(requestParameters: AddAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute>;

    /**
     * Creates a card on the specific customer account.
     * @summary Add Account Card
     * @param {number} accountId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Card} [card] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountCardRaw(requestParameters: AddAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>>;

    /**
     * Creates a card on the specific customer account.
     * Add Account Card
     */
    addAccountCard(requestParameters: AddAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card>;

    /**
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * @summary Add Account Contact
     * @param {number} accountId Unique identifier of the customer account to contain the new CustomerContact.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerContact} [customerContact] Properties of the new CustomerContact. Required properties: CustomerContact.Email, ContactType.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountContactRaw(requestParameters: AddAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>>;

    /**
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * Add Account Contact
     */
    addAccountContact(requestParameters: AddAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact>;

    /**
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * @summary Add Account Contact List
     * @param {number} accountId Unique identifier of the customer account to contain the new CustomerContact.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CustomerContact>} [customerContact] List of CustomerContact objects : Properties of each new CustomerContact. Required properties: CustomerContact.Email, ContactType.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountContactListRaw(requestParameters: AddAccountContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContactCollection>>;

    /**
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * Add Account Contact List
     */
    addAccountContactList(requestParameters: AddAccountContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContactCollection>;

    /**
     * Adds a new note to the specified customer account.
     * @summary Add Account Note
     * @param {number} accountId Unique identifier of the customer account for which to create the note.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerNote} [customerNote] Contents of the new note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountNoteRaw(requestParameters: AddAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>>;

    /**
     * Adds a new note to the specified customer account.
     * Add Account Note
     */
    addAccountNote(requestParameters: AddAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote>;

    /**
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * @summary Add Accounts
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CustomerAccountAndAuthInfo>} [customerAccountAndAuthInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addAccountsRaw(requestParameters: AddAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccountCollection>>;

    /**
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * Add Accounts
     */
    addAccounts(requestParameters: AddAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccountCollection>;

    /**
     * Creates a login for an existing customer and logs them in automatically.
     * @summary Add Login To Existing Customer
     * @param {number} accountId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerLoginInfo} [customerLoginInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addLoginToExistingCustomerRaw(requestParameters: AddLoginToExistingCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>>;

    /**
     * Creates a login for an existing customer and logs them in automatically.
     * Add Login To Existing Customer
     */
    addLoginToExistingCustomer(requestParameters: AddLoginToExistingCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket>;

    /**
     * Add a transaction on customer account.
     * @summary Add Transaction
     * @param {number} accountId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Transaction} [transaction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    addTransactionRaw(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;

    /**
     * Add a transaction on customer account.
     * Add Transaction
     */
    addTransaction(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;

    /**
     * Changes a shopper\'s password.
     * @summary Change Password
     * @param {number} accountId Unique identifier of the shopper for whom to change the password.
     * @param {boolean} [unlockAccount] inidicates that the account should be unlocked on a successful password change.
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerPasswordInfo} [customerPasswordInfo] Old password and new password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Changes a shopper\'s password.
     * Change Password
     */
    changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Changes a collection of shopper passwords
     * @summary Change Passwords
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AccountPasswordInfoCollection} [accountPasswordInfoCollection] The collection of AccountPasswordInfo which are to be processed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    changePasswordsRaw(requestParameters: ChangePasswordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResultCollection>>;

    /**
     * Changes a collection of shopper passwords
     * Change Passwords
     */
    changePasswords(requestParameters: ChangePasswordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResultCollection>;

    /**
     * Creates a customer\'s purchase order account.
     * @summary Create Customer Purchase Order Account
     * @param {number} accountId Unique identifier of the account.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerPurchaseOrderAccount} [customerPurchaseOrderAccount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    createCustomerPurchaseOrderAccountRaw(requestParameters: CreateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>>;

    /**
     * Creates a customer\'s purchase order account.
     * Create Customer Purchase Order Account
     */
    createCustomerPurchaseOrderAccount(requestParameters: CreateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount>;

    /**
     * Creates a purchase order transaction log (for public api use).
     * @summary Create Purchase Order Transaction
     * @param {number} accountId Unique identifier of the customer account.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {PurchaseOrderTransaction} [purchaseOrderTransaction] transaction log that needs to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    createPurchaseOrderTransactionRaw(requestParameters: CreatePurchaseOrderTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseOrderTransaction>>;

    /**
     * Creates a purchase order transaction log (for public api use).
     * Create Purchase Order Transaction
     */
    createPurchaseOrderTransaction(requestParameters: CreatePurchaseOrderTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseOrderTransaction>;

    /**
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * @summary Delete Account
     * @param {number} accountId Unique identifier of the customer account to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * Delete Account
     */
    deleteAccount(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes an account attribute specified by attributeFQN.
     * @summary Delete Account Attribute
     * @param {number} accountId 
     * @param {string} attributeFQN 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    deleteAccountAttributeRaw(requestParameters: DeleteAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes an account attribute specified by attributeFQN.
     * Delete Account Attribute
     */
    deleteAccountAttribute(requestParameters: DeleteAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Removes a card from the specified customer account.
     * @summary Delete Account Card
     * @param {number} accountId 
     * @param {string} cardId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    deleteAccountCardRaw(requestParameters: DeleteAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a card from the specified customer account.
     * Delete Account Card
     */
    deleteAccountCard(requestParameters: DeleteAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a CustomerContact for the specified customer account.
     * @summary Delete Account Contact
     * @param {number} accountId Unique identifier of the customer account whose CustomerContact you want to delete.
     * @param {number} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    deleteAccountContactRaw(requestParameters: DeleteAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a CustomerContact for the specified customer account.
     * Delete Account Contact
     */
    deleteAccountContact(requestParameters: DeleteAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Removes a note from the specified customer account.
     * @summary Delete Account Note
     * @param {number} accountId Unique identifier of the customer account that contains the note you want to delete.
     * @param {number} noteId Unique identifier of the note to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    deleteAccountNoteRaw(requestParameters: DeleteAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a note from the specified customer account.
     * Delete Account Note
     */
    deleteAccountNote(requestParameters: DeleteAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves the details of a customer account specified by its unique identifier.
     * @summary Get Account
     * @param {number} accountId Unique identifier of the customer account whose details you want to retrieve.
     * @param {string} [responseGroups] 
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>>;

    /**
     * Retrieves the details of a customer account specified by its unique identifier.
     * Get Account
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount>;

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * @summary Get Account Attribute
     * @param {number} accountId Unique identifier of the account that contains the attribute to retrieve.
     * @param {string} attributeFQN Fully qualified name of the attribute that you want to retrieve.
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountAttributeRaw(requestParameters: GetAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>>;

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get Account Attribute
     */
    getAccountAttribute(requestParameters: GetAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute>;

    /**
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * @summary Get Account Attributes
     * @param {number} accountId Unique identifier of the customer account whose notes you want to retrieve.
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountAttributesRaw(requestParameters: GetAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttributeCollection>>;

    /**
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * Get Account Attributes
     */
    getAccountAttributes(requestParameters: GetAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttributeCollection>;

    /**
     * Get Account Audit Log
     * @summary Get Account Audit Log
     * @param {number} accountId 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountAuditLogRaw(requestParameters: GetAccountAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuditEntryCollection>>;

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     */
    getAccountAuditLog(requestParameters: GetAccountAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuditEntryCollection>;

    /**
     * Retrieves a card for the specified customer account and card ID.
     * @summary Get Account Card
     * @param {number} accountId 
     * @param {string} cardId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountCardRaw(requestParameters: GetAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>>;

    /**
     * Retrieves a card for the specified customer account and card ID.
     * Get Account Card
     */
    getAccountCard(requestParameters: GetAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card>;

    /**
     * Retrieves a list of cards for the specified customer account.
     * @summary Get Account Cards
     * @param {number} accountId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountCardsRaw(requestParameters: GetAccountCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardCollection>>;

    /**
     * Retrieves a list of cards for the specified customer account.
     * Get Account Cards
     */
    getAccountCards(requestParameters: GetAccountCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardCollection>;

    /**
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * @summary Get Account Contact
     * @param {number} accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve.
     * @param {number} contactId Unique identifier of the CustomerContact whose details you want to retrieve.
     * @param {string} [userId] If provided, the primary markings on the contact will be based on the user\&#39;s preferred primary overrides
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountContactRaw(requestParameters: GetAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>>;

    /**
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * Get Account Contact
     */
    getAccountContact(requestParameters: GetAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact>;

    /**
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * @summary Get Account Contacts
     * @param {number} accountId Unique identifier of the customer account whose CustomerContact information you want to retrieve.
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [userId] If provided, the primary markings on the contacts will be based on the user\&#39;s preferred primary overrides
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountContactsRaw(requestParameters: GetAccountContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContactCollection>>;

    /**
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * Get Account Contacts
     */
    getAccountContacts(requestParameters: GetAccountContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContactCollection>;

    /**
     * Retrieves the contents of a particular note attached to a specified customer account.
     * @summary Get Account Note
     * @param {number} accountId Unique identifier of the customer account that contains the note to retrieve.
     * @param {number} noteId Unique identifier of a particular note that you want to retrieve.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountNoteRaw(requestParameters: GetAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>>;

    /**
     * Retrieves the contents of a particular note attached to a specified customer account.
     * Get Account Note
     */
    getAccountNote(requestParameters: GetAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote>;

    /**
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * @summary Get Account Notes
     * @param {number} accountId Unique identifier of the customer account whose notes you want to retrieve.
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountNotesRaw(requestParameters: GetAccountNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNoteCollection>>;

    /**
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * Get Account Notes
     */
    getAccountNotes(requestParameters: GetAccountNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNoteCollection>;

    /**
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * @summary Get Account Segments
     * @param {number} accountId Unique identifier of the account for which you want the list of groups.
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.               Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountSegmentsRaw(requestParameters: GetAccountSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegmentCollection>>;

    /**
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * Get Account Segments
     */
    getAccountSegments(requestParameters: GetAccountSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegmentCollection>;

    /**
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * @summary Get Accounts
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.                            For example, applications can filter on UserId to get the single record of the current customer.
     * @param {number} [pageSize] We added this test to demo new publishing @test@. Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [fields] 
     * @param {string} [q] a quick filter which will search a predefined set of fields for a match
     * @param {number} [qLimit] 
     * @param {boolean} [isAnonymous] 
     * @param {string} [responseGroups] Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getAccountsRaw(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccountCollection>>;

    /**
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * Get Accounts
     */
    getAccounts(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccountCollection>;

    /**
     * Retrieves the details of a the current logged in customer account
     * @summary Retrieves the details of a the current logged in customer account
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getCurrentAccountRaw(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>>;

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     */
    getCurrentAccount(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount>;

    /**
     * Gets a customer\'s purchase order account.
     * @summary Gets a customer\'s purchase order account.
     * @param {number} accountId Unique identifier of the account.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getCustomerPurchaseOrderAccountRaw(requestParameters: GetCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>>;

    /**
     * Gets a customer\'s purchase order account.
     * Gets a customer\'s purchase order account.
     */
    getCustomerPurchaseOrderAccount(requestParameters: GetCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount>;

    /**
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * @summary Get Customer Purchase Order Transactions
     * @param {number} accountId Customer Account Id for which transaction logs need to be retreived
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query.               Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getCustomerPurchaseOrderTransactionsRaw(requestParameters: GetCustomerPurchaseOrderTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseOrderTransactionCollection>>;

    /**
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * Get Customer Purchase Order Transactions
     */
    getCustomerPurchaseOrderTransactions(requestParameters: GetCustomerPurchaseOrderTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseOrderTransactionCollection>;

    /**
     * Gets a collection of customer purchase order accounts.
     * @summary Get Customers Purchase Order Accounts
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [accountType] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getCustomersPurchaseOrderAccountsRaw(requestParameters: GetCustomersPurchaseOrderAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccountCollection>>;

    /**
     * Gets a collection of customer purchase order accounts.
     * Get Customers Purchase Order Accounts
     */
    getCustomersPurchaseOrderAccounts(requestParameters: GetCustomersPurchaseOrderAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccountCollection>;

    /**
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * @summary Get Login State
     * @param {number} accountId 
     * @param {string} [userId] EmailAddress of the customer whose details you want to view.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getLoginStateRaw(requestParameters: GetLoginStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>>;

    /**
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * Get Login State
     */
    getLoginState(requestParameters: GetLoginStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState>;

    /**
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * @summary Get Login State By Email Address
     * @param {string} [emailAddress] 
     * @param {string} [customerSetCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getLoginStateByEmailAddressRaw(requestParameters: GetLoginStateByEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>>;

    /**
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * Get Login State By Email Address
     */
    getLoginStateByEmailAddress(requestParameters: GetLoginStateByEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState>;

    /**
     * Retrieves the log-in status details of a shopper specified by userName.
     * @summary Get Login State By UserName
     * @param {string} [userName] Unique userName of the customer whose details you want to view.
     * @param {string} [customerSetCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getLoginStateByUserNameRaw(requestParameters: GetLoginStateByUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>>;

    /**
     * Retrieves the log-in status details of a shopper specified by userName.
     * Get Login State By UserName
     */
    getLoginStateByUserName(requestParameters: GetLoginStateByUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState>;

    /**
     * Gets the list of transactions on customer account.
     * @summary Get Transactions
     * @param {number} accountId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaction>>>;

    /**
     * Gets the list of transactions on customer account.
     * Get Transactions
     */
    getTransactions(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaction>>;

    /**
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * @summary Recompute Customer Lifetime Value
     * @param {number} accountId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    recomputeCustomerLifetimeValueRaw(requestParameters: RecomputeCustomerLifetimeValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * Recompute Customer Lifetime Value
     */
    recomputeCustomerLifetimeValue(requestParameters: RecomputeCustomerLifetimeValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Removes a transaction on customer account.
     * @summary Remove Transaction
     * @param {number} accountId 
     * @param {string} transactionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    removeTransactionRaw(requestParameters: RemoveTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a transaction on customer account.
     * Remove Transaction
     */
    removeTransaction(requestParameters: RemoveTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Resets the password for a shopper specified by username or emailAddress.
     * @summary Reset Password
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerResetPasswordInfo} [customerResetPasswordInfo] Username or EmailAddress of the shopper who has requested a password reset.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resets the password for a shopper specified by username or emailAddress.
     * Reset Password
     */
    resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * @summary Set Login Locked
     * @param {number} accountId The customer account id to operate on.
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {boolean} [body] True for locking the login. False for unlocking the login (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    setLoginLockedRaw(requestParameters: SetLoginLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * Set Login Locked
     */
    setLoginLocked(requestParameters: SetLoginLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * @summary Set Password Change Required
     * @param {number} accountId The customer account id to operate on.
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {boolean} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    setPasswordChangeRequiredRaw(requestParameters: SetPasswordChangeRequiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * Set Password Change Required
     */
    setPasswordChangeRequired(requestParameters: SetPasswordChangeRequiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * @summary Update Account
     * @param {number} accountId Unique identifier of the customer account.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerAccount} [customerAccount] Properties of the customer account to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateAccountRaw(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>>;

    /**
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * Update Account
     */
    updateAccount(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount>;

    /**
     * Modifies an existing attribute for an account.
     * @summary Update Account Attribute
     * @param {number} accountId Unique identifier of the account whose attribute you want to modify.
     * @param {string} attributeFQN 
     * @param {string} [userId] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerAttribute} [customerAttribute] The new content to replace the existing attribute.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateAccountAttributeRaw(requestParameters: UpdateAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>>;

    /**
     * Modifies an existing attribute for an account.
     * Update Account Attribute
     */
    updateAccountAttribute(requestParameters: UpdateAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute>;

    /**
     * Updates a card on the specific customer account.
     * @summary Update Account Card
     * @param {number} accountId 
     * @param {string} cardId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Card} [card] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateAccountCardRaw(requestParameters: UpdateAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>>;

    /**
     * Updates a card on the specific customer account.
     * Update Account Card
     */
    updateAccountCard(requestParameters: UpdateAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card>;

    /**
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * @summary Update Account Contact
     * @param {number} accountId Unique identifier of the customer account whose CustomerContact information you want to update.
     * @param {number} contactId 
     * @param {string} [userId] If provided, the primary markings on the contact will be stored as the user\&#39;s preferred primary override
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerContact} [customerContact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateAccountContactRaw(requestParameters: UpdateAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>>;

    /**
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * Update Account Contact
     */
    updateAccountContact(requestParameters: UpdateAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact>;

    /**
     * Modifies an existing note for a customer account.
     * @summary Update Account Note
     * @param {number} accountId Unique identifier of the customer account whose note you want to modify.
     * @param {number} noteId Unique identifier of the note to update.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerNote} [customerNote] The new content to replace the existing note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateAccountNoteRaw(requestParameters: UpdateAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>>;

    /**
     * Modifies an existing note for a customer account.
     * Update Account Note
     */
    updateAccountNote(requestParameters: UpdateAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote>;

    /**
     * Updates a customer\'s purchase order account.
     * @summary Update Customer Purchase Order Account
     * @param {number} accountId Unique identifier of the account.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerPurchaseOrderAccount} [customerPurchaseOrderAccount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateCustomerPurchaseOrderAccountRaw(requestParameters: UpdateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>>;

    /**
     * Updates a customer\'s purchase order account.
     * Update Customer Purchase Order Account
     */
    updateCustomerPurchaseOrderAccount(requestParameters: UpdateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount>;

    /**
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * @summary Update Forgotten Password
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ConfirmationInfo} [confirmationInfo] Properties of the confirmation code. Required properties: UserName, NewPassword, and ConfirmationCode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerAccountApiInterface
     */
    updateForgottenPasswordRaw(requestParameters: UpdateForgottenPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * Update Forgotten Password
     */
    updateForgottenPassword(requestParameters: UpdateForgottenPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class CustomerAccountApi extends runtime.BaseAPI implements CustomerAccountApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new customer account.
     * Add Account
     */


    async addAccountRaw(requestParameters: AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAccount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new customer account.
     * Add Account
     */
    async addAccount(requestParameters: AddAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.addAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a customer to the account.
     * Add Account And Login
     */


    async addAccountAndLoginRaw(requestParameters: AddAccountAndLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/Add-Account-And-Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAccountAndAuthInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a customer to the account.
     * Add Account And Login
     */
    async addAccountAndLogin(requestParameters: AddAccountAndLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.addAccountAndLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new account attribute.
     * Add Account Attribute
     */


    async addAccountAttributeRaw(requestParameters: AddAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a new account attribute.
     * Add Account Attribute
     */
    async addAccountAttribute(requestParameters: AddAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.addAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a card on the specific customer account.
     * Add Account Card
     */


    async addAccountCardRaw(requestParameters: AddAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountCard.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.card,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a card on the specific customer account.
     * Add Account Card
     */
    async addAccountCard(requestParameters: AddAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.addAccountCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * Add Account Contact
     */


    async addAccountContactRaw(requestParameters: AddAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerContact,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * Add Account Contact
     */
    async addAccountContact(requestParameters: AddAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact> {
        const response = await this.addAccountContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * Add Account Contact List
     */


    async addAccountContactListRaw(requestParameters: AddAccountContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContactCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountContactList.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerContact,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * Add Account Contact List
     */
    async addAccountContactList(requestParameters: AddAccountContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContactCollection> {
        const response = await this.addAccountContactListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new note to the specified customer account.
     * Add Account Note
     */


    async addAccountNoteRaw(requestParameters: AddAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerNote,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a new note to the specified customer account.
     * Add Account Note
     */
    async addAccountNote(requestParameters: AddAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote> {
        const response = await this.addAccountNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * Add Accounts
     */


    async addAccountsRaw(requestParameters: AddAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/Bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAccountAndAuthInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * Add Accounts
     */
    async addAccounts(requestParameters: AddAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccountCollection> {
        const response = await this.addAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a login for an existing customer and logs them in automatically.
     * Add Login To Existing Customer
     */


    async addLoginToExistingCustomerRaw(requestParameters: AddLoginToExistingCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addLoginToExistingCustomer.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Create-Login`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerLoginInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a login for an existing customer and logs them in automatically.
     * Add Login To Existing Customer
     */
    async addLoginToExistingCustomer(requestParameters: AddLoginToExistingCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.addLoginToExistingCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a transaction on customer account.
     * Add Transaction
     */


    async addTransactionRaw(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addTransaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/transactions`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.transaction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add a transaction on customer account.
     * Add Transaction
     */
    async addTransaction(requestParameters: AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.addTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes a shopper\'s password.
     * Change Password
     */


    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.unlockAccount !== undefined) {
            queryParameters['unlockAccount'] = requestParameters.unlockAccount;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Change-Password`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerPasswordInfo,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes a shopper\'s password.
     * Change Password
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Changes a collection of shopper passwords
     * Change Passwords
     */


    async changePasswordsRaw(requestParameters: ChangePasswordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResultCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/Change-Passwords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.accountPasswordInfoCollection,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Changes a collection of shopper passwords
     * Change Passwords
     */
    async changePasswords(requestParameters: ChangePasswordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResultCollection> {
        const response = await this.changePasswordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a customer\'s purchase order account.
     * Create Customer Purchase Order Account
     */


    async createCustomerPurchaseOrderAccountRaw(requestParameters: CreateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createCustomerPurchaseOrderAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/purchaseOrderAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerPurchaseOrderAccount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a customer\'s purchase order account.
     * Create Customer Purchase Order Account
     */
    async createCustomerPurchaseOrderAccount(requestParameters: CreateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount> {
        const response = await this.createCustomerPurchaseOrderAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a purchase order transaction log (for public api use).
     * Create Purchase Order Transaction
     */


    async createPurchaseOrderTransactionRaw(requestParameters: CreatePurchaseOrderTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseOrderTransaction>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createPurchaseOrderTransaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.purchaseOrderTransaction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a purchase order transaction log (for public api use).
     * Create Purchase Order Transaction
     */
    async createPurchaseOrderTransaction(requestParameters: CreatePurchaseOrderTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseOrderTransaction> {
        const response = await this.createPurchaseOrderTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * Delete Account
     */


    async deleteAccountRaw(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * Delete Account
     */
    async deleteAccount(requestParameters: DeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an account attribute specified by attributeFQN.
     * Delete Account Attribute
     */


    async deleteAccountAttributeRaw(requestParameters: DeleteAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an account attribute specified by attributeFQN.
     * Delete Account Attribute
     */
    async deleteAccountAttribute(requestParameters: DeleteAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a card from the specified customer account.
     * Delete Account Card
     */


    async deleteAccountCardRaw(requestParameters: DeleteAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountCard.');
        }

        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling deleteAccountCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards/{cardId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a card from the specified customer account.
     * Delete Account Card
     */
    async deleteAccountCard(requestParameters: DeleteAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountCardRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a CustomerContact for the specified customer account.
     * Delete Account Contact
     */


    async deleteAccountContactRaw(requestParameters: DeleteAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountContact.');
        }

        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling deleteAccountContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts/{contactId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a CustomerContact for the specified customer account.
     * Delete Account Contact
     */
    async deleteAccountContact(requestParameters: DeleteAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountContactRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a note from the specified customer account.
     * Delete Account Note
     */


    async deleteAccountNoteRaw(requestParameters: DeleteAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteAccountNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes/{noteId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a note from the specified customer account.
     * Delete Account Note
     */
    async deleteAccountNote(requestParameters: DeleteAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountNoteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of a customer account specified by its unique identifier.
     * Get Account
     */


    async getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a customer account specified by its unique identifier.
     * Get Account
     */
    async getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get Account Attribute
     */


    async getAccountAttributeRaw(requestParameters: GetAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get Account Attribute
     */
    async getAccountAttribute(requestParameters: GetAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.getAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * Get Account Attributes
     */


    async getAccountAttributesRaw(requestParameters: GetAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttributeCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * Get Account Attributes
     */
    async getAccountAttributes(requestParameters: GetAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttributeCollection> {
        const response = await this.getAccountAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     */


    async getAccountAuditLogRaw(requestParameters: GetAccountAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuditEntryCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountAuditLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/AuditLog/Entries`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     */
    async getAccountAuditLog(requestParameters: GetAccountAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuditEntryCollection> {
        const response = await this.getAccountAuditLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a card for the specified customer account and card ID.
     * Get Account Card
     */


    async getAccountCardRaw(requestParameters: GetAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountCard.');
        }

        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling getAccountCard.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards/{cardId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a card for the specified customer account and card ID.
     * Get Account Card
     */
    async getAccountCard(requestParameters: GetAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.getAccountCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of cards for the specified customer account.
     * Get Account Cards
     */


    async getAccountCardsRaw(requestParameters: GetAccountCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountCards.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of cards for the specified customer account.
     * Get Account Cards
     */
    async getAccountCards(requestParameters: GetAccountCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardCollection> {
        const response = await this.getAccountCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * Get Account Contact
     */


    async getAccountContactRaw(requestParameters: GetAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountContact.');
        }

        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling getAccountContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts/{contactId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * Get Account Contact
     */
    async getAccountContact(requestParameters: GetAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact> {
        const response = await this.getAccountContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * Get Account Contacts
     */


    async getAccountContactsRaw(requestParameters: GetAccountContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContactCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountContacts.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * Get Account Contacts
     */
    async getAccountContacts(requestParameters: GetAccountContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContactCollection> {
        const response = await this.getAccountContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the contents of a particular note attached to a specified customer account.
     * Get Account Note
     */


    async getAccountNoteRaw(requestParameters: GetAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling getAccountNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes/{noteId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the contents of a particular note attached to a specified customer account.
     * Get Account Note
     */
    async getAccountNote(requestParameters: GetAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote> {
        const response = await this.getAccountNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * Get Account Notes
     */


    async getAccountNotesRaw(requestParameters: GetAccountNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNoteCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountNotes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * Get Account Notes
     */
    async getAccountNotes(requestParameters: GetAccountNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNoteCollection> {
        const response = await this.getAccountNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * Get Account Segments
     */


    async getAccountSegmentsRaw(requestParameters: GetAccountSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegmentCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountSegments.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/segments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * Get Account Segments
     */
    async getAccountSegments(requestParameters: GetAccountSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegmentCollection> {
        const response = await this.getAccountSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * Get Accounts
     */


    async getAccountsRaw(requestParameters: GetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.isAnonymous !== undefined) {
            queryParameters['isAnonymous'] = requestParameters.isAnonymous;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * Get Accounts
     */
    async getAccounts(requestParameters: GetAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccountCollection> {
        const response = await this.getAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     */


    async getCurrentAccountRaw(requestParameters: GetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     */
    async getCurrentAccount(requestParameters: GetCurrentAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.getCurrentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a customer\'s purchase order account.
     * Gets a customer\'s purchase order account.
     */


    async getCustomerPurchaseOrderAccountRaw(requestParameters: GetCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getCustomerPurchaseOrderAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/purchaseOrderAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a customer\'s purchase order account.
     * Gets a customer\'s purchase order account.
     */
    async getCustomerPurchaseOrderAccount(requestParameters: GetCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount> {
        const response = await this.getCustomerPurchaseOrderAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * Get Customer Purchase Order Transactions
     */


    async getCustomerPurchaseOrderTransactionsRaw(requestParameters: GetCustomerPurchaseOrderTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseOrderTransactionCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getCustomerPurchaseOrderTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * Get Customer Purchase Order Transactions
     */
    async getCustomerPurchaseOrderTransactions(requestParameters: GetCustomerPurchaseOrderTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseOrderTransactionCollection> {
        const response = await this.getCustomerPurchaseOrderTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a collection of customer purchase order accounts.
     * Get Customers Purchase Order Accounts
     */


    async getCustomersPurchaseOrderAccountsRaw(requestParameters: GetCustomersPurchaseOrderAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/purchaseOrderAccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a collection of customer purchase order accounts.
     * Get Customers Purchase Order Accounts
     */
    async getCustomersPurchaseOrderAccounts(requestParameters: GetCustomersPurchaseOrderAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccountCollection> {
        const response = await this.getCustomersPurchaseOrderAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * Get Login State
     */


    async getLoginStateRaw(requestParameters: GetLoginStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getLoginState.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/loginstate`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * Get Login State
     */
    async getLoginState(requestParameters: GetLoginStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState> {
        const response = await this.getLoginStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * Get Login State By Email Address
     */


    async getLoginStateByEmailAddressRaw(requestParameters: GetLoginStateByEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>> {
        const queryParameters: any = {};

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.customerSetCode !== undefined) {
            queryParameters['customerSetCode'] = requestParameters.customerSetCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/loginstatebyemailaddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * Get Login State By Email Address
     */
    async getLoginStateByEmailAddress(requestParameters: GetLoginStateByEmailAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState> {
        const response = await this.getLoginStateByEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log-in status details of a shopper specified by userName.
     * Get Login State By UserName
     */


    async getLoginStateByUserNameRaw(requestParameters: GetLoginStateByUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>> {
        const queryParameters: any = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.customerSetCode !== undefined) {
            queryParameters['customerSetCode'] = requestParameters.customerSetCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/loginstatebyusername`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the log-in status details of a shopper specified by userName.
     * Get Login State By UserName
     */
    async getLoginStateByUserName(requestParameters: GetLoginStateByUserNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState> {
        const response = await this.getLoginStateByUserNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of transactions on customer account.
     * Get Transactions
     */


    async getTransactionsRaw(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaction>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/transactions`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the list of transactions on customer account.
     * Get Transactions
     */
    async getTransactions(requestParameters: GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaction>> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * Recompute Customer Lifetime Value
     */


    async recomputeCustomerLifetimeValueRaw(requestParameters: RecomputeCustomerLifetimeValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling recomputeCustomerLifetimeValue.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/recomputelifetimevalue`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * Recompute Customer Lifetime Value
     */
    async recomputeCustomerLifetimeValue(requestParameters: RecomputeCustomerLifetimeValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.recomputeCustomerLifetimeValueRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a transaction on customer account.
     * Remove Transaction
     */


    async removeTransactionRaw(requestParameters: RemoveTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeTransaction.');
        }

        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling removeTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/transactions/{transactionId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a transaction on customer account.
     * Remove Transaction
     */
    async removeTransaction(requestParameters: RemoveTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTransactionRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the password for a shopper specified by username or emailAddress.
     * Reset Password
     */


    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/Reset-Password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerResetPasswordInfo,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the password for a shopper specified by username or emailAddress.
     * Reset Password
     */
    async resetPassword(requestParameters: ResetPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * Set Login Locked
     */


    async setLoginLockedRaw(requestParameters: SetLoginLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling setLoginLocked.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Set-Login-Locked`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * Set Login Locked
     */
    async setLoginLocked(requestParameters: SetLoginLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setLoginLockedRaw(requestParameters, initOverrides);
    }

    /**
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * Set Password Change Required
     */


    async setPasswordChangeRequiredRaw(requestParameters: SetPasswordChangeRequiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling setPasswordChangeRequired.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Set-Password-Change-Required`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * Set Password Change Required
     */
    async setPasswordChangeRequired(requestParameters: SetPasswordChangeRequiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPasswordChangeRequiredRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * Update Account
     */


    async updateAccountRaw(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAccount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * Update Account
     */
    async updateAccount(requestParameters: UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing attribute for an account.
     * Update Account Attribute
     */


    async updateAccountAttributeRaw(requestParameters: UpdateAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an existing attribute for an account.
     * Update Account Attribute
     */
    async updateAccountAttribute(requestParameters: UpdateAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.updateAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a card on the specific customer account.
     * Update Account Card
     */


    async updateAccountCardRaw(requestParameters: UpdateAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountCard.');
        }

        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling updateAccountCard.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards/{cardId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.card,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a card on the specific customer account.
     * Update Account Card
     */
    async updateAccountCard(requestParameters: UpdateAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.updateAccountCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * Update Account Contact
     */


    async updateAccountContactRaw(requestParameters: UpdateAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountContact.');
        }

        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling updateAccountContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts/{contactId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerContact,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * Update Account Contact
     */
    async updateAccountContact(requestParameters: UpdateAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact> {
        const response = await this.updateAccountContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing note for a customer account.
     * Update Account Note
     */


    async updateAccountNoteRaw(requestParameters: UpdateAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateAccountNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes/{noteId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerNote,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an existing note for a customer account.
     * Update Account Note
     */
    async updateAccountNote(requestParameters: UpdateAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote> {
        const response = await this.updateAccountNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a customer\'s purchase order account.
     * Update Customer Purchase Order Account
     */


    async updateCustomerPurchaseOrderAccountRaw(requestParameters: UpdateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateCustomerPurchaseOrderAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/purchaseOrderAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerPurchaseOrderAccount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a customer\'s purchase order account.
     * Update Customer Purchase Order Account
     */
    async updateCustomerPurchaseOrderAccount(requestParameters: UpdateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount> {
        const response = await this.updateCustomerPurchaseOrderAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * Update Forgotten Password
     */


    async updateForgottenPasswordRaw(requestParameters: UpdateForgottenPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/accounts/Update-Forgotten-Password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.confirmationInfo,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * Update Forgotten Password
     */
    async updateForgottenPassword(requestParameters: UpdateForgottenPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateForgottenPasswordRaw(requestParameters, initOverrides);
    }

}
