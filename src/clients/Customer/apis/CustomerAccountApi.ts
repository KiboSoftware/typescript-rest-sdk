/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AccountPasswordInfoCollection,
  Card,
  CardCollection,
  ChangePasswordResultCollection,
  ConfirmationInfo,
  CustomerAccount,
  CustomerAccountAndAuthInfo,
  CustomerAccountCollection,
  CustomerAttribute,
  CustomerAttributeCollection,
  CustomerAuditEntryCollection,
  CustomerAuthTicket,
  CustomerContact,
  CustomerContactCollection,
  CustomerLoginInfo,
  CustomerNote,
  CustomerNoteCollection,
  CustomerPurchaseOrderAccount,
  CustomerPurchaseOrderAccountCollection,
  CustomerSegmentCollection,
  LoginState,
  PasswordInfo,
  PurchaseOrderTransaction,
  PurchaseOrderTransactionCollection,
  ResetPasswordInfo,
  Transaction,
} from '../models';
import {
    AccountPasswordInfoCollectionFromJSON,
    AccountPasswordInfoCollectionToJSON,
    CardFromJSON,
    CardToJSON,
    CardCollectionFromJSON,
    CardCollectionToJSON,
    ChangePasswordResultCollectionFromJSON,
    ChangePasswordResultCollectionToJSON,
    ConfirmationInfoFromJSON,
    ConfirmationInfoToJSON,
    CustomerAccountFromJSON,
    CustomerAccountToJSON,
    CustomerAccountAndAuthInfoFromJSON,
    CustomerAccountAndAuthInfoToJSON,
    CustomerAccountCollectionFromJSON,
    CustomerAccountCollectionToJSON,
    CustomerAttributeFromJSON,
    CustomerAttributeToJSON,
    CustomerAttributeCollectionFromJSON,
    CustomerAttributeCollectionToJSON,
    CustomerAuditEntryCollectionFromJSON,
    CustomerAuditEntryCollectionToJSON,
    CustomerAuthTicketFromJSON,
    CustomerAuthTicketToJSON,
    CustomerContactFromJSON,
    CustomerContactToJSON,
    CustomerContactCollectionFromJSON,
    CustomerContactCollectionToJSON,
    CustomerLoginInfoFromJSON,
    CustomerLoginInfoToJSON,
    CustomerNoteFromJSON,
    CustomerNoteToJSON,
    CustomerNoteCollectionFromJSON,
    CustomerNoteCollectionToJSON,
    CustomerPurchaseOrderAccountFromJSON,
    CustomerPurchaseOrderAccountToJSON,
    CustomerPurchaseOrderAccountCollectionFromJSON,
    CustomerPurchaseOrderAccountCollectionToJSON,
    CustomerSegmentCollectionFromJSON,
    CustomerSegmentCollectionToJSON,
    LoginStateFromJSON,
    LoginStateToJSON,
    PasswordInfoFromJSON,
    PasswordInfoToJSON,
    PurchaseOrderTransactionFromJSON,
    PurchaseOrderTransactionToJSON,
    PurchaseOrderTransactionCollectionFromJSON,
    PurchaseOrderTransactionCollectionToJSON,
    ResetPasswordInfoFromJSON,
    ResetPasswordInfoToJSON,
    TransactionFromJSON,
    TransactionToJSON,
} from '../models';

export interface CustomerAccountApiAddAccountRequest {
    customerAccount?: CustomerAccount;
}

export interface CustomerAccountApiAddAccountAndLoginRequest {
    customerAccountAndAuthInfo?: CustomerAccountAndAuthInfo;
}

export interface CustomerAccountApiAddAccountAttributeRequest {
    accountId: number;
    userId?: string;
    customerAttribute?: CustomerAttribute;
}

export interface CustomerAccountApiAddAccountCardRequest {
    accountId: number;
    card?: Card;
}

export interface CustomerAccountApiAddAccountContactRequest {
    accountId: number;
    customerContact?: CustomerContact;
}

export interface CustomerAccountApiAddAccountContactListRequest {
    accountId: number;
    customerContact?: Array<CustomerContact>;
}

export interface CustomerAccountApiAddAccountNoteRequest {
    accountId: number;
    customerNote?: CustomerNote;
}

export interface CustomerAccountApiAddAccountsRequest {
    customerAccountAndAuthInfo?: Array<CustomerAccountAndAuthInfo>;
}

export interface CustomerAccountApiAddLoginToExistingCustomerRequest {
    accountId: number;
    customerLoginInfo?: CustomerLoginInfo;
}

export interface CustomerAccountApiAddTransactionRequest {
    accountId: number;
    transaction?: Transaction;
}

export interface CustomerAccountApiChangePasswordRequest {
    accountId: number;
    unlockAccount?: boolean;
    userId?: string;
    passwordInfo?: PasswordInfo;
}

export interface CustomerAccountApiChangePasswordsRequest {
    accountPasswordInfoCollection?: AccountPasswordInfoCollection;
}

export interface CustomerAccountApiCreateCustomerPurchaseOrderAccountRequest {
    accountId: number;
    customerPurchaseOrderAccount?: CustomerPurchaseOrderAccount;
}

export interface CustomerAccountApiCreatePurchaseOrderTransactionRequest {
    accountId: number;
    purchaseOrderTransaction?: PurchaseOrderTransaction;
}

export interface CustomerAccountApiDeleteAccountRequest {
    accountId: number;
}

export interface CustomerAccountApiDeleteAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    userId?: string;
}

export interface CustomerAccountApiDeleteAccountCardRequest {
    accountId: number;
    cardId: string;
}

export interface CustomerAccountApiDeleteAccountContactRequest {
    accountId: number;
    contactId: number;
}

export interface CustomerAccountApiDeleteAccountNoteRequest {
    accountId: number;
    noteId: number;
}

export interface CustomerAccountApiGetAccountRequest {
    accountId: number;
    responseGroups?: string;
    userId?: string;
}

export interface CustomerAccountApiGetAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    userId?: string;
}

export interface CustomerAccountApiGetAccountAttributesRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    userId?: string;
}

export interface CustomerAccountApiGetAccountAuditLogRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CustomerAccountApiGetAccountCardRequest {
    accountId: number;
    cardId: string;
}

export interface CustomerAccountApiGetAccountCardsRequest {
    accountId: number;
}

export interface CustomerAccountApiGetAccountContactRequest {
    accountId: number;
    contactId: number;
    userId?: string;
}

export interface CustomerAccountApiGetAccountContactsRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    userId?: string;
}

export interface CustomerAccountApiGetAccountNoteRequest {
    accountId: number;
    noteId: number;
}

export interface CustomerAccountApiGetAccountNotesRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CustomerAccountApiGetAccountSegmentsRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CustomerAccountApiGetAccountsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    fields?: string;
    q?: string;
    qLimit?: number;
    isAnonymous?: boolean;
    responseGroups?: string;
}

export interface CustomerAccountApiGetCurrentAccountRequest {
    responseGroups?: string;
}

export interface CustomerAccountApiGetCustomerPurchaseOrderAccountRequest {
    accountId: number;
}

export interface CustomerAccountApiGetCustomerPurchaseOrderTransactionsRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CustomerAccountApiGetCustomersPurchaseOrderAccountsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    accountType?: string;
}

export interface CustomerAccountApiGetLoginStateRequest {
    accountId: number;
    userId?: string;
}

export interface CustomerAccountApiGetLoginStateByEmailAddressRequest {
    emailAddress?: string;
    customerSetCode?: string;
}

export interface CustomerAccountApiGetLoginStateByUserNameRequest {
    userName?: string;
    customerSetCode?: string;
}

export interface CustomerAccountApiGetTransactionsRequest {
    accountId: number;
}

export interface CustomerAccountApiRecomputeCustomerLifetimeValueRequest {
    accountId: number;
}

export interface CustomerAccountApiRemoveTransactionRequest {
    accountId: number;
    transactionId: string;
}

export interface CustomerAccountApiResetPasswordRequest {
    resetPasswordInfo?: ResetPasswordInfo;
}

export interface CustomerAccountApiSetLoginLockedRequest {
    accountId: number;
    userId?: string;
    body?: boolean;
}

export interface CustomerAccountApiSetPasswordChangeRequiredRequest {
    accountId: number;
    userId?: string;
    body?: boolean;
}

export interface CustomerAccountApiUpdateAccountRequest {
    accountId: number;
    customerAccount?: CustomerAccount;
}

export interface CustomerAccountApiUpdateAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    userId?: string;
    customerAttribute?: CustomerAttribute;
}

export interface CustomerAccountApiUpdateAccountCardRequest {
    accountId: number;
    cardId: string;
    card?: Card;
}

export interface CustomerAccountApiUpdateAccountContactRequest {
    accountId: number;
    contactId: number;
    userId?: string;
    customerContact?: CustomerContact;
}

export interface CustomerAccountApiUpdateAccountNoteRequest {
    accountId: number;
    noteId: number;
    customerNote?: CustomerNote;
}

export interface CustomerAccountApiUpdateCustomerPurchaseOrderAccountRequest {
    accountId: number;
    customerPurchaseOrderAccount?: CustomerPurchaseOrderAccount;
}

export interface CustomerAccountApiUpdateForgottenPasswordRequest {
    confirmationInfo?: ConfirmationInfo;
}

/**
 * 
 */
export class CustomerAccountApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new customer account.
     * Add Account
     */


    async addAccountRaw(requestParameters: CustomerAccountApiAddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAccountToJSON(requestParameters.customerAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountFromJSON(jsonValue));
    }

    /**
     * Creates a new customer account.
     * Add Account
     */
    async addAccount(requestParameters: CustomerAccountApiAddAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.addAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a customer to the account.
     * Add Account And Login
     */


    async addAccountAndLoginRaw(requestParameters: CustomerAccountApiAddAccountAndLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/Add-Account-And-Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAccountAndAuthInfoToJSON(requestParameters.customerAccountAndAuthInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAuthTicketFromJSON(jsonValue));
    }

    /**
     * Adds a customer to the account.
     * Add Account And Login
     */
    async addAccountAndLogin(requestParameters: CustomerAccountApiAddAccountAndLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.addAccountAndLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new account attribute.
     * Add Account Attribute
     */


    async addAccountAttributeRaw(requestParameters: CustomerAccountApiAddAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAttributeToJSON(requestParameters.customerAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeFromJSON(jsonValue));
    }

    /**
     * Adds a new account attribute.
     * Add Account Attribute
     */
    async addAccountAttribute(requestParameters: CustomerAccountApiAddAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.addAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a card on the specific customer account.
     * Add Account Card
     */


    async addAccountCardRaw(requestParameters: CustomerAccountApiAddAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CardToJSON(requestParameters.card),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardFromJSON(jsonValue));
    }

    /**
     * Creates a card on the specific customer account.
     * Add Account Card
     */
    async addAccountCard(requestParameters: CustomerAccountApiAddAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.addAccountCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * Add Account Contact
     */


    async addAccountContactRaw(requestParameters: CustomerAccountApiAddAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerContactToJSON(requestParameters.customerContact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerContactFromJSON(jsonValue));
    }

    /**
     * Creates a new CustomerContact for a customer account, for example, a new shipping address.
     * Add Account Contact
     */
    async addAccountContact(requestParameters: CustomerAccountApiAddAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact> {
        const response = await this.addAccountContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * Add Account Contact List
     */


    async addAccountContactListRaw(requestParameters: CustomerAccountApiAddAccountContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContactCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountContactList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerContact.map(CustomerContactToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerContactCollectionFromJSON(jsonValue));
    }

    /**
     * Creates a new CustomerContacts for a customer account in bulk to support adding multiple contacts in a multi-ship scenario.
     * Add Account Contact List
     */
    async addAccountContactList(requestParameters: CustomerAccountApiAddAccountContactListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContactCollection> {
        const response = await this.addAccountContactListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new note to the specified customer account.
     * Add Account Note
     */


    async addAccountNoteRaw(requestParameters: CustomerAccountApiAddAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addAccountNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerNoteToJSON(requestParameters.customerNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerNoteFromJSON(jsonValue));
    }

    /**
     * Adds a new note to the specified customer account.
     * Add Account Note
     */
    async addAccountNote(requestParameters: CustomerAccountApiAddAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote> {
        const response = await this.addAccountNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * Add Accounts
     */


    async addAccountsRaw(requestParameters: CustomerAccountApiAddAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccountCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/Bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAccountAndAuthInfo.map(CustomerAccountAndAuthInfoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountCollectionFromJSON(jsonValue));
    }

    /**
     * Creates multiple new shopper accounts for a specified site. Allows you to create a number of new shopper accounts at one time.
     * Add Accounts
     */
    async addAccounts(requestParameters: CustomerAccountApiAddAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccountCollection> {
        const response = await this.addAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a login for an existing customer and logs them in automatically.
     * Add Login To Existing Customer
     */


    async addLoginToExistingCustomerRaw(requestParameters: CustomerAccountApiAddLoginToExistingCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addLoginToExistingCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Create-Login`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerLoginInfoToJSON(requestParameters.customerLoginInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAuthTicketFromJSON(jsonValue));
    }

    /**
     * Creates a login for an existing customer and logs them in automatically.
     * Add Login To Existing Customer
     */
    async addLoginToExistingCustomer(requestParameters: CustomerAccountApiAddLoginToExistingCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.addLoginToExistingCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a transaction on customer account.
     * Add Transaction
     */


    async addTransactionRaw(requestParameters: CustomerAccountApiAddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/transactions`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionToJSON(requestParameters.transaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFromJSON(jsonValue));
    }

    /**
     * Add a transaction on customer account.
     * Add Transaction
     */
    async addTransaction(requestParameters: CustomerAccountApiAddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction> {
        const response = await this.addTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes a shopper\'s password.
     * Change Password
     */


    async changePasswordRaw(requestParameters: CustomerAccountApiChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.unlockAccount !== undefined) {
            queryParameters['unlockAccount'] = requestParameters.unlockAccount;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Change-Password`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordInfoToJSON(requestParameters.passwordInfo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes a shopper\'s password.
     * Change Password
     */
    async changePassword(requestParameters: CustomerAccountApiChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Changes a collection of shopper passwords
     * Change Passwords
     */


    async changePasswordsRaw(requestParameters: CustomerAccountApiChangePasswordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangePasswordResultCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/Change-Passwords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountPasswordInfoCollectionToJSON(requestParameters.accountPasswordInfoCollection),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangePasswordResultCollectionFromJSON(jsonValue));
    }

    /**
     * Changes a collection of shopper passwords
     * Change Passwords
     */
    async changePasswords(requestParameters: CustomerAccountApiChangePasswordsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangePasswordResultCollection> {
        const response = await this.changePasswordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a customer\'s purchase order account.
     * Create Customer Purchase Order Account
     */


    async createCustomerPurchaseOrderAccountRaw(requestParameters: CustomerAccountApiCreateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createCustomerPurchaseOrderAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/purchaseOrderAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerPurchaseOrderAccountToJSON(requestParameters.customerPurchaseOrderAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPurchaseOrderAccountFromJSON(jsonValue));
    }

    /**
     * Creates a customer\'s purchase order account.
     * Create Customer Purchase Order Account
     */
    async createCustomerPurchaseOrderAccount(requestParameters: CustomerAccountApiCreateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount> {
        const response = await this.createCustomerPurchaseOrderAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a purchase order transaction log (for public api use).
     * Create Purchase Order Transaction
     */


    async createPurchaseOrderTransactionRaw(requestParameters: CustomerAccountApiCreatePurchaseOrderTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseOrderTransaction>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling createPurchaseOrderTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseOrderTransactionToJSON(requestParameters.purchaseOrderTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseOrderTransactionFromJSON(jsonValue));
    }

    /**
     * Creates a purchase order transaction log (for public api use).
     * Create Purchase Order Transaction
     */
    async createPurchaseOrderTransaction(requestParameters: CustomerAccountApiCreatePurchaseOrderTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseOrderTransaction> {
        const response = await this.createPurchaseOrderTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * Delete Account
     */


    async deleteAccountRaw(requestParameters: CustomerAccountApiDeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
     * Delete Account
     */
    async deleteAccount(requestParameters: CustomerAccountApiDeleteAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an account attribute specified by attributeFQN.
     * Delete Account Attribute
     */


    async deleteAccountAttributeRaw(requestParameters: CustomerAccountApiDeleteAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an account attribute specified by attributeFQN.
     * Delete Account Attribute
     */
    async deleteAccountAttribute(requestParameters: CustomerAccountApiDeleteAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a card from the specified customer account.
     * Delete Account Card
     */


    async deleteAccountCardRaw(requestParameters: CustomerAccountApiDeleteAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountCard.');
        }

        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling deleteAccountCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards/{cardId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a card from the specified customer account.
     * Delete Account Card
     */
    async deleteAccountCard(requestParameters: CustomerAccountApiDeleteAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountCardRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a CustomerContact for the specified customer account.
     * Delete Account Contact
     */


    async deleteAccountContactRaw(requestParameters: CustomerAccountApiDeleteAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountContact.');
        }

        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling deleteAccountContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts/{contactId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a CustomerContact for the specified customer account.
     * Delete Account Contact
     */
    async deleteAccountContact(requestParameters: CustomerAccountApiDeleteAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountContactRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a note from the specified customer account.
     * Delete Account Note
     */


    async deleteAccountNoteRaw(requestParameters: CustomerAccountApiDeleteAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAccountNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteAccountNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes/{noteId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a note from the specified customer account.
     * Delete Account Note
     */
    async deleteAccountNote(requestParameters: CustomerAccountApiDeleteAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAccountNoteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of a customer account specified by its unique identifier.
     * Get Account
     */


    async getAccountRaw(requestParameters: CustomerAccountApiGetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a customer account specified by its unique identifier.
     * Get Account
     */
    async getAccount(requestParameters: CustomerAccountApiGetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.getAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get Account Attribute
     */


    async getAccountAttributeRaw(requestParameters: CustomerAccountApiGetAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeFromJSON(jsonValue));
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get Account Attribute
     */
    async getAccountAttribute(requestParameters: CustomerAccountApiGetAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.getAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * Get Account Attributes
     */


    async getAccountAttributesRaw(requestParameters: CustomerAccountApiGetAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttributeCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a collection of account attributes according to any specified filter criteria and sort options.
     * Get Account Attributes
     */
    async getAccountAttributes(requestParameters: CustomerAccountApiGetAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttributeCollection> {
        const response = await this.getAccountAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     */


    async getAccountAuditLogRaw(requestParameters: CustomerAccountApiGetAccountAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuditEntryCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountAuditLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/AuditLog/Entries`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAuditEntryCollectionFromJSON(jsonValue));
    }

    /**
     * Get Account Audit Log
     * Get Account Audit Log
     */
    async getAccountAuditLog(requestParameters: CustomerAccountApiGetAccountAuditLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuditEntryCollection> {
        const response = await this.getAccountAuditLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a card for the specified customer account and card ID.
     * Get Account Card
     */


    async getAccountCardRaw(requestParameters: CustomerAccountApiGetAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountCard.');
        }

        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling getAccountCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards/{cardId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardFromJSON(jsonValue));
    }

    /**
     * Retrieves a card for the specified customer account and card ID.
     * Get Account Card
     */
    async getAccountCard(requestParameters: CustomerAccountApiGetAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.getAccountCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of cards for the specified customer account.
     * Get Account Cards
     */


    async getAccountCardsRaw(requestParameters: CustomerAccountApiGetAccountCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountCards.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of cards for the specified customer account.
     * Get Account Cards
     */
    async getAccountCards(requestParameters: CustomerAccountApiGetAccountCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardCollection> {
        const response = await this.getAccountCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * Get Account Contact
     */


    async getAccountContactRaw(requestParameters: CustomerAccountApiGetAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountContact.');
        }

        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling getAccountContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts/{contactId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerContactFromJSON(jsonValue));
    }

    /**
     * Retrieves the specified CustomerContact for a customer account, for example, a billing or shipping CustomerContact.
     * Get Account Contact
     */
    async getAccountContact(requestParameters: CustomerAccountApiGetAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact> {
        const response = await this.getAccountContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * Get Account Contacts
     */


    async getAccountContactsRaw(requestParameters: CustomerAccountApiGetAccountContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContactCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountContacts.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerContactCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
     * Get Account Contacts
     */
    async getAccountContacts(requestParameters: CustomerAccountApiGetAccountContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContactCollection> {
        const response = await this.getAccountContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the contents of a particular note attached to a specified customer account.
     * Get Account Note
     */


    async getAccountNoteRaw(requestParameters: CustomerAccountApiGetAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling getAccountNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes/{noteId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerNoteFromJSON(jsonValue));
    }

    /**
     * Retrieves the contents of a particular note attached to a specified customer account.
     * Get Account Note
     */
    async getAccountNote(requestParameters: CustomerAccountApiGetAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote> {
        const response = await this.getAccountNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * Get Account Notes
     */


    async getAccountNotesRaw(requestParameters: CustomerAccountApiGetAccountNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNoteCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountNotes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerNoteCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
     * Get Account Notes
     */
    async getAccountNotes(requestParameters: CustomerAccountApiGetAccountNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNoteCollection> {
        const response = await this.getAccountNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * Get Account Segments
     */


    async getAccountSegmentsRaw(requestParameters: CustomerAccountApiGetAccountSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegmentCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountSegments.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/segments`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSegmentCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of segments for the specified account according to any specified filter criteria and sort options.
     * Get Account Segments
     */
    async getAccountSegments(requestParameters: CustomerAccountApiGetAccountSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegmentCollection> {
        const response = await this.getAccountSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * Get Accounts
     */


    async getAccountsRaw(requestParameters: CustomerAccountApiGetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.isAnonymous !== undefined) {
            queryParameters['isAnonymous'] = requestParameters.isAnonymous;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of customer accounts according to any filter criteria and sort options.
     * Get Accounts
     */
    async getAccounts(requestParameters: CustomerAccountApiGetAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccountCollection> {
        const response = await this.getAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     */


    async getCurrentAccountRaw(requestParameters: CustomerAccountApiGetCurrentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a the current logged in customer account
     * Retrieves the details of a the current logged in customer account
     */
    async getCurrentAccount(requestParameters: CustomerAccountApiGetCurrentAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.getCurrentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a customer\'s purchase order account.
     * Gets a customer\'s purchase order account.
     */


    async getCustomerPurchaseOrderAccountRaw(requestParameters: CustomerAccountApiGetCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getCustomerPurchaseOrderAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/purchaseOrderAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPurchaseOrderAccountFromJSON(jsonValue));
    }

    /**
     * Gets a customer\'s purchase order account.
     * Gets a customer\'s purchase order account.
     */
    async getCustomerPurchaseOrderAccount(requestParameters: CustomerAccountApiGetCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount> {
        const response = await this.getCustomerPurchaseOrderAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * Get Customer Purchase Order Transactions
     */


    async getCustomerPurchaseOrderTransactionsRaw(requestParameters: CustomerAccountApiGetCustomerPurchaseOrderTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurchaseOrderTransactionCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getCustomerPurchaseOrderTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/PurchaseOrderTransaction`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurchaseOrderTransactionCollectionFromJSON(jsonValue));
    }

    /**
     * Gets a collection of Purchase order transaction logs associated with a customer account id.
     * Get Customer Purchase Order Transactions
     */
    async getCustomerPurchaseOrderTransactions(requestParameters: CustomerAccountApiGetCustomerPurchaseOrderTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurchaseOrderTransactionCollection> {
        const response = await this.getCustomerPurchaseOrderTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a collection of customer purchase order accounts.
     * Get Customers Purchase Order Accounts
     */


    async getCustomersPurchaseOrderAccountsRaw(requestParameters: CustomerAccountApiGetCustomersPurchaseOrderAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/purchaseOrderAccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPurchaseOrderAccountCollectionFromJSON(jsonValue));
    }

    /**
     * Gets a collection of customer purchase order accounts.
     * Get Customers Purchase Order Accounts
     */
    async getCustomersPurchaseOrderAccounts(requestParameters: CustomerAccountApiGetCustomersPurchaseOrderAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccountCollection> {
        const response = await this.getCustomersPurchaseOrderAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * Get Login State
     */


    async getLoginStateRaw(requestParameters: CustomerAccountApiGetLoginStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getLoginState.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/loginstate`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginStateFromJSON(jsonValue));
    }

    /**
     * Retrieves the log-in status details of a shopper specified by account Id and user Id.
     * Get Login State
     */
    async getLoginState(requestParameters: CustomerAccountApiGetLoginStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState> {
        const response = await this.getLoginStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * Get Login State By Email Address
     */


    async getLoginStateByEmailAddressRaw(requestParameters: CustomerAccountApiGetLoginStateByEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>> {
        const queryParameters: any = {};

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.customerSetCode !== undefined) {
            queryParameters['customerSetCode'] = requestParameters.customerSetCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/loginstatebyemailaddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginStateFromJSON(jsonValue));
    }

    /**
     * Retrieves the log-in status details of a shopper specified by emailAdress.
     * Get Login State By Email Address
     */
    async getLoginStateByEmailAddress(requestParameters: CustomerAccountApiGetLoginStateByEmailAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState> {
        const response = await this.getLoginStateByEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the log-in status details of a shopper specified by userName.
     * Get Login State By UserName
     */


    async getLoginStateByUserNameRaw(requestParameters: CustomerAccountApiGetLoginStateByUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginState>> {
        const queryParameters: any = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        if (requestParameters.customerSetCode !== undefined) {
            queryParameters['customerSetCode'] = requestParameters.customerSetCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/loginstatebyusername`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginStateFromJSON(jsonValue));
    }

    /**
     * Retrieves the log-in status details of a shopper specified by userName.
     * Get Login State By UserName
     */
    async getLoginStateByUserName(requestParameters: CustomerAccountApiGetLoginStateByUserNameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginState> {
        const response = await this.getLoginStateByUserNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of transactions on customer account.
     * Get Transactions
     */


    async getTransactionsRaw(requestParameters: CustomerAccountApiGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transaction>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getTransactions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/transactions`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionFromJSON));
    }

    /**
     * Gets the list of transactions on customer account.
     * Get Transactions
     */
    async getTransactions(requestParameters: CustomerAccountApiGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transaction>> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * Recompute Customer Lifetime Value
     */


    async recomputeCustomerLifetimeValueRaw(requestParameters: CustomerAccountApiRecomputeCustomerLifetimeValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling recomputeCustomerLifetimeValue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/recomputelifetimevalue`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Triggers event to recompute customer lifetime value.  The lifetime value may not immediately be recalculated, but enters a queue.
     * Recompute Customer Lifetime Value
     */
    async recomputeCustomerLifetimeValue(requestParameters: CustomerAccountApiRecomputeCustomerLifetimeValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.recomputeCustomerLifetimeValueRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a transaction on customer account.
     * Remove Transaction
     */


    async removeTransactionRaw(requestParameters: CustomerAccountApiRemoveTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeTransaction.');
        }

        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling removeTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/transactions/{transactionId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a transaction on customer account.
     * Remove Transaction
     */
    async removeTransaction(requestParameters: CustomerAccountApiRemoveTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTransactionRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the password for a shopper specified by username or emailAddress.
     * Reset Password
     */


    async resetPasswordRaw(requestParameters: CustomerAccountApiResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/Reset-Password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordInfoToJSON(requestParameters.resetPasswordInfo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the password for a shopper specified by username or emailAddress.
     * Reset Password
     */
    async resetPassword(requestParameters: CustomerAccountApiResetPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * Set Login Locked
     */


    async setLoginLockedRaw(requestParameters: CustomerAccountApiSetLoginLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling setLoginLocked.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Set-Login-Locked`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a flag indicating whether the customers login is locked or unlocked.
     * Set Login Locked
     */
    async setLoginLocked(requestParameters: CustomerAccountApiSetLoginLockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setLoginLockedRaw(requestParameters, initOverrides);
    }

    /**
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * Set Password Change Required
     */


    async setPasswordChangeRequiredRaw(requestParameters: CustomerAccountApiSetPasswordChangeRequiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling setPasswordChangeRequired.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/Set-Password-Change-Required`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a flag indicating whether the customers must change their password before logging in again.
     * Set Password Change Required
     */
    async setPasswordChangeRequired(requestParameters: CustomerAccountApiSetPasswordChangeRequiredRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setPasswordChangeRequiredRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * Update Account
     */


    async updateAccountRaw(requestParameters: CustomerAccountApiUpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAccountToJSON(requestParameters.customerAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAccountFromJSON(jsonValue));
    }

    /**
     * Modifies an existing customer account, for example, to change the primary billing contact or change whether to accept marketing material.
     * Update Account
     */
    async updateAccount(requestParameters: CustomerAccountApiUpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAccount> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing attribute for an account.
     * Update Account Attribute
     */


    async updateAccountAttributeRaw(requestParameters: CustomerAccountApiUpdateAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAttributeToJSON(requestParameters.customerAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeFromJSON(jsonValue));
    }

    /**
     * Modifies an existing attribute for an account.
     * Update Account Attribute
     */
    async updateAccountAttribute(requestParameters: CustomerAccountApiUpdateAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.updateAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a card on the specific customer account.
     * Update Account Card
     */


    async updateAccountCardRaw(requestParameters: CustomerAccountApiUpdateAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Card>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountCard.');
        }

        if (requestParameters.cardId === null || requestParameters.cardId === undefined) {
            throw new runtime.RequiredError('cardId','Required parameter requestParameters.cardId was null or undefined when calling updateAccountCard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/cards/{cardId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"cardId"}}`, encodeURIComponent(String(requestParameters.cardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CardToJSON(requestParameters.card),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardFromJSON(jsonValue));
    }

    /**
     * Updates a card on the specific customer account.
     * Update Account Card
     */
    async updateAccountCard(requestParameters: CustomerAccountApiUpdateAccountCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Card> {
        const response = await this.updateAccountCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * Update Account Contact
     */


    async updateAccountContactRaw(requestParameters: CustomerAccountApiUpdateAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerContact>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountContact.');
        }

        if (requestParameters.contactId === null || requestParameters.contactId === undefined) {
            throw new runtime.RequiredError('contactId','Required parameter requestParameters.contactId was null or undefined when calling updateAccountContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/contacts/{contactId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerContactToJSON(requestParameters.customerContact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerContactFromJSON(jsonValue));
    }

    /**
     * Updates a CustomerContact for a specified customer account, for example to update addresses or change which CustomerContact is the primary CustomerContact for billing.
     * Update Account Contact
     */
    async updateAccountContact(requestParameters: CustomerAccountApiUpdateAccountContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerContact> {
        const response = await this.updateAccountContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing note for a customer account.
     * Update Account Note
     */


    async updateAccountNoteRaw(requestParameters: CustomerAccountApiUpdateAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerNote>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccountNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateAccountNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/notes/{noteId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerNoteToJSON(requestParameters.customerNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerNoteFromJSON(jsonValue));
    }

    /**
     * Modifies an existing note for a customer account.
     * Update Account Note
     */
    async updateAccountNote(requestParameters: CustomerAccountApiUpdateAccountNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerNote> {
        const response = await this.updateAccountNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a customer\'s purchase order account.
     * Update Customer Purchase Order Account
     */


    async updateCustomerPurchaseOrderAccountRaw(requestParameters: CustomerAccountApiUpdateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerPurchaseOrderAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateCustomerPurchaseOrderAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/{accountId}/purchaseOrderAccount`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerPurchaseOrderAccountToJSON(requestParameters.customerPurchaseOrderAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerPurchaseOrderAccountFromJSON(jsonValue));
    }

    /**
     * Updates a customer\'s purchase order account.
     * Update Customer Purchase Order Account
     */
    async updateCustomerPurchaseOrderAccount(requestParameters: CustomerAccountApiUpdateCustomerPurchaseOrderAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerPurchaseOrderAccount> {
        const response = await this.updateCustomerPurchaseOrderAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * Update Forgotten Password
     */


    async updateForgottenPasswordRaw(requestParameters: CustomerAccountApiUpdateForgottenPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/accounts/Update-Forgotten-Password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmationInfoToJSON(requestParameters.confirmationInfo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the password for a shopper who has requested a password change and provided the new password and confirmation code.
     * Update Forgotten Password
     */
    async updateForgottenPassword(requestParameters: CustomerAccountApiUpdateForgottenPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateForgottenPasswordRaw(requestParameters, initOverrides);
    }

}
