/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CustomerSet,
  CustomerSetCollection,
} from '../models';
import {
    CustomerSetFromJSON,
    CustomerSetToJSON,
    CustomerSetCollectionFromJSON,
    CustomerSetCollectionToJSON,
} from '../models';

export interface CustomerSetApiGetCustomerSetRequest {
    code: string;
}

export interface CustomerSetApiGetCustomerSetsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    responseGroups?: string;
}

/**
 * 
 */
export class CustomerSetApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves the name of a customer group specified the customer group ID.
     * Get Customer Set
     */


    async getCustomerSetRaw(requestParameters: CustomerSetApiGetCustomerSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSet>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCustomerSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/customerSets/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSetFromJSON(jsonValue));
    }

    /**
     * Retrieves the name of a customer group specified the customer group ID.
     * Get Customer Set
     */
    async getCustomerSet(requestParameters: CustomerSetApiGetCustomerSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSet> {
        const response = await this.getCustomerSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all customerSets defined for the site according to any specified filter criteria and sort options.
     * Get Customer Sets
     */


    async getCustomerSetsRaw(requestParameters: CustomerSetApiGetCustomerSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSetCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/customerSets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSetCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all customerSets defined for the site according to any specified filter criteria and sort options.
     * Get Customer Sets
     */
    async getCustomerSets(requestParameters: CustomerSetApiGetCustomerSetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSetCollection> {
        const response = await this.getCustomerSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
