/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CreditAuditEntryCollection,
  CreditCollection,
  CreditTransaction,
  CreditTransactionCollection,
  CustomerCredit,
} from '../models';


export namespace creditApiParams { 
    export interface AddCreditRequest {
        userId?: string;
        responseFields?: string;
        customerCredit?: CustomerCredit;
    }
    export interface AddTransactionRequest {
        code: string;
        responseFields?: string;
        creditTransaction?: CreditTransaction;
    }
    export interface AssociateCreditToShopperRequest {
        code: string;
        responseFields?: string;
    }
    export interface DeleteCreditRequest {
        code: string;
    }
    export interface GetAuditEntriesRequest {
        code: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface GetCreditRequest {
        code: string;
        responseFields?: string;
    }
    export interface GetCreditsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface GetTransactionsRequest {
        code: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface ResendCreditCreatedEmailRequest {
        code: string;
        userId?: string;
        responseFields?: string;
    }
    export interface UpdateCreditRequest {
        code: string;
        responseFields?: string;
        customerCredit?: CustomerCredit;
    }
}
/**
* CreditApiService - interface
* 
* @export
* @interface CreditApi
*/
export interface CreditApiService {
    /**
    * Adds credit to user account.
    * @summary Add Credit
    * @param {string} [userId] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CustomerCredit} [customerCredit] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    addCreditRaw(requestParameters: creditApiParams.AddCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>>;

    /**
    * Adds credit to user account.
    * Add Credit
    */
    addCredit(requestParameters: creditApiParams.AddCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit>;

    /**
    * Adds a credit transaction.
    * @summary Add Transaction
    * @param {string} code 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CreditTransaction} [creditTransaction] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    addTransactionRaw(requestParameters: creditApiParams.AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditTransaction>>;

    /**
    * Adds a credit transaction.
    * Add Transaction
    */
    addTransaction(requestParameters: creditApiParams.AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditTransaction>;

    /**
    * Maps credit to the shopper.
    * @summary Associate Credit To Shopper
    * @param {string} code 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    associateCreditToShopperRaw(requestParameters: creditApiParams.AssociateCreditToShopperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>>;

    /**
    * Maps credit to the shopper.
    * Associate Credit To Shopper
    */
    associateCreditToShopper(requestParameters: creditApiParams.AssociateCreditToShopperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit>;

    /**
    * Deletes a credit.
    * @summary Delete credit
    * @param {string} code 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    deleteCreditRaw(requestParameters: creditApiParams.DeleteCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes a credit.
    * Delete credit
    */
    deleteCredit(requestParameters: creditApiParams.DeleteCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Retrieves a list of audit entries according to any filter criteria and sort options.
    * @summary Get Audit Entries
    * @param {string} code 
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    getAuditEntriesRaw(requestParameters: creditApiParams.GetAuditEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditAuditEntryCollection>>;

    /**
    * Retrieves a list of audit entries according to any filter criteria and sort options.
    * Get Audit Entries
    */
    getAuditEntries(requestParameters: creditApiParams.GetAuditEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditAuditEntryCollection>;

    /**
    * Get credit specified by code.
    * @summary Get credit
    * @param {string} code 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    getCreditRaw(requestParameters: creditApiParams.GetCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>>;

    /**
    * Get credit specified by code.
    * Get credit
    */
    getCredit(requestParameters: creditApiParams.GetCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit>;

    /**
    * Retrieves a list of credit collection according to any filter criteria and sort options.
    * @summary Get Credits
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    getCreditsRaw(requestParameters: creditApiParams.GetCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCollection>>;

    /**
    * Retrieves a list of credit collection according to any filter criteria and sort options.
    * Get Credits
    */
    getCredits(requestParameters: creditApiParams.GetCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCollection>;

    /**
    * Gets credit transactions according to any filter criteria and sort options.
    * @summary Get Transactions
    * @param {string} code 
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    getTransactionsRaw(requestParameters: creditApiParams.GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditTransactionCollection>>;

    /**
    * Gets credit transactions according to any filter criteria and sort options.
    * Get Transactions
    */
    getTransactions(requestParameters: creditApiParams.GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditTransactionCollection>;

    /**
    * Resend email when credit is created.
    * @summary Resend Credit Created Email
    * @param {string} code 
    * @param {string} [userId] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    resendCreditCreatedEmailRaw(requestParameters: creditApiParams.ResendCreditCreatedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Resend email when credit is created.
    * Resend Credit Created Email
    */
    resendCreditCreatedEmail(requestParameters: creditApiParams.ResendCreditCreatedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Updates a credit specified by a credit code.
    * @summary Update Credit
    * @param {string} code 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CustomerCredit} [customerCredit] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CreditApiInterface
    */
    updateCreditRaw(requestParameters: creditApiParams.UpdateCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>>;

    /**
    * Updates a credit specified by a credit code.
    * Update Credit
    */
    updateCredit(requestParameters: creditApiParams.UpdateCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit>;

}


/**
 * 
 */
export class CreditApi extends runtime.BaseAPI implements CreditApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds credit to user account.
     * Add Credit
     */


    async addCreditRaw(requestParameters: creditApiParams.AddCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerCredit,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds credit to user account.
     * Add Credit
     */
    async addCredit(requestParameters: creditApiParams.AddCreditRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit> {
        const response = await this.addCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a credit transaction.
     * Add Transaction
     */


    async addTransactionRaw(requestParameters: creditApiParams.AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditTransaction>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling addTransaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/transactions`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.creditTransaction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a credit transaction.
     * Add Transaction
     */
    async addTransaction(requestParameters: creditApiParams.AddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditTransaction> {
        const response = await this.addTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Maps credit to the shopper.
     * Associate Credit To Shopper
     */


    async associateCreditToShopperRaw(requestParameters: creditApiParams.AssociateCreditToShopperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling associateCreditToShopper.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/associate-to-shopper`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Maps credit to the shopper.
     * Associate Credit To Shopper
     */
    async associateCreditToShopper(requestParameters: creditApiParams.AssociateCreditToShopperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit> {
        const response = await this.associateCreditToShopperRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a credit.
     * Delete credit
     */


    async deleteCreditRaw(requestParameters: creditApiParams.DeleteCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteCredit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a credit.
     * Delete credit
     */
    async deleteCredit(requestParameters: creditApiParams.DeleteCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCreditRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of audit entries according to any filter criteria and sort options.
     * Get Audit Entries
     */


    async getAuditEntriesRaw(requestParameters: creditApiParams.GetAuditEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditAuditEntryCollection>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getAuditEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/auditentries`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of audit entries according to any filter criteria and sort options.
     * Get Audit Entries
     */
    async getAuditEntries(requestParameters: creditApiParams.GetAuditEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditAuditEntryCollection> {
        const response = await this.getAuditEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get credit specified by code.
     * Get credit
     */


    async getCreditRaw(requestParameters: creditApiParams.GetCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCredit.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get credit specified by code.
     * Get credit
     */
    async getCredit(requestParameters: creditApiParams.GetCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit> {
        const response = await this.getCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of credit collection according to any filter criteria and sort options.
     * Get Credits
     */


    async getCreditsRaw(requestParameters: creditApiParams.GetCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of credit collection according to any filter criteria and sort options.
     * Get Credits
     */
    async getCredits(requestParameters: creditApiParams.GetCreditsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCollection> {
        const response = await this.getCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets credit transactions according to any filter criteria and sort options.
     * Get Transactions
     */


    async getTransactionsRaw(requestParameters: creditApiParams.GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditTransactionCollection>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/transactions`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets credit transactions according to any filter criteria and sort options.
     * Get Transactions
     */
    async getTransactions(requestParameters: creditApiParams.GetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditTransactionCollection> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend email when credit is created.
     * Resend Credit Created Email
     */


    async resendCreditCreatedEmailRaw(requestParameters: creditApiParams.ResendCreditCreatedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling resendCreditCreatedEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/Resend-Email`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend email when credit is created.
     * Resend Credit Created Email
     */
    async resendCreditCreatedEmail(requestParameters: creditApiParams.ResendCreditCreatedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendCreditCreatedEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a credit specified by a credit code.
     * Update Credit
     */


    async updateCreditRaw(requestParameters: creditApiParams.UpdateCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerCredit>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateCredit.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/credits/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerCredit,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a credit specified by a credit code.
     * Update Credit
     */
    async updateCredit(requestParameters: creditApiParams.UpdateCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerCredit> {
        const response = await this.updateCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
