/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Credit,
  CreditAuditEntryCollection,
  CreditCollection,
  CreditTransaction,
  CreditTransactionCollection,
} from '../models';
import {
    CreditFromJSON,
    CreditToJSON,
    CreditAuditEntryCollectionFromJSON,
    CreditAuditEntryCollectionToJSON,
    CreditCollectionFromJSON,
    CreditCollectionToJSON,
    CreditTransactionFromJSON,
    CreditTransactionToJSON,
    CreditTransactionCollectionFromJSON,
    CreditTransactionCollectionToJSON,
} from '../models';

export interface CreditApiAddCreditRequest {
    userId?: string;
    credit?: Credit;
}

export interface CreditApiAddTransactionRequest {
    code: string;
    creditTransaction?: CreditTransaction;
}

export interface CreditApiAssociateCreditToShopperRequest {
    code: string;
}

export interface CreditApiDeleteCreditRequest {
    code: string;
}

export interface CreditApiGetAuditEntriesRequest {
    code: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CreditApiGetCreditRequest {
    code: string;
}

export interface CreditApiGetCreditsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CreditApiGetTransactionsRequest {
    code: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CreditApiResendCreditCreatedEmailRequest {
    code: string;
    userId?: string;
}

export interface CreditApiUpdateCreditRequest {
    code: string;
    credit?: Credit;
}

/**
 * 
 */
export class CreditApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds credit to user account.
     * Add Credit
     */


    async addCreditRaw(requestParameters: CreditApiAddCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credit>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditToJSON(requestParameters.credit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditFromJSON(jsonValue));
    }

    /**
     * Adds credit to user account.
     * Add Credit
     */
    async addCredit(requestParameters: CreditApiAddCreditRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credit> {
        const response = await this.addCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a credit transaction.
     * Add Transaction
     */


    async addTransactionRaw(requestParameters: CreditApiAddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditTransaction>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling addTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/transactions`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditTransactionToJSON(requestParameters.creditTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditTransactionFromJSON(jsonValue));
    }

    /**
     * Adds a credit transaction.
     * Add Transaction
     */
    async addTransaction(requestParameters: CreditApiAddTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditTransaction> {
        const response = await this.addTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Maps credit to the shopper.
     * Associate Credit To Shopper
     */


    async associateCreditToShopperRaw(requestParameters: CreditApiAssociateCreditToShopperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credit>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling associateCreditToShopper.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/associate-to-shopper`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditFromJSON(jsonValue));
    }

    /**
     * Maps credit to the shopper.
     * Associate Credit To Shopper
     */
    async associateCreditToShopper(requestParameters: CreditApiAssociateCreditToShopperRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credit> {
        const response = await this.associateCreditToShopperRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a credit.
     * Delete credit
     */


    async deleteCreditRaw(requestParameters: CreditApiDeleteCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteCredit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a credit.
     * Delete credit
     */
    async deleteCredit(requestParameters: CreditApiDeleteCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCreditRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of audit entries according to any filter criteria and sort options.
     * Get Audit Entries
     */


    async getAuditEntriesRaw(requestParameters: CreditApiGetAuditEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditAuditEntryCollection>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getAuditEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/auditentries`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditAuditEntryCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of audit entries according to any filter criteria and sort options.
     * Get Audit Entries
     */
    async getAuditEntries(requestParameters: CreditApiGetAuditEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditAuditEntryCollection> {
        const response = await this.getAuditEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get credit specified by code.
     * Get credit
     */


    async getCreditRaw(requestParameters: CreditApiGetCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credit>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCredit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditFromJSON(jsonValue));
    }

    /**
     * Get credit specified by code.
     * Get credit
     */
    async getCredit(requestParameters: CreditApiGetCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credit> {
        const response = await this.getCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of credit collection according to any filter criteria and sort options.
     * Get Credits
     */


    async getCreditsRaw(requestParameters: CreditApiGetCreditsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of credit collection according to any filter criteria and sort options.
     * Get Credits
     */
    async getCredits(requestParameters: CreditApiGetCreditsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCollection> {
        const response = await this.getCreditsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets credit transactions according to any filter criteria and sort options.
     * Get Transactions
     */


    async getTransactionsRaw(requestParameters: CreditApiGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditTransactionCollection>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getTransactions.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/transactions`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditTransactionCollectionFromJSON(jsonValue));
    }

    /**
     * Gets credit transactions according to any filter criteria and sort options.
     * Get Transactions
     */
    async getTransactions(requestParameters: CreditApiGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditTransactionCollection> {
        const response = await this.getTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend email when credit is created.
     * Resend Credit Created Email
     */


    async resendCreditCreatedEmailRaw(requestParameters: CreditApiResendCreditCreatedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling resendCreditCreatedEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}/Resend-Email`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend email when credit is created.
     * Resend Credit Created Email
     */
    async resendCreditCreatedEmail(requestParameters: CreditApiResendCreditCreatedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendCreditCreatedEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a credit specified by a credit code.
     * Update Credit
     */


    async updateCreditRaw(requestParameters: CreditApiUpdateCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credit>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateCredit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/credits/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreditToJSON(requestParameters.credit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditFromJSON(jsonValue));
    }

    /**
     * Updates a credit specified by a credit code.
     * Update Credit
     */
    async updateCredit(requestParameters: CreditApiUpdateCreditRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credit> {
        const response = await this.updateCreditRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
