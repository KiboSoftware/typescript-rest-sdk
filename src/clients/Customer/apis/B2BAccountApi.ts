/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  B2BAccount,
  B2BAccountCollection,
  B2BAccountHierarchyResult,
  B2BUser,
  B2BUserAndAuthInfo,
  B2BUserCollection,
  CustomerAttribute,
  CustomerAttributeCollection,
  UpgradeToB2BAccountResponse,
  UserRoleCollection,
} from '../models';
import {
    B2BAccountFromJSON,
    B2BAccountToJSON,
    B2BAccountCollectionFromJSON,
    B2BAccountCollectionToJSON,
    B2BAccountHierarchyResultFromJSON,
    B2BAccountHierarchyResultToJSON,
    B2BUserFromJSON,
    B2BUserToJSON,
    B2BUserAndAuthInfoFromJSON,
    B2BUserAndAuthInfoToJSON,
    B2BUserCollectionFromJSON,
    B2BUserCollectionToJSON,
    CustomerAttributeFromJSON,
    CustomerAttributeToJSON,
    CustomerAttributeCollectionFromJSON,
    CustomerAttributeCollectionToJSON,
    UpgradeToB2BAccountResponseFromJSON,
    UpgradeToB2BAccountResponseToJSON,
    UserRoleCollectionFromJSON,
    UserRoleCollectionToJSON,
} from '../models';

export interface B2BAccountApiAddAccountRequest {
    b2BAccount?: B2BAccount;
}

export interface B2BAccountApiAddB2BAccountAttributeRequest {
    accountId: number;
    customerAttribute?: CustomerAttribute;
}

export interface B2BAccountApiAddSalesRepToB2BAccountRequest {
    accountId: number;
    userId: string;
}

export interface B2BAccountApiAddSalesRepsToB2BAccountRequest {
    accountId: number;
    requestBody?: Array<string>;
}

export interface B2BAccountApiAddUserRequest {
    accountId: number;
    b2BUserAndAuthInfo?: B2BUserAndAuthInfo;
}

export interface B2BAccountApiAddUserRoleAsyncRequest {
    accountId: number;
    userId: string;
    roleId: number;
}

export interface B2BAccountApiChangeParentAccountRequest {
    accountId: number;
    parentAccountId: number;
}

export interface B2BAccountApiDeleteB2BAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
}

export interface B2BAccountApiGetAccountsForSalesRepRequest {
    userId: string;
}

export interface B2BAccountApiGetB2BAccountRequest {
    accountId: number;
    responseGroups?: string;
}

export interface B2BAccountApiGetB2BAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
}

export interface B2BAccountApiGetB2BAccountAttributesRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface B2BAccountApiGetB2BAccountHierarchyRequest {
    accountId: number;
    responseGroups?: string;
}

export interface B2BAccountApiGetB2BAccountsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    fields?: string;
    q?: string;
    qLimit?: number;
    responseGroups?: string;
}

export interface B2BAccountApiGetUserRolesAsyncRequest {
    accountId: number;
    userId: string;
}

export interface B2BAccountApiGetUsersAsyncRequest {
    accountId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
    responseGroups?: string;
}

export interface B2BAccountApiRemoveSalesRepFromB2BAccountRequest {
    accountId: number;
    userId: string;
}

export interface B2BAccountApiRemoveUserRequest {
    accountId: number;
    userId: string;
}

export interface B2BAccountApiRemoveUserRoleAsyncRequest {
    accountId: number;
    userId: string;
    roleId: number;
}

export interface B2BAccountApiUpdateAccountRequest {
    accountId: number;
    b2BAccount?: B2BAccount;
}

export interface B2BAccountApiUpdateB2BAccountAttributeRequest {
    accountId: number;
    attributeFQN: string;
    customerAttribute?: CustomerAttribute;
}

export interface B2BAccountApiUpdateB2BAccountStatusRequest {
    accountId: number;
    actionName: string;
}

export interface B2BAccountApiUpdateSalesRepsOnB2BAccountRequest {
    accountId: number;
    requestBody?: Array<string>;
}

export interface B2BAccountApiUpdateUserRequest {
    accountId: number;
    userId: string;
    b2BUser?: B2BUser;
}

export interface B2BAccountApiUpgradeAccountsToB2BRequest {
    requestBody?: Array<number>;
}

/**
 * 
 */
export class B2BAccountApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new B2B account.
     * Add Account
     */


    async addAccountRaw(requestParameters: B2BAccountApiAddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: B2BAccountToJSON(requestParameters.b2BAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Creates a new B2B account.
     * Add Account
     */
    async addAccount(requestParameters: B2BAccountApiAddAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.addAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a customer attribute to the B2B account.
     * Add B2B Account tAttribute
     */


    async addB2BAccountAttributeRaw(requestParameters: B2BAccountApiAddB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAttributeToJSON(requestParameters.customerAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeFromJSON(jsonValue));
    }

    /**
     * Add a customer attribute to the B2B account.
     * Add B2B Account tAttribute
     */
    async addB2BAccountAttribute(requestParameters: B2BAccountApiAddB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.addB2BAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Sales Rep To B2B Account
     * Add Sales Rep To B2B Account
     */


    async addSalesRepToB2BAccountRaw(requestParameters: B2BAccountApiAddSalesRepToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addSalesRepToB2BAccount.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addSalesRepToB2BAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/salesrep/{userId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Add Sales Rep To B2B Account
     * Add Sales Rep To B2B Account
     */
    async addSalesRepToB2BAccount(requestParameters: B2BAccountApiAddSalesRepToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.addSalesRepToB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds lists of sales reps to a B2B account.
     * Add Sales Reps To B2B Account
     */


    async addSalesRepsToB2BAccountRaw(requestParameters: B2BAccountApiAddSalesRepsToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addSalesRepsToB2BAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/addsalesreps`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Adds lists of sales reps to a B2B account.
     * Add Sales Reps To B2B Account
     */
    async addSalesRepsToB2BAccount(requestParameters: B2BAccountApiAddSalesRepsToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.addSalesRepsToB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds user to B2B account.
     * Add User
     */


    async addUserRaw(requestParameters: B2BAccountApiAddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUser>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: B2BUserAndAuthInfoToJSON(requestParameters.b2BUserAndAuthInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BUserFromJSON(jsonValue));
    }

    /**
     * Adds user to B2B account.
     * Add User
     */
    async addUser(requestParameters: B2BAccountApiAddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUser> {
        const response = await this.addUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a role to B2B user.
     * Add User Role Async
     */


    async addUserRoleAsyncRaw(requestParameters: B2BAccountApiAddUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addUserRoleAsync.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserRoleAsync.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addUserRoleAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a role to B2B user.
     * Add User Role Async
     */
    async addUserRoleAsync(requestParameters: B2BAccountApiAddUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserRoleAsyncRaw(requestParameters, initOverrides);
    }

    /**
     * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
     * Change Parent Account
     */


    async changeParentAccountRaw(requestParameters: B2BAccountApiChangeParentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling changeParentAccount.');
        }

        if (requestParameters.parentAccountId === null || requestParameters.parentAccountId === undefined) {
            throw new runtime.RequiredError('parentAccountId','Required parameter requestParameters.parentAccountId was null or undefined when calling changeParentAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/changeparent/{parentAccountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"parentAccountId"}}`, encodeURIComponent(String(requestParameters.parentAccountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
     * Change Parent Account
     */
    async changeParentAccount(requestParameters: B2BAccountApiChangeParentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.changeParentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific customer attribute specified by attributeFQN.
     * Delete B2B Account Attribute
     */


    async deleteB2BAccountAttributeRaw(requestParameters: B2BAccountApiDeleteB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteB2BAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific customer attribute specified by attributeFQN.
     * Delete B2B Account Attribute
     */
    async deleteB2BAccountAttribute(requestParameters: B2BAccountApiDeleteB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteB2BAccountAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets list of accounts for the B2B sales rep account.
     * Get Accounts For Sales Rep
     */


    async getAccountsForSalesRepRaw(requestParameters: B2BAccountApiGetAccountsForSalesRepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getAccountsForSalesRep.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/salesrep/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets list of accounts for the B2B sales rep account.
     * Get Accounts For Sales Rep
     */
    async getAccountsForSalesRep(requestParameters: B2BAccountApiGetAccountsForSalesRepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAccountsForSalesRepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a B2B account specified by its unique identifier.
     * Get B2B Account
     */


    async getB2BAccountRaw(requestParameters: B2BAccountApiGetB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a B2B account specified by its unique identifier.
     * Get B2B Account
     */
    async getB2BAccount(requestParameters: B2BAccountApiGetB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.getB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get B2B Account Attribute
     */


    async getB2BAccountAttributeRaw(requestParameters: B2BAccountApiGetB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeFromJSON(jsonValue));
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get B2B Account Attribute
     */
    async getB2BAccountAttribute(requestParameters: B2BAccountApiGetB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.getB2BAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
     * Get B2B Account Attributes
     */


    async getB2BAccountAttributesRaw(requestParameters: B2BAccountApiGetB2BAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttributeCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccountAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
     * Get B2B Account Attributes
     */
    async getB2BAccountAttributes(requestParameters: B2BAccountApiGetB2BAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttributeCollection> {
        const response = await this.getB2BAccountAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
     * Get B2B Account Hierarchy
     */


    async getB2BAccountHierarchyRaw(requestParameters: B2BAccountApiGetB2BAccountHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccountHierarchyResult>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccountHierarchy.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/hierarchy`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountHierarchyResultFromJSON(jsonValue));
    }

    /**
     * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
     * Get B2B Account Hierarchy
     */
    async getB2BAccountHierarchy(requestParameters: B2BAccountApiGetB2BAccountHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccountHierarchyResult> {
        const response = await this.getB2BAccountHierarchyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of B2B accounts according to any filter criteria and sort options.
     * Get B2B Accounts
     */


    async getB2BAccountsRaw(requestParameters: B2BAccountApiGetB2BAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of B2B accounts according to any filter criteria and sort options.
     * Get B2B Accounts
     */
    async getB2BAccounts(requestParameters: B2BAccountApiGetB2BAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccountCollection> {
        const response = await this.getB2BAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the roles for a specified user of a b2b account.
     * Get User Roles Async
     */


    async getUserRolesAsyncRaw(requestParameters: B2BAccountApiGetUserRolesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getUserRolesAsync.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserRolesAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves all the roles for a specified user of a b2b account.
     * Get User Roles Async
     */
    async getUserRolesAsync(requestParameters: B2BAccountApiGetUserRolesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleCollection> {
        const response = await this.getUserRolesAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
     * Get Users Async
     */


    async getUsersAsyncRaw(requestParameters: B2BAccountApiGetUsersAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUserCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getUsersAsync.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/users`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BUserCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
     * Get Users Async
     */
    async getUsersAsync(requestParameters: B2BAccountApiGetUsersAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUserCollection> {
        const response = await this.getUsersAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a specific sales rep from B2B account .
     * Remove Sales Rep From B2B Account
     */


    async removeSalesRepFromB2BAccountRaw(requestParameters: B2BAccountApiRemoveSalesRepFromB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeSalesRepFromB2BAccount.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeSalesRepFromB2BAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/salesrep/{userId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Removes a specific sales rep from B2B account .
     * Remove Sales Rep From B2B Account
     */
    async removeSalesRepFromB2BAccount(requestParameters: B2BAccountApiRemoveSalesRepFromB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.removeSalesRepFromB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a B2B user from an account.
     * Remove User
     */


    async removeUserRaw(requestParameters: B2BAccountApiRemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/remove`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a B2B user from an account.
     * Remove User
     */
    async removeUser(requestParameters: B2BAccountApiRemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a role from the specified user.
     * Remove User Role Async
     */


    async removeUserRoleAsyncRaw(requestParameters: B2BAccountApiRemoveUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeUserRoleAsync.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserRoleAsync.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeUserRoleAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a role from the specified user.
     * Remove User Role Async
     */
    async removeUserRoleAsync(requestParameters: B2BAccountApiRemoveUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserRoleAsyncRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies an existing B2B account.
     * Update Account
     */


    async updateAccountRaw(requestParameters: B2BAccountApiUpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: B2BAccountToJSON(requestParameters.b2BAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Modifies an existing B2B account.
     * Update Account
     */
    async updateAccount(requestParameters: B2BAccountApiUpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing attribute for a b2b account.
     * Update B2B Account Attribute
     */


    async updateB2BAccountAttributeRaw(requestParameters: B2BAccountApiUpdateB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateB2BAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAttributeToJSON(requestParameters.customerAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeFromJSON(jsonValue));
    }

    /**
     * Modifies an existing attribute for a b2b account.
     * Update B2B Account Attribute
     */
    async updateB2BAccountAttribute(requestParameters: B2BAccountApiUpdateB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.updateB2BAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status on B2B account.
     * Update B2B Account Status
     */


    async updateB2BAccountStatusRaw(requestParameters: B2BAccountApiUpdateB2BAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateB2BAccountStatus.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling updateB2BAccountStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/status/{actionName}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"actionName"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Updates the status on B2B account.
     * Update B2B Account Status
     */
    async updateB2BAccountStatus(requestParameters: B2BAccountApiUpdateB2BAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.updateB2BAccountStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates list of  sales reps on a B2B account.
     * Update Sales Reps On B2B Account
     */


    async updateSalesRepsOnB2BAccountRaw(requestParameters: B2BAccountApiUpdateSalesRepsOnB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateSalesRepsOnB2BAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/salesrep`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BAccountFromJSON(jsonValue));
    }

    /**
     * Updates list of  sales reps on a B2B account.
     * Update Sales Reps On B2B Account
     */
    async updateSalesRepsOnB2BAccount(requestParameters: B2BAccountApiUpdateSalesRepsOnB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.updateSalesRepsOnB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a B2B user specified by user Id.
     * Update User
     */


    async updateUserRaw(requestParameters: B2BAccountApiUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUser>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: B2BUserToJSON(requestParameters.b2BUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => B2BUserFromJSON(jsonValue));
    }

    /**
     * Updates a B2B user specified by user Id.
     * Update User
     */
    async updateUser(requestParameters: B2BAccountApiUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUser> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upgrades bulk B2C accounts to B2B
     * Upgrade B2C Accounts To B2B
     */


    async upgradeAccountsToB2BRaw(requestParameters: B2BAccountApiUpgradeAccountsToB2BRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpgradeToB2BAccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/upgradeaccounts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpgradeToB2BAccountResponseFromJSON(jsonValue));
    }

    /**
     * Upgrades bulk B2C accounts to B2B
     * Upgrade B2C Accounts To B2B
     */
    async upgradeAccountsToB2B(requestParameters: B2BAccountApiUpgradeAccountsToB2BRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpgradeToB2BAccountResponse> {
        const response = await this.upgradeAccountsToB2BRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
