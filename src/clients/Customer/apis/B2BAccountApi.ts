/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  B2BAccount,
  B2BAccountCollection,
  B2BAccountHierarchyResult,
  B2BUser,
  B2BUserAndAuthInfo,
  B2BUserCollection,
  CustomerAttribute,
  CustomerAttributeCollection,
  CustomerUserRoleCollection,
  UpgradeToB2BAccountResponse,
} from '../models';


export namespace b2BAccountApiParams { 
    export interface AddAccountRequest {
        responseFields?: string;
        b2BAccount?: B2BAccount;
    }
    export interface AddB2BAccountAttributeRequest {
        accountId: number;
        responseFields?: string;
        customerAttribute?: CustomerAttribute;
    }
    export interface AddSalesRepToB2BAccountRequest {
        accountId: number;
        userId: string;
        responseFields?: string;
    }
    export interface AddSalesRepsToB2BAccountRequest {
        accountId: number;
        responseFields?: string;
        requestBody?: Array<string>;
    }
    export interface AddUserRequest {
        accountId: number;
        responseFields?: string;
        b2BUserAndAuthInfo?: B2BUserAndAuthInfo;
    }
    export interface AddUserRoleAsyncRequest {
        accountId: number;
        userId: string;
        roleId: number;
        responseFields?: string;
    }
    export interface ChangeParentAccountRequest {
        accountId: number;
        parentAccountId: number;
        responseFields?: string;
    }
    export interface DeleteB2BAccountAttributeRequest {
        accountId: number;
        attributeFQN: string;
    }
    export interface GetAccountsForSalesRepRequest {
        userId: string;
        responseFields?: string;
    }
    export interface GetB2BAccountRequest {
        accountId: number;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetB2BAccountAttributeRequest {
        accountId: number;
        attributeFQN: string;
        responseFields?: string;
    }
    export interface GetB2BAccountAttributesRequest {
        accountId: number;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface GetB2BAccountHierarchyRequest {
        accountId: number;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetB2BAccountsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        fields?: string;
        q?: string;
        qLimit?: number;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetUserRolesAsyncRequest {
        accountId: number;
        userId: string;
        responseFields?: string;
    }
    export interface GetUsersAsyncRequest {
        accountId: number;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        q?: string;
        qLimit?: number;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface RemoveSalesRepFromB2BAccountRequest {
        accountId: number;
        userId: string;
    }
    export interface RemoveUserRequest {
        accountId: number;
        userId: string;
        responseFields?: string;
    }
    export interface RemoveUserRoleAsyncRequest {
        accountId: number;
        userId: string;
        roleId: number;
    }
    export interface UpdateAccountRequest {
        accountId: number;
        responseFields?: string;
        b2BAccount?: B2BAccount;
    }
    export interface UpdateB2BAccountAttributeRequest {
        accountId: number;
        attributeFQN: string;
        responseFields?: string;
        customerAttribute?: CustomerAttribute;
    }
    export interface UpdateB2BAccountStatusRequest {
        accountId: number;
        actionName: string;
        responseFields?: string;
    }
    export interface UpdateSalesRepsOnB2BAccountRequest {
        accountId: number;
        responseFields?: string;
        requestBody?: Array<string>;
    }
    export interface UpdateUserRequest {
        accountId: number;
        userId: string;
        responseFields?: string;
        b2BUser?: B2BUser;
    }
    export interface UpgradeAccountsToB2BRequest {
        responseFields?: string;
        requestBody?: Array<number>;
    }
}
/**
* B2BAccountApiService - interface
* 
* @export
* @interface B2BAccountApi
*/
export interface B2BAccountApiService {
    /**
    * Creates a new B2B account.
    * @summary Add Account
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {B2BAccount} [b2BAccount] Properties of the new B2B account to create.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    addAccountRaw(requestParameters: b2BAccountApiParams.AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Creates a new B2B account.
    * Add Account
    */
    addAccount(requestParameters: b2BAccountApiParams.AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Add a customer attribute to the B2B account.
    * @summary Add B2B Account tAttribute
    * @param {number} accountId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CustomerAttribute} [customerAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    addB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.AddB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>>;

    /**
    * Add a customer attribute to the B2B account.
    * Add B2B Account tAttribute
    */
    addB2BAccountAttribute(requestParameters: b2BAccountApiParams.AddB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute>;

    /**
    * Add Sales Rep To B2B Account
    * @summary Add Sales Rep To B2B Account
    * @param {number} accountId 
    * @param {string} userId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    addSalesRepToB2BAccountRaw(requestParameters: b2BAccountApiParams.AddSalesRepToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Add Sales Rep To B2B Account
    * Add Sales Rep To B2B Account
    */
    addSalesRepToB2BAccount(requestParameters: b2BAccountApiParams.AddSalesRepToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Adds lists of sales reps to a B2B account.
    * @summary Add Sales Reps To B2B Account
    * @param {number} accountId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<string>} [requestBody] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    addSalesRepsToB2BAccountRaw(requestParameters: b2BAccountApiParams.AddSalesRepsToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Adds lists of sales reps to a B2B account.
    * Add Sales Reps To B2B Account
    */
    addSalesRepsToB2BAccount(requestParameters: b2BAccountApiParams.AddSalesRepsToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Adds user to B2B account.
    * @summary Add User
    * @param {number} accountId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {B2BUserAndAuthInfo} [b2BUserAndAuthInfo] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    addUserRaw(requestParameters: b2BAccountApiParams.AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUser>>;

    /**
    * Adds user to B2B account.
    * Add User
    */
    addUser(requestParameters: b2BAccountApiParams.AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUser>;

    /**
    * Add a role to B2B user.
    * @summary Add User Role Async
    * @param {number} accountId 
    * @param {string} userId Unique identifier of the user who receives the role.
    * @param {number} roleId Unique identifier of the role to add.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    addUserRoleAsyncRaw(requestParameters: b2BAccountApiParams.AddUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Add a role to B2B user.
    * Add User Role Async
    */
    addUserRoleAsync(requestParameters: b2BAccountApiParams.AddUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
    * @summary Change Parent Account
    * @param {number} accountId Unique identifier of the B2B account.
    * @param {number} parentAccountId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    changeParentAccountRaw(requestParameters: b2BAccountApiParams.ChangeParentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
    * Change Parent Account
    */
    changeParentAccount(requestParameters: b2BAccountApiParams.ChangeParentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Deletes a specific customer attribute specified by attributeFQN.
    * @summary Delete B2B Account Attribute
    * @param {number} accountId 
    * @param {string} attributeFQN 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    deleteB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.DeleteB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes a specific customer attribute specified by attributeFQN.
    * Delete B2B Account Attribute
    */
    deleteB2BAccountAttribute(requestParameters: b2BAccountApiParams.DeleteB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Gets list of accounts for the B2B sales rep account.
    * @summary Get Accounts For Sales Rep
    * @param {string} userId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getAccountsForSalesRepRaw(requestParameters: b2BAccountApiParams.GetAccountsForSalesRepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>>;

    /**
    * Gets list of accounts for the B2B sales rep account.
    * Get Accounts For Sales Rep
    */
    getAccountsForSalesRep(requestParameters: b2BAccountApiParams.GetAccountsForSalesRepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>>;

    /**
    * Retrieves the details of a B2B account specified by its unique identifier.
    * @summary Get B2B Account
    * @param {number} accountId Unique identifier of the B2B account whose details you want to retrieve.
    * @param {string} [responseGroups] Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getB2BAccountRaw(requestParameters: b2BAccountApiParams.GetB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Retrieves the details of a B2B account specified by its unique identifier.
    * Get B2B Account
    */
    getB2BAccount(requestParameters: b2BAccountApiParams.GetB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Retrieves the contents of a particular attribute attached to a specified account.
    * @summary Get B2B Account Attribute
    * @param {number} accountId Unique identifier of the b2b account that contains the attribute to retrieve.
    * @param {string} attributeFQN Fully qualified name of the attribute that you want to retrieve.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.GetB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>>;

    /**
    * Retrieves the contents of a particular attribute attached to a specified account.
    * Get B2B Account Attribute
    */
    getB2BAccountAttribute(requestParameters: b2BAccountApiParams.GetB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute>;

    /**
    * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
    * @summary Get B2B Account Attributes
    * @param {number} accountId Unique identifier of the customer account whose notes you want to retrieve.
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getB2BAccountAttributesRaw(requestParameters: b2BAccountApiParams.GetB2BAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttributeCollection>>;

    /**
    * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
    * Get B2B Account Attributes
    */
    getB2BAccountAttributes(requestParameters: b2BAccountApiParams.GetB2BAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttributeCollection>;

    /**
    * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
    * @summary Get B2B Account Hierarchy
    * @param {number} accountId Unique identifier of the B2B account whose account hierarchy you want to retrieve. This can be any account belonging to the same hierarchy.
    * @param {string} [responseGroups] Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getB2BAccountHierarchyRaw(requestParameters: b2BAccountApiParams.GetB2BAccountHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccountHierarchyResult>>;

    /**
    * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
    * Get B2B Account Hierarchy
    */
    getB2BAccountHierarchy(requestParameters: b2BAccountApiParams.GetB2BAccountHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccountHierarchyResult>;

    /**
    * Retrieves a list of B2B accounts according to any filter criteria and sort options.
    * @summary Get B2B Accounts
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.              For example, applications can filter on UserId to get the single record of the current customer.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [fields] 
    * @param {string} [q] a quick filter which will search a predefined set of fields for a match
    * @param {number} [qLimit] 
    * @param {string} [responseGroups] Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getB2BAccountsRaw(requestParameters: b2BAccountApiParams.GetB2BAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccountCollection>>;

    /**
    * Retrieves a list of B2B accounts according to any filter criteria and sort options.
    * Get B2B Accounts
    */
    getB2BAccounts(requestParameters: b2BAccountApiParams.GetB2BAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccountCollection>;

    /**
    * Retrieves all the roles for a specified user of a b2b account.
    * @summary Get User Roles Async
    * @param {number} accountId 
    * @param {string} userId Unique identifier of the user.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getUserRolesAsyncRaw(requestParameters: b2BAccountApiParams.GetUserRolesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerUserRoleCollection>>;

    /**
    * Retrieves all the roles for a specified user of a b2b account.
    * Get User Roles Async
    */
    getUserRolesAsync(requestParameters: b2BAccountApiParams.GetUserRolesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerUserRoleCollection>;

    /**
    * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
    * @summary Get Users Async
    * @param {number} accountId 
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.              For example, applications can filter on UserId to get the single record of the current customer.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [q] a quick filter which will search a predefined set of fields for a match
    * @param {number} [qLimit] limit on quick filter which will search a predefined set of fields for a match
    * @param {string} [responseGroups] Used to refine the default information returned from a request. To reduce amount of customer account information returned, use the valid response groups: Contacts, CustomerAccountNotes, and OrderSummary. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    getUsersAsyncRaw(requestParameters: b2BAccountApiParams.GetUsersAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUserCollection>>;

    /**
    * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
    * Get Users Async
    */
    getUsersAsync(requestParameters: b2BAccountApiParams.GetUsersAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUserCollection>;

    /**
    * Removes a specific sales rep from B2B account .
    * @summary Remove Sales Rep From B2B Account
    * @param {number} accountId 
    * @param {string} userId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    removeSalesRepFromB2BAccountRaw(requestParameters: b2BAccountApiParams.RemoveSalesRepFromB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Removes a specific sales rep from B2B account .
    * Remove Sales Rep From B2B Account
    */
    removeSalesRepFromB2BAccount(requestParameters: b2BAccountApiParams.RemoveSalesRepFromB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Removes a B2B user from an account.
    * @summary Remove User
    * @param {number} accountId 
    * @param {string} userId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    removeUserRaw(requestParameters: b2BAccountApiParams.RemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Removes a B2B user from an account.
    * Remove User
    */
    removeUser(requestParameters: b2BAccountApiParams.RemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Removes a role from the specified user.
    * @summary Remove User Role Async
    * @param {number} accountId 
    * @param {string} userId Unique identifier of the user with the role to delete.
    * @param {number} roleId Unique identifer of the role to delete.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    removeUserRoleAsyncRaw(requestParameters: b2BAccountApiParams.RemoveUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Removes a role from the specified user.
    * Remove User Role Async
    */
    removeUserRoleAsync(requestParameters: b2BAccountApiParams.RemoveUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Modifies an existing B2B account.
    * @summary Update Account
    * @param {number} accountId Unique identifier of the B2B account.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {B2BAccount} [b2BAccount] Properties of the B2B account to update.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    updateAccountRaw(requestParameters: b2BAccountApiParams.UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Modifies an existing B2B account.
    * Update Account
    */
    updateAccount(requestParameters: b2BAccountApiParams.UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Modifies an existing attribute for a b2b account.
    * @summary Update B2B Account Attribute
    * @param {number} accountId Unique identifier of the account whose attribute you want to modify.
    * @param {string} attributeFQN 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CustomerAttribute} [customerAttribute] The new content to replace the existing attribute.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    updateB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.UpdateB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>>;

    /**
    * Modifies an existing attribute for a b2b account.
    * Update B2B Account Attribute
    */
    updateB2BAccountAttribute(requestParameters: b2BAccountApiParams.UpdateB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute>;

    /**
    * Updates the status on B2B account.
    * @summary Update B2B Account Status
    * @param {number} accountId 
    * @param {string} actionName 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    updateB2BAccountStatusRaw(requestParameters: b2BAccountApiParams.UpdateB2BAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Updates the status on B2B account.
    * Update B2B Account Status
    */
    updateB2BAccountStatus(requestParameters: b2BAccountApiParams.UpdateB2BAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Updates list of  sales reps on a B2B account.
    * @summary Update Sales Reps On B2B Account
    * @param {number} accountId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<string>} [requestBody] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    updateSalesRepsOnB2BAccountRaw(requestParameters: b2BAccountApiParams.UpdateSalesRepsOnB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>>;

    /**
    * Updates list of  sales reps on a B2B account.
    * Update Sales Reps On B2B Account
    */
    updateSalesRepsOnB2BAccount(requestParameters: b2BAccountApiParams.UpdateSalesRepsOnB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount>;

    /**
    * Updates a B2B user specified by user Id.
    * @summary Update User
    * @param {number} accountId 
    * @param {string} userId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {B2BUser} [b2BUser] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    updateUserRaw(requestParameters: b2BAccountApiParams.UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUser>>;

    /**
    * Updates a B2B user specified by user Id.
    * Update User
    */
    updateUser(requestParameters: b2BAccountApiParams.UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUser>;

    /**
    * Upgrades bulk B2C accounts to B2B
    * @summary Upgrade B2C Accounts To B2B
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<number>} [requestBody] List of accountIds(integers)
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof B2BAccountApiInterface
    */
    upgradeAccountsToB2BRaw(requestParameters: b2BAccountApiParams.UpgradeAccountsToB2BRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpgradeToB2BAccountResponse>>;

    /**
    * Upgrades bulk B2C accounts to B2B
    * Upgrade B2C Accounts To B2B
    */
    upgradeAccountsToB2B(requestParameters: b2BAccountApiParams.UpgradeAccountsToB2BRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpgradeToB2BAccountResponse>;

}


/**
 * 
 */
export class B2BAccountApi extends runtime.BaseAPI implements B2BAccountApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new B2B account.
     * Add Account
     */


    async addAccountRaw(requestParameters: b2BAccountApiParams.AddAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.b2BAccount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new B2B account.
     * Add Account
     */
    async addAccount(requestParameters: b2BAccountApiParams.AddAccountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.addAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a customer attribute to the B2B account.
     * Add B2B Account tAttribute
     */


    async addB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.AddB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add a customer attribute to the B2B account.
     * Add B2B Account tAttribute
     */
    async addB2BAccountAttribute(requestParameters: b2BAccountApiParams.AddB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.addB2BAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Sales Rep To B2B Account
     * Add Sales Rep To B2B Account
     */


    async addSalesRepToB2BAccountRaw(requestParameters: b2BAccountApiParams.AddSalesRepToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addSalesRepToB2BAccount.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addSalesRepToB2BAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/salesrep/{userId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Sales Rep To B2B Account
     * Add Sales Rep To B2B Account
     */
    async addSalesRepToB2BAccount(requestParameters: b2BAccountApiParams.AddSalesRepToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.addSalesRepToB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds lists of sales reps to a B2B account.
     * Add Sales Reps To B2B Account
     */


    async addSalesRepsToB2BAccountRaw(requestParameters: b2BAccountApiParams.AddSalesRepsToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addSalesRepsToB2BAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/addsalesreps`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds lists of sales reps to a B2B account.
     * Add Sales Reps To B2B Account
     */
    async addSalesRepsToB2BAccount(requestParameters: b2BAccountApiParams.AddSalesRepsToB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.addSalesRepsToB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds user to B2B account.
     * Add User
     */


    async addUserRaw(requestParameters: b2BAccountApiParams.AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUser>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.b2BUserAndAuthInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds user to B2B account.
     * Add User
     */
    async addUser(requestParameters: b2BAccountApiParams.AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUser> {
        const response = await this.addUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a role to B2B user.
     * Add User Role Async
     */


    async addUserRoleAsyncRaw(requestParameters: b2BAccountApiParams.AddUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling addUserRoleAsync.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserRoleAsync.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addUserRoleAsync.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a role to B2B user.
     * Add User Role Async
     */
    async addUserRoleAsync(requestParameters: b2BAccountApiParams.AddUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserRoleAsyncRaw(requestParameters, initOverrides);
    }

    /**
     * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
     * Change Parent Account
     */


    async changeParentAccountRaw(requestParameters: b2BAccountApiParams.ChangeParentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling changeParentAccount.');
        }

        if (requestParameters.parentAccountId === null || requestParameters.parentAccountId === undefined) {
            throw new runtime.RequiredError('parentAccountId','Required parameter requestParameters.parentAccountId was null or undefined when calling changeParentAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/changeparent/{parentAccountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"parentAccountId"}}`, encodeURIComponent(String(requestParameters.parentAccountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Change the B2B parent account for an existing B2B account that belongs to an account hierarchy.
     * Change Parent Account
     */
    async changeParentAccount(requestParameters: b2BAccountApiParams.ChangeParentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.changeParentAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific customer attribute specified by attributeFQN.
     * Delete B2B Account Attribute
     */


    async deleteB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.DeleteB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteB2BAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific customer attribute specified by attributeFQN.
     * Delete B2B Account Attribute
     */
    async deleteB2BAccountAttribute(requestParameters: b2BAccountApiParams.DeleteB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteB2BAccountAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets list of accounts for the B2B sales rep account.
     * Get Accounts For Sales Rep
     */


    async getAccountsForSalesRepRaw(requestParameters: b2BAccountApiParams.GetAccountsForSalesRepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getAccountsForSalesRep.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/salesrep/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets list of accounts for the B2B sales rep account.
     * Get Accounts For Sales Rep
     */
    async getAccountsForSalesRep(requestParameters: b2BAccountApiParams.GetAccountsForSalesRepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getAccountsForSalesRepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a B2B account specified by its unique identifier.
     * Get B2B Account
     */


    async getB2BAccountRaw(requestParameters: b2BAccountApiParams.GetB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a B2B account specified by its unique identifier.
     * Get B2B Account
     */
    async getB2BAccount(requestParameters: b2BAccountApiParams.GetB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.getB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get B2B Account Attribute
     */


    async getB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.GetB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the contents of a particular attribute attached to a specified account.
     * Get B2B Account Attribute
     */
    async getB2BAccountAttribute(requestParameters: b2BAccountApiParams.GetB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.getB2BAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
     * Get B2B Account Attributes
     */


    async getB2BAccountAttributesRaw(requestParameters: b2BAccountApiParams.GetB2BAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttributeCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccountAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of notes added to an account according to any specified filter criteria and sort options.
     * Get B2B Account Attributes
     */
    async getB2BAccountAttributes(requestParameters: b2BAccountApiParams.GetB2BAccountAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttributeCollection> {
        const response = await this.getB2BAccountAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
     * Get B2B Account Hierarchy
     */


    async getB2BAccountHierarchyRaw(requestParameters: b2BAccountApiParams.GetB2BAccountHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccountHierarchyResult>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getB2BAccountHierarchy.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/hierarchy`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the account hierarchy for a B2B account specified by its unique identifier.
     * Get B2B Account Hierarchy
     */
    async getB2BAccountHierarchy(requestParameters: b2BAccountApiParams.GetB2BAccountHierarchyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccountHierarchyResult> {
        const response = await this.getB2BAccountHierarchyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of B2B accounts according to any filter criteria and sort options.
     * Get B2B Accounts
     */


    async getB2BAccountsRaw(requestParameters: b2BAccountApiParams.GetB2BAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of B2B accounts according to any filter criteria and sort options.
     * Get B2B Accounts
     */
    async getB2BAccounts(requestParameters: b2BAccountApiParams.GetB2BAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccountCollection> {
        const response = await this.getB2BAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the roles for a specified user of a b2b account.
     * Get User Roles Async
     */


    async getUserRolesAsyncRaw(requestParameters: b2BAccountApiParams.GetUserRolesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerUserRoleCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getUserRolesAsync.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserRolesAsync.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all the roles for a specified user of a b2b account.
     * Get User Roles Async
     */
    async getUserRolesAsync(requestParameters: b2BAccountApiParams.GetUserRolesAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerUserRoleCollection> {
        const response = await this.getUserRolesAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
     * Get Users Async
     */


    async getUsersAsyncRaw(requestParameters: b2BAccountApiParams.GetUsersAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUserCollection>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getUsersAsync.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/users`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of user for a B2B account according to any filter criteria and sort options.
     * Get Users Async
     */
    async getUsersAsync(requestParameters: b2BAccountApiParams.GetUsersAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUserCollection> {
        const response = await this.getUsersAsyncRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a specific sales rep from B2B account .
     * Remove Sales Rep From B2B Account
     */


    async removeSalesRepFromB2BAccountRaw(requestParameters: b2BAccountApiParams.RemoveSalesRepFromB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeSalesRepFromB2BAccount.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeSalesRepFromB2BAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/salesrep/{userId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a specific sales rep from B2B account .
     * Remove Sales Rep From B2B Account
     */
    async removeSalesRepFromB2BAccount(requestParameters: b2BAccountApiParams.RemoveSalesRepFromB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.removeSalesRepFromB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a B2B user from an account.
     * Remove User
     */


    async removeUserRaw(requestParameters: b2BAccountApiParams.RemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/remove`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a B2B user from an account.
     * Remove User
     */
    async removeUser(requestParameters: b2BAccountApiParams.RemoveUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a role from the specified user.
     * Remove User Role Async
     */


    async removeUserRoleAsyncRaw(requestParameters: b2BAccountApiParams.RemoveUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeUserRoleAsync.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserRoleAsync.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeUserRoleAsync.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}/roles/{roleId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a role from the specified user.
     * Remove User Role Async
     */
    async removeUserRoleAsync(requestParameters: b2BAccountApiParams.RemoveUserRoleAsyncRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserRoleAsyncRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies an existing B2B account.
     * Update Account
     */


    async updateAccountRaw(requestParameters: b2BAccountApiParams.UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.b2BAccount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an existing B2B account.
     * Update Account
     */
    async updateAccount(requestParameters: b2BAccountApiParams.UpdateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing attribute for a b2b account.
     * Update B2B Account Attribute
     */


    async updateB2BAccountAttributeRaw(requestParameters: b2BAccountApiParams.UpdateB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAttribute>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateB2BAccountAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateB2BAccountAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/attributes/{attributeFQN}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an existing attribute for a b2b account.
     * Update B2B Account Attribute
     */
    async updateB2BAccountAttribute(requestParameters: b2BAccountApiParams.UpdateB2BAccountAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAttribute> {
        const response = await this.updateB2BAccountAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status on B2B account.
     * Update B2B Account Status
     */


    async updateB2BAccountStatusRaw(requestParameters: b2BAccountApiParams.UpdateB2BAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateB2BAccountStatus.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling updateB2BAccountStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/status/{actionName}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"actionName"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the status on B2B account.
     * Update B2B Account Status
     */
    async updateB2BAccountStatus(requestParameters: b2BAccountApiParams.UpdateB2BAccountStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.updateB2BAccountStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates list of  sales reps on a B2B account.
     * Update Sales Reps On B2B Account
     */


    async updateSalesRepsOnB2BAccountRaw(requestParameters: b2BAccountApiParams.UpdateSalesRepsOnB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateSalesRepsOnB2BAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/salesrep`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates list of  sales reps on a B2B account.
     * Update Sales Reps On B2B Account
     */
    async updateSalesRepsOnB2BAccount(requestParameters: b2BAccountApiParams.UpdateSalesRepsOnB2BAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BAccount> {
        const response = await this.updateSalesRepsOnB2BAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a B2B user specified by user Id.
     * Update User
     */


    async updateUserRaw(requestParameters: b2BAccountApiParams.UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<B2BUser>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling updateUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/{accountId}/user/{userId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.b2BUser,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a B2B user specified by user Id.
     * Update User
     */
    async updateUser(requestParameters: b2BAccountApiParams.UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<B2BUser> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upgrades bulk B2C accounts to B2B
     * Upgrade B2C Accounts To B2B
     */


    async upgradeAccountsToB2BRaw(requestParameters: b2BAccountApiParams.UpgradeAccountsToB2BRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpgradeToB2BAccountResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/b2baccounts/upgradeaccounts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Upgrades bulk B2C accounts to B2B
     * Upgrade B2C Accounts To B2B
     */
    async upgradeAccountsToB2B(requestParameters: b2BAccountApiParams.UpgradeAccountsToB2BRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpgradeToB2BAccountResponse> {
        const response = await this.upgradeAccountsToB2BRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
