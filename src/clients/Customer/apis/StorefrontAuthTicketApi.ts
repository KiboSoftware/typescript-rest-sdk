/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CustomerAuthTicket,
  CustomerUserAuthInfo,
} from '../models';

export interface StorefrontAuthTicketApiCreateAnonymousShopperAuthTicketRequest {
    responseFields?: string;
}

export interface StorefrontAuthTicketApiCreateUserAuthTicketRequest {
    responseFields?: string;
    customerUserAuthInfo?: CustomerUserAuthInfo;
}

export interface StorefrontAuthTicketApiRefreshUserAuthTicketRequest {
    refreshToken?: string;
    responseFields?: string;
}

/**
 * StorefrontAuthTicketApi - interface
 * 
 * @export
 * @interface StorefrontAuthTicketApiInterface
 */
export interface StorefrontAuthTicketApiInterface {
    /**
     * Authenticates anonymous shopper for the site.
     * @summary Create Anonymous Shopper Auth Ticket
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontAuthTicketApiInterface
     */
    createAnonymousShopperAuthTicketRaw(requestParameters: StorefrontAuthTicketApiCreateAnonymousShopperAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>>;

    /**
     * Authenticates anonymous shopper for the site.
     * Create Anonymous Shopper Auth Ticket
     */
    createAnonymousShopperAuthTicket(requestParameters: StorefrontAuthTicketApiCreateAnonymousShopperAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket>;

    /**
     * Authenticates a user for a particular site given a set of user credentials.
     * @summary Create User Auth Ticket
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CustomerUserAuthInfo} [customerUserAuthInfo] User\&#39;s email address and password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontAuthTicketApiInterface
     */
    createUserAuthTicketRaw(requestParameters: StorefrontAuthTicketApiCreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>>;

    /**
     * Authenticates a user for a particular site given a set of user credentials.
     * Create User Auth Ticket
     */
    createUserAuthTicket(requestParameters: StorefrontAuthTicketApiCreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket>;

    /**
     * Refreshes a user\'s authentication.
     * @summary Refresh User Auth Ticket
     * @param {string} [refreshToken] The user\&#39;s refresh token.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorefrontAuthTicketApiInterface
     */
    refreshUserAuthTicketRaw(requestParameters: StorefrontAuthTicketApiRefreshUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>>;

    /**
     * Refreshes a user\'s authentication.
     * Refresh User Auth Ticket
     */
    refreshUserAuthTicket(requestParameters: StorefrontAuthTicketApiRefreshUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket>;

}

/**
 * 
 */
export class StorefrontAuthTicketApi extends runtime.BaseAPI implements StorefrontAuthTicketApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Authenticates anonymous shopper for the site.
     * Create Anonymous Shopper Auth Ticket
     */


    async createAnonymousShopperAuthTicketRaw(requestParameters: StorefrontAuthTicketApiCreateAnonymousShopperAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/authtickets/anonymousshopper`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Authenticates anonymous shopper for the site.
     * Create Anonymous Shopper Auth Ticket
     */
    async createAnonymousShopperAuthTicket(requestParameters: StorefrontAuthTicketApiCreateAnonymousShopperAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.createAnonymousShopperAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Authenticates a user for a particular site given a set of user credentials.
     * Create User Auth Ticket
     */


    async createUserAuthTicketRaw(requestParameters: StorefrontAuthTicketApiCreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/authtickets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerUserAuthInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Authenticates a user for a particular site given a set of user credentials.
     * Create User Auth Ticket
     */
    async createUserAuthTicket(requestParameters: StorefrontAuthTicketApiCreateUserAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.createUserAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refreshes a user\'s authentication.
     * Refresh User Auth Ticket
     */


    async refreshUserAuthTicketRaw(requestParameters: StorefrontAuthTicketApiRefreshUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.refreshToken !== undefined) {
            queryParameters['refreshToken'] = requestParameters.refreshToken;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/authtickets/refresh`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Refreshes a user\'s authentication.
     * Refresh User Auth Ticket
     */
    async refreshUserAuthTicket(requestParameters: StorefrontAuthTicketApiRefreshUserAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerAuthTicket> {
        const response = await this.refreshUserAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
