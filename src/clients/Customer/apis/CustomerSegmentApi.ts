/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CustomerSegment,
  CustomerSegmentCollection,
} from '../models';
import {
    CustomerSegmentFromJSON,
    CustomerSegmentToJSON,
    CustomerSegmentCollectionFromJSON,
    CustomerSegmentCollectionToJSON,
} from '../models';

export interface CustomerSegmentApiAddSegmentRequest {
    customerSegment?: CustomerSegment;
}

export interface CustomerSegmentApiAddSegmentAccountsRequest {
    id: number;
    requestBody?: Array<number>;
}

export interface CustomerSegmentApiDeleteSegmentRequest {
    id: number;
}

export interface CustomerSegmentApiGetSegmentRequest {
    id: number;
}

export interface CustomerSegmentApiGetSegmentsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CustomerSegmentApiRemoveSegmentAccountRequest {
    id: number;
    accountId: number;
}

export interface CustomerSegmentApiUpdateSegmentRequest {
    id: number;
    customerSegment?: CustomerSegment;
}

/**
 * 
 */
export class CustomerSegmentApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new segment. Merchants create segments of customers, for example,   to offer discounts to particular groups or assign VIP status to a set of customers.
     * Adds Segment
     */


    async addSegmentRaw(requestParameters: CustomerSegmentApiAddSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegment>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerSegmentToJSON(requestParameters.customerSegment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSegmentFromJSON(jsonValue));
    }

    /**
     * Creates a new segment. Merchants create segments of customers, for example,   to offer discounts to particular groups or assign VIP status to a set of customers.
     * Adds Segment
     */
    async addSegment(requestParameters: CustomerSegmentApiAddSegmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegment> {
        const response = await this.addSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds segments to an account.
     * Add Segments Accounts
     */


    async addSegmentAccountsRaw(requestParameters: CustomerSegmentApiAddSegmentAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addSegmentAccounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments/{id}/accounts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds segments to an account.
     * Add Segments Accounts
     */
    async addSegmentAccounts(requestParameters: CustomerSegmentApiAddSegmentAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addSegmentAccountsRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a segement specified by its unique code. Note that the group is deleted in all accounts that contain this segment.
     * Delete Segment
     */


    async deleteSegmentRaw(requestParameters: CustomerSegmentApiDeleteSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a segement specified by its unique code. Note that the group is deleted in all accounts that contain this segment.
     * Delete Segment
     */
    async deleteSegment(requestParameters: CustomerSegmentApiDeleteSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSegmentRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a segment specified the segment Id.
     * Get Segment
     */


    async getSegmentRaw(requestParameters: CustomerSegmentApiGetSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSegmentFromJSON(jsonValue));
    }

    /**
     * Retrieves a segment specified the segment Id.
     * Get Segment
     */
    async getSegment(requestParameters: CustomerSegmentApiGetSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegment> {
        const response = await this.getSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all segments defined for the site according to any specified filter criteria and sort options.
     * Get Segments
     */


    async getSegmentsRaw(requestParameters: CustomerSegmentApiGetSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegmentCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSegmentCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of all segments defined for the site according to any specified filter criteria and sort options.
     * Get Segments
     */
    async getSegments(requestParameters: CustomerSegmentApiGetSegmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegmentCollection> {
        const response = await this.getSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes single account from a segment.
     * Remove Segment Account
     */


    async removeSegmentAccountRaw(requestParameters: CustomerSegmentApiRemoveSegmentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeSegmentAccount.');
        }

        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling removeSegmentAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments/{id}/accounts/{accountId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes single account from a segment.
     * Remove Segment Account
     */
    async removeSegmentAccount(requestParameters: CustomerSegmentApiRemoveSegmentAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSegmentAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Update the code, name, or description of an existing segment.
     * Update Segment
     */


    async updateSegmentRaw(requestParameters: CustomerSegmentApiUpdateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerSegment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerSegmentToJSON(requestParameters.customerSegment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSegmentFromJSON(jsonValue));
    }

    /**
     * Update the code, name, or description of an existing segment.
     * Update Segment
     */
    async updateSegment(requestParameters: CustomerSegmentApiUpdateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerSegment> {
        const response = await this.updateSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
