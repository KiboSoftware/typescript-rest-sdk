/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AddressValidationRequest,
  AddressValidationResponse,
} from '../models';

export interface ValidateAddressRequest {
    responseFields?: string;
    addressValidationRequest?: AddressValidationRequest;
}

/**
 * AddressValidationApi - interface
 * 
 * @export
 * @interface AddressValidationApiInterface
 */
export interface AddressValidationApiInterface {
    /**
     * Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.
     * @summary Validate Address
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AddressValidationRequest} [addressValidationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressValidationApiInterface
     */
    validateAddressRaw(requestParameters: ValidateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressValidationResponse>>;

    /**
     * Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.
     * Validate Address
     */
    validateAddress(requestParameters: ValidateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressValidationResponse>;

}

/**
 * 
 */
export class AddressValidationApi extends runtime.BaseAPI implements AddressValidationApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.
     * Validate Address
     */


    async validateAddressRaw(requestParameters: ValidateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressValidationResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/customer/addressvalidation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.addressValidationRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.
     * Validate Address
     */
    async validateAddress(requestParameters: ValidateAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressValidationResponse> {
        const response = await this.validateAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
