/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AddressValidationRequest,
  AddressValidationResponse,
} from '../models';
import {
    AddressValidationRequestFromJSON,
    AddressValidationRequestToJSON,
    AddressValidationResponseFromJSON,
    AddressValidationResponseToJSON,
} from '../models';

export interface AddressValidationApiValidateAddressRequest {
    addressValidationRequest?: AddressValidationRequest;
}

/**
 * 
 */
export class AddressValidationApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.
     * Validate Address
     */


    async validateAddressRaw(requestParameters: AddressValidationApiValidateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressValidationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/customer/addressvalidation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressValidationRequestToJSON(requestParameters.addressValidationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressValidationResponseFromJSON(jsonValue));
    }

    /**
     * Allows merchants and services to validate an address against the configured AddressValidator capability in SiteSettings, fallback uses USPS Address Validation.
     * Validate Address
     */
    async validateAddress(requestParameters: AddressValidationApiValidateAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressValidationResponse> {
        const response = await this.validateAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
