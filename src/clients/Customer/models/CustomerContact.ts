/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { ContactType } from './ContactType';
import {
    ContactTypeFromJSON,
    ContactTypeFromJSONTyped,
    ContactTypeToJSON,
} from './ContactType';
import type { Phone } from './Phone';
import {
    PhoneFromJSON,
    PhoneFromJSONTyped,
    PhoneToJSON,
} from './Phone';

/**
 * CustomerContact information for a customer account including the name, company, phone numbers, email addresses, and billing and shipping addresses (if supplied).
 * @export
 * @interface CustomerContact
 */
export interface CustomerContact {
    /**
     * 
     * @type {number}
     * @memberof CustomerContact
     */
    accountId?: number;
    /**
     * 
     * @type {Array<ContactType>}
     * @memberof CustomerContact
     */
    types?: Array<ContactType> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof CustomerContact
     */
    auditInfo?: AuditInfo;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    faxNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    label?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CustomerContact
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    middleNameOrInitial?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    lastNameOrSurname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerContact
     */
    companyOrOrganization?: string | null;
    /**
     * 
     * @type {Phone}
     * @memberof CustomerContact
     */
    phoneNumbers?: Phone;
    /**
     * 
     * @type {Address}
     * @memberof CustomerContact
     */
    address?: Address;
}

/**
 * Check if a given object implements the CustomerContact interface.
 */
export function instanceOfCustomerContact(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomerContactFromJSON(json: any): CustomerContact {
    return CustomerContactFromJSONTyped(json, false);
}

export function CustomerContactFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerContact {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'accountId') ? undefined : json['accountId'],
        'types': !exists(json, 'types') ? undefined : (json['types'] === null ? null : (json['types'] as Array<any>).map(ContactTypeFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'faxNumber': !exists(json, 'faxNumber') ? undefined : json['faxNumber'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'middleNameOrInitial': !exists(json, 'middleNameOrInitial') ? undefined : json['middleNameOrInitial'],
        'lastNameOrSurname': !exists(json, 'lastNameOrSurname') ? undefined : json['lastNameOrSurname'],
        'companyOrOrganization': !exists(json, 'companyOrOrganization') ? undefined : json['companyOrOrganization'],
        'phoneNumbers': !exists(json, 'phoneNumbers') ? undefined : PhoneFromJSON(json['phoneNumbers']),
        'address': !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
    };
}

export function CustomerContactToJSON(value?: CustomerContact | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountId': value.accountId,
        'types': value.types === undefined ? undefined : (value.types === null ? null : (value.types as Array<any>).map(ContactTypeToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'faxNumber': value.faxNumber,
        'label': value.label,
        'id': value.id,
        'email': value.email,
        'firstName': value.firstName,
        'middleNameOrInitial': value.middleNameOrInitial,
        'lastNameOrSurname': value.lastNameOrSurname,
        'companyOrOrganization': value.companyOrOrganization,
        'phoneNumbers': PhoneToJSON(value.phoneNumbers),
        'address': AddressToJSON(value.address),
    };
}

