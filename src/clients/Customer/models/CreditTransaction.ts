/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';

/**
 * Credit Transactions are used to make adjustments to a Credit Balance
 * @export
 * @interface CreditTransaction
 */
export interface CreditTransaction {
    /**
     * Id unique within the tenant
     * ReadOnly
     * @type {number}
     * @memberof CreditTransaction
     */
    id?: number | null;
    /**
     * Mozu.Customer.Contracts.Credit.CreditTransaction.CreditTransactionType
     *             Requried
     * @type {string}
     * @memberof CreditTransaction
     */
    transactionType?: string | null;
    /**
     * Comments about the transaction.  Depending on the user interface, these comments may be readable by authorized users or customers.
     * @type {string}
     * @memberof CreditTransaction
     */
    comments?: string | null;
    /**
     * Amount to apply to Credit Balance
     * Required
     * @type {number}
     * @memberof CreditTransaction
     */
    impactAmount?: number | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof CreditTransaction
     */
    auditInfo?: AuditInfo;
    /**
     * 
     * @type {string}
     * @memberof CreditTransaction
     */
    orderId?: string | null;
    /**
     * Custom data for credit transactions
     * @type {any}
     * @memberof CreditTransaction
     */
    data?: any | null;
}

/**
 * Check if a given object implements the CreditTransaction interface.
 */
export function instanceOfCreditTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreditTransactionFromJSON(json: any): CreditTransaction {
    return CreditTransactionFromJSONTyped(json, false);
}

export function CreditTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'transactionType': !exists(json, 'transactionType') ? undefined : json['transactionType'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'impactAmount': !exists(json, 'impactAmount') ? undefined : json['impactAmount'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'data': !exists(json, 'data') ? undefined : json['data'],
    };
}

export function CreditTransactionToJSON(value?: CreditTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'transactionType': value.transactionType,
        'comments': value.comments,
        'impactAmount': value.impactAmount,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'orderId': value.orderId,
        'data': value.data,
    };
}

