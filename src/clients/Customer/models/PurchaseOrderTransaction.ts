/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';

/**
 * Customer purchase order transaction log
 * @export
 * @interface PurchaseOrderTransaction
 */
export interface PurchaseOrderTransaction {
    /**
     * Unique identifier for Customer purchase order account
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    customerPurchaseOrderAccountId?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrderTransaction
     */
    externalId?: string | null;
    /**
     * Site Id associated with transaction log
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    siteId?: number;
    /**
     * Tenant Id associated with transaction log
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    tenantId?: number;
    /**
     * Date when the transaction was made on a purchase order account
     * @type {Date}
     * @memberof PurchaseOrderTransaction
     */
    transactionDate?: Date;
    /**
     * Unique identifier for an order
     * @type {string}
     * @memberof PurchaseOrderTransaction
     */
    orderId?: string | null;
    /**
     * Purchase order number
     * @type {string}
     * @memberof PurchaseOrderTransaction
     */
    purchaseOrderNumber?: string | null;
    /**
     * Transaction amount in transaction log for a purchase order account
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    transactionAmount?: number;
    /**
     * Maximum credit available on a purchase order account
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    creditLimit?: number;
    /**
     * Any additional transaction detail other than transaction description
     * @type {string}
     * @memberof PurchaseOrderTransaction
     */
    additionalTransactionDetail?: string | null;
    /**
     * Current available balance on Purchase Order account
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    availableBalance?: number;
    /**
     *  Purchase Order transaction type
     * 1 - Line of Credit Change
     * 2 - Order Submitted
     * 3 - Payment Collected
     * 4 - Payment Voided
     * 5 - Payment Refund
     * 6 - Manual Adjustment
     * @type {number}
     * @memberof PurchaseOrderTransaction
     */
    transactionTypeId?: number;
    /**
     * Purchase Order transaction description
     * Line of Credit Change
     * Order Submitted
     * Payment Collected
     * Payment Voided
     * Payment Refund
     * Manual Adjustment
     * @type {string}
     * @memberof PurchaseOrderTransaction
     */
    transactionDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PurchaseOrderTransaction
     */
    author?: string | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof PurchaseOrderTransaction
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the PurchaseOrderTransaction interface.
 */
export function instanceOfPurchaseOrderTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PurchaseOrderTransactionFromJSON(json: any): PurchaseOrderTransaction {
    return PurchaseOrderTransactionFromJSONTyped(json, false);
}

export function PurchaseOrderTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PurchaseOrderTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customerPurchaseOrderAccountId': !exists(json, 'customerPurchaseOrderAccountId') ? undefined : json['customerPurchaseOrderAccountId'],
        'externalId': !exists(json, 'externalId') ? undefined : json['externalId'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'purchaseOrderNumber': !exists(json, 'purchaseOrderNumber') ? undefined : json['purchaseOrderNumber'],
        'transactionAmount': !exists(json, 'transactionAmount') ? undefined : json['transactionAmount'],
        'creditLimit': !exists(json, 'creditLimit') ? undefined : json['creditLimit'],
        'additionalTransactionDetail': !exists(json, 'additionalTransactionDetail') ? undefined : json['additionalTransactionDetail'],
        'availableBalance': !exists(json, 'availableBalance') ? undefined : json['availableBalance'],
        'transactionTypeId': !exists(json, 'transactionTypeId') ? undefined : json['transactionTypeId'],
        'transactionDescription': !exists(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function PurchaseOrderTransactionToJSON(value?: PurchaseOrderTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customerPurchaseOrderAccountId': value.customerPurchaseOrderAccountId,
        'externalId': value.externalId,
        'siteId': value.siteId,
        'tenantId': value.tenantId,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString()),
        'orderId': value.orderId,
        'purchaseOrderNumber': value.purchaseOrderNumber,
        'transactionAmount': value.transactionAmount,
        'creditLimit': value.creditLimit,
        'additionalTransactionDetail': value.additionalTransactionDetail,
        'availableBalance': value.availableBalance,
        'transactionTypeId': value.transactionTypeId,
        'transactionDescription': value.transactionDescription,
        'author': value.author,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

