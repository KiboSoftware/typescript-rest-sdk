/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Customer Service
 * OpenAPI Spec for Kibo Customer Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    transactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    visitId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    transactionType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    interactionType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    amount?: number;
    /**
     * 
     * @type {Date}
     * @memberof Transaction
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    currencyCode?: string | null;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionId': !exists(json, 'transactionId') ? undefined : json['transactionId'],
        'visitId': !exists(json, 'visitId') ? undefined : json['visitId'],
        'transactionType': !exists(json, 'transactionType') ? undefined : json['transactionType'],
        'interactionType': !exists(json, 'interactionType') ? undefined : json['interactionType'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionId': value.transactionId,
        'visitId': value.visitId,
        'transactionType': value.transactionType,
        'interactionType': value.interactionType,
        'amount': value.amount,
        'date': value.date === undefined ? undefined : (value.date.toISOString()),
        'currencyCode': value.currencyCode,
    };
}

