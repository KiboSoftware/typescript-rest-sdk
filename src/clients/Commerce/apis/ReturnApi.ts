/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AutoRefundRequest,
  CommerceRuntimePackage,
  CommerceRuntimeShipment,
  CommerceRuntimeShipmentResponse,
  Order,
  OrderNote,
  Payment,
  PaymentAction,
  PaymentCollection,
  ReasonCollection,
  RestockableReturnItem,
  Return,
  ReturnAction,
  ReturnCollection,
  ReturnItem,
  ReturnItemCollection,
  ReturnItemSpecifier,
  ReturnRefundDetails,
} from '../models';

export interface AutoRefundOperationRequest {
    returnId: string;
    responseFields?: string;
    autoRefundRequest?: Array<AutoRefundRequest>;
}

export interface CreatePackageRequest {
    returnId: string;
    responseFields?: string;
    commerceRuntimePackage?: CommerceRuntimePackage;
}

export interface CreatePackageShipmentsRequest {
    returnId: string;
    responseFields?: string;
    requestBody?: Array<string>;
}

export interface CreatePaymentActionForReturnRequest {
    returnId: string;
    responseFields?: string;
    paymentAction?: PaymentAction;
}

export interface CreateReturnRequest {
    responseFields?: string;
    _return?: Return;
}

export interface CreateReturnItemRequest {
    returnId: string;
    responseFields?: string;
    returnItem?: ReturnItem;
}

export interface CreateReturnNoteRequest {
    returnId: string;
    responseFields?: string;
    orderNote?: OrderNote;
}

export interface CreateReturnShippingOrderRequest {
    returnId: string;
    responseFields?: string;
    returnItemSpecifier?: Array<ReturnItemSpecifier>;
}

export interface DeleteOrderItemRequest {
    orderId: string;
    orderItemId: string;
    returnId?: string;
    returnItemId?: string;
}

export interface DeletePackageRequest {
    returnId: string;
    packageId: string;
}

export interface DeleteReturnRequest {
    returnId: string;
}

export interface DeleteReturnNoteRequest {
    returnId: string;
    noteId: string;
}

export interface DeleteShipmentRequest {
    returnId: string;
    shipmentId: string;
}

export interface GetAvailableReturnActionsRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetPackageRequest {
    returnId: string;
    packageId: string;
    responseFields?: string;
}

export interface GetPackageLabelRequest {
    returnId: string;
    packageId: string;
    returnAsBase64Png?: boolean;
    responseFields?: string;
}

export interface GetPaymentRequest {
    returnId: string;
    paymentId: string;
    responseFields?: string;
}

export interface GetPaymentDistributionRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetPaymentsRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetReasonsRequest {
    responseFields?: string;
}

export interface GetReturnRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetReturnItemRequest {
    returnId: string;
    returnItemId: string;
    responseFields?: string;
}

export interface GetReturnItemsRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetReturnLabelRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetReturnNoteRequest {
    returnId: string;
    noteId: string;
    responseFields?: string;
}

export interface GetReturnNotesRequest {
    returnId: string;
    responseFields?: string;
}

export interface GetReturnsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    responseFields?: string;
}

export interface GetShipmentRequest {
    returnId: string;
    shipmentId: string;
    responseFields?: string;
}

export interface PerformPaymentActionForReturnRequest {
    returnId: string;
    paymentId: string;
    responseFields?: string;
    paymentAction?: PaymentAction;
}

export interface PerformReturnActionsRequest {
    responseFields?: string;
    returnAction?: ReturnAction;
}

export interface ResendReturnEmailRequest {
    responseFields?: string;
    returnAction?: ReturnAction;
}

export interface RestockReturnItemsRequest {
    returnId: string;
    responseFields?: string;
    restockableReturnItem?: Array<RestockableReturnItem>;
}

export interface UpdatePackageRequest {
    returnId: string;
    packageId: string;
    responseFields?: string;
    commerceRuntimePackage?: CommerceRuntimePackage;
}

export interface UpdateReturnRequest {
    returnId: string;
    responseFields?: string;
    _return?: Return;
}

export interface UpdateReturnNoteRequest {
    returnId: string;
    noteId: string;
    responseFields?: string;
    orderNote?: OrderNote;
}

/**
 * ReturnApi - interface
 * 
 * @export
 * @interface ReturnApiInterface
 */
export interface ReturnApiInterface {
    /**
     * Attempt to automatically refund the return
     * @summary Attempt to automatically refund the return
     * @param {string} returnId Return Id
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<AutoRefundRequest>} [autoRefundRequest] List of return item id with proccessing fee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    autoRefundRaw(requestParameters: AutoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     */
    autoRefund(requestParameters: AutoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     *  package?
     * @summary Apply a package to the return
     * @param {string} returnId Unique identifier of the return with which to associate the package.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimePackage} [commerceRuntimePackage] Package to create and add to the return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createPackageRaw(requestParameters: CreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>>;

    /**
     *  package?
     * Apply a package to the return
     */
    createPackage(requestParameters: CreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage>;

    /**
     * 
     * @summary Creates a shipment by grouping together multiple packages into logical shipments
     * @param {string} returnId Unique identifier of the order which is ready to be shipped.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<string>} [requestBody] Package ids to use in creating shipments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createPackageShipmentsRaw(requestParameters: CreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimePackage>>>;

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */
    createPackageShipments(requestParameters: CreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimePackage>>;

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @summary Create Payment Action For Return
     * @param {string} returnId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {PaymentAction} [paymentAction] Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createPaymentActionForReturnRaw(requestParameters: CreatePaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action For Return
     */
    createPaymentActionForReturn(requestParameters: CreatePaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * Creates a new Return for an order or product list.
     * @summary Create Returns
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Return} [_return] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createReturnRaw(requestParameters: CreateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Creates a new Return for an order or product list.
     * Create Returns
     */
    createReturn(requestParameters: CreateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * Adds a return item to the return.
     * @summary Create Return Item
     * @param {string} returnId ID of the order to add an item to.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReturnItem} [returnItem] All properties of the new return item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createReturnItemRaw(requestParameters: CreateReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Adds a return item to the return.
     * Create Return Item
     */
    createReturnItem(requestParameters: CreateReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * @summary Create Return Note
     * @param {string} returnId Unique identifier of the return to which you want to add a note.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderNote} [orderNote] Text of the note. Maximum 256 characters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createReturnNoteRaw(requestParameters: CreateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>>;

    /**
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * Create Return Note
     */
    createReturnNote(requestParameters: CreateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote>;

    /**
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * @summary Create Return Shipping Order
     * @param {string} returnId The ID of the parent return
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ReturnItemSpecifier>} [returnItemSpecifier] Optionally specify which items to include and in what quantities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    createReturnShippingOrderRaw(requestParameters: CreateReturnShippingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * Create Return Shipping Order
     */
    createReturnShippingOrder(requestParameters: CreateReturnShippingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Removes a particular return item from the return of the current shopper.
     * @summary Delete Order Item
     * @param {string} orderId 
     * @param {string} orderItemId 
     * @param {string} [returnId] 
     * @param {string} [returnItemId] Unique identifier of the order item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    deleteOrderItemRaw(requestParameters: DeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Removes a particular return item from the return of the current shopper.
     * Delete Order Item
     */
    deleteOrderItem(requestParameters: DeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * 
     * @summary Delete an order package
     * @param {string} returnId Unique identifier of the return with which to associate the package.
     * @param {string} packageId Package to remove from the return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    deletePackageRaw(requestParameters: DeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete an order package
     */
    deletePackage(requestParameters: DeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a return specified by return Id.
     * @summary Delete Return
     * @param {string} returnId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    deleteReturnRaw(requestParameters: DeleteReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a return specified by return Id.
     * Delete Return
     */
    deleteReturn(requestParameters: DeleteReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a specific note on a return.
     * @summary Delete Return Note
     * @param {string} returnId Unique identifier of the return whose note you want to delete.
     * @param {string} noteId Unique identifier of the note whose text you want to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    deleteReturnNoteRaw(requestParameters: DeleteReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a specific note on a return.
     * Delete Return Note
     */
    deleteReturnNote(requestParameters: DeleteReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes an existing return shipment
     * @summary Deletes an existing return shipment
     * @param {string} returnId ID of the return
     * @param {string} shipmentId Shipment ID of the return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    deleteShipmentRaw(requestParameters: DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     */
    deleteShipment(requestParameters: DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Gets all the available actions on the return specified by return Id.
     * @summary Get Available Return Actions
     * @param {string} returnId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getAvailableReturnActionsRaw(requestParameters: GetAvailableReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Gets all the available actions on the return specified by return Id.
     * Get Available Return Actions
     */
    getAvailableReturnActions(requestParameters: GetAvailableReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Get an order package
     * @summary Get an order package
     * @param {string} returnId Unique identifier of the return with which to associate the package.
     * @param {string} packageId Package to remove from the return
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getPackageRaw(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>>;

    /**
     * Get an order package
     * Get an order package
     */
    getPackage(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage>;

    /**
     * Get an order package
     * @summary Get an order package
     * @param {string} returnId Unique identifier of the return with which to associate the package.
     * @param {string} packageId Package to remove from the return
     * @param {boolean} [returnAsBase64Png] Return as base64 png
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getPackageLabelRaw(requestParameters: GetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get an order package
     * Get an order package
     */
    getPackageLabel(requestParameters: GetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Gets specific payment on the return specified by return Id and payment Id.
     * @summary Get Payment
     * @param {string} returnId 
     * @param {string} paymentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getPaymentRaw(requestParameters: GetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Gets specific payment on the return specified by return Id and payment Id.
     * Get Payment
     */
    getPayment(requestParameters: GetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

    /**
     * Get Payment Distribution
     * @summary Get Payment Distribution
     * @param {string} returnId Return Id
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getPaymentDistributionRaw(requestParameters: GetPaymentDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnRefundDetails>>;

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     */
    getPaymentDistribution(requestParameters: GetPaymentDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnRefundDetails>;

    /**
     * Gets payments on the return specified by return Id.
     * @summary Get Payments
     * @param {string} returnId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getPaymentsRaw(requestParameters: GetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCollection>>;

    /**
     * Gets payments on the return specified by return Id.
     * Get Payments
     */
    getPayments(requestParameters: GetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCollection>;

    /**
     * Gets all the return reasons.
     * @summary Get Reasons
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReasonsRaw(requestParameters: GetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReasonCollection>>;

    /**
     * Gets all the return reasons.
     * Get Reasons
     */
    getReasons(requestParameters: GetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReasonCollection>;

    /**
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * @summary Get Return
     * @param {string} returnId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnRaw(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * Get Return
     */
    getReturn(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * Retrieves the details of a single return item.
     * @summary Get Return Item
     * @param {string} returnId Unique identifier of the return whose item you want to get.
     * @param {string} returnItemId Unique identifier of the return item whose details you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnItemRaw(requestParameters: GetReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnItem>>;

    /**
     * Retrieves the details of a single return item.
     * Get Return Item
     */
    getReturnItem(requestParameters: GetReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnItem>;

    /**
     * Retrieves the details of all return items in an order.
     * @summary Get Return Items
     * @param {string} returnId Unique identifier of the return whose items you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnItemsRaw(requestParameters: GetReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnItemCollection>>;

    /**
     * Retrieves the details of all return items in an order.
     * Get Return Items
     */
    getReturnItems(requestParameters: GetReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnItemCollection>;

    /**
     * Gets the return label specified by returnId.
     * @summary Get Return Label
     * @param {string} returnId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnLabelRaw(requestParameters: GetReturnLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipmentResponse>>;

    /**
     * Gets the return label specified by returnId.
     * Get Return Label
     */
    getReturnLabel(requestParameters: GetReturnLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipmentResponse>;

    /**
     * Retrieves a specific note from a return.
     * @summary Get Return Note
     * @param {string} returnId Unique identifier of the return whose note you want to get.
     * @param {string} noteId Unique identifier of the note whose text you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnNoteRaw(requestParameters: GetReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>>;

    /**
     * Retrieves a specific note from a return.
     * Get Return Note
     */
    getReturnNote(requestParameters: GetReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote>;

    /**
     * Retrieves a list of all notes for a return.
     * @summary Get Return Notes
     * @param {string} returnId Unique identifier of the return whose notes you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnNotesRaw(requestParameters: GetReturnNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderNote>>>;

    /**
     * Retrieves a list of all notes for a return.
     * Get Return Notes
     */
    getReturnNotes(requestParameters: GetReturnNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderNote>>;

    /**
     * Provides a paged, collection of returns for a Site.
     * @summary Get Returns
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [q] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getReturnsRaw(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnCollection>>;

    /**
     * Provides a paged, collection of returns for a Site.
     * Get Returns
     */
    getReturns(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnCollection>;

    /**
     * 
     * @summary Allows a shipment to be retrieved for the order
     * @param {string} returnId ID of the return
     * @param {string} shipmentId Shipment ID of the return.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    getShipmentRaw(requestParameters: GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>>;

    /**
     * 
     * Allows a shipment to be retrieved for the order
     */
    getShipment(requestParameters: GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment>;

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * @summary Perform Payment Action For Return
     * @param {string} returnId 
     * @param {string} paymentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {PaymentAction} [paymentAction] Action to specify. Possible actions can be \&quot;Create,\&quot; \&quot;Capture,\&quot; \&quot;Void,\&quot; \&quot;AuthCapture,\&quot; or \&quot;ReceiveCheck.\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    performPaymentActionForReturnRaw(requestParameters: PerformPaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * Perform Payment Action For Return
     */
    performPaymentActionForReturn(requestParameters: PerformPaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * Perform Return Action.
     * @summary Delete Return
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReturnAction} [returnAction] A ReturnAction instance that takes the name of the action to be performed and a list of Return Ids upon which to perform the action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    performReturnActionsRaw(requestParameters: PerformReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnCollection>>;

    /**
     * Perform Return Action.
     * Delete Return
     */
    performReturnActions(requestParameters: PerformReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnCollection>;

    /**
     * Resends return email.
     * @summary Resend Return Email
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReturnAction} [returnAction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    resendReturnEmailRaw(requestParameters: ResendReturnEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resends return email.
     * Resend Return Email
     */
    resendReturnEmail(requestParameters: ResendReturnEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * API to restock return item.
     * @summary Restock Return Items
     * @param {string} returnId Return ID
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<RestockableReturnItem>} [restockableReturnItem] List of return items with quantity to be restocked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    restockReturnItemsRaw(requestParameters: RestockReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * API to restock return item.
     * Restock Return Items
     */
    restockReturnItems(requestParameters: RestockReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * 
     * @summary Delete an order package
     * @param {string} returnId Unique identifier of the return with which to associate the package.
     * @param {string} packageId Package to update on the return
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimePackage} [commerceRuntimePackage] Package content to update on the return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    updatePackageRaw(requestParameters: UpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>>;

    /**
     * 
     * Delete an order package
     */
    updatePackage(requestParameters: UpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage>;

    /**
     * Gets all the return reasons.
     * @summary Get Reasons
     * @param {string} returnId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Return} [_return] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    updateReturnRaw(requestParameters: UpdateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>>;

    /**
     * Gets all the return reasons.
     * Get Reasons
     */
    updateReturn(requestParameters: UpdateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return>;

    /**
     * Updates a specific note for a return.
     * @summary Update Return Note
     * @param {string} returnId Unique identifier of the return whose note you want to update.
     * @param {string} noteId Unique identifier of the note whose text you want to update.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderNote} [orderNote] Text of the note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnApiInterface
     */
    updateReturnNoteRaw(requestParameters: UpdateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>>;

    /**
     * Updates a specific note for a return.
     * Update Return Note
     */
    updateReturnNote(requestParameters: UpdateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote>;

}

/**
 * 
 */
export class ReturnApi extends runtime.BaseAPI implements ReturnApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     */


    async autoRefundRaw(requestParameters: AutoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling autoRefund.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/autorefund`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.autoRefundRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     */
    async autoRefund(requestParameters: AutoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.autoRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  package?
     * Apply a package to the return
     */


    async createPackageRaw(requestParameters: CreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimePackage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  package?
     * Apply a package to the return
     */
    async createPackage(requestParameters: CreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage> {
        const response = await this.createPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */


    async createPackageShipmentsRaw(requestParameters: CreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimePackage>>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createPackageShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipments`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */
    async createPackageShipments(requestParameters: CreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimePackage>> {
        const response = await this.createPackageShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action For Return
     */


    async createPaymentActionForReturnRaw(requestParameters: CreatePaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createPaymentActionForReturn.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments/actions`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action For Return
     */
    async createPaymentActionForReturn(requestParameters: CreatePaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.createPaymentActionForReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Return for an order or product list.
     * Create Returns
     */


    async createReturnRaw(requestParameters: CreateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters._return,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Return for an order or product list.
     * Create Returns
     */
    async createReturn(requestParameters: CreateReturnRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.createReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a return item to the return.
     * Create Return Item
     */


    async createReturnItemRaw(requestParameters: CreateReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createReturnItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/items`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a return item to the return.
     * Create Return Item
     */
    async createReturnItem(requestParameters: CreateReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.createReturnItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * Create Return Note
     */


    async createReturnNoteRaw(requestParameters: CreateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createReturnNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderNote,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * Create Return Note
     */
    async createReturnNote(requestParameters: CreateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.createReturnNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * Create Return Shipping Order
     */


    async createReturnShippingOrderRaw(requestParameters: CreateReturnShippingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createReturnShippingOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/ship`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnItemSpecifier,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * Create Return Shipping Order
     */
    async createReturnShippingOrder(requestParameters: CreateReturnShippingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createReturnShippingOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a particular return item from the return of the current shopper.
     * Delete Order Item
     */


    async deleteOrderItemRaw(requestParameters: DeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderItem.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling deleteOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnId !== undefined) {
            queryParameters['returnId'] = requestParameters.returnId;
        }

        if (requestParameters.returnItemId !== undefined) {
            queryParameters['returnItemId'] = requestParameters.returnItemId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{orderId}/items/{orderItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a particular return item from the return of the current shopper.
     * Delete Order Item
     */
    async deleteOrderItem(requestParameters: DeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.deleteOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete an order package
     */


    async deletePackageRaw(requestParameters: DeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deletePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling deletePackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete an order package
     */
    async deletePackage(requestParameters: DeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a return specified by return Id.
     * Delete Return
     */


    async deleteReturnRaw(requestParameters: DeleteReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deleteReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a return specified by return Id.
     * Delete Return
     */
    async deleteReturn(requestParameters: DeleteReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReturnRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a specific note on a return.
     * Delete Return Note
     */


    async deleteReturnNoteRaw(requestParameters: DeleteReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deleteReturnNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteReturnNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes/{noteId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific note on a return.
     * Delete Return Note
     */
    async deleteReturnNote(requestParameters: DeleteReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReturnNoteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     */


    async deleteShipmentRaw(requestParameters: DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deleteShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling deleteShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipments/{shipmentId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     */
    async deleteShipment(requestParameters: DeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets all the available actions on the return specified by return Id.
     * Get Available Return Actions
     */


    async getAvailableReturnActionsRaw(requestParameters: GetAvailableReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getAvailableReturnActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/actions`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets all the available actions on the return specified by return Id.
     * Get Available Return Actions
     */
    async getAvailableReturnActions(requestParameters: GetAvailableReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableReturnActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package
     * Get an order package
     */


    async getPackageRaw(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an order package
     * Get an order package
     */
    async getPackage(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package
     * Get an order package
     */


    async getPackageLabelRaw(requestParameters: GetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPackageLabel.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackageLabel.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnAsBase64Png !== undefined) {
            queryParameters['returnAsBase64Png'] = requestParameters.returnAsBase64Png;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}/label`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get an order package
     * Get an order package
     */
    async getPackageLabel(requestParameters: GetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPackageLabelRaw(requestParameters, initOverrides);
    }

    /**
     * Gets specific payment on the return specified by return Id and payment Id.
     * Get Payment
     */


    async getPaymentRaw(requestParameters: GetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPayment.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling getPayment.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments/{paymentId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets specific payment on the return specified by return Id and payment Id.
     * Get Payment
     */
    async getPayment(requestParameters: GetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.getPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     */


    async getPaymentDistributionRaw(requestParameters: GetPaymentDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnRefundDetails>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPaymentDistribution.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/paymentDistribution`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     */
    async getPaymentDistribution(requestParameters: GetPaymentDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnRefundDetails> {
        const response = await this.getPaymentDistributionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets payments on the return specified by return Id.
     * Get Payments
     */


    async getPaymentsRaw(requestParameters: GetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCollection>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPayments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets payments on the return specified by return Id.
     * Get Payments
     */
    async getPayments(requestParameters: GetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCollection> {
        const response = await this.getPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */


    async getReasonsRaw(requestParameters: GetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReasonCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/reasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */
    async getReasons(requestParameters: GetReasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReasonCollection> {
        const response = await this.getReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * Get Return
     */


    async getReturnRaw(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturn.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * Get Return
     */
    async getReturn(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.getReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single return item.
     * Get Return Item
     */


    async getReturnItemRaw(requestParameters: GetReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnItem>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnItem.');
        }

        if (requestParameters.returnItemId === null || requestParameters.returnItemId === undefined) {
            throw new runtime.RequiredError('returnItemId','Required parameter requestParameters.returnItemId was null or undefined when calling getReturnItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/items/{returnItemId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"returnItemId"}}`, encodeURIComponent(String(requestParameters.returnItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single return item.
     * Get Return Item
     */
    async getReturnItem(requestParameters: GetReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnItem> {
        const response = await this.getReturnItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of all return items in an order.
     * Get Return Items
     */


    async getReturnItemsRaw(requestParameters: GetReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnItemCollection>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/items`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of all return items in an order.
     * Get Return Items
     */
    async getReturnItems(requestParameters: GetReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnItemCollection> {
        const response = await this.getReturnItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the return label specified by returnId.
     * Get Return Label
     */


    async getReturnLabelRaw(requestParameters: GetReturnLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipmentResponse>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnLabel.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipping/label`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the return label specified by returnId.
     * Get Return Label
     */
    async getReturnLabel(requestParameters: GetReturnLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipmentResponse> {
        const response = await this.getReturnLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific note from a return.
     * Get Return Note
     */


    async getReturnNoteRaw(requestParameters: GetReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling getReturnNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes/{noteId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific note from a return.
     * Get Return Note
     */
    async getReturnNote(requestParameters: GetReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.getReturnNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all notes for a return.
     * Get Return Notes
     */


    async getReturnNotesRaw(requestParameters: GetReturnNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderNote>>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnNotes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all notes for a return.
     * Get Return Notes
     */
    async getReturnNotes(requestParameters: GetReturnNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderNote>> {
        const response = await this.getReturnNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a paged, collection of returns for a Site.
     * Get Returns
     */


    async getReturnsRaw(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Provides a paged, collection of returns for a Site.
     * Get Returns
     */
    async getReturns(requestParameters: GetReturnsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnCollection> {
        const response = await this.getReturnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Allows a shipment to be retrieved for the order
     */


    async getShipmentRaw(requestParameters: GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipment.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipments/{shipmentId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Allows a shipment to be retrieved for the order
     */
    async getShipment(requestParameters: GetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment> {
        const response = await this.getShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * Perform Payment Action For Return
     */


    async performPaymentActionForReturnRaw(requestParameters: PerformPaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling performPaymentActionForReturn.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling performPaymentActionForReturn.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments/{paymentId}/actions`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * Perform Payment Action For Return
     */
    async performPaymentActionForReturn(requestParameters: PerformPaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.performPaymentActionForReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform Return Action.
     * Delete Return
     */


    async performReturnActionsRaw(requestParameters: PerformReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/actions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Perform Return Action.
     * Delete Return
     */
    async performReturnActions(requestParameters: PerformReturnActionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnCollection> {
        const response = await this.performReturnActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resends return email.
     * Resend Return Email
     */


    async resendReturnEmailRaw(requestParameters: ResendReturnEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/email/resend`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnAction,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resends return email.
     * Resend Return Email
     */
    async resendReturnEmail(requestParameters: ResendReturnEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendReturnEmailRaw(requestParameters, initOverrides);
    }

    /**
     * API to restock return item.
     * Restock Return Items
     */


    async restockReturnItemsRaw(requestParameters: RestockReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling restockReturnItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/restock`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restockableReturnItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * API to restock return item.
     * Restock Return Items
     */
    async restockReturnItems(requestParameters: RestockReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.restockReturnItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete an order package
     */


    async updatePackageRaw(requestParameters: UpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling updatePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling updatePackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimePackage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Delete an order package
     */
    async updatePackage(requestParameters: UpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage> {
        const response = await this.updatePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */


    async updateReturnRaw(requestParameters: UpdateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling updateReturn.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters._return,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */
    async updateReturn(requestParameters: UpdateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.updateReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific note for a return.
     * Update Return Note
     */


    async updateReturnNoteRaw(requestParameters: UpdateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling updateReturnNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateReturnNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes/{noteId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderNote,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a specific note for a return.
     * Update Return Note
     */
    async updateReturnNote(requestParameters: UpdateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.updateReturnNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
