/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AutoRefundRequest,
  CarrierServiceGenerateLabelResponse,
  Order,
  OrderNote,
  Package,
  Payment,
  PaymentAction,
  PaymentCollection,
  ReasonCollection,
  RestockableReturnItem,
  Return,
  ReturnAction,
  ReturnCollection,
  ReturnItem,
  ReturnItemCollection,
  ReturnItemSpecifier,
  ReturnRefundDetails,
  Shipment,
} from '../models';
import {
    AutoRefundRequestFromJSON,
    AutoRefundRequestToJSON,
    CarrierServiceGenerateLabelResponseFromJSON,
    CarrierServiceGenerateLabelResponseToJSON,
    OrderFromJSON,
    OrderToJSON,
    OrderNoteFromJSON,
    OrderNoteToJSON,
    PackageFromJSON,
    PackageToJSON,
    PaymentFromJSON,
    PaymentToJSON,
    PaymentActionFromJSON,
    PaymentActionToJSON,
    PaymentCollectionFromJSON,
    PaymentCollectionToJSON,
    ReasonCollectionFromJSON,
    ReasonCollectionToJSON,
    RestockableReturnItemFromJSON,
    RestockableReturnItemToJSON,
    ReturnFromJSON,
    ReturnToJSON,
    ReturnActionFromJSON,
    ReturnActionToJSON,
    ReturnCollectionFromJSON,
    ReturnCollectionToJSON,
    ReturnItemFromJSON,
    ReturnItemToJSON,
    ReturnItemCollectionFromJSON,
    ReturnItemCollectionToJSON,
    ReturnItemSpecifierFromJSON,
    ReturnItemSpecifierToJSON,
    ReturnRefundDetailsFromJSON,
    ReturnRefundDetailsToJSON,
    ShipmentFromJSON,
    ShipmentToJSON,
} from '../models';

export interface ReturnApiAutoRefundOperationRequest {
    returnId: string;
    autoRefundRequest?: Array<AutoRefundRequest>;
}

export interface ReturnApiCreatePackageRequest {
    returnId: string;
    _package?: Package;
}

export interface ReturnApiCreatePackageShipmentsRequest {
    returnId: string;
    requestBody?: Array<string>;
}

export interface ReturnApiCreatePaymentActionForReturnRequest {
    returnId: string;
    paymentAction?: PaymentAction;
}

export interface ReturnApiCreateReturnRequest {
    _return?: Return;
}

export interface ReturnApiCreateReturnItemRequest {
    returnId: string;
    returnItem?: ReturnItem;
}

export interface ReturnApiCreateReturnNoteRequest {
    returnId: string;
    orderNote?: OrderNote;
}

export interface ReturnApiCreateReturnShippingOrderRequest {
    returnId: string;
    returnItemSpecifier?: Array<ReturnItemSpecifier>;
}

export interface ReturnApiDeleteOrderItemRequest {
    orderId: string;
    orderItemId: string;
    returnId?: string;
    returnItemId?: string;
}

export interface ReturnApiDeletePackageRequest {
    returnId: string;
    packageId: string;
}

export interface ReturnApiDeleteReturnRequest {
    returnId: string;
}

export interface ReturnApiDeleteReturnNoteRequest {
    returnId: string;
    noteId: string;
}

export interface ReturnApiDeleteShipmentRequest {
    returnId: string;
    shipmentId: string;
}

export interface ReturnApiGetAvailableReturnActionsRequest {
    returnId: string;
}

export interface ReturnApiGetPackageRequest {
    returnId: string;
    packageId: string;
}

export interface ReturnApiGetPackageLabelRequest {
    returnId: string;
    packageId: string;
    returnAsBase64Png?: boolean;
}

export interface ReturnApiGetPaymentRequest {
    returnId: string;
    paymentId: string;
}

export interface ReturnApiGetPaymentDistributionRequest {
    returnId: string;
}

export interface ReturnApiGetPaymentsRequest {
    returnId: string;
}

export interface ReturnApiGetReturnRequest {
    returnId: string;
}

export interface ReturnApiGetReturnItemRequest {
    returnId: string;
    returnItemId: string;
}

export interface ReturnApiGetReturnItemsRequest {
    returnId: string;
}

export interface ReturnApiGetReturnLabelRequest {
    returnId: string;
}

export interface ReturnApiGetReturnNoteRequest {
    returnId: string;
    noteId: string;
}

export interface ReturnApiGetReturnNotesRequest {
    returnId: string;
}

export interface ReturnApiGetReturnsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
}

export interface ReturnApiGetShipmentRequest {
    returnId: string;
    shipmentId: string;
}

export interface ReturnApiPerformPaymentActionForReturnRequest {
    returnId: string;
    paymentId: string;
    paymentAction?: PaymentAction;
}

export interface ReturnApiPerformReturnActionsRequest {
    returnAction?: ReturnAction;
}

export interface ReturnApiResendReturnEmailRequest {
    returnAction?: ReturnAction;
}

export interface ReturnApiRestockReturnItemsRequest {
    returnId: string;
    restockableReturnItem?: Array<RestockableReturnItem>;
}

export interface ReturnApiUpdatePackageRequest {
    returnId: string;
    packageId: string;
    _package?: Package;
}

export interface ReturnApiUpdateReturnRequest {
    returnId: string;
    _return?: Return;
}

export interface ReturnApiUpdateReturnNoteRequest {
    returnId: string;
    noteId: string;
    orderNote?: OrderNote;
}

/**
 * 
 */
export class ReturnApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     */


    async autoRefundRaw(requestParameters: ReturnApiAutoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling autoRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/autorefund`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.autoRefundRequest.map(AutoRefundRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Attempt to automatically refund the return
     * Attempt to automatically refund the return
     */
    async autoRefund(requestParameters: ReturnApiAutoRefundOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.autoRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  package?
     * Apply a package to the return
     */


    async createPackageRaw(requestParameters: ReturnApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageToJSON(requestParameters._package),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     *  package?
     * Apply a package to the return
     */
    async createPackage(requestParameters: ReturnApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.createPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */


    async createPackageShipmentsRaw(requestParameters: ReturnApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Package>>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createPackageShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipments`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PackageFromJSON));
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */
    async createPackageShipments(requestParameters: ReturnApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Package>> {
        const response = await this.createPackageShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action For Return
     */


    async createPaymentActionForReturnRaw(requestParameters: ReturnApiCreatePaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createPaymentActionForReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments/actions`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentActionToJSON(requestParameters.paymentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action For Return
     */
    async createPaymentActionForReturn(requestParameters: ReturnApiCreatePaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.createPaymentActionForReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Return for an order or product list.
     * Create Returns
     */


    async createReturnRaw(requestParameters: ReturnApiCreateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnToJSON(requestParameters._return),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Creates a new Return for an order or product list.
     * Create Returns
     */
    async createReturn(requestParameters: ReturnApiCreateReturnRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.createReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a return item to the return.
     * Create Return Item
     */


    async createReturnItemRaw(requestParameters: ReturnApiCreateReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createReturnItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/items`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnItemToJSON(requestParameters.returnItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Adds a return item to the return.
     * Create Return Item
     */
    async createReturnItem(requestParameters: ReturnApiCreateReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.createReturnItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * Create Return Note
     */


    async createReturnNoteRaw(requestParameters: ReturnApiCreateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createReturnNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderNoteToJSON(requestParameters.orderNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderNoteFromJSON(jsonValue));
    }

    /**
     * Adds a note to the return. This is an internal note that the merchant might want to add to a return. This note is visible in Admin for customer service representatives to see.
     * Create Return Note
     */
    async createReturnNote(requestParameters: ReturnApiCreateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.createReturnNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * Create Return Shipping Order
     */


    async createReturnShippingOrderRaw(requestParameters: ReturnApiCreateReturnShippingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling createReturnShippingOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/ship`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.returnItemSpecifier.map(ReturnItemSpecifierToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Creates a child order for the return for processing replacments. The request body (a collection of ReturnItemSpecifier) is optional. If the body is empty, the operation replaces all remaining items marked for replace. If you want to replace only a specific item(s) marked for return, you must specify the item(s) in the request body.
     * Create Return Shipping Order
     */
    async createReturnShippingOrder(requestParameters: ReturnApiCreateReturnShippingOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createReturnShippingOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a particular return item from the return of the current shopper.
     * Delete Order Item
     */


    async deleteOrderItemRaw(requestParameters: ReturnApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderItem.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling deleteOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnId !== undefined) {
            queryParameters['returnId'] = requestParameters.returnId;
        }

        if (requestParameters.returnItemId !== undefined) {
            queryParameters['returnItemId'] = requestParameters.returnItemId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{orderId}/items/{orderItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Removes a particular return item from the return of the current shopper.
     * Delete Order Item
     */
    async deleteOrderItem(requestParameters: ReturnApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.deleteOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete an order package
     */


    async deletePackageRaw(requestParameters: ReturnApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deletePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling deletePackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete an order package
     */
    async deletePackage(requestParameters: ReturnApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a return specified by return Id.
     * Delete Return
     */


    async deleteReturnRaw(requestParameters: ReturnApiDeleteReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deleteReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a return specified by return Id.
     * Delete Return
     */
    async deleteReturn(requestParameters: ReturnApiDeleteReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReturnRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a specific note on a return.
     * Delete Return Note
     */


    async deleteReturnNoteRaw(requestParameters: ReturnApiDeleteReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deleteReturnNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteReturnNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes/{noteId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific note on a return.
     * Delete Return Note
     */
    async deleteReturnNote(requestParameters: ReturnApiDeleteReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReturnNoteRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     */


    async deleteShipmentRaw(requestParameters: ReturnApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling deleteShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling deleteShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipments/{shipmentId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing return shipment
     * Deletes an existing return shipment
     */
    async deleteShipment(requestParameters: ReturnApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets all the available actions on the return specified by return Id.
     * Get Available Return Actions
     */


    async getAvailableReturnActionsRaw(requestParameters: ReturnApiGetAvailableReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getAvailableReturnActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/actions`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets all the available actions on the return specified by return Id.
     * Get Available Return Actions
     */
    async getAvailableReturnActions(requestParameters: ReturnApiGetAvailableReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableReturnActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package
     * Get an order package
     */


    async getPackageRaw(requestParameters: ReturnApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * Get an order package
     * Get an order package
     */
    async getPackage(requestParameters: ReturnApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package
     * Get an order package
     */


    async getPackageLabelRaw(requestParameters: ReturnApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPackageLabel.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackageLabel.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnAsBase64Png !== undefined) {
            queryParameters['returnAsBase64Png'] = requestParameters.returnAsBase64Png;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}/label`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get an order package
     * Get an order package
     */
    async getPackageLabel(requestParameters: ReturnApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPackageLabelRaw(requestParameters, initOverrides);
    }

    /**
     * Gets specific payment on the return specified by return Id and payment Id.
     * Get Payment
     */


    async getPaymentRaw(requestParameters: ReturnApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPayment.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling getPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments/{paymentId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Gets specific payment on the return specified by return Id and payment Id.
     * Get Payment
     */
    async getPayment(requestParameters: ReturnApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.getPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     */


    async getPaymentDistributionRaw(requestParameters: ReturnApiGetPaymentDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnRefundDetails>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPaymentDistribution.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/paymentDistribution`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnRefundDetailsFromJSON(jsonValue));
    }

    /**
     * Get Payment Distribution
     * Get Payment Distribution
     */
    async getPaymentDistribution(requestParameters: ReturnApiGetPaymentDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnRefundDetails> {
        const response = await this.getPaymentDistributionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets payments on the return specified by return Id.
     * Get Payments
     */


    async getPaymentsRaw(requestParameters: ReturnApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCollection>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getPayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentCollectionFromJSON(jsonValue));
    }

    /**
     * Gets payments on the return specified by return Id.
     * Get Payments
     */
    async getPayments(requestParameters: ReturnApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCollection> {
        const response = await this.getPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */


    async getReasonsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReasonCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/reasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReasonCollectionFromJSON(jsonValue));
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */
    async getReasons(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReasonCollection> {
        const response = await this.getReasonsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * Get Return
     */


    async getReturnRaw(requestParameters: ReturnApiGetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Allows for retrieval for a return given only the return Id.  Further manipulation of that returns must be done off of the order.
     * Get Return
     */
    async getReturn(requestParameters: ReturnApiGetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.getReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single return item.
     * Get Return Item
     */


    async getReturnItemRaw(requestParameters: ReturnApiGetReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnItem>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnItem.');
        }

        if (requestParameters.returnItemId === null || requestParameters.returnItemId === undefined) {
            throw new runtime.RequiredError('returnItemId','Required parameter requestParameters.returnItemId was null or undefined when calling getReturnItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/items/{returnItemId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"returnItemId"}}`, encodeURIComponent(String(requestParameters.returnItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnItemFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a single return item.
     * Get Return Item
     */
    async getReturnItem(requestParameters: ReturnApiGetReturnItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnItem> {
        const response = await this.getReturnItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of all return items in an order.
     * Get Return Items
     */


    async getReturnItemsRaw(requestParameters: ReturnApiGetReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnItemCollection>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/items`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnItemCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of all return items in an order.
     * Get Return Items
     */
    async getReturnItems(requestParameters: ReturnApiGetReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnItemCollection> {
        const response = await this.getReturnItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the return label specified by returnId.
     * Get Return Label
     */


    async getReturnLabelRaw(requestParameters: ReturnApiGetReturnLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierServiceGenerateLabelResponse>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipping/label`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarrierServiceGenerateLabelResponseFromJSON(jsonValue));
    }

    /**
     * Gets the return label specified by returnId.
     * Get Return Label
     */
    async getReturnLabel(requestParameters: ReturnApiGetReturnLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierServiceGenerateLabelResponse> {
        const response = await this.getReturnLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific note from a return.
     * Get Return Note
     */


    async getReturnNoteRaw(requestParameters: ReturnApiGetReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling getReturnNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes/{noteId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderNoteFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific note from a return.
     * Get Return Note
     */
    async getReturnNote(requestParameters: ReturnApiGetReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.getReturnNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all notes for a return.
     * Get Return Notes
     */


    async getReturnNotesRaw(requestParameters: ReturnApiGetReturnNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderNote>>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getReturnNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderNoteFromJSON));
    }

    /**
     * Retrieves a list of all notes for a return.
     * Get Return Notes
     */
    async getReturnNotes(requestParameters: ReturnApiGetReturnNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderNote>> {
        const response = await this.getReturnNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides a paged, collection of returns for a Site.
     * Get Returns
     */


    async getReturnsRaw(requestParameters: ReturnApiGetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnCollectionFromJSON(jsonValue));
    }

    /**
     * Provides a paged, collection of returns for a Site.
     * Get Returns
     */
    async getReturns(requestParameters: ReturnApiGetReturnsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnCollection> {
        const response = await this.getReturnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Allows a shipment to be retrieved for the order
     */


    async getShipmentRaw(requestParameters: ReturnApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shipment>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling getShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/shipments/{shipmentId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentFromJSON(jsonValue));
    }

    /**
     * 
     * Allows a shipment to be retrieved for the order
     */
    async getShipment(requestParameters: ReturnApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shipment> {
        const response = await this.getShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * Perform Payment Action For Return
     */


    async performPaymentActionForReturnRaw(requestParameters: ReturnApiPerformPaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling performPaymentActionForReturn.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling performPaymentActionForReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/payments/{paymentId}/actions`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentActionToJSON(requestParameters.paymentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.  To retrieve the list of available actions, use an operation like GetAvailableReturnActions to view the actions available for the resource you are updating.
     * Perform Payment Action For Return
     */
    async performPaymentActionForReturn(requestParameters: ReturnApiPerformPaymentActionForReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.performPaymentActionForReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform Return Action.
     * Delete Return
     */


    async performReturnActionsRaw(requestParameters: ReturnApiPerformReturnActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReturnCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/actions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnActionToJSON(requestParameters.returnAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnCollectionFromJSON(jsonValue));
    }

    /**
     * Perform Return Action.
     * Delete Return
     */
    async performReturnActions(requestParameters: ReturnApiPerformReturnActionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReturnCollection> {
        const response = await this.performReturnActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resends return email.
     * Resend Return Email
     */


    async resendReturnEmailRaw(requestParameters: ReturnApiResendReturnEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/email/resend`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnActionToJSON(requestParameters.returnAction),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resends return email.
     * Resend Return Email
     */
    async resendReturnEmail(requestParameters: ReturnApiResendReturnEmailRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendReturnEmailRaw(requestParameters, initOverrides);
    }

    /**
     * API to restock return item.
     * Restock Return Items
     */


    async restockReturnItemsRaw(requestParameters: ReturnApiRestockReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling restockReturnItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/restock`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.restockableReturnItem.map(RestockableReturnItemToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * API to restock return item.
     * Restock Return Items
     */
    async restockReturnItems(requestParameters: ReturnApiRestockReturnItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.restockReturnItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete an order package
     */


    async updatePackageRaw(requestParameters: ReturnApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling updatePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling updatePackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/packages/{packageId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageToJSON(requestParameters._package),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * 
     * Delete an order package
     */
    async updatePackage(requestParameters: ReturnApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.updatePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */


    async updateReturnRaw(requestParameters: ReturnApiUpdateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Return>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling updateReturn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReturnToJSON(requestParameters._return),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReturnFromJSON(jsonValue));
    }

    /**
     * Gets all the return reasons.
     * Get Reasons
     */
    async updateReturn(requestParameters: ReturnApiUpdateReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Return> {
        const response = await this.updateReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific note for a return.
     * Update Return Note
     */


    async updateReturnNoteRaw(requestParameters: ReturnApiUpdateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.returnId === null || requestParameters.returnId === undefined) {
            throw new runtime.RequiredError('returnId','Required parameter requestParameters.returnId was null or undefined when calling updateReturnNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateReturnNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/returns/{returnId}/notes/{noteId}`.replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters.returnId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderNoteToJSON(requestParameters.orderNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderNoteFromJSON(jsonValue));
    }

    /**
     * Updates a specific note for a return.
     * Update Return Note
     */
    async updateReturnNote(requestParameters: ReturnApiUpdateReturnNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.updateReturnNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
