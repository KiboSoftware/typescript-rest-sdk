/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ChannelGroup,
  ChannelGroupCollection,
} from '../models';
import {
    ChannelGroupFromJSON,
    ChannelGroupToJSON,
    ChannelGroupCollectionFromJSON,
    ChannelGroupCollectionToJSON,
} from '../models';

export interface ChannelGroupApiCreateChannelGroupRequest {
    channelGroup?: ChannelGroup;
}

export interface ChannelGroupApiDeleteChannelGroupRequest {
    code: string;
}

export interface ChannelGroupApiGetChannelGroupRequest {
    code: string;
}

export interface ChannelGroupApiGetChannelGroupsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface ChannelGroupApiUpdateChannelGroupRequest {
    code: string;
    channelGroup?: ChannelGroup;
}

/**
 * 
 */
export class ChannelGroupApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new channel group.
     * Creates Channel Group.
     */


    async createChannelGroupRaw(requestParameters: ChannelGroupApiCreateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/channelgroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGroupToJSON(requestParameters.channelGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGroupFromJSON(jsonValue));
    }

    /**
     * Creates a new channel group.
     * Creates Channel Group.
     */
    async createChannelGroup(requestParameters: ChannelGroupApiCreateChannelGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup> {
        const response = await this.createChannelGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a channel grop specified by group code.
     * Delete Channel Group
     */


    async deleteChannelGroupRaw(requestParameters: ChannelGroupApiDeleteChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteChannelGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/channelgroups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a channel grop specified by group code.
     * Delete Channel Group
     */
    async deleteChannelGroup(requestParameters: ChannelGroupApiDeleteChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteChannelGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of an channel group specified by the code.
     * Get Channel Group
     */


    async getChannelGroupRaw(requestParameters: ChannelGroupApiGetChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getChannelGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/channelgroups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGroupFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of an channel group specified by the code.
     * Get Channel Group
     */
    async getChannelGroup(requestParameters: ChannelGroupApiGetChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup> {
        const response = await this.getChannelGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of channel groups according to any specified filter criteria and sort options.
     * Get Channel Groups
     */


    async getChannelGroupsRaw(requestParameters: ChannelGroupApiGetChannelGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroupCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/channelgroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGroupCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of channel groups according to any specified filter criteria and sort options.
     * Get Channel Groups
     */
    async getChannelGroups(requestParameters: ChannelGroupApiGetChannelGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroupCollection> {
        const response = await this.getChannelGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific channel group.
     * Updates Channel Group.
     */


    async updateChannelGroupRaw(requestParameters: ChannelGroupApiUpdateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateChannelGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/channelgroups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGroupToJSON(requestParameters.channelGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGroupFromJSON(jsonValue));
    }

    /**
     * Updates a specific channel group.
     * Updates Channel Group.
     */
    async updateChannelGroup(requestParameters: ChannelGroupApiUpdateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup> {
        const response = await this.updateChannelGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
