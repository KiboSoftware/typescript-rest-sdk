/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ChannelGroup,
  ChannelGroupCollection,
} from '../models';


export namespace channelGroupApiParams { 
    export interface CreateChannelGroupRequest {
        responseFields?: string;
        channelGroup?: ChannelGroup;
    }
    export interface DeleteChannelGroupRequest {
        code: string;
    }
    export interface GetChannelGroupRequest {
        code: string;
        responseFields?: string;
    }
    export interface GetChannelGroupsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface UpdateChannelGroupRequest {
        code: string;
        responseFields?: string;
        channelGroup?: ChannelGroup;
    }
}
/**
* ChannelGroupApiService - interface
* 
* @export
* @interface ChannelGroupApi
*/
export interface ChannelGroupApiService {
    /**
    * Creates a new channel group.
    * @summary Creates Channel Group.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ChannelGroup} [channelGroup] All properties of the channel group to place.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ChannelGroupApiInterface
    */
    createChannelGroupRaw(requestParameters: channelGroupApiParams.CreateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>>;

    /**
    * Creates a new channel group.
    * Creates Channel Group.
    */
    createChannelGroup(requestParameters: channelGroupApiParams.CreateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup>;

    /**
    * Deletes a channel grop specified by group code.
    * @summary Delete Channel Group
    * @param {string} code ID of the channel to update.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ChannelGroupApiInterface
    */
    deleteChannelGroupRaw(requestParameters: channelGroupApiParams.DeleteChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes a channel grop specified by group code.
    * Delete Channel Group
    */
    deleteChannelGroup(requestParameters: channelGroupApiParams.DeleteChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Retrieves the details of an channel group specified by the code.
    * @summary Get Channel Group
    * @param {string} code Unique identifier of the channel whose details you want.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ChannelGroupApiInterface
    */
    getChannelGroupRaw(requestParameters: channelGroupApiParams.GetChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>>;

    /**
    * Retrieves the details of an channel group specified by the code.
    * Get Channel Group
    */
    getChannelGroup(requestParameters: channelGroupApiParams.GetChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup>;

    /**
    * Retrieves a list of channel groups according to any specified filter criteria and sort options.
    * @summary Get Channel Groups
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the channel in which the results appear. Either ascending (a-z) or descending (z-a) channel. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ChannelGroupApiInterface
    */
    getChannelGroupsRaw(requestParameters: channelGroupApiParams.GetChannelGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroupCollection>>;

    /**
    * Retrieves a list of channel groups according to any specified filter criteria and sort options.
    * Get Channel Groups
    */
    getChannelGroups(requestParameters: channelGroupApiParams.GetChannelGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroupCollection>;

    /**
    * Updates a specific channel group.
    * @summary Updates Channel Group.
    * @param {string} code ID of the channel to update.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ChannelGroup} [channelGroup] All properties of the channel group to place.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ChannelGroupApiInterface
    */
    updateChannelGroupRaw(requestParameters: channelGroupApiParams.UpdateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>>;

    /**
    * Updates a specific channel group.
    * Updates Channel Group.
    */
    updateChannelGroup(requestParameters: channelGroupApiParams.UpdateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup>;

}


/**
 * 
 */
export class ChannelGroupApi extends runtime.BaseAPI implements ChannelGroupApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new channel group.
     * Creates Channel Group.
     */


    async createChannelGroupRaw(requestParameters: channelGroupApiParams.CreateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/channelgroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.channelGroup,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new channel group.
     * Creates Channel Group.
     */
    async createChannelGroup(requestParameters: channelGroupApiParams.CreateChannelGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup> {
        const response = await this.createChannelGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a channel grop specified by group code.
     * Delete Channel Group
     */


    async deleteChannelGroupRaw(requestParameters: channelGroupApiParams.DeleteChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteChannelGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/channelgroups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a channel grop specified by group code.
     * Delete Channel Group
     */
    async deleteChannelGroup(requestParameters: channelGroupApiParams.DeleteChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteChannelGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of an channel group specified by the code.
     * Get Channel Group
     */


    async getChannelGroupRaw(requestParameters: channelGroupApiParams.GetChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getChannelGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/channelgroups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of an channel group specified by the code.
     * Get Channel Group
     */
    async getChannelGroup(requestParameters: channelGroupApiParams.GetChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup> {
        const response = await this.getChannelGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of channel groups according to any specified filter criteria and sort options.
     * Get Channel Groups
     */


    async getChannelGroupsRaw(requestParameters: channelGroupApiParams.GetChannelGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroupCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/channelgroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of channel groups according to any specified filter criteria and sort options.
     * Get Channel Groups
     */
    async getChannelGroups(requestParameters: channelGroupApiParams.GetChannelGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroupCollection> {
        const response = await this.getChannelGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific channel group.
     * Updates Channel Group.
     */


    async updateChannelGroupRaw(requestParameters: channelGroupApiParams.UpdateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGroup>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateChannelGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/channelgroups/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.channelGroup,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a specific channel group.
     * Updates Channel Group.
     */
    async updateChannelGroup(requestParameters: channelGroupApiParams.UpdateChannelGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGroup> {
        const response = await this.updateChannelGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
