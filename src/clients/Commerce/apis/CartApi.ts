/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Cart,
  CartChangeMessageCollection,
  CartItem,
  CartItemCollection,
  CartSummary,
  ExtendedProperty,
} from '../models';
import {
    CartFromJSON,
    CartToJSON,
    CartChangeMessageCollectionFromJSON,
    CartChangeMessageCollectionToJSON,
    CartItemFromJSON,
    CartItemToJSON,
    CartItemCollectionFromJSON,
    CartItemCollectionToJSON,
    CartSummaryFromJSON,
    CartSummaryToJSON,
    ExtendedPropertyFromJSON,
    ExtendedPropertyToJSON,
} from '../models';

export interface CartApiAddExtendedPropertiesRequest {
    extendedProperty?: Array<ExtendedProperty>;
}

export interface CartApiAddItemToCartRequest {
    zipCode?: string;
    cartItem?: CartItem;
}

export interface CartApiAddItemToCartByCartIdRequest {
    cartId: string;
    zipCode?: string;
    cartItem?: CartItem;
}

export interface CartApiAddItemsToCartRequest {
    throwErrorOnInvalidItems?: boolean;
    zipCode?: string;
    cartItem?: Array<CartItem>;
}

export interface CartApiAddItemsToCartByCartIdRequest {
    cartId: string;
    throwErrorOnInvalidItems?: boolean;
    zipCode?: string;
    cartItem?: Array<CartItem>;
}

export interface CartApiApplyCouponRequest {
    cartId: string;
    couponCode: string;
}

export interface CartApiDeleteCartRequest {
    cartId: string;
}

export interface CartApiDeleteCartItemRequest {
    cartItemId: string;
}

export interface CartApiDeleteCartItemByCartIdRequest {
    cartId: string;
    cartItemId: string;
}

export interface CartApiDeleteExtendedPropertiesRequest {
    requestBody?: Array<string>;
}

export interface CartApiDeleteExtendedPropertyRequest {
    key: string;
}

export interface CartApiDeleteUserCartRequest {
    userId: string;
}

export interface CartApiGetCartRequest {
    cartId: string;
}

export interface CartApiGetCartItemRequest {
    cartItemId: string;
}

export interface CartApiGetCartItemByCartIdRequest {
    cartId: string;
    cartItemId: string;
}

export interface CartApiGetCartItemsByCartIdRequest {
    cartId: string;
}

export interface CartApiGetCartSummaryByCartIdRequest {
    cartId: string;
}

export interface CartApiGetOrCreateUserCartRequest {
    userId: string;
}

export interface CartApiGetUserCartRequest {
    userId: string;
}

export interface CartApiGetUserCartSummaryRequest {
    userId: string;
}

export interface CartApiRejectSuggestedDiscountRequest {
    cartId: string;
    discountId: number;
}

export interface CartApiRemoveAllCartItemsByCartIdRequest {
    cartId: string;
}

export interface CartApiRemoveCouponRequest {
    cartId: string;
    couponCode: string;
}

export interface CartApiRemoveCouponsRequest {
    cartId: string;
}

export interface CartApiRemoveMessageRequest {
    messageId: string;
}

export interface CartApiUpdateCartRequest {
    cart?: Cart;
}

export interface CartApiUpdateCartByCartIdRequest {
    cartId: string;
    cart?: Cart;
}

export interface CartApiUpdateCartItemRequest {
    cartItemId: string;
    zipCode?: string;
    cartItem?: CartItem;
}

export interface CartApiUpdateCartItemByCartIdRequest {
    cartId: string;
    cartItemId: string;
    zipCode?: string;
    cartItem?: CartItem;
}

export interface CartApiUpdateCartItemQuantityRequest {
    cartItemId: string;
    quantity: number;
}

export interface CartApiUpdateCartItemQuantityByCartIdRequest {
    cartId: string;
    cartItemId: string;
    quantity: number;
}

export interface CartApiUpdateExtendedPropertiesRequest {
    upsert?: boolean;
    extendedProperty?: Array<ExtendedProperty>;
}

export interface CartApiUpdateExtendedPropertyRequest {
    key: string;
    upsert?: boolean;
    extendedProperty?: ExtendedProperty;
}

export interface CartApiUpdateUserCartRequest {
    userId: string;
    cart?: Cart;
}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add Extended Properties on the current cart. Store an arbitrary number of cart extended properties such as tracking strings, marketing sources, affiliates, sales personnel/data, and so on, on a per cart basis. Each cart may have none, one, or more than one entry in the extended properties collection, and all values in the extended properties collection are represented as strings. When you create an order from a cart, all extended properties are retained from the cart and copied to the order.
     * Adds extended properties
     */


    async addExtendedPropertiesRaw(requestParameters: CartApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/extendedproperties`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty.map(ExtendedPropertyToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedPropertyFromJSON));
    }

    /**
     * Add Extended Properties on the current cart. Store an arbitrary number of cart extended properties such as tracking strings, marketing sources, affiliates, sales personnel/data, and so on, on a per cart basis. Each cart may have none, one, or more than one entry in the extended properties collection, and all values in the extended properties collection are represented as strings. When you create an order from a cart, all extended properties are retained from the cart and copied to the order.
     * Adds extended properties
     */
    async addExtendedProperties(requestParameters: CartApiAddExtendedPropertiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.addExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Add Item To Cart
     */


    async addItemToCartRaw(requestParameters: CartApiAddItemToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        const queryParameters: any = {};

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemToJSON(requestParameters.cartItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Add Item To Cart
     */
    async addItemToCart(requestParameters: CartApiAddItemToCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.addItemToCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * \"Adds a product or a cart item to the cart specified by the cart ID.
     * Add Item To Cart By CartId
     */


    async addItemToCartByCartIdRaw(requestParameters: CartApiAddItemToCartByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling addItemToCartByCartId.');
        }

        const queryParameters: any = {};

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemToJSON(requestParameters.cartItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * \"Adds a product or a cart item to the cart specified by the cart ID.
     * Add Item To Cart By CartId
     */
    async addItemToCartByCartId(requestParameters: CartApiAddItemToCartByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.addItemToCartByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds multiple cart items to the cart of the current shopper.
     * Add Items To Cart
     */


    async addItemsToCartRaw(requestParameters: CartApiAddItemsToCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.throwErrorOnInvalidItems !== undefined) {
            queryParameters['throwErrorOnInvalidItems'] = requestParameters.throwErrorOnInvalidItems;
        }

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/bulkitems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cartItem.map(CartItemToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds multiple cart items to the cart of the current shopper.
     * Add Items To Cart
     */
    async addItemsToCart(requestParameters: CartApiAddItemsToCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addItemsToCartRaw(requestParameters, initOverrides);
    }

    /**
     * Adds multiple cart items to the cart specified by cartId.
     * Add Items To Cart By CartId
     */


    async addItemsToCartByCartIdRaw(requestParameters: CartApiAddItemsToCartByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling addItemsToCartByCartId.');
        }

        const queryParameters: any = {};

        if (requestParameters.throwErrorOnInvalidItems !== undefined) {
            queryParameters['throwErrorOnInvalidItems'] = requestParameters.throwErrorOnInvalidItems;
        }

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/bulkitems`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.cartItem.map(CartItemToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds multiple cart items to the cart specified by cartId.
     * Add Items To Cart By CartId
     */
    async addItemsToCartByCartId(requestParameters: CartApiAddItemsToCartByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addItemsToCartByCartIdRaw(requestParameters, initOverrides);
    }

    /**
     * Apply coupon to the cart.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: CartApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/coupons/{couponCode}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Apply coupon to the cart.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: CartApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the cart by cart ID.
     * Delete cart
     */


    async deleteCartRaw(requestParameters: CartApiDeleteCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the cart by cart ID.
     * Delete cart
     */
    async deleteCart(requestParameters: CartApiDeleteCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCartRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a particular cart item from the cart of the current shopper.
     * Delete Cart Item
     */


    async deleteCartItemRaw(requestParameters: CartApiDeleteCartItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling deleteCartItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items/{cartItemId}`.replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a particular cart item from the cart of the current shopper.
     * Delete Cart Item
     */
    async deleteCartItem(requestParameters: CartApiDeleteCartItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCartItemRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a particular cart item from the cart specified by cart item Id and cart Id.
     * Delete Cart Item By CartId
     */


    async deleteCartItemByCartIdRaw(requestParameters: CartApiDeleteCartItemByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteCartItemByCartId.');
        }

        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling deleteCartItemByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items/{cartItemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a particular cart item from the cart specified by cart item Id and cart Id.
     * Delete Cart Item By CartId
     */
    async deleteCartItemByCartId(requestParameters: CartApiDeleteCartItemByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCartItemByCartIdRaw(requestParameters, initOverrides);
    }

    /**
     * eletes the cart of the current shopper.
     * Delete Current Cart
     */


    async deleteCurrentCartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * eletes the cart of the current shopper.
     * Delete Current Cart
     */
    async deleteCurrentCart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentCartRaw(initOverrides);
    }

    /**
     * Delete extended properties on the current cart.
     * Delete extended properties.
     */


    async deleteExtendedPropertiesRaw(requestParameters: CartApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/extendedproperties`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete extended properties on the current cart.
     * Delete extended properties.
     */
    async deleteExtendedProperties(requestParameters: CartApiDeleteExtendedPropertiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtendedPropertiesRaw(requestParameters, initOverrides);
    }

    /**
     * Delete extended property on the current cart using the key.
     * Delete Extended Property
     */


    async deleteExtendedPropertyRaw(requestParameters: CartApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteExtendedProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/extendedproperties/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete extended property on the current cart using the key.
     * Delete Extended Property
     */
    async deleteExtendedProperty(requestParameters: CartApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtendedPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the cart of the user by user ID.
     * Delete User Cart
     */


    async deleteUserCartRaw(requestParameters: CartApiDeleteUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUserCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the cart of the user by user ID.
     * Delete User Cart
     */
    async deleteUserCart(requestParameters: CartApiDeleteUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserCartRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of the cart specified by cart ID.
     * Get Cart
     */


    async getCartRaw(requestParameters: CartApiGetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of the cart specified by cart ID.
     * Get Cart
     */
    async getCart(requestParameters: CartApiGetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.getCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an individual cart item from the cart of the current shopper specified by its cart item Id.
     * Get Cart Item
     */


    async getCartItemRaw(requestParameters: CartApiGetCartItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling getCartItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items/{cartItemId}`.replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Retrieves an individual cart item from the cart of the current shopper specified by its cart item Id.
     * Get Cart Item
     */
    async getCartItem(requestParameters: CartApiGetCartItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.getCartItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an individual cart item from the cart by cart Id and cart item Id.
     * Get Cart Item By CartId
     */


    async getCartItemByCartIdRaw(requestParameters: CartApiGetCartItemByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getCartItemByCartId.');
        }

        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling getCartItemByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items/{cartItemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Retrieves an individual cart item from the cart by cart Id and cart item Id.
     * Get Cart Item By CartId
     */
    async getCartItemByCartId(requestParameters: CartApiGetCartItemByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.getCartItemByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price
     * Get Cart Items
     */


    async getCartItemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItemCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price
     * Get Cart Items
     */
    async getCartItems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItemCollection> {
        const response = await this.getCartItemsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price for the cart by cartId.
     * Get Cart Items By CartId
     */


    async getCartItemsByCartIdRaw(requestParameters: CartApiGetCartItemsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItemCollection>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getCartItemsByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of each cart item such as the product name, stock count, unit price, discounts, quantity ordered and total price for the cart by cartId.
     * Get Cart Items By CartId
     */
    async getCartItemsByCartId(requestParameters: CartApiGetCartItemsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItemCollection> {
        const response = await this.getCartItemsByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration. (Anonymous shoppers cart expires in 14 days.)
     * Get Cart Summary
     */


    async getCartSummaryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartSummary>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartSummaryFromJSON(jsonValue));
    }

    /**
     * Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration. (Anonymous shoppers cart expires in 14 days.)
     * Get Cart Summary
     */
    async getCartSummary(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartSummary> {
        const response = await this.getCartSummaryRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the number of items in the specified cart, total cost of items in the cart, and whether the cart has expired by cartId. All anonymous idle carts that do not proceed to checkout expire after 14 days.
     * Get Cart Summary By Cart Id
     */


    async getCartSummaryByCartIdRaw(requestParameters: CartApiGetCartSummaryByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartSummary>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getCartSummaryByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/summary`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartSummaryFromJSON(jsonValue));
    }

    /**
     * Retrieves the number of items in the specified cart, total cost of items in the cart, and whether the cart has expired by cartId. All anonymous idle carts that do not proceed to checkout expire after 14 days.
     * Get Cart Summary By Cart Id
     */
    async getCartSummaryByCartId(requestParameters: CartApiGetCartSummaryByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartSummary> {
        const response = await this.getCartSummaryByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extended properties on a cart.
     * Get Extended Properties
     */


    async getExtendedPropertiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/extendedproperties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedPropertyFromJSON));
    }

    /**
     * Get extended properties on a cart.
     * Get Extended Properties
     */
    async getExtendedProperties(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.getExtendedPropertiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves messages to and from the current shopper. These are messages supplied by the system to notify the shopper of price increases or decreases or product unavailability.
     * Get Messages
     */


    async getMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartChangeMessageCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartChangeMessageCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves messages to and from the current shopper. These are messages supplied by the system to notify the shopper of price increases or decreases or product unavailability.
     * Get Messages
     */
    async getMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartChangeMessageCollection> {
        const response = await this.getMessagesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a cart\'s contents for the current shopper.  If the shopper does not have an active cart on the site, one is created.
     * Get Or Create Cart
     */


    async getOrCreateCartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Retrieves a cart\'s contents for the current shopper.  If the shopper does not have an active cart on the site, one is created.
     * Get Or Create Cart
     */
    async getOrCreateCart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.getOrCreateCartRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the current cart or create a new cart for the user specified by user ID.
     * Get Or Create User Cart
     */


    async getOrCreateUserCartRaw(requestParameters: CartApiGetOrCreateUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getOrCreateUserCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Get the current cart or create a new cart for the user specified by user ID.
     * Get Or Create User Cart
     */
    async getOrCreateUserCart(requestParameters: CartApiGetOrCreateUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.getOrCreateUserCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of the user\'s cart from the user ID.Shoppers are not allowed to execute this call. If this ever changes, then auth logic will need to be added
     * Get User Cart
     */


    async getUserCartRaw(requestParameters: CartApiGetUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of the user\'s cart from the user ID.Shoppers are not allowed to execute this call. If this ever changes, then auth logic will need to be added
     * Get User Cart
     */
    async getUserCart(requestParameters: CartApiGetUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.getUserCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration by userId. All anonymous idle carts that do not proceed to checkout expire after 14 days.
     * Get User Cart Summary
     */


    async getUserCartSummaryRaw(requestParameters: CartApiGetUserCartSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartSummary>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserCartSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/user/{userId}/summary`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartSummaryFromJSON(jsonValue));
    }

    /**
     * Retrieves the number of items in the active cart, total cost of items in the cart and the cart expiration by userId. All anonymous idle carts that do not proceed to checkout expire after 14 days.
     * Get User Cart Summary
     */
    async getUserCartSummary(requestParameters: CartApiGetUserCartSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartSummary> {
        const response = await this.getUserCartSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reject Suggested Discount
     * Reject Suggested Discount
     */


    async rejectSuggestedDiscountRaw(requestParameters: CartApiRejectSuggestedDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling rejectSuggestedDiscount.');
        }

        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling rejectSuggestedDiscount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/rejectautodiscount/{discountId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Reject Suggested Discount
     * Reject Suggested Discount
     */
    async rejectSuggestedDiscount(requestParameters: CartApiRejectSuggestedDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.rejectSuggestedDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clears all the cart items from the cart of a current shopper.
     * Remove All Cart Items
     */


    async removeAllCartItemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Clears all the cart items from the cart of a current shopper.
     * Remove All Cart Items
     */
    async removeAllCartItems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.removeAllCartItemsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Clears all the cart items from the cart by the cartId.
     * Remove All Cart Items By CartId
     */


    async removeAllCartItemsByCartIdRaw(requestParameters: CartApiRemoveAllCartItemsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling removeAllCartItemsByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Clears all the cart items from the cart by the cartId.
     * Remove All Cart Items By CartId
     */
    async removeAllCartItemsByCartId(requestParameters: CartApiRemoveAllCartItemsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.removeAllCartItemsByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all messages associated with the cart of the current shopper.
     * Remove All Messages
     */


    async removeAllMessagesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/messages`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes all messages associated with the cart of the current shopper.
     * Remove All Messages
     */
    async removeAllMessages(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAllMessagesRaw(initOverrides);
    }

    /**
     * Remove Coupon
     * Remove Coupon
     */


    async removeCouponRaw(requestParameters: CartApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling removeCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/coupons/{couponCode}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Remove Coupon
     * Remove Coupon
     */
    async removeCoupon(requestParameters: CartApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all coupons that had been previously applied to the cart.
     * Remove Coupons
     */


    async removeCouponsRaw(requestParameters: CartApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/coupons`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Removes all coupons that had been previously applied to the cart.
     * Remove Coupons
     */
    async removeCoupons(requestParameters: CartApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a single message associated with the cart of the current shopper specified by messageId.
     * Remove Message
     */


    async removeMessageRaw(requestParameters: CartApiRemoveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling removeMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/messages/{messageId}`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a single message associated with the cart of the current shopper specified by messageId.
     * Remove Message
     */
    async removeMessage(requestParameters: CartApiRemoveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeMessageRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the cart of the current shopper.
     * Update Cart
     */


    async updateCartRaw(requestParameters: CartApiUpdateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartToJSON(requestParameters.cart),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Updates the cart of the current shopper.
     * Update Cart
     */
    async updateCart(requestParameters: CartApiUpdateCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.updateCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the cart specified by cart ID
     * Update Cart By Cart Id
     */


    async updateCartByCartIdRaw(requestParameters: CartApiUpdateCartByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling updateCartByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartToJSON(requestParameters.cart),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Updates the cart specified by cart ID
     * Update Cart By Cart Id
     */
    async updateCartByCartId(requestParameters: CartApiUpdateCartByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.updateCartByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a particular cart item in the cart of the current shopper.
     * Update Cart Item
     */


    async updateCartItemRaw(requestParameters: CartApiUpdateCartItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling updateCartItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items/{cartItemId}`.replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemToJSON(requestParameters.cartItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Updates a particular cart item in the cart of the current shopper.
     * Update Cart Item
     */
    async updateCartItem(requestParameters: CartApiUpdateCartItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.updateCartItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a particular cart item in the cart specified by card Id.
     * Update Cart Item By CartId
     */


    async updateCartItemByCartIdRaw(requestParameters: CartApiUpdateCartItemByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling updateCartItemByCartId.');
        }

        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling updateCartItemByCartId.');
        }

        const queryParameters: any = {};

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items/{cartItemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartItemToJSON(requestParameters.cartItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Updates a particular cart item in the cart specified by card Id.
     * Update Cart Item By CartId
     */
    async updateCartItemByCartId(requestParameters: CartApiUpdateCartItemByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.updateCartItemByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the quantity of an individual cart item in the cart of the current shopper.
     * Update Cart Item Quantity
     */


    async updateCartItemQuantityRaw(requestParameters: CartApiUpdateCartItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling updateCartItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateCartItemQuantity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/items/{cartItemId}/{quantity}`.replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Updates the quantity of an individual cart item in the cart of the current shopper.
     * Update Cart Item Quantity
     */
    async updateCartItemQuantity(requestParameters: CartApiUpdateCartItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.updateCartItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the quantity of an individual cart item in the cart specified by cart Id.
     * Update Cart Item Quantity By CartId
     */


    async updateCartItemQuantityByCartIdRaw(requestParameters: CartApiUpdateCartItemQuantityByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartItem>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling updateCartItemQuantityByCartId.');
        }

        if (requestParameters.cartItemId === null || requestParameters.cartItemId === undefined) {
            throw new runtime.RequiredError('cartItemId','Required parameter requestParameters.cartItemId was null or undefined when calling updateCartItemQuantityByCartId.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateCartItemQuantityByCartId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/{cartId}/items/{cartItemId}/{quantity}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"cartItemId"}}`, encodeURIComponent(String(requestParameters.cartItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartItemFromJSON(jsonValue));
    }

    /**
     * Updates the quantity of an individual cart item in the cart specified by cart Id.
     * Update Cart Item Quantity By CartId
     */
    async updateCartItemQuantityByCartId(requestParameters: CartApiUpdateCartItemQuantityByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartItem> {
        const response = await this.updateCartItemQuantityByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update extended properties on the current cart.
     * Update Extended Properties
     */


    async updateExtendedPropertiesRaw(requestParameters: CartApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        const queryParameters: any = {};

        if (requestParameters.upsert !== undefined) {
            queryParameters['upsert'] = requestParameters.upsert;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/extendedproperties`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty.map(ExtendedPropertyToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedPropertyFromJSON));
    }

    /**
     * Update extended properties on the current cart.
     * Update Extended Properties
     */
    async updateExtendedProperties(requestParameters: CartApiUpdateExtendedPropertiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.updateExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update extended property on the current cart using the key.
     * Update extended property
     */


    async updateExtendedPropertyRaw(requestParameters: CartApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedProperty>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateExtendedProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.upsert !== undefined) {
            queryParameters['upsert'] = requestParameters.upsert;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/current/extendedproperties/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtendedPropertyToJSON(requestParameters.extendedProperty),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendedPropertyFromJSON(jsonValue));
    }

    /**
     * Update extended property on the current cart using the key.
     * Update extended property
     */
    async updateExtendedProperty(requestParameters: CartApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedProperty> {
        const response = await this.updateExtendedPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the cart of the user specified by user ID.
     * Update User Cart
     */


    async updateUserCartRaw(requestParameters: CartApiUpdateUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cart>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/carts/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartToJSON(requestParameters.cart),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFromJSON(jsonValue));
    }

    /**
     * Updates the cart of the user specified by user ID.
     * Update User Cart
     */
    async updateUserCart(requestParameters: CartApiUpdateUserCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cart> {
        const response = await this.updateUserCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
