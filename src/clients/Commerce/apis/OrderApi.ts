/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Adjustment,
  AlternateContact,
  BillingInfo,
  CancelReasonCollection,
  CommerceRuntimeAppliedDiscount,
  CommerceRuntimeCanceledReason,
  CommerceRuntimeOrderAttribute,
  CommerceRuntimeOrderItem,
  CommerceRuntimePackage,
  CommerceRuntimeShipment,
  CommerceRuntimeShippingRate,
  DigitalPackage,
  DigitalWallet,
  ExtendedProperty,
  FulfillmentAction,
  FulfillmentInfo,
  GiftInfo,
  GiftMessage,
  InventoryTags,
  Order,
  OrderAction,
  OrderCollection,
  OrderItemCollection,
  OrderNote,
  OrderReturnableItemCollection,
  OrderValidationResult,
  Payment,
  PaymentAction,
  PaymentCollection,
  Pickup,
  PricingTaxableOrder,
  QueuedOrderCollection,
  Refund,
  RefundReasonCollection,
  RepriceCanceledShipmentObject,
  RepriceShipmentObject,
  ShipmentAdjustment,
  ShipmentItemAdjustment,
  SplitShipmentsObject,
  SubscriptionInfo,
} from '../models';

export interface OrderApiAddExtendedPropertiesRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    extendedProperty?: Array<ExtendedProperty>;
}

export interface OrderApiAddValidationResultRequest {
    orderId: string;
    responseFields?: string;
    orderValidationResult?: OrderValidationResult;
}

export interface OrderApiApplyAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    adjustment?: Adjustment;
}

export interface OrderApiApplyCouponRequest {
    orderId: string;
    couponCode: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
}

export interface OrderApiApplyHandlingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    adjustment?: Adjustment;
}

export interface OrderApiApplyShippingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    adjustment?: Adjustment;
}

export interface OrderApiAutoCapturePaymentsRequest {
    orderId: string;
    forceCapture?: boolean;
    responseFields?: string;
}

export interface OrderApiCancelOrderRequest {
    orderId: string;
    responseFields?: string;
    commerceRuntimeCanceledReason?: CommerceRuntimeCanceledReason;
}

export interface OrderApiChangeOrderPriceListRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    body?: string;
}

export interface OrderApiChangeOrderUserIdRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiCreateDigitalPackageRequest {
    orderId: string;
    responseFields?: string;
    digitalPackage?: DigitalPackage;
}

export interface OrderApiCreateOrderRequest {
    cartId?: string;
    quoteId?: string;
    responseFields?: string;
    order?: Order;
}

export interface OrderApiCreateOrderAttributesRequest {
    orderId: string;
    responseFields?: string;
    commerceRuntimeOrderAttribute?: Array<CommerceRuntimeOrderAttribute>;
}

export interface OrderApiCreateOrderItemRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    skipInventoryCheck?: boolean;
    zipCode?: string;
    responseFields?: string;
    commerceRuntimeOrderItem?: CommerceRuntimeOrderItem;
}

export interface OrderApiCreateOrderNoteRequest {
    orderId: string;
    responseFields?: string;
    orderNote?: OrderNote;
}

export interface OrderApiCreatePackageRequest {
    orderId: string;
    responseFields?: string;
    commerceRuntimePackage?: CommerceRuntimePackage;
}

export interface OrderApiCreatePackageShipmentsRequest {
    orderId: string;
    responseFields?: string;
    requestBody?: Array<string>;
}

export interface OrderApiCreatePaymentActionRequest {
    orderId: string;
    responseFields?: string;
    paymentAction?: PaymentAction;
}

export interface OrderApiCreatePickupRequest {
    orderId: string;
    responseFields?: string;
    pickup?: Pickup;
}

export interface OrderApiCreateRefundRequest {
    orderId: string;
    responseFields?: string;
    refund?: Refund;
}

export interface OrderApiDeleteDigitalPackageRequest {
    orderId: string;
    digitalPackageId: string;
}

export interface OrderApiDeleteExtendedPropertiesRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    requestBody?: Array<string>;
}

export interface OrderApiDeleteExtendedPropertyRequest {
    orderId: string;
    key: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiDeleteOrderDraftRequest {
    orderId: string;
    version?: string;
    responseFields?: string;
}

export interface OrderApiDeleteOrderItemRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiDeleteOrderNoteRequest {
    orderId: string;
    noteId: string;
}

export interface OrderApiDeletePackageRequest {
    orderId: string;
    packageId: string;
}

export interface OrderApiDeletePickupRequest {
    orderId: string;
    pickupId: string;
}

export interface OrderApiDeleteShipmentRequest {
    orderId: string;
    shipmentId: string;
}

export interface OrderApiEvaluateOrderRollupStatusRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetAvailableActionsRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest {
    orderId: string;
    digitalPackageId: string;
    responseFields?: string;
}

export interface OrderApiGetAvailablePackageFulfillmentActionsRequest {
    orderId: string;
    packageId: string;
    responseFields?: string;
}

export interface OrderApiGetAvailablePaymentActionsRequest {
    orderId: string;
    paymentId: string;
    responseFields?: string;
}

export interface OrderApiGetAvailablePickupFulfillmentActionsRequest {
    orderId: string;
    pickupId: string;
    responseFields?: string;
}

export interface OrderApiGetAvailableShipmentMethodsRequest {
    orderId: string;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetBillingInfoRequest {
    orderId: string;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetDigitalPackageRequest {
    orderId: string;
    digitalPackageId: string;
    responseFields?: string;
}

export interface OrderApiGetExtendedPropertiesRequest {
    orderId: string;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetFulfillmentInfoRequest {
    orderId: string;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetOrderRequest {
    orderId: string;
    draft?: boolean;
    includeBin?: boolean;
    mode?: string;
    responseFields?: string;
}

export interface OrderApiGetOrderAttributesRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetOrderItemRequest {
    orderId: string;
    orderItemId: string;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetOrderItemViaLineIdRequest {
    orderId: string;
    lineId: number;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetOrderItemsRequest {
    orderId: string;
    draft?: boolean;
    responseFields?: string;
}

export interface OrderApiGetOrderNoteRequest {
    orderId: string;
    noteId: string;
    responseFields?: string;
}

export interface OrderApiGetOrderNotesRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetOrderReturnableItemsRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetOrdersRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
    includeBin?: boolean;
    responseGroups?: string;
    mode?: string;
    responseFields?: string;
}

export interface OrderApiGetPackageRequest {
    orderId: string;
    packageId: string;
    responseFields?: string;
}

export interface OrderApiGetPackageLabelRequest {
    orderId: string;
    packageId: string;
    responseFields?: string;
}

export interface OrderApiGetPaymentRequest {
    orderId: string;
    paymentId: string;
    responseFields?: string;
}

export interface OrderApiGetPaymentsRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetPickupRequest {
    orderId: string;
    pickupId: string;
    responseFields?: string;
}

export interface OrderApiGetQueuedHistoricalOrderRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetQueuedHistoricalOrdersRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    qLimit?: number;
    responseFields?: string;
}

export interface OrderApiGetQueuedOrderRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetQueuedOrdersRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    qLimit?: number;
    responseFields?: string;
}

export interface OrderApiGetReasonsRequest {
    category?: string;
    responseFields?: string;
}

export interface OrderApiGetRefundReasonsRequest {
    responseFields?: string;
}

export interface OrderApiGetShipmentRequest {
    orderId: string;
    shipmentId: string;
    responseFields?: string;
}

export interface OrderApiGetTaxableOrdersRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiGetValidationResultsRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiPerformFulfillmentActionRequest {
    orderId: string;
    responseFields?: string;
    fulfillmentAction?: FulfillmentAction;
}

export interface OrderApiPerformOrderActionRequest {
    orderId: string;
    responseFields?: string;
    orderAction?: OrderAction;
}

export interface OrderApiPerformPaymentActionRequest {
    orderId: string;
    paymentId: string;
    responseFields?: string;
    paymentAction?: PaymentAction;
}

export interface OrderApiPriceOrderRequest {
    refreshShipping?: boolean;
    responseFields?: string;
    order?: Order;
}

export interface OrderApiProcessDigitalWalletRequest {
    orderId: string;
    digitalWalletType: string;
    responseFields?: string;
    digitalWallet?: DigitalWallet;
}

export interface OrderApiRemoveAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveAlternateContactRequest {
    orderId: string;
    responseFields?: string;
}

export interface OrderApiRemoveCouponRequest {
    orderId: string;
    couponCode: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveCouponsRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveHandlingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveShippingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRepriceCanceledShipmentRequest {
    orderId: string;
    responseFields?: string;
    repriceCanceledShipmentObject?: RepriceCanceledShipmentObject;
}

export interface OrderApiRepriceShipmentRequest {
    shipmentNumber: number;
    orderId: string;
    isItemCancellationContext?: boolean;
    responseFields?: string;
    repriceShipmentObject?: RepriceShipmentObject;
}

export interface OrderApiRepriceSubstitutesRequest {
    shipmentNumber: number;
    orderId: string;
    responseFields?: string;
    repriceShipmentObject?: RepriceShipmentObject;
}

export interface OrderApiResendGatewayGiftCardEmailRequest {
    orderId: string;
    giftcardId: string;
    responseFields?: string;
}

export interface OrderApiResendOrderConfirmationEmailRequest {
    orderId: string;
    responseFields?: string;
    orderAction?: OrderAction;
}

export interface OrderApiResendPackageFulfillmentEmailRequest {
    orderId: string;
    responseFields?: string;
    fulfillmentAction?: FulfillmentAction;
}

export interface OrderApiResendRefundEmailRequest {
    orderId: string;
    refundId: string;
    responseFields?: string;
}

export interface OrderApiSetBillingInfoRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    billingInfo?: BillingInfo;
}

export interface OrderApiSetFulFillmentInfoRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    fulfillmentInfo?: FulfillmentInfo;
}

export interface OrderApiSmsOptOutRequest {
    siteId: string;
    responseFields?: string;
}

export interface OrderApiSplitShipmentsRequest {
    orderId: string;
    shipmentNumber: string;
    responseFields?: string;
    splitShipmentsObject?: SplitShipmentsObject;
}

export interface OrderApiUpdateDigitalPackageRequest {
    orderId: string;
    digitalPackageId: string;
    responseFields?: string;
    digitalPackage?: DigitalPackage;
}

export interface OrderApiUpdateExtendedPropertiesRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    upsert?: boolean;
    responseFields?: string;
    extendedProperty?: Array<ExtendedProperty>;
}

export interface OrderApiUpdateExtendedPropertyRequest {
    orderId: string;
    key: string;
    updateMode?: string;
    version?: string;
    upsert?: boolean;
    responseFields?: string;
    extendedProperty?: ExtendedProperty;
}

export interface OrderApiUpdateGiftInfoRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    giftInfo?: GiftInfo;
}

export interface OrderApiUpdateItemDeliveryDateRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    body?: string;
}

export interface OrderApiUpdateItemDutyRequest {
    orderId: string;
    orderItemId: string;
    dutyAmount: number;
    updateMode?: string;
    version?: string;
    responseFields?: string;
}

export interface OrderApiUpdateItemFulfillmentRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
    zipCode?: string;
    responseFields?: string;
    commerceRuntimeOrderItem?: CommerceRuntimeOrderItem;
}

export interface OrderApiUpdateItemProductPriceRequest {
    orderId: string;
    orderItemId: string;
    price: number;
    updateMode?: string;
    version?: string;
    responseFields?: string;
}

export interface OrderApiUpdateItemQuantityRequest {
    orderId: string;
    orderItemId: string;
    quantity: number;
    updateMode?: string;
    version?: string;
    responseFields?: string;
}

export interface OrderApiUpdateOrderRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    order?: Order;
}

export interface OrderApiUpdateOrderAttributesRequest {
    orderId: string;
    removeMissing?: boolean;
    responseFields?: string;
    commerceRuntimeOrderAttribute?: Array<CommerceRuntimeOrderAttribute>;
}

export interface OrderApiUpdateOrderDiscountRequest {
    orderId: string;
    discountId: number;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    commerceRuntimeAppliedDiscount?: CommerceRuntimeAppliedDiscount;
}

export interface OrderApiUpdateOrderItemDiscountRequest {
    orderId: string;
    orderItemId: string;
    discountId: number;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    commerceRuntimeAppliedDiscount?: CommerceRuntimeAppliedDiscount;
}

export interface OrderApiUpdateOrderNoteRequest {
    orderId: string;
    noteId: string;
    responseFields?: string;
    orderNote?: OrderNote;
}

export interface OrderApiUpdateOrderRestrictionsRequest {
    orderId: string;
    restrictEdit?: boolean;
    restrictCancellation?: boolean;
    responseFields?: string;
}

export interface OrderApiUpdatePackageRequest {
    orderId: string;
    packageId: string;
    responseFields?: string;
    commerceRuntimePackage?: CommerceRuntimePackage;
}

export interface OrderApiUpdatePickupRequest {
    orderId: string;
    pickupId: string;
    responseFields?: string;
    pickup?: Pickup;
}

export interface OrderApiUpdateShipmentAdjustmentsRequest {
    orderId: string;
    shipmentNumber: number;
    responseFields?: string;
    shipmentAdjustment?: ShipmentAdjustment;
}

export interface OrderApiUpdateShipmentItemRequest {
    orderId: string;
    shipmentNumber: number;
    itemId: number;
    responseFields?: string;
    shipmentItemAdjustment?: ShipmentItemAdjustment;
}

export interface OrderApiUpdateSubscriptionInfoRequest {
    orderId: string;
    orderItemId: string;
    responseFields?: string;
    subscriptionInfo?: SubscriptionInfo;
}

export interface OrderApiUpsertAlternateContactRequest {
    orderId: string;
    responseFields?: string;
    alternateContact?: AlternateContact;
}

export interface OrderApiUpsertGiftMessageRequest {
    orderId: string;
    responseFields?: string;
    giftMessage?: GiftMessage;
}

export interface OrderApiUpsertInventoryTagsRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
    responseFields?: string;
    inventoryTags?: Array<InventoryTags>;
}

/**
 * OrderApi - interface
 * 
 * @export
 * @interface OrderApiInterface
 */
export interface OrderApiInterface {
    /**
     * Adds extended properties.
     * @summary Adds Extended Properties
     * @param {string} orderId Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ExtendedProperty>} [extendedProperty] Extended properties.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    addExtendedPropertiesRaw(requestParameters: OrderApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>>;

    /**
     * Adds extended properties.
     * Adds Extended Properties
     */
    addExtendedProperties(requestParameters: OrderApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>>;

    /**
     * Adds a validation result from an external system to an order.
     * @summary Add Validation Result
     * @param {string} orderId Unique identifier of the order to which you want to add a note.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderValidationResult} [orderValidationResult] The order validation result.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    addValidationResultRaw(requestParameters: OrderApiAddValidationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderValidationResult>>;

    /**
     * Adds a validation result from an external system to an order.
     * Add Validation Result
     */
    addValidationResult(requestParameters: OrderApiAddValidationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderValidationResult>;

    /**
     * Apply a pricing adjustment to the order.
     * @summary Apply Adjustment
     * @param {string} orderId Unique identifier of the order with which to associate the coupon.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Adjustment} [adjustment] Adjustment to apply to the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    applyAdjustmentRaw(requestParameters: OrderApiApplyAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Apply a pricing adjustment to the order.
     * Apply Adjustment
     */
    applyAdjustment(requestParameters: OrderApiApplyAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Apply a coupon to the order.
     * @summary Apply Coupon
     * @param {string} orderId Unique identifier of the order with which to associate the coupon.
     * @param {string} couponCode Coupon code that the customer supplies to get the discounted price.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    applyCouponRaw(requestParameters: OrderApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Apply a coupon to the order.
     * Apply Coupon
     */
    applyCoupon(requestParameters: OrderApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Apply a handling adjustment to the order.
     * @summary Apply Handling Adjustment
     * @param {string} orderId 
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Adjustment} [adjustment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    applyHandlingAdjustmentRaw(requestParameters: OrderApiApplyHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Apply a handling adjustment to the order.
     * Apply Handling Adjustment
     */
    applyHandlingAdjustment(requestParameters: OrderApiApplyHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Apply a shipping adjustment to the order specified by order Id.
     * @summary Apply Shipping Adjustment
     * @param {string} orderId Unique identifier of the order with which to associate the coupon.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Adjustment} [adjustment] Adjustment to apply to the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    applyShippingAdjustmentRaw(requestParameters: OrderApiApplyShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Apply a shipping adjustment to the order specified by order Id.
     * Apply Shipping Adjustment
     */
    applyShippingAdjustment(requestParameters: OrderApiApplyShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * @summary Auto Capture Payments
     * @param {string} orderId Unique identifier of the order you want to auto capture.
     * @param {boolean} [forceCapture] Also capture unfulfilled shipments (excluding backorder). Used when credit card auths are about to expire.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    autoCapturePaymentsRaw(requestParameters: OrderApiAutoCapturePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * Auto Capture Payments
     */
    autoCapturePayments(requestParameters: OrderApiAutoCapturePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Cancel an order with the cancel reason.
     * @summary Cancel Order
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimeCanceledReason} [commerceRuntimeCanceledReason] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    cancelOrderRaw(requestParameters: OrderApiCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Cancel an order with the cancel reason.
     * Cancel Order
     */
    cancelOrder(requestParameters: OrderApiCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * @summary Change Order Price List
     * @param {string} orderId Unique identifier of the order to change
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {string} [body] The code for the pricelist to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    changeOrderPriceListRaw(requestParameters: OrderApiChangeOrderPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * Change Order Price List
     */
    changeOrderPriceList(requestParameters: OrderApiChangeOrderPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Changes the User ID associated with an order.
     * @summary Change Order UserId
     * @param {string} orderId Unique identifier of the order to change.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    changeOrderUserIdRaw(requestParameters: OrderApiChangeOrderUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Changes the User ID associated with an order.
     * Change Order UserId
     */
    changeOrderUserId(requestParameters: OrderApiChangeOrderUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Apply a digital package to the order.
     * @summary Create Digital Package
     * @param {string} orderId Unique identifier of the order with which to associate the digital package.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {DigitalPackage} [digitalPackage] Digital Package to create and add to the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createDigitalPackageRaw(requestParameters: OrderApiCreateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>>;

    /**
     * Apply a digital package to the order.
     * Create Digital Package
     */
    createDigitalPackage(requestParameters: OrderApiCreateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage>;

    /**
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * @summary Create Order
     * @param {string} [cartId] Unique identifier of the cart. This is the original cart ID expressed as a GUID.
     * @param {string} [quoteId] Unique identifier of the quote.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Order} [order] All properties of the order to place.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createOrderRaw(requestParameters: OrderApiCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * Create Order
     */
    createOrder(requestParameters: OrderApiCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * @summary Create Order Attributes
     * @param {string} orderId Unique identifier of the order to which you want to add a attributeSet.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CommerceRuntimeOrderAttribute>} [commerceRuntimeOrderAttribute] Attributes to upsert.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createOrderAttributesRaw(requestParameters: OrderApiCreateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>>;

    /**
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * Create Order Attributes
     */
    createOrderAttributes(requestParameters: OrderApiCreateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>>;

    /**
     * Adds a product or other item to the cart of the current shopper.
     * @summary Create Order Item
     * @param {string} orderId ID of the order to add an item to.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {boolean} [skipInventoryCheck] Determines wheter or not to check inventory on an item when adding an item to the order or when placing an order
     * @param {string} [zipCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimeOrderItem} [commerceRuntimeOrderItem] All properties of the new cart item. Required property: Product.ProductCode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createOrderItemRaw(requestParameters: OrderApiCreateOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Create Order Item
     */
    createOrderItem(requestParameters: OrderApiCreateOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * @summary Create Order Note
     * @param {string} orderId Unique identifier of the order to which you want to add a note.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderNote} [orderNote] Text of the note. Maximum 256 characters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createOrderNoteRaw(requestParameters: OrderApiCreateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>>;

    /**
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * Create Order Note
     */
    createOrderNote(requestParameters: OrderApiCreateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote>;

    /**
     * 
     * @summary Apply a package to the order
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimePackage} [commerceRuntimePackage] Package to create and add to the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createPackageRaw(requestParameters: OrderApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>>;

    /**
     * 
     * Apply a package to the order
     */
    createPackage(requestParameters: OrderApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage>;

    /**
     * 
     * @summary Creates a shipment by grouping together multiple packages into logical shipments
     * @param {string} orderId Unique identifier of the order which is ready to be shipped.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<string>} [requestBody] Package ids to use in creating shipments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createPackageShipmentsRaw(requestParameters: OrderApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimePackage>>>;

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */
    createPackageShipments(requestParameters: OrderApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimePackage>>;

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * @summary Create Payment Action
     * @param {string} orderId Unique identifier of the order whose payment action you want to change.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {PaymentAction} [paymentAction] Action to be performed, along with any metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createPaymentActionRaw(requestParameters: OrderApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */
    createPaymentAction(requestParameters: OrderApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Apply a pickup to the order.
     * @summary Create Pickup
     * @param {string} orderId Unique identifier of the order with which to associate the pickup.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Pickup} [pickup] Pickup to create and add to the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createPickupRaw(requestParameters: OrderApiCreatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>>;

    /**
     * Apply a pickup to the order.
     * Create Pickup
     */
    createPickup(requestParameters: OrderApiCreatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup>;

    /**
     * Apply a refund to the order.
     * @summary Create Refund
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Refund} [refund] Refund to create on the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    createRefundRaw(requestParameters: OrderApiCreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Refund>>;

    /**
     * Apply a refund to the order.
     * Create Refund
     */
    createRefund(requestParameters: OrderApiCreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Refund>;

    /**
     * Delete an order digital package.
     * @summary Delete Digital Package
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} digitalPackageId Digital package to remove from the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteDigitalPackageRaw(requestParameters: OrderApiDeleteDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an order digital package.
     * Delete Digital Package
     */
    deleteDigitalPackage(requestParameters: OrderApiDeleteDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete extended properties on the order.
     * @summary Delete Extended Properties
     * @param {string} orderId Unique identifier of the order item
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {Array<string>} [requestBody] Keys of extended properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteExtendedPropertiesRaw(requestParameters: OrderApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete extended properties on the order.
     * Delete Extended Properties
     */
    deleteExtendedProperties(requestParameters: OrderApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Removes a particular order item from the order of the current shopper.
     * @summary Delete Extended Property
     * @param {string} orderId 
     * @param {string} key Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteExtendedPropertyRaw(requestParameters: OrderApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Extended Property
     */
    deleteExtendedProperty(requestParameters: OrderApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes a draft version of an order.
     * @summary Delete Order Draft
     * @param {string} orderId The order ID to update.
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteOrderDraftRaw(requestParameters: OrderApiDeleteOrderDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a draft version of an order.
     * Delete Order Draft
     */
    deleteOrderDraft(requestParameters: OrderApiDeleteOrderDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Removes a particular order item from the order of the current shopper.
     * @summary Delete Order Item
     * @param {string} orderId 
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteOrderItemRaw(requestParameters: OrderApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Order Item
     */
    deleteOrderItem(requestParameters: OrderApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Deletes a specific order note on an order.
     * @summary Delete Order Note
     * @param {string} orderId Unique identifier of the order whose note you want to delete.
     * @param {string} noteId Unique identifier of the note whose text you want to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteOrderNoteRaw(requestParameters: OrderApiDeleteOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a specific order note on an order.
     * Delete Order Note
     */
    deleteOrderNote(requestParameters: OrderApiDeleteOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete an order package
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} packageId Package to remove from the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deletePackageRaw(requestParameters: OrderApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete an order package
     */
    deletePackage(requestParameters: OrderApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete an order pickup.
     * @summary Delete Pickup
     * @param {string} orderId Unique identifier of the order with which to associate the pickup.
     * @param {string} pickupId Pickup to remove from the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deletePickupRaw(requestParameters: OrderApiDeletePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an order pickup.
     * Delete Pickup
     */
    deletePickup(requestParameters: OrderApiDeletePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes an existing order shipment
     * @summary Deletes an existing order shipment
     * @param {string} orderId 
     * @param {string} shipmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    deleteShipmentRaw(requestParameters: OrderApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     */
    deleteShipment(requestParameters: OrderApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Evaluate Order Rollup Status
     * @summary Evaluate Order Rollup Status
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    evaluateOrderRollupStatusRaw(requestParameters: OrderApiEvaluateOrderRollupStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     */
    evaluateOrderRollupStatus(requestParameters: OrderApiEvaluateOrderRollupStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * @summary Get Available Actions
     * @param {string} orderId Unique identifier of the order whose available order actions you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAvailableActionsRaw(requestParameters: OrderApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * Get Available Actions
     */
    getAvailableActions(requestParameters: OrderApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Retrieves available fulfillment actions.
     * @summary Get Available Digital Package Fulfillment Actions
     * @param {string} orderId Unique identifier of the order on which to get a list of available actions.
     * @param {string} digitalPackageId Package ID to get fulfillment actions for.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAvailableDigitalPackageFulfillmentActionsRaw(requestParameters: OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Retrieves available fulfillment actions.
     * Get Available Digital Package Fulfillment Actions
     */
    getAvailableDigitalPackageFulfillmentActions(requestParameters: OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * 
     * @summary Retrieves available fulfillment actions
     * @param {string} orderId Unique identifier of the order on which to get a list of available actions.
     * @param {string} packageId Package ID to get fulfillment actions for.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAvailablePackageFulfillmentActionsRaw(requestParameters: OrderApiGetAvailablePackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * 
     * Retrieves available fulfillment actions
     */
    getAvailablePackageFulfillmentActions(requestParameters: OrderApiGetAvailablePackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Retrieves available payment actions which depends on the status of the order\'s payment transaction.   Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"
     * @summary Get Available Payment Actions
     * @param {string} orderId Unique identifier of the order whose available payment actions you want to get.
     * @param {string} paymentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAvailablePaymentActionsRaw(requestParameters: OrderApiGetAvailablePaymentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Retrieves available payment actions which depends on the status of the order\'s payment transaction.   Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"
     * Get Available Payment Actions
     */
    getAvailablePaymentActions(requestParameters: OrderApiGetAvailablePaymentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Retrieves available fulfillment actions.
     * @summary Get Available Pickup Fulfillment Actions
     * @param {string} orderId Unique identifier of the order on which to get a list of available actions.
     * @param {string} pickupId Pickup ID to get fulfillment actions for.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAvailablePickupFulfillmentActionsRaw(requestParameters: OrderApiGetAvailablePickupFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Retrieves available fulfillment actions.
     * Get Available Pickup Fulfillment Actions
     */
    getAvailablePickupFulfillmentActions(requestParameters: OrderApiGetAvailablePickupFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * @summary Get Available Shipment Methods
     * @param {string} orderId Unique identifier of the order whose shipping methods you want to get.
     * @param {boolean} [draft] Gets a draft copy of the order if one is available.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getAvailableShipmentMethodsRaw(requestParameters: OrderApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeShippingRate>>>;

    /**
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipment Methods
     */
    getAvailableShipmentMethods(requestParameters: OrderApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeShippingRate>>;

    /**
     * Retrieves the customer\'s billing address.If paying by credit card, it retrieves the card\'s number, expiration date, card holder\'s name and billing address.
     * @summary Get Billing Info
     * @param {string} orderId Unique identifer of the order whose customer\&#39;s payment source you want to get.
     * @param {boolean} [draft] Determines whether the draft version should be retrieved if one exists.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getBillingInfoRaw(requestParameters: OrderApiGetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInfo>>;

    /**
     * Retrieves the customer\'s billing address.If paying by credit card, it retrieves the card\'s number, expiration date, card holder\'s name and billing address.
     * Get Billing Info
     */
    getBillingInfo(requestParameters: OrderApiGetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInfo>;

    /**
     * Get an order digital package.
     * @summary Get Digital Package
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} digitalPackageId Digital Package Id
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getDigitalPackageRaw(requestParameters: OrderApiGetDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>>;

    /**
     * Get an order digital package.
     * Get Digital Package
     */
    getDigitalPackage(requestParameters: OrderApiGetDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage>;

    /**
     * Get extended properties on an order.
     * @summary Get Extended Properties
     * @param {string} orderId 
     * @param {boolean} [draft] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getExtendedPropertiesRaw(requestParameters: OrderApiGetExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>>;

    /**
     * Get extended properties on an order.
     * Get Extended Properties
     */
    getExtendedProperties(requestParameters: OrderApiGetExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>>;

    /**
     * Retrieves an order\'s fulfillment information specified by order ID.
     * @summary Get Fulfillment Info
     * @param {string} orderId Unique identifier of the order.
     * @param {boolean} [draft] Determines whether the draft version should be retrieved if one exists.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getFulfillmentInfoRaw(requestParameters: OrderApiGetFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>>;

    /**
     * Retrieves an order\'s fulfillment information specified by order ID.
     * Get Fulfillment Info
     */
    getFulfillmentInfo(requestParameters: OrderApiGetFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo>;

    /**
     * Retrieves the details of an order specified by the order ID.
     * @summary Get Order
     * @param {string} orderId Unique identifier of the order whose details you want.
     * @param {boolean} [draft] Gets a draft copy of the order if one is available
     * @param {boolean} [includeBin] Whether to include BIN numbers on credit card payments
     * @param {string} [mode] \&#39;synthesized\&#39; to provide a synthesized order from shipment data
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderRaw(requestParameters: OrderApiGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get Order
     */
    getOrder(requestParameters: OrderApiGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Retrieves a list of all attribute sets for an order.
     * @summary Get Order Attributes
     * @param {string} orderId Unique identifier of the order whose attributeSets you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderAttributesRaw(requestParameters: OrderApiGetOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>>;

    /**
     * Retrieves a list of all attribute sets for an order.
     * Get Order Attributes
     */
    getOrderAttributes(requestParameters: OrderApiGetOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>>;

    /**
     * Retrieves the details of a single order item.
     * @summary Get Order Item
     * @param {string} orderId Unique identifier of the order whose item you want to get.
     * @param {string} orderItemId Unique identifier of the order item whose details you want to get.
     * @param {boolean} [draft] Gets a draft copy of the order if one is available
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderItemRaw(requestParameters: OrderApiGetOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeOrderItem>>;

    /**
     * Retrieves the details of a single order item.
     * Get Order Item
     */
    getOrderItem(requestParameters: OrderApiGetOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeOrderItem>;

    /**
     * Retrieves the details of a single order item via its line id.
     * @summary Get Order Item Via LineId
     * @param {string} orderId Unique identifier of the order whose item you want to get.
     * @param {number} lineId Line ID of the order item whose details you want to get.
     * @param {boolean} [draft] Gets a draft copy of the order if one is available
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderItemViaLineIdRaw(requestParameters: OrderApiGetOrderItemViaLineIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeOrderItem>>;

    /**
     * Retrieves the details of a single order item via its line id.
     * Get Order Item Via LineId
     */
    getOrderItemViaLineId(requestParameters: OrderApiGetOrderItemViaLineIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeOrderItem>;

    /**
     * Retrieves the details of all items in an order specified by order Id.
     * @summary Get Order Items
     * @param {string} orderId Unique identifier of the order whose items you want to get.
     * @param {boolean} [draft] Gets a draft copy of the order if one is available
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderItemsRaw(requestParameters: OrderApiGetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItemCollection>>;

    /**
     * Retrieves the details of all items in an order specified by order Id.
     * Get Order Items
     */
    getOrderItems(requestParameters: OrderApiGetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItemCollection>;

    /**
     * Retrieves a specific order note from an order.
     * @summary Get Order Note
     * @param {string} orderId Unique identifier of the order whose note you want to get.
     * @param {string} noteId Unique identifier of the note whose text you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderNoteRaw(requestParameters: OrderApiGetOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>>;

    /**
     * Retrieves a specific order note from an order.
     * Get Order Note
     */
    getOrderNote(requestParameters: OrderApiGetOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote>;

    /**
     * Retrieves a list of all notes for an order.
     * @summary Get Order Notes
     * @param {string} orderId Unique identifier of the order whose notes you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderNotesRaw(requestParameters: OrderApiGetOrderNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderNote>>>;

    /**
     * Retrieves a list of all notes for an order.
     * Get Order Notes
     */
    getOrderNotes(requestParameters: OrderApiGetOrderNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderNote>>;

    /**
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * @summary Get Order Returnable Items
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrderReturnableItemsRaw(requestParameters: OrderApiGetOrderReturnableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderReturnableItemCollection>>;

    /**
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * Get Order Returnable Items
     */
    getOrderReturnableItems(requestParameters: OrderApiGetOrderReturnableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderReturnableItemCollection>;

    /**
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * @summary Get Orders
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [q] Text to perform a search on
     * @param {number} [qLimit] Limit of the records to include in a search, used for global search
     * @param {boolean} [includeBin] Whether to include BIN numbers on credit card payments
     * @param {string} [responseGroups] Response groups to return or filter the order graph
     * @param {string} [mode] \&#39;synthesized\&#39; to provide a synthesized order from shipment data
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getOrdersRaw(requestParameters: OrderApiGetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderCollection>>;

    /**
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * Get Orders
     */
    getOrders(requestParameters: OrderApiGetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderCollection>;

    /**
     * Get an order package
     * @summary Get an order package
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} packageId Package to remove from the order
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getPackageRaw(requestParameters: OrderApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>>;

    /**
     * Get an order package
     * Get an order package
     */
    getPackage(requestParameters: OrderApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage>;

    /**
     * Get an order package label
     * @summary Get an order package label
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} packageId Package to remove from the order
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getPackageLabelRaw(requestParameters: OrderApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get an order package label
     * Get an order package label
     */
    getPackageLabel(requestParameters: OrderApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific payment transaction from the order.
     * @summary Get Payment
     * @param {string} orderId Unique identifier of the order whose payment transaction you want to get.
     * @param {string} paymentId Unique identifier of the payment transaction you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getPaymentRaw(requestParameters: OrderApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>>;

    /**
     * Retrieves a specific payment transaction from the order.
     * Get Payment
     */
    getPayment(requestParameters: OrderApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment>;

    /**
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * @summary Get Payments
     * @param {string} orderId Unique identifier of the order whose payment transactions you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getPaymentsRaw(requestParameters: OrderApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCollection>>;

    /**
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * Get Payments
     */
    getPayments(requestParameters: OrderApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCollection>;

    /**
     * Gets a specified pickup on the order.
     * @summary Get Pickup
     * @param {string} orderId Unique identifier of the order with which to associate the pickup.
     * @param {string} pickupId Pickup to remove from the order
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getPickupRaw(requestParameters: OrderApiGetPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>>;

    /**
     * Gets a specified pickup on the order.
     * Get Pickup
     */
    getPickup(requestParameters: OrderApiGetPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup>;

    /**
     * Retrieves the details of an order specified by the order ID.
     * @summary Get QueuedHistoricalOrder
     * @param {string} orderId Unique identifier of the order whose details you want.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getQueuedHistoricalOrderRaw(requestParameters: OrderApiGetQueuedHistoricalOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get QueuedHistoricalOrder
     */
    getQueuedHistoricalOrder(requestParameters: OrderApiGetQueuedHistoricalOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Retrieves a list of queued historical orders according to any specified filter criteria and sort options.
     * @summary Get QueuedHistoricalOrders
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {number} [qLimit] Limit of the records to include in a search, used for global search
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getQueuedHistoricalOrdersRaw(requestParameters: OrderApiGetQueuedHistoricalOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueuedOrderCollection>>;

    /**
     * Retrieves a list of queued historical orders according to any specified filter criteria and sort options.
     * Get QueuedHistoricalOrders
     */
    getQueuedHistoricalOrders(requestParameters: OrderApiGetQueuedHistoricalOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueuedOrderCollection>;

    /**
     * Get QueuedOrder
     * @summary Get QueuedOrder
     * @param {string} orderId Unique identifier of the order whose details you want.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getQueuedOrderRaw(requestParameters: OrderApiGetQueuedOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Get QueuedOrder
     * Get QueuedOrder
     */
    getQueuedOrder(requestParameters: OrderApiGetQueuedOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Retrieves a list of queuedorders according to any specified filter criteria and sort options.
     * @summary Get Queued Orders
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {number} [qLimit] Limit of the records to include in a search, used for global search
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getQueuedOrdersRaw(requestParameters: OrderApiGetQueuedOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueuedOrderCollection>>;

    /**
     * Retrieves a list of queuedorders according to any specified filter criteria and sort options.
     * Get Queued Orders
     */
    getQueuedOrders(requestParameters: OrderApiGetQueuedOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueuedOrderCollection>;

    /**
     * Gets order cancellation reasons based on a category.
     * @summary Get Order Cancel Reasons
     * @param {string} [category] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getReasonsRaw(requestParameters: OrderApiGetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReasonCollection>>;

    /**
     * Gets order cancellation reasons based on a category.
     * Get Order Cancel Reasons
     */
    getReasons(requestParameters: OrderApiGetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReasonCollection>;

    /**
     * Gets all the refund reasons.
     * @summary Get Refund Reasons
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getRefundReasonsRaw(requestParameters: OrderApiGetRefundReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundReasonCollection>>;

    /**
     * Gets all the refund reasons.
     * Get Refund Reasons
     */
    getRefundReasons(requestParameters: OrderApiGetRefundReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundReasonCollection>;

    /**
     * Allows a shipment to be retrieved for the order.
     * @summary Get Shipment
     * @param {string} orderId ID of the order
     * @param {string} shipmentId Shipment ID of the order.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getShipmentRaw(requestParameters: OrderApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>>;

    /**
     * Allows a shipment to be retrieved for the order.
     * Get Shipment
     */
    getShipment(requestParameters: OrderApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment>;

    /**
     * Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * @summary Get Taxable Orders
     * @param {string} orderId Unique identifier of the order whose taxable orders you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getTaxableOrdersRaw(requestParameters: OrderApiGetTaxableOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PricingTaxableOrder>>>;

    /**
     * Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * Get Taxable Orders
     */
    getTaxableOrders(requestParameters: OrderApiGetTaxableOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PricingTaxableOrder>>;

    /**
     * Gets list of validation results on an order.
     * @summary Get Validation Results
     * @param {string} orderId Unique identifier of the order to which you want to add a note.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    getValidationResultsRaw(requestParameters: OrderApiGetValidationResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderValidationResult>>>;

    /**
     * Gets list of validation results on an order.
     * Get Validation Results
     */
    getValidationResults(requestParameters: OrderApiGetValidationResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderValidationResult>>;

    /**
     * Sets the fulfillment action to \'Ship\'. To ship an order, the order must have a customer name, the \'Open\' or \'OpenAdProcessing\' status, full shipping address, and shipping method.
     * @summary Perform Fulfillment Action
     * @param {string} orderId Unique identifier of the order which is ready to be shipped.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {FulfillmentAction} [fulfillmentAction] Action to perform along with metadata about which packages, digital packages, or pickups to perform the action on
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    performFulfillmentActionRaw(requestParameters: OrderApiPerformFulfillmentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Sets the fulfillment action to \'Ship\'. To ship an order, the order must have a customer name, the \'Open\' or \'OpenAdProcessing\' status, full shipping address, and shipping method.
     * Perform Fulfillment Action
     */
    performFulfillmentAction(requestParameters: OrderApiPerformFulfillmentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * @summary Perform Order Action
     * @param {string} orderId Unique identifier of the order.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderAction} [orderAction] Action to perform, which can be \&quot;SubmitOrder\&quot;, \&quot;ValidateOrder\&quot;, \&quot;AcceptOrder\&quot;, \&quot;CancelOrder\&quot;, \&quot;CompleteOrder\&quot;, \&quot;AbandonOrder\&quot;, \&quot;ReopenOrder\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    performOrderActionRaw(requestParameters: OrderApiPerformOrderActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * Perform Order Action
     */
    performOrderAction(requestParameters: OrderApiPerformOrderActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * @summary Perform Payment Action
     * @param {string} orderId Unique identifier of the order whose payment action you want to change.
     * @param {string} paymentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {PaymentAction} [paymentAction] Action to be performed, along with any metadata.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    performPaymentActionRaw(requestParameters: OrderApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * Perform Payment Action
     */
    performPaymentAction(requestParameters: OrderApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * 
     * @summary Price Order
     * @param {boolean} [refreshShipping] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Order} [order] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    priceOrderRaw(requestParameters: OrderApiPriceOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * 
     * Price Order
     */
    priceOrder(requestParameters: OrderApiPriceOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * @summary Process Digital Wallet
     * @param {string} orderId 
     * @param {string} digitalWalletType 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {DigitalWallet} [digitalWallet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    processDigitalWalletRaw(requestParameters: OrderApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * Process Digital Wallet
     */
    processDigitalWallet(requestParameters: OrderApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Removes an adjustment that had been previously applied to the order.
     * @summary Remove Adjustment
     * @param {string} orderId Unique identifier of the order with the coupon you want to remove.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    removeAdjustmentRaw(requestParameters: OrderApiRemoveAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Adjustment
     */
    removeAdjustment(requestParameters: OrderApiRemoveAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * 
     * @summary Endpoint to remove alternate conatact from order and shipments.
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    removeAlternateContactRaw(requestParameters: OrderApiRemoveAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * 
     * Endpoint to remove alternate conatact from order and shipments.
     */
    removeAlternateContact(requestParameters: OrderApiRemoveAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Removes a coupon that had been previously applied to the order.
     * @summary Remove Coupon
     * @param {string} orderId Unique identifier of the order with the coupon you want to remove.
     * @param {string} couponCode Coupon code to remove.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    removeCouponRaw(requestParameters: OrderApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Coupon
     */
    removeCoupon(requestParameters: OrderApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Removes all coupons that had been previously applied to the order.
     * @summary Remove Coupons
     * @param {string} orderId Unique identifier of the order with the coupon you want to remove.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    removeCouponsRaw(requestParameters: OrderApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Removes all coupons that had been previously applied to the order.
     * Remove Coupons
     */
    removeCoupons(requestParameters: OrderApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Removes a coupon that had been previously applied to the order.
     * @summary Remove Handling Adjustment
     * @param {string} orderId 
     * @param {string} [updateMode] 
     * @param {string} [version] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    removeHandlingAdjustmentRaw(requestParameters: OrderApiRemoveHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Handling Adjustment
     */
    removeHandlingAdjustment(requestParameters: OrderApiRemoveHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Removes an adjustment that had been previously applied to the order.
     * @summary Remove Shipping Adjustment
     * @param {string} orderId Unique identifier of the order with the coupon you want to remove.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    removeShippingAdjustmentRaw(requestParameters: OrderApiRemoveShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Shipping Adjustment
     */
    removeShippingAdjustment(requestParameters: OrderApiRemoveShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     *  FFMT svc will call this during full shipment cancelation or last item cancelation.  FFMT svs is performing shipment Rate validation.(FFMT svc is responsible for sending valid FlatratePerOrder shipments.)  Shipping costs of the canceled shipment will distribute to the active shipment.  Reset Shipping Costs of the canceled shipment to zero.
     * @summary This endpoint is use to Reprice Canceled shipment
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {RepriceCanceledShipmentObject} [repriceCanceledShipmentObject] Payload conatisn ActiveShipment and CanceledShipment              Active Shipment is one of the active shipment from the order\&#39;s shipment.              Canceled Shipment is the shipment being canceled.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    repriceCanceledShipmentRaw(requestParameters: OrderApiRepriceCanceledShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepriceCanceledShipmentObject>>;

    /**
     *  FFMT svc will call this during full shipment cancelation or last item cancelation.  FFMT svs is performing shipment Rate validation.(FFMT svc is responsible for sending valid FlatratePerOrder shipments.)  Shipping costs of the canceled shipment will distribute to the active shipment.  Reset Shipping Costs of the canceled shipment to zero.
     * This endpoint is use to Reprice Canceled shipment
     */
    repriceCanceledShipment(requestParameters: OrderApiRepriceCanceledShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepriceCanceledShipmentObject>;

    /**
     * Allows a shipment to be repriced.
     * @summary Reprice Shipment
     * @param {number} shipmentNumber 
     * @param {string} orderId 
     * @param {boolean} [isItemCancellationContext] FFMT svc will pass this as true while canceling  shipment item.              If it is true shipping costs will retain.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {RepriceShipmentObject} [repriceShipmentObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    repriceShipmentRaw(requestParameters: OrderApiRepriceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>>;

    /**
     * Allows a shipment to be repriced.
     * Reprice Shipment
     */
    repriceShipment(requestParameters: OrderApiRepriceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment>;

    /**
     * Reprice substitute items in shipments
     * @summary Reprice substitute items in shipments
     * @param {number} shipmentNumber 
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {RepriceShipmentObject} [repriceShipmentObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    repriceSubstitutesRaw(requestParameters: OrderApiRepriceSubstitutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>>;

    /**
     * Reprice substitute items in shipments
     * Reprice substitute items in shipments
     */
    repriceSubstitutes(requestParameters: OrderApiRepriceSubstitutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment>;

    /**
     * Resend gateway giftcard email.
     * @summary Resend Gateway Gift Card Email
     * @param {string} orderId 
     * @param {string} giftcardId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    resendGatewayGiftCardEmailRaw(requestParameters: OrderApiResendGatewayGiftCardEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resend gateway giftcard email.
     * Resend Gateway Gift Card Email
     */
    resendGatewayGiftCardEmail(requestParameters: OrderApiResendGatewayGiftCardEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Resend order confirmation email specified by the order Id.
     * @summary Resend Order Confirmation Email
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderAction} [orderAction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    resendOrderConfirmationEmailRaw(requestParameters: OrderApiResendOrderConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resend order confirmation email specified by the order Id.
     * Resend Order Confirmation Email
     */
    resendOrderConfirmationEmail(requestParameters: OrderApiResendOrderConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Resends the package fulfillment email.
     * @summary Resend Package Fulfillment Email
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {FulfillmentAction} [fulfillmentAction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    resendPackageFulfillmentEmailRaw(requestParameters: OrderApiResendPackageFulfillmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Resends the package fulfillment email.
     * Resend Package Fulfillment Email
     */
    resendPackageFulfillmentEmail(requestParameters: OrderApiResendPackageFulfillmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Resend refund email.
     * @summary Resend Refund Email
     * @param {string} orderId 
     * @param {string} refundId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    resendRefundEmailRaw(requestParameters: OrderApiResendRefundEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resend refund email.
     * Resend Refund Email
     */
    resendRefundEmail(requestParameters: OrderApiResendRefundEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Adds a payment source to the order.
     * @summary Set Billing Info
     * @param {string} orderId Unique identifier of the order whose payment source you want to update.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {BillingInfo} [billingInfo] All the properties that you want the payment source object to contain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    setBillingInfoRaw(requestParameters: OrderApiSetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInfo>>;

    /**
     * Adds a payment source to the order.
     * Set Billing Info
     */
    setBillingInfo(requestParameters: OrderApiSetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInfo>;

    /**
     * Modifies an order\'s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant\'s fulfillment cost.
     * @summary Set Fulfillment Info
     * @param {string} orderId Unique identifier of the order whose fulfillment information you want to change.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {FulfillmentInfo} [fulfillmentInfo] All properties that you want the updated fulfillment information to have.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    setFulFillmentInfoRaw(requestParameters: OrderApiSetFulFillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>>;

    /**
     * Modifies an order\'s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant\'s fulfillment cost.
     * Set Fulfillment Info
     */
    setFulFillmentInfo(requestParameters: OrderApiSetFulFillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo>;

    /**
     * Opting out from the sms notifications.
     * @summary Sms Opt Out
     * @param {string} siteId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    smsOptOutRaw(requestParameters: OrderApiSmsOptOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Opting out from the sms notifications.
     * Sms Opt Out
     */
    smsOptOut(requestParameters: OrderApiSmsOptOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Allows spliting an existing shipment.
     * @summary Split Shipments
     * @param {string} orderId 
     * @param {string} shipmentNumber 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {SplitShipmentsObject} [splitShipmentsObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    splitShipmentsRaw(requestParameters: OrderApiSplitShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeShipment>>>;

    /**
     * Allows spliting an existing shipment.
     * Split Shipments
     */
    splitShipments(requestParameters: OrderApiSplitShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeShipment>>;

    /**
     * Updates a digital package on the order.
     * @summary Update Digital Package
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} digitalPackageId Package to update on the order
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {DigitalPackage} [digitalPackage] Package content to update on the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateDigitalPackageRaw(requestParameters: OrderApiUpdateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>>;

    /**
     * Updates a digital package on the order.
     * Update Digital Package
     */
    updateDigitalPackage(requestParameters: OrderApiUpdateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage>;

    /**
     * Update extended properties.
     * @summary Updated extended properties
     * @param {string} orderId Unique identifier of the order item
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {boolean} [upsert] Allow insert or update
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ExtendedProperty>} [extendedProperty] Extended properties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateExtendedPropertiesRaw(requestParameters: OrderApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>>;

    /**
     * Update extended properties.
     * Updated extended properties
     */
    updateExtendedProperties(requestParameters: OrderApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>>;

    /**
     * Updated specific extended property
     * @summary Update Extended Property
     * @param {string} orderId Unique identifier of the order item
     * @param {string} key Key
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {boolean} [upsert] Allow insert or update
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ExtendedProperty} [extendedProperty] Extended property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateExtendedPropertyRaw(requestParameters: OrderApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedProperty>>;

    /**
     * Updated specific extended property
     * Update Extended Property
     */
    updateExtendedProperty(requestParameters: OrderApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedProperty>;

    /**
     * Update GiftInfo on OrderItem
     * @summary Update GiftInfo on OrderItem
     * @param {string} orderId Unique identifier of the order.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {GiftInfo} [giftInfo] Mozu.CommerceRuntime.Contracts.Orders.GiftInfo to use as the update source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateGiftInfoRaw(requestParameters: OrderApiUpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Update GiftInfo on OrderItem
     * Update GiftInfo on OrderItem
     */
    updateGiftInfo(requestParameters: OrderApiUpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates the Delivery Date of a particular Order Item
     * @summary Updates the Delivery Date of a particular Order Item
     * @param {string} orderId Unique identifier of the order item.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateItemDeliveryDateRaw(requestParameters: OrderApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     */
    updateItemDeliveryDate(requestParameters: OrderApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates the duty amount of an order item in the order.
     * @summary Update Item Duty
     * @param {string} orderId Unique identifier of the order item.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {number} dutyAmount Duty amount to update the item product to.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateItemDutyRaw(requestParameters: OrderApiUpdateItemDutyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Updates the duty amount of an order item in the order.
     * Update Item Duty
     */
    updateItemDuty(requestParameters: OrderApiUpdateItemDutyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * @summary Update Item Fulfillment
     * @param {string} orderId Unique identifier of the order item.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [zipCode] Zip Code used for inventory reservation if order having STH items
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimeOrderItem} [commerceRuntimeOrderItem] The order item containing fulfilment information to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateItemFulfillmentRaw(requestParameters: OrderApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * Update Item Fulfillment
     */
    updateItemFulfillment(requestParameters: OrderApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates the price of an individual order item in the order.
     * @summary Update Item Product Price
     * @param {string} orderId Unique identifier of the order item.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {number} price Price to update the item product to.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateItemProductPriceRaw(requestParameters: OrderApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Updates the price of an individual order item in the order.
     * Update Item Product Price
     */
    updateItemProductPrice(requestParameters: OrderApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates the quantity of an individual order item in the order.
     * @summary Update Item Quantity
     * @param {string} orderId Unique identifier of the order item.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {number} quantity New quantity for the specified order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateItemQuantityRaw(requestParameters: OrderApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Updates the quantity of an individual order item in the order.
     * Update Item Quantity
     */
    updateItemQuantity(requestParameters: OrderApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates the billing and/or shipping information of an existing order.
     * @summary Update Order
     * @param {string} orderId The order ID to update.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Order} [order] All properties of the order to place.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderRaw(requestParameters: OrderApiUpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Updates the billing and/or shipping information of an existing order.
     * Update Order
     */
    updateOrder(requestParameters: OrderApiUpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates a specific order attribute set of an order.
     * @summary Update Order Attributes
     * @param {string} orderId Unique identifier of the order whose attributeSet you want to update.
     * @param {boolean} [removeMissing] Indicates that items missing from the collection should be removed.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CommerceRuntimeOrderAttribute>} [commerceRuntimeOrderAttribute] Attributes to upsert.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderAttributesRaw(requestParameters: OrderApiUpdateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>>;

    /**
     * Updates a specific order attribute set of an order.
     * Update Order Attributes
     */
    updateOrderAttributes(requestParameters: OrderApiUpdateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>>;

    /**
     * Update existing discount on the order.
     * @summary Update Order Discount
     * @param {string} orderId Unique identifier of the order with which to associate the coupon.
     * @param {number} discountId Identifies the discount to be updated.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimeAppliedDiscount} [commerceRuntimeAppliedDiscount] Discount information to use as the update source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderDiscountRaw(requestParameters: OrderApiUpdateOrderDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Update existing discount on the order.
     * Update Order Discount
     */
    updateOrderDiscount(requestParameters: OrderApiUpdateOrderDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Update a discount on the order item to ignore or unignore it.
     * @summary Update Order Item Discount
     * @param {string} orderId Unique identifier of the order with which to associate the coupon.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {number} discountId Identifies the discount to be updated.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit,   ApplyToOriginal, ApplyToDraft).
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimeAppliedDiscount} [commerceRuntimeAppliedDiscount] Discount information to use as the update source.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderItemDiscountRaw(requestParameters: OrderApiUpdateOrderItemDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Update a discount on the order item to ignore or unignore it.
     * Update Order Item Discount
     */
    updateOrderItemDiscount(requestParameters: OrderApiUpdateOrderItemDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Updates a specific order note for an order.
     * @summary Update Order Note
     * @param {string} orderId Unique identifier of the order whose note you want to update.
     * @param {string} noteId Unique identifier of the note whose text you want to update.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderNote} [orderNote] Text of the note.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderNoteRaw(requestParameters: OrderApiUpdateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>>;

    /**
     * Updates a specific order note for an order.
     * Update Order Note
     */
    updateOrderNote(requestParameters: OrderApiUpdateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote>;

    /**
     * Update Order Restrictions
     * @summary Update Order Restrictions
     * @param {string} orderId 
     * @param {boolean} [restrictEdit] 
     * @param {boolean} [restrictCancellation] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateOrderRestrictionsRaw(requestParameters: OrderApiUpdateOrderRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Update Order Restrictions
     * Update Order Restrictions
     */
    updateOrderRestrictions(requestParameters: OrderApiUpdateOrderRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * 
     * @summary Delete an order package
     * @param {string} orderId Unique identifier of the order with which to associate the package.
     * @param {string} packageId Package to update on the order
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CommerceRuntimePackage} [commerceRuntimePackage] Package content to update on the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updatePackageRaw(requestParameters: OrderApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>>;

    /**
     * 
     * Delete an order package
     */
    updatePackage(requestParameters: OrderApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage>;

    /**
     * Updates pickup details on the order.
     * @summary Update Pickup
     * @param {string} orderId Unique identifier of the order with which to associate the pickup.
     * @param {string} pickupId Pickup to update on the order
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Pickup} [pickup] Pickup content to update on the order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updatePickupRaw(requestParameters: OrderApiUpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>>;

    /**
     * Updates pickup details on the order.
     * Update Pickup
     */
    updatePickup(requestParameters: OrderApiUpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup>;

    /**
     * Updates adjustments on shipments.
     * @summary Update Shipment Adjustments
     * @param {string} orderId 
     * @param {number} shipmentNumber 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ShipmentAdjustment} [shipmentAdjustment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateShipmentAdjustmentsRaw(requestParameters: OrderApiUpdateShipmentAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>>;

    /**
     * Updates adjustments on shipments.
     * Update Shipment Adjustments
     */
    updateShipmentAdjustments(requestParameters: OrderApiUpdateShipmentAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment>;

    /**
     * Updates shipment item with new shipment adjustment.
     * @summary Update Shipment Item
     * @param {string} orderId 
     * @param {number} shipmentNumber 
     * @param {number} itemId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ShipmentItemAdjustment} [shipmentItemAdjustment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateShipmentItemRaw(requestParameters: OrderApiUpdateShipmentItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>>;

    /**
     * Updates shipment item with new shipment adjustment.
     * Update Shipment Item
     */
    updateShipmentItem(requestParameters: OrderApiUpdateShipmentItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment>;

    /**
     * Update a subscription info on the order item.
     * @summary Update Order Item Subscription Info, applies only to Draft Order
     * @param {string} orderId Unique identifier of the order with which to associate the coupon.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {SubscriptionInfo} [subscriptionInfo] Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as the update source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    updateSubscriptionInfoRaw(requestParameters: OrderApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Update a subscription info on the order item.
     * Update Order Item Subscription Info, applies only to Draft Order
     */
    updateSubscriptionInfo(requestParameters: OrderApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * 
     * @summary Endpoint to add/update alternate contact
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AlternateContact} [alternateContact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    upsertAlternateContactRaw(requestParameters: OrderApiUpsertAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * 
     * Endpoint to add/update alternate contact
     */
    upsertAlternateContact(requestParameters: OrderApiUpsertAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * Upsert Gift Message
     * @summary Upsert Gift Message
     * @param {string} orderId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {GiftMessage} [giftMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    upsertGiftMessageRaw(requestParameters: OrderApiUpsertGiftMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * Upsert Gift Message
     * Upsert Gift Message
     */
    upsertGiftMessage(requestParameters: OrderApiUpsertGiftMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

    /**
     * You need to pass in all tags everytime
     * @summary Upsert Inventory Tags on OrderItem
     * @param {string} orderId Unique identifier of the order.
     * @param {string} orderItemId Unique identifier of the order item.
     * @param {string} [updateMode] Determines the update strategy for this update (ApplyAndCommit, ApplyToOriginal, ApplyToDraft)
     * @param {string} [version] Determines whether or not to check versioning of items for concurrency purposes.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<InventoryTags>} [inventoryTags] Mozu.CommerceRuntime.Contracts.Commerce.InventoryTags to use as the update source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    upsertInventoryTagsRaw(requestParameters: OrderApiUpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>>;

    /**
     * You need to pass in all tags everytime
     * Upsert Inventory Tags on OrderItem
     */
    upsertInventoryTags(requestParameters: OrderApiUpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order>;

}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI implements OrderApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds extended properties.
     * Adds Extended Properties
     */


    async addExtendedPropertiesRaw(requestParameters: OrderApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling addExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds extended properties.
     * Adds Extended Properties
     */
    async addExtendedProperties(requestParameters: OrderApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.addExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a validation result from an external system to an order.
     * Add Validation Result
     */


    async addValidationResultRaw(requestParameters: OrderApiAddValidationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderValidationResult>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling addValidationResult.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/validationresults`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderValidationResult,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a validation result from an external system to an order.
     * Add Validation Result
     */
    async addValidationResult(requestParameters: OrderApiAddValidationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderValidationResult> {
        const response = await this.addValidationResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a pricing adjustment to the order.
     * Apply Adjustment
     */


    async applyAdjustmentRaw(requestParameters: OrderApiApplyAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.adjustment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a pricing adjustment to the order.
     * Apply Adjustment
     */
    async applyAdjustment(requestParameters: OrderApiApplyAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a coupon to the order.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: OrderApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/coupons/{couponCode}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a coupon to the order.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: OrderApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a handling adjustment to the order.
     * Apply Handling Adjustment
     */


    async applyHandlingAdjustmentRaw(requestParameters: OrderApiApplyHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyHandlingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/handling`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.adjustment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a handling adjustment to the order.
     * Apply Handling Adjustment
     */
    async applyHandlingAdjustment(requestParameters: OrderApiApplyHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyHandlingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a shipping adjustment to the order specified by order Id.
     * Apply Shipping Adjustment
     */


    async applyShippingAdjustmentRaw(requestParameters: OrderApiApplyShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyShippingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/shipping`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.adjustment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a shipping adjustment to the order specified by order Id.
     * Apply Shipping Adjustment
     */
    async applyShippingAdjustment(requestParameters: OrderApiApplyShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyShippingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * Auto Capture Payments
     */


    async autoCapturePaymentsRaw(requestParameters: OrderApiAutoCapturePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling autoCapturePayments.');
        }

        const queryParameters: any = {};

        if (requestParameters.forceCapture !== undefined) {
            queryParameters['forceCapture'] = requestParameters.forceCapture;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/autocapture`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * Auto Capture Payments
     */
    async autoCapturePayments(requestParameters: OrderApiAutoCapturePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.autoCapturePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel an order with the cancel reason.
     * Cancel Order
     */


    async cancelOrderRaw(requestParameters: OrderApiCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/cancel/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeCanceledReason,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Cancel an order with the cancel reason.
     * Cancel Order
     */
    async cancelOrder(requestParameters: OrderApiCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * Change Order Price List
     */


    async changeOrderPriceListRaw(requestParameters: OrderApiChangeOrderPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling changeOrderPriceList.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/priceList`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * Change Order Price List
     */
    async changeOrderPriceList(requestParameters: OrderApiChangeOrderPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.changeOrderPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the User ID associated with an order.
     * Change Order UserId
     */


    async changeOrderUserIdRaw(requestParameters: OrderApiChangeOrderUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling changeOrderUserId.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/users`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Changes the User ID associated with an order.
     * Change Order UserId
     */
    async changeOrderUserId(requestParameters: OrderApiChangeOrderUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.changeOrderUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a digital package to the order.
     * Create Digital Package
     */


    async createDigitalPackageRaw(requestParameters: OrderApiCreateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createDigitalPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.digitalPackage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a digital package to the order.
     * Create Digital Package
     */
    async createDigitalPackage(requestParameters: OrderApiCreateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage> {
        const response = await this.createDigitalPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * Create Order
     */


    async createOrderRaw(requestParameters: OrderApiCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        if (requestParameters.cartId !== undefined) {
            queryParameters['cartId'] = requestParameters.cartId;
        }

        if (requestParameters.quoteId !== undefined) {
            queryParameters['quoteId'] = requestParameters.quoteId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.order,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * Create Order
     */
    async createOrder(requestParameters: OrderApiCreateOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * Create Order Attributes
     */


    async createOrderAttributesRaw(requestParameters: OrderApiCreateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/attributes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * Create Order Attributes
     */
    async createOrderAttributes(requestParameters: OrderApiCreateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>> {
        const response = await this.createOrderAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Create Order Item
     */


    async createOrderItemRaw(requestParameters: OrderApiCreateOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.skipInventoryCheck !== undefined) {
            queryParameters['skipInventoryCheck'] = requestParameters.skipInventoryCheck;
        }

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Create Order Item
     */
    async createOrderItem(requestParameters: OrderApiCreateOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * Create Order Note
     */


    async createOrderNoteRaw(requestParameters: OrderApiCreateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderNote,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * Create Order Note
     */
    async createOrderNote(requestParameters: OrderApiCreateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.createOrderNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Apply a package to the order
     */


    async createPackageRaw(requestParameters: OrderApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimePackage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Apply a package to the order
     */
    async createPackage(requestParameters: OrderApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage> {
        const response = await this.createPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */


    async createPackageShipmentsRaw(requestParameters: OrderApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimePackage>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPackageShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */
    async createPackageShipments(requestParameters: OrderApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimePackage>> {
        const response = await this.createPackageShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */


    async createPaymentActionRaw(requestParameters: OrderApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPaymentAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */
    async createPaymentAction(requestParameters: OrderApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a pickup to the order.
     * Create Pickup
     */


    async createPickupRaw(requestParameters: OrderApiCreatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPickup.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.pickup,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a pickup to the order.
     * Create Pickup
     */
    async createPickup(requestParameters: OrderApiCreatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.createPickupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a refund to the order.
     * Create Refund
     */


    async createRefundRaw(requestParameters: OrderApiCreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Refund>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createRefund.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/refunds`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.refund,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a refund to the order.
     * Create Refund
     */
    async createRefund(requestParameters: OrderApiCreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Refund> {
        const response = await this.createRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an order digital package.
     * Delete Digital Package
     */


    async deleteDigitalPackageRaw(requestParameters: OrderApiDeleteDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteDigitalPackage.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling deleteDigitalPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an order digital package.
     * Delete Digital Package
     */
    async deleteDigitalPackage(requestParameters: OrderApiDeleteDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDigitalPackageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete extended properties on the order.
     * Delete Extended Properties
     */


    async deleteExtendedPropertiesRaw(requestParameters: OrderApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete extended properties on the order.
     * Delete Extended Properties
     */
    async deleteExtendedProperties(requestParameters: OrderApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtendedPropertiesRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Extended Property
     */


    async deleteExtendedPropertyRaw(requestParameters: OrderApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteExtendedProperty.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteExtendedProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties/{key}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Extended Property
     */
    async deleteExtendedProperty(requestParameters: OrderApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtendedPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a draft version of an order.
     * Delete Order Draft
     */


    async deleteOrderDraftRaw(requestParameters: OrderApiDeleteOrderDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderDraft.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/draft`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a draft version of an order.
     * Delete Order Draft
     */
    async deleteOrderDraft(requestParameters: OrderApiDeleteOrderDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderDraftRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Order Item
     */


    async deleteOrderItemRaw(requestParameters: OrderApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderItem.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling deleteOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Order Item
     */
    async deleteOrderItem(requestParameters: OrderApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.deleteOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific order note on an order.
     * Delete Order Note
     */


    async deleteOrderNoteRaw(requestParameters: OrderApiDeleteOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteOrderNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes/{noteId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific order note on an order.
     * Delete Order Note
     */
    async deleteOrderNote(requestParameters: OrderApiDeleteOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderNoteRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete an order package
     */


    async deletePackageRaw(requestParameters: OrderApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deletePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling deletePackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete an order package
     */
    async deletePackage(requestParameters: OrderApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an order pickup.
     * Delete Pickup
     */


    async deletePickupRaw(requestParameters: OrderApiDeletePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deletePickup.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling deletePickup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an order pickup.
     * Delete Pickup
     */
    async deletePickup(requestParameters: OrderApiDeletePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePickupRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     */


    async deleteShipmentRaw(requestParameters: OrderApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling deleteShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     */
    async deleteShipment(requestParameters: OrderApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     */


    async evaluateOrderRollupStatusRaw(requestParameters: OrderApiEvaluateOrderRollupStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling evaluateOrderRollupStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/evaluaterollupstatus`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     */
    async evaluateOrderRollupStatus(requestParameters: OrderApiEvaluateOrderRollupStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.evaluateOrderRollupStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * Get Available Actions
     */


    async getAvailableActionsRaw(requestParameters: OrderApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailableActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * Get Available Actions
     */
    async getAvailableActions(requestParameters: OrderApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Digital Package Fulfillment Actions
     */


    async getAvailableDigitalPackageFulfillmentActionsRaw(requestParameters: OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailableDigitalPackageFulfillmentActions.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling getAvailableDigitalPackageFulfillmentActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Digital Package Fulfillment Actions
     */
    async getAvailableDigitalPackageFulfillmentActions(requestParameters: OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableDigitalPackageFulfillmentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Retrieves available fulfillment actions
     */


    async getAvailablePackageFulfillmentActionsRaw(requestParameters: OrderApiGetAvailablePackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailablePackageFulfillmentActions.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getAvailablePackageFulfillmentActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * Retrieves available fulfillment actions
     */
    async getAvailablePackageFulfillmentActions(requestParameters: OrderApiGetAvailablePackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailablePackageFulfillmentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available payment actions which depends on the status of the order\'s payment transaction.   Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"
     * Get Available Payment Actions
     */


    async getAvailablePaymentActionsRaw(requestParameters: OrderApiGetAvailablePaymentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailablePaymentActions.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling getAvailablePaymentActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/{paymentId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available payment actions which depends on the status of the order\'s payment transaction.   Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"
     * Get Available Payment Actions
     */
    async getAvailablePaymentActions(requestParameters: OrderApiGetAvailablePaymentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailablePaymentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Pickup Fulfillment Actions
     */


    async getAvailablePickupFulfillmentActionsRaw(requestParameters: OrderApiGetAvailablePickupFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailablePickupFulfillmentActions.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling getAvailablePickupFulfillmentActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Pickup Fulfillment Actions
     */
    async getAvailablePickupFulfillmentActions(requestParameters: OrderApiGetAvailablePickupFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailablePickupFulfillmentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipment Methods
     */


    async getAvailableShipmentMethodsRaw(requestParameters: OrderApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeShippingRate>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailableShipmentMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/methods`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipment Methods
     */
    async getAvailableShipmentMethods(requestParameters: OrderApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeShippingRate>> {
        const response = await this.getAvailableShipmentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the customer\'s billing address.If paying by credit card, it retrieves the card\'s number, expiration date, card holder\'s name and billing address.
     * Get Billing Info
     */


    async getBillingInfoRaw(requestParameters: OrderApiGetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getBillingInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/billinginfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the customer\'s billing address.If paying by credit card, it retrieves the card\'s number, expiration date, card holder\'s name and billing address.
     * Get Billing Info
     */
    async getBillingInfo(requestParameters: OrderApiGetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInfo> {
        const response = await this.getBillingInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order digital package.
     * Get Digital Package
     */


    async getDigitalPackageRaw(requestParameters: OrderApiGetDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getDigitalPackage.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling getDigitalPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an order digital package.
     * Get Digital Package
     */
    async getDigitalPackage(requestParameters: OrderApiGetDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage> {
        const response = await this.getDigitalPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extended properties on an order.
     * Get Extended Properties
     */


    async getExtendedPropertiesRaw(requestParameters: OrderApiGetExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get extended properties on an order.
     * Get Extended Properties
     */
    async getExtendedProperties(requestParameters: OrderApiGetExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.getExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an order\'s fulfillment information specified by order ID.
     * Get Fulfillment Info
     */


    async getFulfillmentInfoRaw(requestParameters: OrderApiGetFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getFulfillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillmentinfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves an order\'s fulfillment information specified by order ID.
     * Get Fulfillment Info
     */
    async getFulfillmentInfo(requestParameters: OrderApiGetFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo> {
        const response = await this.getFulfillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get Order
     */


    async getOrderRaw(requestParameters: OrderApiGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.includeBin !== undefined) {
            queryParameters['includeBin'] = requestParameters.includeBin;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get Order
     */
    async getOrder(requestParameters: OrderApiGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all attribute sets for an order.
     * Get Order Attributes
     */


    async getOrderAttributesRaw(requestParameters: OrderApiGetOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/attributes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all attribute sets for an order.
     * Get Order Attributes
     */
    async getOrderAttributes(requestParameters: OrderApiGetOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>> {
        const response = await this.getOrderAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single order item.
     * Get Order Item
     */


    async getOrderItemRaw(requestParameters: OrderApiGetOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeOrderItem>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderItem.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling getOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single order item.
     * Get Order Item
     */
    async getOrderItem(requestParameters: OrderApiGetOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeOrderItem> {
        const response = await this.getOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single order item via its line id.
     * Get Order Item Via LineId
     */


    async getOrderItemViaLineIdRaw(requestParameters: OrderApiGetOrderItemViaLineIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeOrderItem>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderItemViaLineId.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling getOrderItemViaLineId.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{lineId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single order item via its line id.
     * Get Order Item Via LineId
     */
    async getOrderItemViaLineId(requestParameters: OrderApiGetOrderItemViaLineIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeOrderItem> {
        const response = await this.getOrderItemViaLineIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of all items in an order specified by order Id.
     * Get Order Items
     */


    async getOrderItemsRaw(requestParameters: OrderApiGetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItemCollection>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of all items in an order specified by order Id.
     * Get Order Items
     */
    async getOrderItems(requestParameters: OrderApiGetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItemCollection> {
        const response = await this.getOrderItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific order note from an order.
     * Get Order Note
     */


    async getOrderNoteRaw(requestParameters: OrderApiGetOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling getOrderNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes/{noteId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific order note from an order.
     * Get Order Note
     */
    async getOrderNote(requestParameters: OrderApiGetOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.getOrderNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all notes for an order.
     * Get Order Notes
     */


    async getOrderNotesRaw(requestParameters: OrderApiGetOrderNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderNote>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderNotes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all notes for an order.
     * Get Order Notes
     */
    async getOrderNotes(requestParameters: OrderApiGetOrderNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderNote>> {
        const response = await this.getOrderNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * Get Order Returnable Items
     */


    async getOrderReturnableItemsRaw(requestParameters: OrderApiGetOrderReturnableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderReturnableItemCollection>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderReturnableItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/returnableitems`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * Get Order Returnable Items
     */
    async getOrderReturnableItems(requestParameters: OrderApiGetOrderReturnableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderReturnableItemCollection> {
        const response = await this.getOrderReturnableItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * Get Orders
     */


    async getOrdersRaw(requestParameters: OrderApiGetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.includeBin !== undefined) {
            queryParameters['includeBin'] = requestParameters.includeBin;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * Get Orders
     */
    async getOrders(requestParameters: OrderApiGetOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderCollection> {
        const response = await this.getOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package
     * Get an order package
     */


    async getPackageRaw(requestParameters: OrderApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an order package
     * Get an order package
     */
    async getPackage(requestParameters: OrderApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package label
     * Get an order package label
     */


    async getPackageLabelRaw(requestParameters: OrderApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPackageLabel.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackageLabel.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}/label`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get an order package label
     * Get an order package label
     */
    async getPackageLabel(requestParameters: OrderApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPackageLabelRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific payment transaction from the order.
     * Get Payment
     */


    async getPaymentRaw(requestParameters: OrderApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPayment.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling getPayment.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/{paymentId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific payment transaction from the order.
     * Get Payment
     */
    async getPayment(requestParameters: OrderApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.getPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * Get Payments
     */


    async getPaymentsRaw(requestParameters: OrderApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCollection>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPayments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * Get Payments
     */
    async getPayments(requestParameters: OrderApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCollection> {
        const response = await this.getPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specified pickup on the order.
     * Get Pickup
     */


    async getPickupRaw(requestParameters: OrderApiGetPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPickup.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling getPickup.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a specified pickup on the order.
     * Get Pickup
     */
    async getPickup(requestParameters: OrderApiGetPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.getPickupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get QueuedHistoricalOrder
     */


    async getQueuedHistoricalOrderRaw(requestParameters: OrderApiGetQueuedHistoricalOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getQueuedHistoricalOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/queuedorders/historical/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get QueuedHistoricalOrder
     */
    async getQueuedHistoricalOrder(requestParameters: OrderApiGetQueuedHistoricalOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.getQueuedHistoricalOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of queued historical orders according to any specified filter criteria and sort options.
     * Get QueuedHistoricalOrders
     */


    async getQueuedHistoricalOrdersRaw(requestParameters: OrderApiGetQueuedHistoricalOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueuedOrderCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/queuedorders/historical`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of queued historical orders according to any specified filter criteria and sort options.
     * Get QueuedHistoricalOrders
     */
    async getQueuedHistoricalOrders(requestParameters: OrderApiGetQueuedHistoricalOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueuedOrderCollection> {
        const response = await this.getQueuedHistoricalOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get QueuedOrder
     * Get QueuedOrder
     */


    async getQueuedOrderRaw(requestParameters: OrderApiGetQueuedOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getQueuedOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/queuedorders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get QueuedOrder
     * Get QueuedOrder
     */
    async getQueuedOrder(requestParameters: OrderApiGetQueuedOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.getQueuedOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of queuedorders according to any specified filter criteria and sort options.
     * Get Queued Orders
     */


    async getQueuedOrdersRaw(requestParameters: OrderApiGetQueuedOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueuedOrderCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/queuedorders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of queuedorders according to any specified filter criteria and sort options.
     * Get Queued Orders
     */
    async getQueuedOrders(requestParameters: OrderApiGetQueuedOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueuedOrderCollection> {
        const response = await this.getQueuedOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets order cancellation reasons based on a category.
     * Get Order Cancel Reasons
     */


    async getReasonsRaw(requestParameters: OrderApiGetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReasonCollection>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/cancel/reasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets order cancellation reasons based on a category.
     * Get Order Cancel Reasons
     */
    async getReasons(requestParameters: OrderApiGetReasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReasonCollection> {
        const response = await this.getReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the refund reasons.
     * Get Refund Reasons
     */


    async getRefundReasonsRaw(requestParameters: OrderApiGetRefundReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundReasonCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/refunds/refundreasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all the refund reasons.
     * Get Refund Reasons
     */
    async getRefundReasons(requestParameters: OrderApiGetRefundReasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundReasonCollection> {
        const response = await this.getRefundReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a shipment to be retrieved for the order.
     * Get Shipment
     */


    async getShipmentRaw(requestParameters: OrderApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipment.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Allows a shipment to be retrieved for the order.
     * Get Shipment
     */
    async getShipment(requestParameters: OrderApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment> {
        const response = await this.getShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * Get Taxable Orders
     */


    async getTaxableOrdersRaw(requestParameters: OrderApiGetTaxableOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PricingTaxableOrder>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getTaxableOrders.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/taxableorders`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * Get Taxable Orders
     */
    async getTaxableOrders(requestParameters: OrderApiGetTaxableOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PricingTaxableOrder>> {
        const response = await this.getTaxableOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets list of validation results on an order.
     * Get Validation Results
     */


    async getValidationResultsRaw(requestParameters: OrderApiGetValidationResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderValidationResult>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getValidationResults.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/validationresults`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets list of validation results on an order.
     * Get Validation Results
     */
    async getValidationResults(requestParameters: OrderApiGetValidationResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderValidationResult>> {
        const response = await this.getValidationResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the fulfillment action to \'Ship\'. To ship an order, the order must have a customer name, the \'Open\' or \'OpenAdProcessing\' status, full shipping address, and shipping method.
     * Perform Fulfillment Action
     */


    async performFulfillmentActionRaw(requestParameters: OrderApiPerformFulfillmentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling performFulfillmentAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillment/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fulfillmentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the fulfillment action to \'Ship\'. To ship an order, the order must have a customer name, the \'Open\' or \'OpenAdProcessing\' status, full shipping address, and shipping method.
     * Perform Fulfillment Action
     */
    async performFulfillmentAction(requestParameters: OrderApiPerformFulfillmentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.performFulfillmentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * Perform Order Action
     */


    async performOrderActionRaw(requestParameters: OrderApiPerformOrderActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling performOrderAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * Perform Order Action
     */
    async performOrderAction(requestParameters: OrderApiPerformOrderActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.performOrderActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * Perform Payment Action
     */


    async performPaymentActionRaw(requestParameters: OrderApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling performPaymentAction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling performPaymentAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/{paymentId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * Perform Payment Action
     */
    async performPaymentAction(requestParameters: OrderApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.performPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Price Order
     */


    async priceOrderRaw(requestParameters: OrderApiPriceOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        if (requestParameters.refreshShipping !== undefined) {
            queryParameters['refreshShipping'] = requestParameters.refreshShipping;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/price`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.order,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Price Order
     */
    async priceOrder(requestParameters: OrderApiPriceOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.priceOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * Process Digital Wallet
     */


    async processDigitalWalletRaw(requestParameters: OrderApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling processDigitalWallet.');
        }

        if (requestParameters.digitalWalletType === null || requestParameters.digitalWalletType === undefined) {
            throw new runtime.RequiredError('digitalWalletType','Required parameter requestParameters.digitalWalletType was null or undefined when calling processDigitalWallet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalWalletType"}}`, encodeURIComponent(String(requestParameters.digitalWalletType))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.digitalWallet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * Process Digital Wallet
     */
    async processDigitalWallet(requestParameters: OrderApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.processDigitalWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Adjustment
     */


    async removeAdjustmentRaw(requestParameters: OrderApiRemoveAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Adjustment
     */
    async removeAdjustment(requestParameters: OrderApiRemoveAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Endpoint to remove alternate conatact from order and shipments.
     */


    async removeAlternateContactRaw(requestParameters: OrderApiRemoveAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeAlternateContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/removealternatecontact`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Endpoint to remove alternate conatact from order and shipments.
     */
    async removeAlternateContact(requestParameters: OrderApiRemoveAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeAlternateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Coupon
     */


    async removeCouponRaw(requestParameters: OrderApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/coupons/{couponCode}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Coupon
     */
    async removeCoupon(requestParameters: OrderApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all coupons that had been previously applied to the order.
     * Remove Coupons
     */


    async removeCouponsRaw(requestParameters: OrderApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/coupons`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes all coupons that had been previously applied to the order.
     * Remove Coupons
     */
    async removeCoupons(requestParameters: OrderApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Handling Adjustment
     */


    async removeHandlingAdjustmentRaw(requestParameters: OrderApiRemoveHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeHandlingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/handling`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Handling Adjustment
     */
    async removeHandlingAdjustment(requestParameters: OrderApiRemoveHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeHandlingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Shipping Adjustment
     */


    async removeShippingAdjustmentRaw(requestParameters: OrderApiRemoveShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeShippingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/shipping`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Shipping Adjustment
     */
    async removeShippingAdjustment(requestParameters: OrderApiRemoveShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeShippingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  FFMT svc will call this during full shipment cancelation or last item cancelation.  FFMT svs is performing shipment Rate validation.(FFMT svc is responsible for sending valid FlatratePerOrder shipments.)  Shipping costs of the canceled shipment will distribute to the active shipment.  Reset Shipping Costs of the canceled shipment to zero.
     * This endpoint is use to Reprice Canceled shipment
     */


    async repriceCanceledShipmentRaw(requestParameters: OrderApiRepriceCanceledShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepriceCanceledShipmentObject>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling repriceCanceledShipment.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/repricecanceledshipment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.repriceCanceledShipmentObject,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     *  FFMT svc will call this during full shipment cancelation or last item cancelation.  FFMT svs is performing shipment Rate validation.(FFMT svc is responsible for sending valid FlatratePerOrder shipments.)  Shipping costs of the canceled shipment will distribute to the active shipment.  Reset Shipping Costs of the canceled shipment to zero.
     * This endpoint is use to Reprice Canceled shipment
     */
    async repriceCanceledShipment(requestParameters: OrderApiRepriceCanceledShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepriceCanceledShipmentObject> {
        const response = await this.repriceCanceledShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a shipment to be repriced.
     * Reprice Shipment
     */


    async repriceShipmentRaw(requestParameters: OrderApiRepriceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling repriceShipment.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling repriceShipment.');
        }

        const queryParameters: any = {};

        if (requestParameters.isItemCancellationContext !== undefined) {
            queryParameters['isItemCancellationContext'] = requestParameters.isItemCancellationContext;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.repriceShipmentObject,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Allows a shipment to be repriced.
     * Reprice Shipment
     */
    async repriceShipment(requestParameters: OrderApiRepriceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment> {
        const response = await this.repriceShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reprice substitute items in shipments
     * Reprice substitute items in shipments
     */


    async repriceSubstitutesRaw(requestParameters: OrderApiRepriceSubstitutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling repriceSubstitutes.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling repriceSubstitutes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/repricesubstitutes`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.repriceShipmentObject,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Reprice substitute items in shipments
     * Reprice substitute items in shipments
     */
    async repriceSubstitutes(requestParameters: OrderApiRepriceSubstitutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment> {
        const response = await this.repriceSubstitutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend gateway giftcard email.
     * Resend Gateway Gift Card Email
     */


    async resendGatewayGiftCardEmailRaw(requestParameters: OrderApiResendGatewayGiftCardEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendGatewayGiftCardEmail.');
        }

        if (requestParameters.giftcardId === null || requestParameters.giftcardId === undefined) {
            throw new runtime.RequiredError('giftcardId','Required parameter requestParameters.giftcardId was null or undefined when calling resendGatewayGiftCardEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/giftcard/{giftcardId}/resend`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"giftcardId"}}`, encodeURIComponent(String(requestParameters.giftcardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend gateway giftcard email.
     * Resend Gateway Gift Card Email
     */
    async resendGatewayGiftCardEmail(requestParameters: OrderApiResendGatewayGiftCardEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendGatewayGiftCardEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Resend order confirmation email specified by the order Id.
     * Resend Order Confirmation Email
     */


    async resendOrderConfirmationEmailRaw(requestParameters: OrderApiResendOrderConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendOrderConfirmationEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/email/resend`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderAction,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend order confirmation email specified by the order Id.
     * Resend Order Confirmation Email
     */
    async resendOrderConfirmationEmail(requestParameters: OrderApiResendOrderConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendOrderConfirmationEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Resends the package fulfillment email.
     * Resend Package Fulfillment Email
     */


    async resendPackageFulfillmentEmailRaw(requestParameters: OrderApiResendPackageFulfillmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendPackageFulfillmentEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillment/email/resend`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fulfillmentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Resends the package fulfillment email.
     * Resend Package Fulfillment Email
     */
    async resendPackageFulfillmentEmail(requestParameters: OrderApiResendPackageFulfillmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.resendPackageFulfillmentEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend refund email.
     * Resend Refund Email
     */


    async resendRefundEmailRaw(requestParameters: OrderApiResendRefundEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendRefundEmail.');
        }

        if (requestParameters.refundId === null || requestParameters.refundId === undefined) {
            throw new runtime.RequiredError('refundId','Required parameter requestParameters.refundId was null or undefined when calling resendRefundEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/refunds/{refundId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"refundId"}}`, encodeURIComponent(String(requestParameters.refundId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend refund email.
     * Resend Refund Email
     */
    async resendRefundEmail(requestParameters: OrderApiResendRefundEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendRefundEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a payment source to the order.
     * Set Billing Info
     */


    async setBillingInfoRaw(requestParameters: OrderApiSetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setBillingInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/billinginfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.billingInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a payment source to the order.
     * Set Billing Info
     */
    async setBillingInfo(requestParameters: OrderApiSetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInfo> {
        const response = await this.setBillingInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an order\'s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant\'s fulfillment cost.
     * Set Fulfillment Info
     */


    async setFulFillmentInfoRaw(requestParameters: OrderApiSetFulFillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setFulFillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillmentinfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fulfillmentInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an order\'s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant\'s fulfillment cost.
     * Set Fulfillment Info
     */
    async setFulFillmentInfo(requestParameters: OrderApiSetFulFillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo> {
        const response = await this.setFulFillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Opting out from the sms notifications.
     * Sms Opt Out
     */


    async smsOptOutRaw(requestParameters: OrderApiSmsOptOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling smsOptOut.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/sms/optout/{siteId}`.replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Opting out from the sms notifications.
     * Sms Opt Out
     */
    async smsOptOut(requestParameters: OrderApiSmsOptOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.smsOptOutRaw(requestParameters, initOverrides);
    }

    /**
     * Allows spliting an existing shipment.
     * Split Shipments
     */


    async splitShipmentsRaw(requestParameters: OrderApiSplitShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeShipment>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling splitShipments.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling splitShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/split`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.splitShipmentsObject,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Allows spliting an existing shipment.
     * Split Shipments
     */
    async splitShipments(requestParameters: OrderApiSplitShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeShipment>> {
        const response = await this.splitShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a digital package on the order.
     * Update Digital Package
     */


    async updateDigitalPackageRaw(requestParameters: OrderApiUpdateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateDigitalPackage.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling updateDigitalPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.digitalPackage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a digital package on the order.
     * Update Digital Package
     */
    async updateDigitalPackage(requestParameters: OrderApiUpdateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage> {
        const response = await this.updateDigitalPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update extended properties.
     * Updated extended properties
     */


    async updateExtendedPropertiesRaw(requestParameters: OrderApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.upsert !== undefined) {
            queryParameters['upsert'] = requestParameters.upsert;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update extended properties.
     * Updated extended properties
     */
    async updateExtendedProperties(requestParameters: OrderApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.updateExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updated specific extended property
     * Update Extended Property
     */


    async updateExtendedPropertyRaw(requestParameters: OrderApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedProperty>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateExtendedProperty.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateExtendedProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.upsert !== undefined) {
            queryParameters['upsert'] = requestParameters.upsert;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties/{key}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updated specific extended property
     * Update Extended Property
     */
    async updateExtendedProperty(requestParameters: OrderApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedProperty> {
        const response = await this.updateExtendedPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update GiftInfo on OrderItem
     * Update GiftInfo on OrderItem
     */


    async updateGiftInfoRaw(requestParameters: OrderApiUpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateGiftInfo.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateGiftInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/updateGiftInfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.giftInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update GiftInfo on OrderItem
     * Update GiftInfo on OrderItem
     */
    async updateGiftInfo(requestParameters: OrderApiUpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateGiftInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     */


    async updateItemDeliveryDateRaw(requestParameters: OrderApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemDeliveryDate.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemDeliveryDate.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/deliverydate`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     */
    async updateItemDeliveryDate(requestParameters: OrderApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemDeliveryDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the duty amount of an order item in the order.
     * Update Item Duty
     */


    async updateItemDutyRaw(requestParameters: OrderApiUpdateItemDutyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemDuty.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemDuty.');
        }

        if (requestParameters.dutyAmount === null || requestParameters.dutyAmount === undefined) {
            throw new runtime.RequiredError('dutyAmount','Required parameter requestParameters.dutyAmount was null or undefined when calling updateItemDuty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"dutyAmount"}}`, encodeURIComponent(String(requestParameters.dutyAmount))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the duty amount of an order item in the order.
     * Update Item Duty
     */
    async updateItemDuty(requestParameters: OrderApiUpdateItemDutyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemDutyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * Update Item Fulfillment
     */


    async updateItemFulfillmentRaw(requestParameters: OrderApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemFulfillment.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemFulfillment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/fulfillment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * Update Item Fulfillment
     */
    async updateItemFulfillment(requestParameters: OrderApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the price of an individual order item in the order.
     * Update Item Product Price
     */


    async updateItemProductPriceRaw(requestParameters: OrderApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemProductPrice.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemProductPrice.');
        }

        if (requestParameters.price === null || requestParameters.price === undefined) {
            throw new runtime.RequiredError('price','Required parameter requestParameters.price was null or undefined when calling updateItemProductPrice.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/price/{price}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"price"}}`, encodeURIComponent(String(requestParameters.price))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the price of an individual order item in the order.
     * Update Item Product Price
     */
    async updateItemProductPrice(requestParameters: OrderApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemProductPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the quantity of an individual order item in the order.
     * Update Item Quantity
     */


    async updateItemQuantityRaw(requestParameters: OrderApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the quantity of an individual order item in the order.
     * Update Item Quantity
     */
    async updateItemQuantity(requestParameters: OrderApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the billing and/or shipping information of an existing order.
     * Update Order
     */


    async updateOrderRaw(requestParameters: OrderApiUpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.order,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the billing and/or shipping information of an existing order.
     * Update Order
     */
    async updateOrder(requestParameters: OrderApiUpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific order attribute set of an order.
     * Update Order Attributes
     */


    async updateOrderAttributesRaw(requestParameters: OrderApiUpdateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.removeMissing !== undefined) {
            queryParameters['removeMissing'] = requestParameters.removeMissing;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/attributes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a specific order attribute set of an order.
     * Update Order Attributes
     */
    async updateOrderAttributes(requestParameters: OrderApiUpdateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>> {
        const response = await this.updateOrderAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing discount on the order.
     * Update Order Discount
     */


    async updateOrderDiscountRaw(requestParameters: OrderApiUpdateOrderDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderDiscount.');
        }

        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateOrderDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/discounts/{discountId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeAppliedDiscount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update existing discount on the order.
     * Update Order Discount
     */
    async updateOrderDiscount(requestParameters: OrderApiUpdateOrderDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a discount on the order item to ignore or unignore it.
     * Update Order Item Discount
     */


    async updateOrderItemDiscountRaw(requestParameters: OrderApiUpdateOrderItemDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderItemDiscount.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateOrderItemDiscount.');
        }

        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateOrderItemDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeAppliedDiscount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a discount on the order item to ignore or unignore it.
     * Update Order Item Discount
     */
    async updateOrderItemDiscount(requestParameters: OrderApiUpdateOrderItemDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderItemDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific order note for an order.
     * Update Order Note
     */


    async updateOrderNoteRaw(requestParameters: OrderApiUpdateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateOrderNote.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes/{noteId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderNote,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a specific order note for an order.
     * Update Order Note
     */
    async updateOrderNote(requestParameters: OrderApiUpdateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.updateOrderNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Order Restrictions
     * Update Order Restrictions
     */


    async updateOrderRestrictionsRaw(requestParameters: OrderApiUpdateOrderRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderRestrictions.');
        }

        const queryParameters: any = {};

        if (requestParameters.restrictEdit !== undefined) {
            queryParameters['restrictEdit'] = requestParameters.restrictEdit;
        }

        if (requestParameters.restrictCancellation !== undefined) {
            queryParameters['restrictCancellation'] = requestParameters.restrictCancellation;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/updateorderrestrictions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Order Restrictions
     * Update Order Restrictions
     */
    async updateOrderRestrictions(requestParameters: OrderApiUpdateOrderRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete an order package
     */


    async updatePackageRaw(requestParameters: OrderApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimePackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updatePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling updatePackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimePackage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Delete an order package
     */
    async updatePackage(requestParameters: OrderApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimePackage> {
        const response = await this.updatePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates pickup details on the order.
     * Update Pickup
     */


    async updatePickupRaw(requestParameters: OrderApiUpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updatePickup.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling updatePickup.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.pickup,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates pickup details on the order.
     * Update Pickup
     */
    async updatePickup(requestParameters: OrderApiUpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.updatePickupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates adjustments on shipments.
     * Update Shipment Adjustments
     */


    async updateShipmentAdjustmentsRaw(requestParameters: OrderApiUpdateShipmentAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateShipmentAdjustments.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateShipmentAdjustments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentAdjustment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates adjustments on shipments.
     * Update Shipment Adjustments
     */
    async updateShipmentAdjustments(requestParameters: OrderApiUpdateShipmentAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment> {
        const response = await this.updateShipmentAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates shipment item with new shipment adjustment.
     * Update Shipment Item
     */


    async updateShipmentItemRaw(requestParameters: OrderApiUpdateShipmentItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateShipmentItem.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateShipmentItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateShipmentItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentItemAdjustment,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates shipment item with new shipment adjustment.
     * Update Shipment Item
     */
    async updateShipmentItem(requestParameters: OrderApiUpdateShipmentItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeShipment> {
        const response = await this.updateShipmentItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a subscription info on the order item.
     * Update Order Item Subscription Info, applies only to Draft Order
     */


    async updateSubscriptionInfoRaw(requestParameters: OrderApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateSubscriptionInfo.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateSubscriptionInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/subscriptionInfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a subscription info on the order item.
     * Update Order Item Subscription Info, applies only to Draft Order
     */
    async updateSubscriptionInfo(requestParameters: OrderApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateSubscriptionInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Endpoint to add/update alternate contact
     */


    async upsertAlternateContactRaw(requestParameters: OrderApiUpsertAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling upsertAlternateContact.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/upsertalternatecontact`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.alternateContact,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Endpoint to add/update alternate contact
     */
    async upsertAlternateContact(requestParameters: OrderApiUpsertAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.upsertAlternateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert Gift Message
     * Upsert Gift Message
     */


    async upsertGiftMessageRaw(requestParameters: OrderApiUpsertGiftMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling upsertGiftMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/upsertgiftmessage`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.giftMessage,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Upsert Gift Message
     * Upsert Gift Message
     */
    async upsertGiftMessage(requestParameters: OrderApiUpsertGiftMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.upsertGiftMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You need to pass in all tags everytime
     * Upsert Inventory Tags on OrderItem
     */


    async upsertInventoryTagsRaw(requestParameters: OrderApiUpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling upsertInventoryTags.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling upsertInventoryTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/upsertInventoryTags`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.inventoryTags,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * You need to pass in all tags everytime
     * Upsert Inventory Tags on OrderItem
     */
    async upsertInventoryTags(requestParameters: OrderApiUpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.upsertInventoryTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
