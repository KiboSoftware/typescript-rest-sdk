/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Adjustment,
  AlternateContact,
  AppliedDiscount,
  BillingInfo,
  CancelReasonCollection,
  CanceledReason,
  DigitalPackage,
  DigitalWallet,
  ExtendedProperty,
  FulfillmentAction,
  FulfillmentInfo,
  Order,
  OrderAction,
  OrderAttribute,
  OrderCollection,
  OrderItem,
  OrderItemCollection,
  OrderNote,
  OrderReturnableItemCollection,
  OrderValidationResult,
  Package,
  Payment,
  PaymentAction,
  PaymentCollection,
  Pickup,
  PricingTaxableOrder,
  Refund,
  RefundReasonCollection,
  RepriceShipmentObject,
  Shipment,
  ShipmentAdjustment,
  ShipmentItemAdjustment,
  ShippingRate,
  SplitShipmentsObject,
  SubscriptionInfo,
} from '../models';
import {
    AdjustmentFromJSON,
    AdjustmentToJSON,
    AlternateContactFromJSON,
    AlternateContactToJSON,
    AppliedDiscountFromJSON,
    AppliedDiscountToJSON,
    BillingInfoFromJSON,
    BillingInfoToJSON,
    CancelReasonCollectionFromJSON,
    CancelReasonCollectionToJSON,
    CanceledReasonFromJSON,
    CanceledReasonToJSON,
    DigitalPackageFromJSON,
    DigitalPackageToJSON,
    DigitalWalletFromJSON,
    DigitalWalletToJSON,
    ExtendedPropertyFromJSON,
    ExtendedPropertyToJSON,
    FulfillmentActionFromJSON,
    FulfillmentActionToJSON,
    FulfillmentInfoFromJSON,
    FulfillmentInfoToJSON,
    OrderFromJSON,
    OrderToJSON,
    OrderActionFromJSON,
    OrderActionToJSON,
    OrderAttributeFromJSON,
    OrderAttributeToJSON,
    OrderCollectionFromJSON,
    OrderCollectionToJSON,
    OrderItemFromJSON,
    OrderItemToJSON,
    OrderItemCollectionFromJSON,
    OrderItemCollectionToJSON,
    OrderNoteFromJSON,
    OrderNoteToJSON,
    OrderReturnableItemCollectionFromJSON,
    OrderReturnableItemCollectionToJSON,
    OrderValidationResultFromJSON,
    OrderValidationResultToJSON,
    PackageFromJSON,
    PackageToJSON,
    PaymentFromJSON,
    PaymentToJSON,
    PaymentActionFromJSON,
    PaymentActionToJSON,
    PaymentCollectionFromJSON,
    PaymentCollectionToJSON,
    PickupFromJSON,
    PickupToJSON,
    PricingTaxableOrderFromJSON,
    PricingTaxableOrderToJSON,
    RefundFromJSON,
    RefundToJSON,
    RefundReasonCollectionFromJSON,
    RefundReasonCollectionToJSON,
    RepriceShipmentObjectFromJSON,
    RepriceShipmentObjectToJSON,
    ShipmentFromJSON,
    ShipmentToJSON,
    ShipmentAdjustmentFromJSON,
    ShipmentAdjustmentToJSON,
    ShipmentItemAdjustmentFromJSON,
    ShipmentItemAdjustmentToJSON,
    ShippingRateFromJSON,
    ShippingRateToJSON,
    SplitShipmentsObjectFromJSON,
    SplitShipmentsObjectToJSON,
    SubscriptionInfoFromJSON,
    SubscriptionInfoToJSON,
} from '../models';

export interface OrderApiAddExtendedPropertiesRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    extendedProperty?: Array<ExtendedProperty>;
}

export interface OrderApiAddValidationResultRequest {
    orderId: string;
    orderValidationResult?: OrderValidationResult;
}

export interface OrderApiApplyAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    adjustment?: Adjustment;
}

export interface OrderApiApplyCouponRequest {
    orderId: string;
    couponCode: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiApplyHandlingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    adjustment?: Adjustment;
}

export interface OrderApiApplyShippingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    adjustment?: Adjustment;
}

export interface OrderApiAutoCapturePaymentsRequest {
    orderId: string;
    forceCapture?: boolean;
}

export interface OrderApiCancelOrderRequest {
    orderId: string;
    canceledReason?: CanceledReason;
}

export interface OrderApiChangeOrderPriceListRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    body?: string;
}

export interface OrderApiChangeOrderUserIdRequest {
    orderId: string;
}

export interface OrderApiCreateDigitalPackageRequest {
    orderId: string;
    digitalPackage?: DigitalPackage;
}

export interface OrderApiCreateOrderRequest {
    cartId?: string;
    quoteId?: string;
    order?: Order;
}

export interface OrderApiCreateOrderAttributesRequest {
    orderId: string;
    orderAttribute?: Array<OrderAttribute>;
}

export interface OrderApiCreateOrderItemRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    skipInventoryCheck?: boolean;
    orderItem?: OrderItem;
}

export interface OrderApiCreateOrderNoteRequest {
    orderId: string;
    orderNote?: OrderNote;
}

export interface OrderApiCreatePackageRequest {
    orderId: string;
    _package?: Package;
}

export interface OrderApiCreatePackageShipmentsRequest {
    orderId: string;
    requestBody?: Array<string>;
}

export interface OrderApiCreatePaymentActionRequest {
    orderId: string;
    paymentAction?: PaymentAction;
}

export interface OrderApiCreatePickupRequest {
    orderId: string;
    pickup?: Pickup;
}

export interface OrderApiCreateRefundRequest {
    orderId: string;
    refund?: Refund;
}

export interface OrderApiDeleteDigitalPackageRequest {
    orderId: string;
    digitalPackageId: string;
}

export interface OrderApiDeleteExtendedPropertiesRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    requestBody?: Array<string>;
}

export interface OrderApiDeleteExtendedPropertyRequest {
    orderId: string;
    key: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiDeleteOrderDraftRequest {
    orderId: string;
    version?: string;
}

export interface OrderApiDeleteOrderItemRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiDeleteOrderNoteRequest {
    orderId: string;
    noteId: string;
}

export interface OrderApiDeletePackageRequest {
    orderId: string;
    packageId: string;
}

export interface OrderApiDeletePickupRequest {
    orderId: string;
    pickupId: string;
}

export interface OrderApiDeleteShipmentRequest {
    orderId: string;
    shipmentId: string;
}

export interface OrderApiEvaluateOrderRollupStatusRequest {
    orderId: string;
}

export interface OrderApiGetAvailableActionsRequest {
    orderId: string;
}

export interface OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest {
    orderId: string;
    digitalPackageId: string;
}

export interface OrderApiGetAvailablePackageFulfillmentActionsRequest {
    orderId: string;
    packageId: string;
}

export interface OrderApiGetAvailablePaymentActionsRequest {
    orderId: string;
    paymentId: string;
}

export interface OrderApiGetAvailablePickupFulfillmentActionsRequest {
    orderId: string;
    pickupId: string;
}

export interface OrderApiGetAvailableShipmentMethodsRequest {
    orderId: string;
    draft?: boolean;
}

export interface OrderApiGetBillingInfoRequest {
    orderId: string;
    draft?: boolean;
}

export interface OrderApiGetDigitalPackageRequest {
    orderId: string;
    digitalPackageId: string;
}

export interface OrderApiGetExtendedPropertiesRequest {
    orderId: string;
    draft?: boolean;
}

export interface OrderApiGetFulfillmentInfoRequest {
    orderId: string;
    draft?: boolean;
}

export interface OrderApiGetOrderRequest {
    orderId: string;
    draft?: boolean;
    includeBin?: boolean;
    mode?: string;
}

export interface OrderApiGetOrderAttributesRequest {
    orderId: string;
}

export interface OrderApiGetOrderItemRequest {
    orderId: string;
    orderItemId: string;
    draft?: boolean;
}

export interface OrderApiGetOrderItemViaLineIdRequest {
    orderId: string;
    lineId: number;
    draft?: boolean;
}

export interface OrderApiGetOrderItemsRequest {
    orderId: string;
    draft?: boolean;
}

export interface OrderApiGetOrderNoteRequest {
    orderId: string;
    noteId: string;
}

export interface OrderApiGetOrderNotesRequest {
    orderId: string;
}

export interface OrderApiGetOrderReturnableItemsRequest {
    orderId: string;
}

export interface OrderApiGetOrdersRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
    includeBin?: boolean;
    responseGroups?: string;
    mode?: string;
}

export interface OrderApiGetPackageRequest {
    orderId: string;
    packageId: string;
}

export interface OrderApiGetPackageLabelRequest {
    orderId: string;
    packageId: string;
}

export interface OrderApiGetPaymentRequest {
    orderId: string;
    paymentId: string;
}

export interface OrderApiGetPaymentsRequest {
    orderId: string;
}

export interface OrderApiGetPickupRequest {
    orderId: string;
    pickupId: string;
}

export interface OrderApiGetReasonsRequest {
    category?: string;
}

export interface OrderApiGetShipmentRequest {
    orderId: string;
    shipmentId: string;
}

export interface OrderApiGetTaxableOrdersRequest {
    orderId: string;
}

export interface OrderApiGetValidationResultsRequest {
    orderId: string;
}

export interface OrderApiPerformFulfillmentActionRequest {
    orderId: string;
    fulfillmentAction?: FulfillmentAction;
}

export interface OrderApiPerformOrderActionRequest {
    orderId: string;
    orderAction?: OrderAction;
}

export interface OrderApiPerformPaymentActionRequest {
    orderId: string;
    paymentId: string;
    paymentAction?: PaymentAction;
}

export interface OrderApiPriceOrderRequest {
    refreshShipping?: boolean;
    order?: Order;
}

export interface OrderApiProcessDigitalWalletRequest {
    orderId: string;
    digitalWalletType: string;
    digitalWallet?: DigitalWallet;
}

export interface OrderApiRemoveAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveAlternateContactRequest {
    orderId: string;
}

export interface OrderApiRemoveCouponRequest {
    orderId: string;
    couponCode: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveCouponsRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveHandlingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRemoveShippingAdjustmentRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
}

export interface OrderApiRepriceShipmentRequest {
    shipmentNumber: number;
    orderId: string;
    repriceShipmentObject?: RepriceShipmentObject;
}

export interface OrderApiResendGatewayGiftCardEmailRequest {
    orderId: string;
    giftcardId: string;
}

export interface OrderApiResendOrderConfirmationEmailRequest {
    orderId: string;
    orderAction?: OrderAction;
}

export interface OrderApiResendPackageFulfillmentEmailRequest {
    orderId: string;
    fulfillmentAction?: FulfillmentAction;
}

export interface OrderApiResendRefundEmailRequest {
    orderId: string;
    refundId: string;
}

export interface OrderApiSetBillingInfoRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    billingInfo?: BillingInfo;
}

export interface OrderApiSetFulFillmentInfoRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    fulfillmentInfo?: FulfillmentInfo;
}

export interface OrderApiSmsOptOutRequest {
    siteId: string;
}

export interface OrderApiSplitShipmentsRequest {
    orderId: string;
    shipmentNumber: string;
    splitShipmentsObject?: SplitShipmentsObject;
}

export interface OrderApiUpdateDigitalPackageRequest {
    orderId: string;
    digitalPackageId: string;
    digitalPackage?: DigitalPackage;
}

export interface OrderApiUpdateExtendedPropertiesRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    upsert?: boolean;
    extendedProperty?: Array<ExtendedProperty>;
}

export interface OrderApiUpdateExtendedPropertyRequest {
    orderId: string;
    key: string;
    updateMode?: string;
    version?: string;
    upsert?: boolean;
    extendedProperty?: ExtendedProperty;
}

export interface OrderApiUpdateItemDeliveryDateRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
    body?: Date;
}

export interface OrderApiUpdateItemDutyRequest {
    orderId: string;
    orderItemId: string;
    dutyAmount: number;
    updateMode?: string;
    version?: string;
}

export interface OrderApiUpdateItemFulfillmentRequest {
    orderId: string;
    orderItemId: string;
    updateMode?: string;
    version?: string;
    orderItem?: OrderItem;
}

export interface OrderApiUpdateItemProductPriceRequest {
    orderId: string;
    orderItemId: string;
    price: number;
    updateMode?: string;
    version?: string;
}

export interface OrderApiUpdateItemQuantityRequest {
    orderId: string;
    orderItemId: string;
    quantity: number;
    updateMode?: string;
    version?: string;
}

export interface OrderApiUpdateOrderRequest {
    orderId: string;
    updateMode?: string;
    version?: string;
    order?: Order;
}

export interface OrderApiUpdateOrderAttributesRequest {
    orderId: string;
    removeMissing?: boolean;
    orderAttribute?: Array<OrderAttribute>;
}

export interface OrderApiUpdateOrderDiscountRequest {
    orderId: string;
    discountId: number;
    updateMode?: string;
    version?: string;
    appliedDiscount?: AppliedDiscount;
}

export interface OrderApiUpdateOrderItemDiscountRequest {
    orderId: string;
    orderItemId: string;
    discountId: number;
    updateMode?: string;
    version?: string;
    appliedDiscount?: AppliedDiscount;
}

export interface OrderApiUpdateOrderNoteRequest {
    orderId: string;
    noteId: string;
    orderNote?: OrderNote;
}

export interface OrderApiUpdatePackageRequest {
    orderId: string;
    packageId: string;
    _package?: Package;
}

export interface OrderApiUpdatePickupRequest {
    orderId: string;
    pickupId: string;
    pickup?: Pickup;
}

export interface OrderApiUpdateShipmentAdjustmentsRequest {
    orderId: string;
    shipmentNumber: number;
    shipmentAdjustment?: ShipmentAdjustment;
}

export interface OrderApiUpdateShipmentItemRequest {
    orderId: string;
    shipmentNumber: number;
    itemId: number;
    shipmentItemAdjustment?: ShipmentItemAdjustment;
}

export interface OrderApiUpdateSubscriptionInfoRequest {
    orderId: string;
    orderItemId: string;
    subscriptionInfo?: SubscriptionInfo;
}

export interface OrderApiUpsertAlternateContactRequest {
    orderId: string;
    alternateContact?: AlternateContact;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds extended properties.
     * Adds Extended Properties
     */


    async addExtendedPropertiesRaw(requestParameters: OrderApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling addExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty.map(ExtendedPropertyToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedPropertyFromJSON));
    }

    /**
     * Adds extended properties.
     * Adds Extended Properties
     */
    async addExtendedProperties(requestParameters: OrderApiAddExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.addExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a validation result from an external system to an order.
     * Add Validation Result
     */


    async addValidationResultRaw(requestParameters: OrderApiAddValidationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderValidationResult>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling addValidationResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/validationresults`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderValidationResultToJSON(requestParameters.orderValidationResult),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderValidationResultFromJSON(jsonValue));
    }

    /**
     * Adds a validation result from an external system to an order.
     * Add Validation Result
     */
    async addValidationResult(requestParameters: OrderApiAddValidationResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderValidationResult> {
        const response = await this.addValidationResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a pricing adjustment to the order.
     * Apply Adjustment
     */


    async applyAdjustmentRaw(requestParameters: OrderApiApplyAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentToJSON(requestParameters.adjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Apply a pricing adjustment to the order.
     * Apply Adjustment
     */
    async applyAdjustment(requestParameters: OrderApiApplyAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a coupon to the order.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: OrderApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/coupons/{couponCode}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Apply a coupon to the order.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: OrderApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a handling adjustment to the order.
     * Apply Handling Adjustment
     */


    async applyHandlingAdjustmentRaw(requestParameters: OrderApiApplyHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyHandlingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/handling`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentToJSON(requestParameters.adjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Apply a handling adjustment to the order.
     * Apply Handling Adjustment
     */
    async applyHandlingAdjustment(requestParameters: OrderApiApplyHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyHandlingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a shipping adjustment to the order specified by order Id.
     * Apply Shipping Adjustment
     */


    async applyShippingAdjustmentRaw(requestParameters: OrderApiApplyShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling applyShippingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/shipping`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentToJSON(requestParameters.adjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Apply a shipping adjustment to the order specified by order Id.
     * Apply Shipping Adjustment
     */
    async applyShippingAdjustment(requestParameters: OrderApiApplyShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.applyShippingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * Auto Capture Payments
     */


    async autoCapturePaymentsRaw(requestParameters: OrderApiAutoCapturePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling autoCapturePayments.');
        }

        const queryParameters: any = {};

        if (requestParameters.forceCapture !== undefined) {
            queryParameters['forceCapture'] = requestParameters.forceCapture;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/autocapture`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Amount to capture is total of fulfilled shipments - order adjustment - amount already captured.
     * Auto Capture Payments
     */
    async autoCapturePayments(requestParameters: OrderApiAutoCapturePaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.autoCapturePaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel an order with the cancel reason.
     * Cancel Order
     */


    async cancelOrderRaw(requestParameters: OrderApiCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling cancelOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/cancel/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CanceledReasonToJSON(requestParameters.canceledReason),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Cancel an order with the cancel reason.
     * Cancel Order
     */
    async cancelOrder(requestParameters: OrderApiCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.cancelOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * Change Order Price List
     */


    async changeOrderPriceListRaw(requestParameters: OrderApiChangeOrderPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling changeOrderPriceList.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/priceList`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Changes the pricelist associated with an order.The desired price list code should be specified on the ApiContext.
     * Change Order Price List
     */
    async changeOrderPriceList(requestParameters: OrderApiChangeOrderPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.changeOrderPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the User ID associated with an order.
     * Change Order UserId
     */


    async changeOrderUserIdRaw(requestParameters: OrderApiChangeOrderUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling changeOrderUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/users`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Changes the User ID associated with an order.
     * Change Order UserId
     */
    async changeOrderUserId(requestParameters: OrderApiChangeOrderUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.changeOrderUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a digital package to the order.
     * Create Digital Package
     */


    async createDigitalPackageRaw(requestParameters: OrderApiCreateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createDigitalPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalPackageToJSON(requestParameters.digitalPackage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalPackageFromJSON(jsonValue));
    }

    /**
     * Apply a digital package to the order.
     * Create Digital Package
     */
    async createDigitalPackage(requestParameters: OrderApiCreateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage> {
        const response = await this.createDigitalPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * Create Order
     */


    async createOrderRaw(requestParameters: OrderApiCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        if (requestParameters.cartId !== undefined) {
            queryParameters['cartId'] = requestParameters.cartId;
        }

        if (requestParameters.quoteId !== undefined) {
            queryParameters['quoteId'] = requestParameters.quoteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Creates a new order for no-cart quick-ordering scenarios. The full API payload required integration with the ecommerce front-end.
     * Create Order
     */
    async createOrder(requestParameters: OrderApiCreateOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * Create Order Attributes
     */


    async createOrderAttributesRaw(requestParameters: OrderApiCreateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderAttribute>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderAttributes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/attributes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderAttribute.map(OrderAttributeToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderAttributeFromJSON));
    }

    /**
     * Adds a attributeSet to the order. This is an internal attributeSet that the merchant might want to add to an order.
     * Create Order Attributes
     */
    async createOrderAttributes(requestParameters: OrderApiCreateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderAttribute>> {
        const response = await this.createOrderAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Create Order Item
     */


    async createOrderItemRaw(requestParameters: OrderApiCreateOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.skipInventoryCheck !== undefined) {
            queryParameters['skipInventoryCheck'] = requestParameters.skipInventoryCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters.orderItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Adds a product or other item to the cart of the current shopper.
     * Create Order Item
     */
    async createOrderItem(requestParameters: OrderApiCreateOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * Create Order Note
     */


    async createOrderNoteRaw(requestParameters: OrderApiCreateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderNoteToJSON(requestParameters.orderNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderNoteFromJSON(jsonValue));
    }

    /**
     * Adds a note to the order. This is an internal note that the merchant might want to add to an order.
     * Create Order Note
     */
    async createOrderNote(requestParameters: OrderApiCreateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.createOrderNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Apply a package to the order
     */


    async createPackageRaw(requestParameters: OrderApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageToJSON(requestParameters._package),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * 
     * Apply a package to the order
     */
    async createPackage(requestParameters: OrderApiCreatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.createPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */


    async createPackageShipmentsRaw(requestParameters: OrderApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Package>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPackageShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PackageFromJSON));
    }

    /**
     * 
     * Creates a shipment by grouping together multiple packages into logical shipments
     */
    async createPackageShipments(requestParameters: OrderApiCreatePackageShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Package>> {
        const response = await this.createPackageShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */


    async createPaymentActionRaw(requestParameters: OrderApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPaymentAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentActionToJSON(requestParameters.paymentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */
    async createPaymentAction(requestParameters: OrderApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.createPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a pickup to the order.
     * Create Pickup
     */


    async createPickupRaw(requestParameters: OrderApiCreatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPickup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupToJSON(requestParameters.pickup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Apply a pickup to the order.
     * Create Pickup
     */
    async createPickup(requestParameters: OrderApiCreatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.createPickupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a refund to the order.
     * Create Refund
     */


    async createRefundRaw(requestParameters: OrderApiCreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Refund>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/refunds`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundToJSON(requestParameters.refund),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundFromJSON(jsonValue));
    }

    /**
     * Apply a refund to the order.
     * Create Refund
     */
    async createRefund(requestParameters: OrderApiCreateRefundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Refund> {
        const response = await this.createRefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an order digital package.
     * Delete Digital Package
     */


    async deleteDigitalPackageRaw(requestParameters: OrderApiDeleteDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteDigitalPackage.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling deleteDigitalPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an order digital package.
     * Delete Digital Package
     */
    async deleteDigitalPackage(requestParameters: OrderApiDeleteDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDigitalPackageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete extended properties on the order.
     * Delete Extended Properties
     */


    async deleteExtendedPropertiesRaw(requestParameters: OrderApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete extended properties on the order.
     * Delete Extended Properties
     */
    async deleteExtendedProperties(requestParameters: OrderApiDeleteExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtendedPropertiesRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Extended Property
     */


    async deleteExtendedPropertyRaw(requestParameters: OrderApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteExtendedProperty.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteExtendedProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties/{key}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Extended Property
     */
    async deleteExtendedProperty(requestParameters: OrderApiDeleteExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtendedPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a draft version of an order.
     * Delete Order Draft
     */


    async deleteOrderDraftRaw(requestParameters: OrderApiDeleteOrderDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderDraft.');
        }

        const queryParameters: any = {};

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/draft`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a draft version of an order.
     * Delete Order Draft
     */
    async deleteOrderDraft(requestParameters: OrderApiDeleteOrderDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderDraftRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Order Item
     */


    async deleteOrderItemRaw(requestParameters: OrderApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderItem.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling deleteOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Removes a particular order item from the order of the current shopper.
     * Delete Order Item
     */
    async deleteOrderItem(requestParameters: OrderApiDeleteOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.deleteOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific order note on an order.
     * Delete Order Note
     */


    async deleteOrderNoteRaw(requestParameters: OrderApiDeleteOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling deleteOrderNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes/{noteId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific order note on an order.
     * Delete Order Note
     */
    async deleteOrderNote(requestParameters: OrderApiDeleteOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderNoteRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete an order package
     */


    async deletePackageRaw(requestParameters: OrderApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deletePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling deletePackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete an order package
     */
    async deletePackage(requestParameters: OrderApiDeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an order pickup.
     * Delete Pickup
     */


    async deletePickupRaw(requestParameters: OrderApiDeletePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deletePickup.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling deletePickup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an order pickup.
     * Delete Pickup
     */
    async deletePickup(requestParameters: OrderApiDeletePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePickupRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     */


    async deleteShipmentRaw(requestParameters: OrderApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling deleteShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing order shipment
     * Deletes an existing order shipment
     */
    async deleteShipment(requestParameters: OrderApiDeleteShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     */


    async evaluateOrderRollupStatusRaw(requestParameters: OrderApiEvaluateOrderRollupStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling evaluateOrderRollupStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/evaluaterollupstatus`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Evaluate Order Rollup Status
     * Evaluate Order Rollup Status
     */
    async evaluateOrderRollupStatus(requestParameters: OrderApiEvaluateOrderRollupStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.evaluateOrderRollupStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * Get Available Actions
     */


    async getAvailableActionsRaw(requestParameters: OrderApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailableActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available order actions which depends on the status of the order.Possible actions can be Create, Submit, SetAsProcessing, Close or Cancel.
     * Get Available Actions
     */
    async getAvailableActions(requestParameters: OrderApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Digital Package Fulfillment Actions
     */


    async getAvailableDigitalPackageFulfillmentActionsRaw(requestParameters: OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailableDigitalPackageFulfillmentActions.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling getAvailableDigitalPackageFulfillmentActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Digital Package Fulfillment Actions
     */
    async getAvailableDigitalPackageFulfillmentActions(requestParameters: OrderApiGetAvailableDigitalPackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableDigitalPackageFulfillmentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Retrieves available fulfillment actions
     */


    async getAvailablePackageFulfillmentActionsRaw(requestParameters: OrderApiGetAvailablePackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailablePackageFulfillmentActions.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getAvailablePackageFulfillmentActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * Retrieves available fulfillment actions
     */
    async getAvailablePackageFulfillmentActions(requestParameters: OrderApiGetAvailablePackageFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailablePackageFulfillmentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available payment actions which depends on the status of the order\'s payment transaction.   Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"
     * Get Available Payment Actions
     */


    async getAvailablePaymentActionsRaw(requestParameters: OrderApiGetAvailablePaymentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailablePaymentActions.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling getAvailablePaymentActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/{paymentId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available payment actions which depends on the status of the order\'s payment transaction.   Possible actions can be \"Create,\" \"Capture,\" \"Void,\" \"AuthCapture,\" or \"ReceiveCheck.\"
     * Get Available Payment Actions
     */
    async getAvailablePaymentActions(requestParameters: OrderApiGetAvailablePaymentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailablePaymentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Pickup Fulfillment Actions
     */


    async getAvailablePickupFulfillmentActionsRaw(requestParameters: OrderApiGetAvailablePickupFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailablePickupFulfillmentActions.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling getAvailablePickupFulfillmentActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available fulfillment actions.
     * Get Available Pickup Fulfillment Actions
     */
    async getAvailablePickupFulfillmentActions(requestParameters: OrderApiGetAvailablePickupFulfillmentActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailablePickupFulfillmentActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipment Methods
     */


    async getAvailableShipmentMethodsRaw(requestParameters: OrderApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingRate>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAvailableShipmentMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/methods`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingRateFromJSON));
    }

    /**
     * Retrieves available shipping methods. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipment Methods
     */
    async getAvailableShipmentMethods(requestParameters: OrderApiGetAvailableShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingRate>> {
        const response = await this.getAvailableShipmentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the customer\'s billing address.If paying by credit card, it retrieves the card\'s number, expiration date, card holder\'s name and billing address.
     * Get Billing Info
     */


    async getBillingInfoRaw(requestParameters: OrderApiGetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getBillingInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/billinginfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingInfoFromJSON(jsonValue));
    }

    /**
     * Retrieves the customer\'s billing address.If paying by credit card, it retrieves the card\'s number, expiration date, card holder\'s name and billing address.
     * Get Billing Info
     */
    async getBillingInfo(requestParameters: OrderApiGetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInfo> {
        const response = await this.getBillingInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order digital package.
     * Get Digital Package
     */


    async getDigitalPackageRaw(requestParameters: OrderApiGetDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getDigitalPackage.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling getDigitalPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalPackageFromJSON(jsonValue));
    }

    /**
     * Get an order digital package.
     * Get Digital Package
     */
    async getDigitalPackage(requestParameters: OrderApiGetDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage> {
        const response = await this.getDigitalPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extended properties on an order.
     * Get Extended Properties
     */


    async getExtendedPropertiesRaw(requestParameters: OrderApiGetExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedPropertyFromJSON));
    }

    /**
     * Get extended properties on an order.
     * Get Extended Properties
     */
    async getExtendedProperties(requestParameters: OrderApiGetExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.getExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an order\'s fulfillment information specified by order ID.
     * Get Fulfillment Info
     */


    async getFulfillmentInfoRaw(requestParameters: OrderApiGetFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getFulfillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillmentinfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FulfillmentInfoFromJSON(jsonValue));
    }

    /**
     * Retrieves an order\'s fulfillment information specified by order ID.
     * Get Fulfillment Info
     */
    async getFulfillmentInfo(requestParameters: OrderApiGetFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo> {
        const response = await this.getFulfillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get Order
     */


    async getOrderRaw(requestParameters: OrderApiGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        if (requestParameters.includeBin !== undefined) {
            queryParameters['includeBin'] = requestParameters.includeBin;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of an order specified by the order ID.
     * Get Order
     */
    async getOrder(requestParameters: OrderApiGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all attribute sets for an order.
     * Get Order Attributes
     */


    async getOrderAttributesRaw(requestParameters: OrderApiGetOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderAttribute>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderAttributes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/attributes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderAttributeFromJSON));
    }

    /**
     * Retrieves a list of all attribute sets for an order.
     * Get Order Attributes
     */
    async getOrderAttributes(requestParameters: OrderApiGetOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderAttribute>> {
        const response = await this.getOrderAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single order item.
     * Get Order Item
     */


    async getOrderItemRaw(requestParameters: OrderApiGetOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderItem.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling getOrderItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a single order item.
     * Get Order Item
     */
    async getOrderItem(requestParameters: OrderApiGetOrderItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.getOrderItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single order item via its line id.
     * Get Order Item Via LineId
     */


    async getOrderItemViaLineIdRaw(requestParameters: OrderApiGetOrderItemViaLineIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderItemViaLineId.');
        }

        if (requestParameters.lineId === null || requestParameters.lineId === undefined) {
            throw new runtime.RequiredError('lineId','Required parameter requestParameters.lineId was null or undefined when calling getOrderItemViaLineId.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{lineId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"lineId"}}`, encodeURIComponent(String(requestParameters.lineId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a single order item via its line id.
     * Get Order Item Via LineId
     */
    async getOrderItemViaLineId(requestParameters: OrderApiGetOrderItemViaLineIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.getOrderItemViaLineIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of all items in an order specified by order Id.
     * Get Order Items
     */


    async getOrderItemsRaw(requestParameters: OrderApiGetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItemCollection>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of all items in an order specified by order Id.
     * Get Order Items
     */
    async getOrderItems(requestParameters: OrderApiGetOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItemCollection> {
        const response = await this.getOrderItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific order note from an order.
     * Get Order Note
     */


    async getOrderNoteRaw(requestParameters: OrderApiGetOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling getOrderNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes/{noteId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderNoteFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific order note from an order.
     * Get Order Note
     */
    async getOrderNote(requestParameters: OrderApiGetOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.getOrderNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of all notes for an order.
     * Get Order Notes
     */


    async getOrderNotesRaw(requestParameters: OrderApiGetOrderNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderNote>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderNoteFromJSON));
    }

    /**
     * Retrieves a list of all notes for an order.
     * Get Order Notes
     */
    async getOrderNotes(requestParameters: OrderApiGetOrderNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderNote>> {
        const response = await this.getOrderNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * Get Order Returnable Items
     */


    async getOrderReturnableItemsRaw(requestParameters: OrderApiGetOrderReturnableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderReturnableItemCollection>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderReturnableItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/returnableitems`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderReturnableItemCollectionFromJSON(jsonValue));
    }

    /**
     * Provides fulfillment information for order items such as quantity ordered, fulfilled, and returned. Indicates which items are eligible for return.
     * Get Order Returnable Items
     */
    async getOrderReturnableItems(requestParameters: OrderApiGetOrderReturnableItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderReturnableItemCollection> {
        const response = await this.getOrderReturnableItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * Get Orders
     */


    async getOrdersRaw(requestParameters: OrderApiGetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.includeBin !== undefined) {
            queryParameters['includeBin'] = requestParameters.includeBin;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of orders according to any specified filter criteria and sort options.
     * Get Orders
     */
    async getOrders(requestParameters: OrderApiGetOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderCollection> {
        const response = await this.getOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package
     * Get an order package
     */


    async getPackageRaw(requestParameters: OrderApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * Get an order package
     * Get an order package
     */
    async getPackage(requestParameters: OrderApiGetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an order package label
     * Get an order package label
     */


    async getPackageLabelRaw(requestParameters: OrderApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPackageLabel.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling getPackageLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}/label`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get an order package label
     * Get an order package label
     */
    async getPackageLabel(requestParameters: OrderApiGetPackageLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPackageLabelRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific payment transaction from the order.
     * Get Payment
     */


    async getPaymentRaw(requestParameters: OrderApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPayment.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling getPayment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/{paymentId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific payment transaction from the order.
     * Get Payment
     */
    async getPayment(requestParameters: OrderApiGetPaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.getPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * Get Payments
     */


    async getPaymentsRaw(requestParameters: OrderApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentCollection>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves payment transactions for an order. Allows filtering and sorting.
     * Get Payments
     */
    async getPayments(requestParameters: OrderApiGetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentCollection> {
        const response = await this.getPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a specified pickup on the order.
     * Get Pickup
     */


    async getPickupRaw(requestParameters: OrderApiGetPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getPickup.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling getPickup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Gets a specified pickup on the order.
     * Get Pickup
     */
    async getPickup(requestParameters: OrderApiGetPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.getPickupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets order cancellation reasons based on a category.
     * Get Order Cancel Reasons
     */


    async getReasonsRaw(requestParameters: OrderApiGetReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReasonCollection>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/cancel/reasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelReasonCollectionFromJSON(jsonValue));
    }

    /**
     * Gets order cancellation reasons based on a category.
     * Get Order Cancel Reasons
     */
    async getReasons(requestParameters: OrderApiGetReasonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReasonCollection> {
        const response = await this.getReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the refund reasons.
     * Get Refund Reasons
     */


    async getRefundReasonsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundReasonCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/refunds/refundreasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundReasonCollectionFromJSON(jsonValue));
    }

    /**
     * Gets all the refund reasons.
     * Get Refund Reasons
     */
    async getRefundReasons(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundReasonCollection> {
        const response = await this.getRefundReasonsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Allows a shipment to be retrieved for the order.
     * Get Shipment
     */


    async getShipmentRaw(requestParameters: OrderApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentId"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentFromJSON(jsonValue));
    }

    /**
     * Allows a shipment to be retrieved for the order.
     * Get Shipment
     */
    async getShipment(requestParameters: OrderApiGetShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shipment> {
        const response = await this.getShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * Get Taxable Orders
     */


    async getTaxableOrdersRaw(requestParameters: OrderApiGetTaxableOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PricingTaxableOrder>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getTaxableOrders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/taxableorders`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PricingTaxableOrderFromJSON));
    }

    /**
     * Gets an order divided up into \"TaxableOrders\" based on the source and delivery locations of the order items. Generally used for the purpose of splitting it into multiple taxable orders in order to fulfill the order in multiple locations.
     * Get Taxable Orders
     */
    async getTaxableOrders(requestParameters: OrderApiGetTaxableOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PricingTaxableOrder>> {
        const response = await this.getTaxableOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets list of validation results on an order.
     * Get Validation Results
     */


    async getValidationResultsRaw(requestParameters: OrderApiGetValidationResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderValidationResult>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getValidationResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/validationresults`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderValidationResultFromJSON));
    }

    /**
     * Gets list of validation results on an order.
     * Get Validation Results
     */
    async getValidationResults(requestParameters: OrderApiGetValidationResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderValidationResult>> {
        const response = await this.getValidationResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the fulfillment action to \'Ship\'. To ship an order, the order must have a customer name, the \'Open\' or \'OpenAdProcessing\' status, full shipping address, and shipping method.
     * Perform Fulfillment Action
     */


    async performFulfillmentActionRaw(requestParameters: OrderApiPerformFulfillmentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling performFulfillmentAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillment/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FulfillmentActionToJSON(requestParameters.fulfillmentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Sets the fulfillment action to \'Ship\'. To ship an order, the order must have a customer name, the \'Open\' or \'OpenAdProcessing\' status, full shipping address, and shipping method.
     * Perform Fulfillment Action
     */
    async performFulfillmentAction(requestParameters: OrderApiPerformFulfillmentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.performFulfillmentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * Perform Order Action
     */


    async performOrderActionRaw(requestParameters: OrderApiPerformOrderActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling performOrderAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderActionToJSON(requestParameters.orderAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Set an action on the order. Available actions depend on the current status of the order. If in doubt, get a list of available order actions first.
     * Perform Order Action
     */
    async performOrderAction(requestParameters: OrderApiPerformOrderActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.performOrderActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * Perform Payment Action
     */


    async performPaymentActionRaw(requestParameters: OrderApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling performPaymentAction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling performPaymentAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/payments/{paymentId}/actions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentActionToJSON(requestParameters.paymentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Performs a specific payment action. Available actions depend on the current status of the payment transaction.   If in doubt, get a list of available payment actions first.
     * Perform Payment Action
     */
    async performPaymentAction(requestParameters: OrderApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.performPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Price Order
     */


    async priceOrderRaw(requestParameters: OrderApiPriceOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        const queryParameters: any = {};

        if (requestParameters.refreshShipping !== undefined) {
            queryParameters['refreshShipping'] = requestParameters.refreshShipping;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/price`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * 
     * Price Order
     */
    async priceOrder(requestParameters: OrderApiPriceOrderRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.priceOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * Process Digital Wallet
     */


    async processDigitalWalletRaw(requestParameters: OrderApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling processDigitalWallet.');
        }

        if (requestParameters.digitalWalletType === null || requestParameters.digitalWalletType === undefined) {
            throw new runtime.RequiredError('digitalWalletType','Required parameter requestParameters.digitalWalletType was null or undefined when calling processDigitalWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalWalletType"}}`, encodeURIComponent(String(requestParameters.digitalWalletType))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalWalletToJSON(requestParameters.digitalWallet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Process digital wallet (used to hold 3rd party payment and shipping information) on the order.
     * Process Digital Wallet
     */
    async processDigitalWallet(requestParameters: OrderApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.processDigitalWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Adjustment
     */


    async removeAdjustmentRaw(requestParameters: OrderApiRemoveAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Adjustment
     */
    async removeAdjustment(requestParameters: OrderApiRemoveAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Endpoint to remove alternate conatact from order and shipments.
     */


    async removeAlternateContactRaw(requestParameters: OrderApiRemoveAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeAlternateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/removealternatecontact`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * 
     * Endpoint to remove alternate conatact from order and shipments.
     */
    async removeAlternateContact(requestParameters: OrderApiRemoveAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeAlternateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Coupon
     */


    async removeCouponRaw(requestParameters: OrderApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/coupons/{couponCode}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Coupon
     */
    async removeCoupon(requestParameters: OrderApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all coupons that had been previously applied to the order.
     * Remove Coupons
     */


    async removeCouponsRaw(requestParameters: OrderApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/coupons`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Removes all coupons that had been previously applied to the order.
     * Remove Coupons
     */
    async removeCoupons(requestParameters: OrderApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Handling Adjustment
     */


    async removeHandlingAdjustmentRaw(requestParameters: OrderApiRemoveHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeHandlingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/handling`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Removes a coupon that had been previously applied to the order.
     * Remove Handling Adjustment
     */
    async removeHandlingAdjustment(requestParameters: OrderApiRemoveHandlingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeHandlingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Shipping Adjustment
     */


    async removeShippingAdjustmentRaw(requestParameters: OrderApiRemoveShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeShippingAdjustment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/adjustment/shipping`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Removes an adjustment that had been previously applied to the order.
     * Remove Shipping Adjustment
     */
    async removeShippingAdjustment(requestParameters: OrderApiRemoveShippingAdjustmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.removeShippingAdjustmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a shipment to be repriced.
     * Reprice Shipment
     */


    async repriceShipmentRaw(requestParameters: OrderApiRepriceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shipment>> {
        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling repriceShipment.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling repriceShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/reprice`.replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepriceShipmentObjectToJSON(requestParameters.repriceShipmentObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentFromJSON(jsonValue));
    }

    /**
     * Allows a shipment to be repriced.
     * Reprice Shipment
     */
    async repriceShipment(requestParameters: OrderApiRepriceShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shipment> {
        const response = await this.repriceShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend gateway giftcard email.
     * Resend Gateway Gift Card Email
     */


    async resendGatewayGiftCardEmailRaw(requestParameters: OrderApiResendGatewayGiftCardEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendGatewayGiftCardEmail.');
        }

        if (requestParameters.giftcardId === null || requestParameters.giftcardId === undefined) {
            throw new runtime.RequiredError('giftcardId','Required parameter requestParameters.giftcardId was null or undefined when calling resendGatewayGiftCardEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/giftcard/{giftcardId}/resend`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"giftcardId"}}`, encodeURIComponent(String(requestParameters.giftcardId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend gateway giftcard email.
     * Resend Gateway Gift Card Email
     */
    async resendGatewayGiftCardEmail(requestParameters: OrderApiResendGatewayGiftCardEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendGatewayGiftCardEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Resend order confirmation email specified by the order Id.
     * Resend Order Confirmation Email
     */


    async resendOrderConfirmationEmailRaw(requestParameters: OrderApiResendOrderConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendOrderConfirmationEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/email/resend`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderActionToJSON(requestParameters.orderAction),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend order confirmation email specified by the order Id.
     * Resend Order Confirmation Email
     */
    async resendOrderConfirmationEmail(requestParameters: OrderApiResendOrderConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendOrderConfirmationEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Resends the package fulfillment email.
     * Resend Package Fulfillment Email
     */


    async resendPackageFulfillmentEmailRaw(requestParameters: OrderApiResendPackageFulfillmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendPackageFulfillmentEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillment/email/resend`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FulfillmentActionToJSON(requestParameters.fulfillmentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Resends the package fulfillment email.
     * Resend Package Fulfillment Email
     */
    async resendPackageFulfillmentEmail(requestParameters: OrderApiResendPackageFulfillmentEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.resendPackageFulfillmentEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resend refund email.
     * Resend Refund Email
     */


    async resendRefundEmailRaw(requestParameters: OrderApiResendRefundEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling resendRefundEmail.');
        }

        if (requestParameters.refundId === null || requestParameters.refundId === undefined) {
            throw new runtime.RequiredError('refundId','Required parameter requestParameters.refundId was null or undefined when calling resendRefundEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/refunds/{refundId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"refundId"}}`, encodeURIComponent(String(requestParameters.refundId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resend refund email.
     * Resend Refund Email
     */
    async resendRefundEmail(requestParameters: OrderApiResendRefundEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendRefundEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a payment source to the order.
     * Set Billing Info
     */


    async setBillingInfoRaw(requestParameters: OrderApiSetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BillingInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setBillingInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/billinginfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BillingInfoToJSON(requestParameters.billingInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BillingInfoFromJSON(jsonValue));
    }

    /**
     * Adds a payment source to the order.
     * Set Billing Info
     */
    async setBillingInfo(requestParameters: OrderApiSetBillingInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BillingInfo> {
        const response = await this.setBillingInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an order\'s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant\'s fulfillment cost.
     * Set Fulfillment Info
     */


    async setFulFillmentInfoRaw(requestParameters: OrderApiSetFulFillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setFulFillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/fulfillmentinfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FulfillmentInfoToJSON(requestParameters.fulfillmentInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FulfillmentInfoFromJSON(jsonValue));
    }

    /**
     * Modifies an order\'s fulfillment information. For example, to update the fulfillment address, estimated delivery date, or the merchant\'s fulfillment cost.
     * Set Fulfillment Info
     */
    async setFulFillmentInfo(requestParameters: OrderApiSetFulFillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentInfo> {
        const response = await this.setFulFillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Opting out from the sms notifications.
     * Sms Opt Out
     */


    async smsOptOutRaw(requestParameters: OrderApiSmsOptOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling smsOptOut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/sms/optout/{siteId}`.replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Opting out from the sms notifications.
     * Sms Opt Out
     */
    async smsOptOut(requestParameters: OrderApiSmsOptOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.smsOptOutRaw(requestParameters, initOverrides);
    }

    /**
     * Allows spliting an existing shipment.
     * Split Shipments
     */


    async splitShipmentsRaw(requestParameters: OrderApiSplitShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Shipment>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling splitShipments.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling splitShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/split`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SplitShipmentsObjectToJSON(requestParameters.splitShipmentsObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShipmentFromJSON));
    }

    /**
     * Allows spliting an existing shipment.
     * Split Shipments
     */
    async splitShipments(requestParameters: OrderApiSplitShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Shipment>> {
        const response = await this.splitShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a digital package on the order.
     * Update Digital Package
     */


    async updateDigitalPackageRaw(requestParameters: OrderApiUpdateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalPackage>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateDigitalPackage.');
        }

        if (requestParameters.digitalPackageId === null || requestParameters.digitalPackageId === undefined) {
            throw new runtime.RequiredError('digitalPackageId','Required parameter requestParameters.digitalPackageId was null or undefined when calling updateDigitalPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/digitalpackages/{digitalPackageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"digitalPackageId"}}`, encodeURIComponent(String(requestParameters.digitalPackageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalPackageToJSON(requestParameters.digitalPackage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalPackageFromJSON(jsonValue));
    }

    /**
     * Updates a digital package on the order.
     * Update Digital Package
     */
    async updateDigitalPackage(requestParameters: OrderApiUpdateDigitalPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalPackage> {
        const response = await this.updateDigitalPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update extended properties.
     * Updated extended properties
     */


    async updateExtendedPropertiesRaw(requestParameters: OrderApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtendedProperty>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateExtendedProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.upsert !== undefined) {
            queryParameters['upsert'] = requestParameters.upsert;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extendedProperty.map(ExtendedPropertyToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExtendedPropertyFromJSON));
    }

    /**
     * Update extended properties.
     * Updated extended properties
     */
    async updateExtendedProperties(requestParameters: OrderApiUpdateExtendedPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtendedProperty>> {
        const response = await this.updateExtendedPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updated specific extended property
     * Update Extended Property
     */


    async updateExtendedPropertyRaw(requestParameters: OrderApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendedProperty>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateExtendedProperty.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateExtendedProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        if (requestParameters.upsert !== undefined) {
            queryParameters['upsert'] = requestParameters.upsert;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/extendedproperties/{key}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtendedPropertyToJSON(requestParameters.extendedProperty),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendedPropertyFromJSON(jsonValue));
    }

    /**
     * Updated specific extended property
     * Update Extended Property
     */
    async updateExtendedProperty(requestParameters: OrderApiUpdateExtendedPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendedProperty> {
        const response = await this.updateExtendedPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     */


    async updateItemDeliveryDateRaw(requestParameters: OrderApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemDeliveryDate.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemDeliveryDate.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/deliverydate`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates the Delivery Date of a particular Order Item
     * Updates the Delivery Date of a particular Order Item
     */
    async updateItemDeliveryDate(requestParameters: OrderApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemDeliveryDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the duty amount of an order item in the order.
     * Update Item Duty
     */


    async updateItemDutyRaw(requestParameters: OrderApiUpdateItemDutyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemDuty.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemDuty.');
        }

        if (requestParameters.dutyAmount === null || requestParameters.dutyAmount === undefined) {
            throw new runtime.RequiredError('dutyAmount','Required parameter requestParameters.dutyAmount was null or undefined when calling updateItemDuty.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/dutyAmount/{dutyAmount}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"dutyAmount"}}`, encodeURIComponent(String(requestParameters.dutyAmount))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates the duty amount of an order item in the order.
     * Update Item Duty
     */
    async updateItemDuty(requestParameters: OrderApiUpdateItemDutyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemDutyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * Update Item Fulfillment
     */


    async updateItemFulfillmentRaw(requestParameters: OrderApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemFulfillment.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemFulfillment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/fulfillment`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters.orderItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates the fullfillment method and/or location of an individual order item in the order of the current shopper.
     * Update Item Fulfillment
     */
    async updateItemFulfillment(requestParameters: OrderApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the price of an individual order item in the order.
     * Update Item Product Price
     */


    async updateItemProductPriceRaw(requestParameters: OrderApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemProductPrice.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemProductPrice.');
        }

        if (requestParameters.price === null || requestParameters.price === undefined) {
            throw new runtime.RequiredError('price','Required parameter requestParameters.price was null or undefined when calling updateItemProductPrice.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/price/{price}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"price"}}`, encodeURIComponent(String(requestParameters.price))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates the price of an individual order item in the order.
     * Update Item Product Price
     */
    async updateItemProductPrice(requestParameters: OrderApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemProductPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the quantity of an individual order item in the order.
     * Update Item Quantity
     */


    async updateItemQuantityRaw(requestParameters: OrderApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/quantity/{quantity}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates the quantity of an individual order item in the order.
     * Update Item Quantity
     */
    async updateItemQuantity(requestParameters: OrderApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the billing and/or shipping information of an existing order.
     * Update Order
     */


    async updateOrderRaw(requestParameters: OrderApiUpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderToJSON(requestParameters.order),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Updates the billing and/or shipping information of an existing order.
     * Update Order
     */
    async updateOrder(requestParameters: OrderApiUpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific order attribute set of an order.
     * Update Order Attributes
     */


    async updateOrderAttributesRaw(requestParameters: OrderApiUpdateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderAttribute>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.removeMissing !== undefined) {
            queryParameters['removeMissing'] = requestParameters.removeMissing;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/attributes`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderAttribute.map(OrderAttributeToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderAttributeFromJSON));
    }

    /**
     * Updates a specific order attribute set of an order.
     * Update Order Attributes
     */
    async updateOrderAttributes(requestParameters: OrderApiUpdateOrderAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderAttribute>> {
        const response = await this.updateOrderAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing discount on the order.
     * Update Order Discount
     */


    async updateOrderDiscountRaw(requestParameters: OrderApiUpdateOrderDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderDiscount.');
        }

        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateOrderDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/discounts/{discountId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppliedDiscountToJSON(requestParameters.appliedDiscount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Update existing discount on the order.
     * Update Order Discount
     */
    async updateOrderDiscount(requestParameters: OrderApiUpdateOrderDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a discount on the order item to ignore or unignore it.
     * Update Order Item Discount
     */


    async updateOrderItemDiscountRaw(requestParameters: OrderApiUpdateOrderItemDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderItemDiscount.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateOrderItemDiscount.');
        }

        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateOrderItemDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        if (requestParameters.version !== undefined) {
            queryParameters['version'] = requestParameters.version;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/discounts/{discountId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))).replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppliedDiscountToJSON(requestParameters.appliedDiscount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Update a discount on the order item to ignore or unignore it.
     * Update Order Item Discount
     */
    async updateOrderItemDiscount(requestParameters: OrderApiUpdateOrderItemDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateOrderItemDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a specific order note for an order.
     * Update Order Note
     */


    async updateOrderNoteRaw(requestParameters: OrderApiUpdateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderNote>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderNote.');
        }

        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling updateOrderNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/notes/{noteId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderNoteToJSON(requestParameters.orderNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderNoteFromJSON(jsonValue));
    }

    /**
     * Updates a specific order note for an order.
     * Update Order Note
     */
    async updateOrderNote(requestParameters: OrderApiUpdateOrderNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderNote> {
        const response = await this.updateOrderNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete an order package
     */


    async updatePackageRaw(requestParameters: OrderApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Package>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updatePackage.');
        }

        if (requestParameters.packageId === null || requestParameters.packageId === undefined) {
            throw new runtime.RequiredError('packageId','Required parameter requestParameters.packageId was null or undefined when calling updatePackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/packages/{packageId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"packageId"}}`, encodeURIComponent(String(requestParameters.packageId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageToJSON(requestParameters._package),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFromJSON(jsonValue));
    }

    /**
     * 
     * Delete an order package
     */
    async updatePackage(requestParameters: OrderApiUpdatePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Package> {
        const response = await this.updatePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates pickup details on the order.
     * Update Pickup
     */


    async updatePickupRaw(requestParameters: OrderApiUpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updatePickup.');
        }

        if (requestParameters.pickupId === null || requestParameters.pickupId === undefined) {
            throw new runtime.RequiredError('pickupId','Required parameter requestParameters.pickupId was null or undefined when calling updatePickup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/pickups/{pickupId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"pickupId"}}`, encodeURIComponent(String(requestParameters.pickupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PickupToJSON(requestParameters.pickup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Updates pickup details on the order.
     * Update Pickup
     */
    async updatePickup(requestParameters: OrderApiUpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.updatePickupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates adjustments on shipments.
     * Update Shipment Adjustments
     */


    async updateShipmentAdjustmentsRaw(requestParameters: OrderApiUpdateShipmentAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateShipmentAdjustments.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateShipmentAdjustments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/adjustments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShipmentAdjustmentToJSON(requestParameters.shipmentAdjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentFromJSON(jsonValue));
    }

    /**
     * Updates adjustments on shipments.
     * Update Shipment Adjustments
     */
    async updateShipmentAdjustments(requestParameters: OrderApiUpdateShipmentAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shipment> {
        const response = await this.updateShipmentAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates shipment item with new shipment adjustment.
     * Update Shipment Item
     */


    async updateShipmentItemRaw(requestParameters: OrderApiUpdateShipmentItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Shipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateShipmentItem.');
        }

        if (requestParameters.shipmentNumber === null || requestParameters.shipmentNumber === undefined) {
            throw new runtime.RequiredError('shipmentNumber','Required parameter requestParameters.shipmentNumber was null or undefined when calling updateShipmentItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateShipmentItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/shipments/{shipmentNumber}/item/{itemId}/adjustments`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipmentNumber"}}`, encodeURIComponent(String(requestParameters.shipmentNumber))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShipmentItemAdjustmentToJSON(requestParameters.shipmentItemAdjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShipmentFromJSON(jsonValue));
    }

    /**
     * Updates shipment item with new shipment adjustment.
     * Update Shipment Item
     */
    async updateShipmentItem(requestParameters: OrderApiUpdateShipmentItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Shipment> {
        const response = await this.updateShipmentItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a subscription info on the order item.
     * Update Order Item Subscription Info, applies only to Draft Order
     */


    async updateSubscriptionInfoRaw(requestParameters: OrderApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateSubscriptionInfo.');
        }

        if (requestParameters.orderItemId === null || requestParameters.orderItemId === undefined) {
            throw new runtime.RequiredError('orderItemId','Required parameter requestParameters.orderItemId was null or undefined when calling updateSubscriptionInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/items/{orderItemId}/subscriptionInfo`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"orderItemId"}}`, encodeURIComponent(String(requestParameters.orderItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionInfoToJSON(requestParameters.subscriptionInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * Update a subscription info on the order item.
     * Update Order Item Subscription Info, applies only to Draft Order
     */
    async updateSubscriptionInfo(requestParameters: OrderApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.updateSubscriptionInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Endpoint to add/update alternate contact
     */


    async upsertAlternateContactRaw(requestParameters: OrderApiUpsertAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Order>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling upsertAlternateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/orders/{orderId}/upsertalternatecontact`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlternateContactToJSON(requestParameters.alternateContact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFromJSON(jsonValue));
    }

    /**
     * 
     * Endpoint to add/update alternate contact
     */
    async upsertAlternateContact(requestParameters: OrderApiUpsertAlternateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Order> {
        const response = await this.upsertAlternateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
