/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Checkout,
  CheckoutAction,
  CheckoutCollection,
  CheckoutGroupRates,
  CheckoutGroupShippingMethod,
  Destination,
  DigitalWallet,
  InventoryTags,
  ItemsAndDeliveryDates,
  ItemsForDestination,
  OrderAttribute,
  OrderItem,
  PaymentAction,
  SubscriptionInfo,
} from '../models';
import {
    CheckoutFromJSON,
    CheckoutToJSON,
    CheckoutActionFromJSON,
    CheckoutActionToJSON,
    CheckoutCollectionFromJSON,
    CheckoutCollectionToJSON,
    CheckoutGroupRatesFromJSON,
    CheckoutGroupRatesToJSON,
    CheckoutGroupShippingMethodFromJSON,
    CheckoutGroupShippingMethodToJSON,
    DestinationFromJSON,
    DestinationToJSON,
    DigitalWalletFromJSON,
    DigitalWalletToJSON,
    InventoryTagsFromJSON,
    InventoryTagsToJSON,
    ItemsAndDeliveryDatesFromJSON,
    ItemsAndDeliveryDatesToJSON,
    ItemsForDestinationFromJSON,
    ItemsForDestinationToJSON,
    OrderAttributeFromJSON,
    OrderAttributeToJSON,
    OrderItemFromJSON,
    OrderItemToJSON,
    PaymentActionFromJSON,
    PaymentActionToJSON,
    SubscriptionInfoFromJSON,
    SubscriptionInfoToJSON,
} from '../models';

export interface CheckoutApiAddCheckoutItemRequest {
    checkoutId: string;
    orderItem?: OrderItem;
}

export interface CheckoutApiAddDestinationRequest {
    checkoutId: string;
    destination?: Destination;
}

export interface CheckoutApiApplyCouponRequest {
    checkoutId: string;
    couponCode: string;
}

export interface CheckoutApiBulkUpdateDeliveryDatesRequest {
    checkoutId: string;
    itemsAndDeliveryDates?: Array<ItemsAndDeliveryDates>;
}

export interface CheckoutApiBulkUpdateItemDestinationsRequest {
    checkoutId: string;
    itemsForDestination?: Array<ItemsForDestination>;
}

export interface CheckoutApiChangeCheckoutPriceListRequest {
    checkoutId: string;
    body?: string;
}

export interface CheckoutApiCreateCheckoutAttributesRequest {
    checkoutId: string;
    orderAttribute?: Array<OrderAttribute>;
}

export interface CheckoutApiCreateCheckoutFromCartRequest {
    cartId?: string;
}

export interface CheckoutApiCreatePaymentActionRequest {
    checkoutId: string;
    paymentAction?: PaymentAction;
}

export interface CheckoutApiDeleteCheckoutItemRequest {
    checkoutId: string;
    itemId: string;
}

export interface CheckoutApiGetAvailableActionsRequest {
    checkoutId: string;
}

export interface CheckoutApiGetAvailableShippingMethodsRequest {
    checkoutId: string;
}

export interface CheckoutApiGetCheckoutRequest {
    checkoutId: string;
}

export interface CheckoutApiGetCheckoutAttributesRequest {
    checkoutId: string;
}

export interface CheckoutApiGetCheckoutsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
}

export interface CheckoutApiGetDestinationRequest {
    checkoutId: string;
    destinationId: string;
}

export interface CheckoutApiGetDestinationsRequest {
    checkoutId: string;
}

export interface CheckoutApiPerformCheckoutActionRequest {
    checkoutId: string;
    checkoutAction?: CheckoutAction;
}

export interface CheckoutApiPerformPaymentActionRequest {
    checkoutId: string;
    paymentId: string;
    paymentAction?: PaymentAction;
}

export interface CheckoutApiProcessDigitalWalletRequest {
    checkoutId: string;
    digitalWalletType: string;
    digitalWallet?: DigitalWallet;
}

export interface CheckoutApiRemoveCouponRequest {
    checkoutId: string;
    couponCode: string;
}

export interface CheckoutApiRemoveCouponsRequest {
    checkoutId: string;
}

export interface CheckoutApiRemoveDestinationRequest {
    checkoutId: string;
    destinationId: string;
}

export interface CheckoutApiResendCheckoutConfirmationEmailRequest {
    checkoutId: string;
}

export interface CheckoutApiSetShippingMethodsRequest {
    checkoutId: string;
    checkoutGroupShippingMethod?: Array<CheckoutGroupShippingMethod>;
}

export interface CheckoutApiSplitItemRequest {
    checkoutId: string;
    itemId: string;
    quantity?: number;
}

export interface CheckoutApiUpdateCheckoutRequest {
    checkoutId: string;
    checkout?: Checkout;
}

export interface CheckoutApiUpdateCheckoutAttributeRequest {
    checkoutId: string;
    removeMissing?: boolean;
    orderAttribute?: Array<OrderAttribute>;
}

export interface CheckoutApiUpdateDestinationRequest {
    checkoutId: string;
    destinationId: string;
    destination?: Destination;
}

export interface CheckoutApiUpdateItemDeliveryDateRequest {
    checkoutId: string;
    itemId: string;
    body?: Date;
}

export interface CheckoutApiUpdateItemDestinationRequest {
    checkoutId: string;
    itemId: string;
    destinationId: string;
}

export interface CheckoutApiUpdateSubscriptionInfoRequest {
    checkoutId: string;
    itemId: string;
    subscriptionInfo?: SubscriptionInfo;
}

export interface CheckoutApiUpsertInventoryTagsRequest {
    checkoutId: string;
    itemId: string;
    inventoryTags?: Array<InventoryTags>;
}

/**
 * 
 */
export class CheckoutApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a product or other item to the checkout of the current shopper.
     * Add Checkout Item
     */


    async addCheckoutItemRaw(requestParameters: CheckoutApiAddCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling addCheckoutItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters.orderItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Adds a product or other item to the checkout of the current shopper.
     * Add Checkout Item
     */
    async addCheckoutItem(requestParameters: CheckoutApiAddCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.addCheckoutItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a specific destination to the checkout.
     * Add Destination
     */


    async addDestinationRaw(requestParameters: CheckoutApiAddDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling addDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationToJSON(requestParameters.destination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Adds a specific destination to the checkout.
     * Add Destination
     */
    async addDestination(requestParameters: CheckoutApiAddDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.addDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a coupon to the Checkout.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: CheckoutApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/coupons/{couponCode}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Apply a coupon to the Checkout.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: CheckoutApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Delivery Dates of Items in bulk
     * Update Delivery Dates of Items in bulk
     */


    async bulkUpdateDeliveryDatesRaw(requestParameters: CheckoutApiBulkUpdateDeliveryDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling bulkUpdateDeliveryDates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/deliverydates`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.itemsAndDeliveryDates.map(ItemsAndDeliveryDatesToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Update Delivery Dates of Items in bulk
     * Update Delivery Dates of Items in bulk
     */
    async bulkUpdateDeliveryDates(requestParameters: CheckoutApiBulkUpdateDeliveryDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.bulkUpdateDeliveryDatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associate items to destinations in bulk.
     * Bulk Update Item Destinations
     */


    async bulkUpdateItemDestinationsRaw(requestParameters: CheckoutApiBulkUpdateItemDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling bulkUpdateItemDestinations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/destinations`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.itemsForDestination.map(ItemsForDestinationToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Associate items to destinations in bulk.
     * Bulk Update Item Destinations
     */
    async bulkUpdateItemDestinations(requestParameters: CheckoutApiBulkUpdateItemDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.bulkUpdateItemDestinationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * Change Checkout PriceList
     */


    async changeCheckoutPriceListRaw(requestParameters: CheckoutApiChangeCheckoutPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling changeCheckoutPriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/priceList`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * Change Checkout PriceList
     */
    async changeCheckoutPriceList(requestParameters: CheckoutApiChangeCheckoutPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.changeCheckoutPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates list of checkout attributes specified by checkout Id.
     * Create Checkout Attributes
     */


    async createCheckoutAttributesRaw(requestParameters: CheckoutApiCreateCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderAttribute>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling createCheckoutAttributes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/attributes`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderAttribute.map(OrderAttributeToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderAttributeFromJSON));
    }

    /**
     * Creates list of checkout attributes specified by checkout Id.
     * Create Checkout Attributes
     */
    async createCheckoutAttributes(requestParameters: CheckoutApiCreateCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderAttribute>> {
        const response = await this.createCheckoutAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * Create Checkout From Cart
     */


    async createCheckoutFromCartRaw(requestParameters: CheckoutApiCreateCheckoutFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        const queryParameters: any = {};

        if (requestParameters.cartId !== undefined) {
            queryParameters['cartId'] = requestParameters.cartId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * Create Checkout From Cart
     */
    async createCheckoutFromCart(requestParameters: CheckoutApiCreateCheckoutFromCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.createCheckoutFromCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */


    async createPaymentActionRaw(requestParameters: CheckoutApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling createPaymentAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/payments/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentActionToJSON(requestParameters.paymentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */
    async createPaymentAction(requestParameters: CheckoutApiCreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.createPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a particular item from the checkout of the current shopper.
     * Delete Checkout Item
     */


    async deleteCheckoutItemRaw(requestParameters: CheckoutApiDeleteCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling deleteCheckoutItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteCheckoutItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Removes a particular item from the checkout of the current shopper.
     * Delete Checkout Item
     */
    async deleteCheckoutItem(requestParameters: CheckoutApiDeleteCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.deleteCheckoutItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available actions which depends on the status of the checkout.
     * Get Available Actions
     */


    async getAvailableActionsRaw(requestParameters: CheckoutApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getAvailableActions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available actions which depends on the status of the checkout.
     * Get Available Actions
     */
    async getAvailableActions(requestParameters: CheckoutApiGetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipping Methods
     */


    async getAvailableShippingMethodsRaw(requestParameters: CheckoutApiGetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CheckoutGroupRates>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getAvailableShippingMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/shippingMethods`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CheckoutGroupRatesFromJSON));
    }

    /**
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipping Methods
     */
    async getAvailableShippingMethods(requestParameters: CheckoutApiGetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CheckoutGroupRates>> {
        const response = await this.getAvailableShippingMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a checkout specified by the checkout ID.
     * Get Checkout
     */


    async getCheckoutRaw(requestParameters: CheckoutApiGetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a checkout specified by the checkout ID.
     * Get Checkout
     */
    async getCheckout(requestParameters: CheckoutApiGetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.getCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of attributes specified by checkout Id.
     * Get Checkout Attributes
     */


    async getCheckoutAttributesRaw(requestParameters: CheckoutApiGetCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderAttribute>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getCheckoutAttributes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/attributes`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderAttributeFromJSON));
    }

    /**
     * Gets the list of attributes specified by checkout Id.
     * Get Checkout Attributes
     */
    async getCheckoutAttributes(requestParameters: CheckoutApiGetCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderAttribute>> {
        const response = await this.getCheckoutAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * Get Checkouts
     */


    async getCheckoutsRaw(requestParameters: CheckoutApiGetCheckoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * Get Checkouts
     */
    async getCheckouts(requestParameters: CheckoutApiGetCheckoutsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutCollection> {
        const response = await this.getCheckoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a destination specified by the checkout Id and destination Id.
     * Get Destination
     */


    async getDestinationRaw(requestParameters: CheckoutApiGetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling getDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Gets a destination specified by the checkout Id and destination Id.
     * Get Destination
     */
    async getDestination(requestParameters: CheckoutApiGetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.getDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the destinations specified by the checkout Id.
     * Get Destinations
     */


    async getDestinationsRaw(requestParameters: CheckoutApiGetDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Destination>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getDestinations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DestinationFromJSON));
    }

    /**
     * Gets all the destinations specified by the checkout Id.
     * Get Destinations
     */
    async getDestinations(requestParameters: CheckoutApiGetDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Destination>> {
        const response = await this.getDestinationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * Perform Checkout Action
     */


    async performCheckoutActionRaw(requestParameters: CheckoutApiPerformCheckoutActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling performCheckoutAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckoutActionToJSON(requestParameters.checkoutAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * Perform Checkout Action
     */
    async performCheckoutAction(requestParameters: CheckoutApiPerformCheckoutActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.performCheckoutActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * Perform Payment Action
     */


    async performPaymentActionRaw(requestParameters: CheckoutApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling performPaymentAction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling performPaymentAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentActionToJSON(requestParameters.paymentAction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * Perform Payment Action
     */
    async performPaymentAction(requestParameters: CheckoutApiPerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.performPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * Process Digital Wallet
     */


    async processDigitalWalletRaw(requestParameters: CheckoutApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling processDigitalWallet.');
        }

        if (requestParameters.digitalWalletType === null || requestParameters.digitalWalletType === undefined) {
            throw new runtime.RequiredError('digitalWalletType','Required parameter requestParameters.digitalWalletType was null or undefined when calling processDigitalWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"digitalWalletType"}}`, encodeURIComponent(String(requestParameters.digitalWalletType))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalWalletToJSON(requestParameters.digitalWallet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * Process Digital Wallet
     */
    async processDigitalWallet(requestParameters: CheckoutApiProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.processDigitalWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the checkout.
     * Remove Coupon
     */


    async removeCouponRaw(requestParameters: CheckoutApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling removeCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/coupons/{couponCode}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Removes a coupon that had been previously applied to the checkout.
     * Remove Coupon
     */
    async removeCoupon(requestParameters: CheckoutApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all coupons that had been previously applied to the checkout.
     * Remove Coupons
     */


    async removeCouponsRaw(requestParameters: CheckoutApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/coupons`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Removes all coupons that had been previously applied to the checkout.
     * Remove Coupons
     */
    async removeCoupons(requestParameters: CheckoutApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a destination specified by checkout Id and destination Id.
     * Remove Destination
     */


    async removeDestinationRaw(requestParameters: CheckoutApiRemoveDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling removeDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling removeDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a destination specified by checkout Id and destination Id.
     * Remove Destination
     */
    async removeDestination(requestParameters: CheckoutApiRemoveDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeDestinationRaw(requestParameters, initOverrides);
    }

    /**
     * esends email on checkout confirmation.
     * Resend Checkout Confirmation Email
     */


    async resendCheckoutConfirmationEmailRaw(requestParameters: CheckoutApiResendCheckoutConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling resendCheckoutConfirmationEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/email/resend`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * esends email on checkout confirmation.
     * Resend Checkout Confirmation Email
     */
    async resendCheckoutConfirmationEmail(requestParameters: CheckoutApiResendCheckoutConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendCheckoutConfirmationEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the shipping method for specified groupings.
     * Set Shipping Methods
     */


    async setShippingMethodsRaw(requestParameters: CheckoutApiSetShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling setShippingMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/shippingMethods`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.checkoutGroupShippingMethod.map(CheckoutGroupShippingMethodToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Sets the shipping method for specified groupings.
     * Set Shipping Methods
     */
    async setShippingMethods(requestParameters: CheckoutApiSetShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.setShippingMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Splits an existing item into two. The new item\'s quantity will be !:quantity and the original item\'s quantity will be reduced accordingly.
     * Split Item
     */


    async splitItemRaw(requestParameters: CheckoutApiSplitItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling splitItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling splitItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/split`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Splits an existing item into two. The new item\'s quantity will be !:quantity and the original item\'s quantity will be reduced accordingly.
     * Split Item
     */
    async splitItem(requestParameters: CheckoutApiSplitItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.splitItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of a checkout specified by the checkout ID.
     * Update Checkout
     */


    async updateCheckoutRaw(requestParameters: CheckoutApiUpdateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateCheckout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckoutToJSON(requestParameters.checkout),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Updates the details of a checkout specified by the checkout ID.
     * Update Checkout
     */
    async updateCheckout(requestParameters: CheckoutApiUpdateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * Update Checkout Attribute
     */


    async updateCheckoutAttributeRaw(requestParameters: CheckoutApiUpdateCheckoutAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderAttribute>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateCheckoutAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.removeMissing !== undefined) {
            queryParameters['removeMissing'] = requestParameters.removeMissing;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/attributes`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderAttribute.map(OrderAttributeToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderAttributeFromJSON));
    }

    /**
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * Update Checkout Attribute
     */
    async updateCheckoutAttribute(requestParameters: CheckoutApiUpdateCheckoutAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderAttribute>> {
        const response = await this.updateCheckoutAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a destination specified by checkout Id and destination Id.
     * Update Destination
     */


    async updateDestinationRaw(requestParameters: CheckoutApiUpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Destination>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling updateDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationToJSON(requestParameters.destination),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationFromJSON(jsonValue));
    }

    /**
     * Updates a destination specified by checkout Id and destination Id.
     * Update Destination
     */
    async updateDestination(requestParameters: CheckoutApiUpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Destination> {
        const response = await this.updateDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the Delivery Date of the Item
     * Update the Delivery Date of the Item
     */


    async updateItemDeliveryDateRaw(requestParameters: CheckoutApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateItemDeliveryDate.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateItemDeliveryDate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/deliverydate`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Update the Delivery Date of the Item
     * Update the Delivery Date of the Item
     */
    async updateItemDeliveryDate(requestParameters: CheckoutApiUpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateItemDeliveryDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associate an item to a destination.
     * Update Item Destination
     */


    async updateItemDestinationRaw(requestParameters: CheckoutApiUpdateItemDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateItemDestination.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateItemDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling updateItemDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Associate an item to a destination.
     * Update Item Destination
     */
    async updateItemDestination(requestParameters: CheckoutApiUpdateItemDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateItemDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the subscription info on the Item.
     * Update Item Subscription Info
     */


    async updateSubscriptionInfoRaw(requestParameters: CheckoutApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateSubscriptionInfo.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateSubscriptionInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/subscriptionInfo`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionInfoToJSON(requestParameters.subscriptionInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Updates the subscription info on the Item.
     * Update Item Subscription Info
     */
    async updateSubscriptionInfo(requestParameters: CheckoutApiUpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateSubscriptionInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     */


    async upsertInventoryTagsRaw(requestParameters: CheckoutApiUpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling upsertInventoryTags.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling upsertInventoryTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/upsert-inventory-tags`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.inventoryTags.map(InventoryTagsToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFromJSON(jsonValue));
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     */
    async upsertInventoryTags(requestParameters: CheckoutApiUpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.upsertInventoryTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
