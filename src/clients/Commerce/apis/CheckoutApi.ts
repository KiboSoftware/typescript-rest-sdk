/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Checkout,
  CheckoutAction,
  CheckoutCollection,
  CheckoutGroupRates,
  CheckoutGroupShippingMethod,
  CommerceRuntimeDestination,
  CommerceRuntimeOrderAttribute,
  CommerceRuntimeOrderItem,
  DigitalWallet,
  GiftInfo,
  InventoryTags,
  ItemsAndDeliveryDates,
  ItemsForDestination,
  PaymentAction,
  SubscriptionInfo,
} from '../models';


export namespace checkoutApiParams { 
    export interface AddCheckoutItemRequest {
        checkoutId: string;
        responseFields?: string;
        commerceRuntimeOrderItem?: CommerceRuntimeOrderItem;
    }
    export interface AddDestinationRequest {
        checkoutId: string;
        responseFields?: string;
        commerceRuntimeDestination?: CommerceRuntimeDestination;
    }
    export interface ApplyCouponRequest {
        checkoutId: string;
        couponCode: string;
        responseFields?: string;
    }
    export interface BulkUpdateDeliveryDatesRequest {
        checkoutId: string;
        responseFields?: string;
        itemsAndDeliveryDates?: Array<ItemsAndDeliveryDates>;
    }
    export interface BulkUpdateItemDestinationsRequest {
        checkoutId: string;
        responseFields?: string;
        itemsForDestination?: Array<ItemsForDestination>;
    }
    export interface ChangeCheckoutPriceListRequest {
        checkoutId: string;
        responseFields?: string;
        body?: string;
    }
    export interface CreateCheckoutAttributesRequest {
        checkoutId: string;
        responseFields?: string;
        commerceRuntimeOrderAttribute?: Array<CommerceRuntimeOrderAttribute>;
    }
    export interface CreateCheckoutFromCartRequest {
        cartId?: string;
        responseFields?: string;
    }
    export interface CreatePaymentActionRequest {
        checkoutId: string;
        responseFields?: string;
        paymentAction?: PaymentAction;
    }
    export interface DeleteCheckoutItemRequest {
        checkoutId: string;
        itemId: string;
    }
    export interface GetAvailableActionsRequest {
        checkoutId: string;
        responseFields?: string;
    }
    export interface GetAvailableShippingMethodsRequest {
        checkoutId: string;
        responseFields?: string;
    }
    export interface GetCheckoutRequest {
        checkoutId: string;
        responseFields?: string;
    }
    export interface GetCheckoutAttributesRequest {
        checkoutId: string;
        responseFields?: string;
    }
    export interface GetCheckoutsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        q?: string;
        qLimit?: number;
        responseFields?: string;
    }
    export interface GetDestinationRequest {
        checkoutId: string;
        destinationId: string;
        responseFields?: string;
    }
    export interface GetDestinationsRequest {
        checkoutId: string;
        responseFields?: string;
    }
    export interface PerformCheckoutActionRequest {
        checkoutId: string;
        responseFields?: string;
        checkoutAction?: CheckoutAction;
    }
    export interface PerformPaymentActionRequest {
        checkoutId: string;
        paymentId: string;
        responseFields?: string;
        paymentAction?: PaymentAction;
    }
    export interface ProcessDigitalWalletRequest {
        checkoutId: string;
        digitalWalletType: string;
        responseFields?: string;
        digitalWallet?: DigitalWallet;
    }
    export interface RemoveCouponRequest {
        checkoutId: string;
        couponCode: string;
    }
    export interface RemoveCouponsRequest {
        checkoutId: string;
    }
    export interface RemoveDestinationRequest {
        checkoutId: string;
        destinationId: string;
    }
    export interface ResendCheckoutConfirmationEmailRequest {
        checkoutId: string;
        responseFields?: string;
    }
    export interface SetShippingMethodsRequest {
        checkoutId: string;
        responseFields?: string;
        checkoutGroupShippingMethod?: Array<CheckoutGroupShippingMethod>;
    }
    export interface SplitItemRequest {
        checkoutId: string;
        itemId: string;
        quantity?: number;
        responseFields?: string;
    }
    export interface UpdateCheckoutRequest {
        checkoutId: string;
        responseFields?: string;
        checkout?: Checkout;
    }
    export interface UpdateCheckoutAttributeRequest {
        checkoutId: string;
        removeMissing?: boolean;
        responseFields?: string;
        commerceRuntimeOrderAttribute?: Array<CommerceRuntimeOrderAttribute>;
    }
    export interface UpdateDestinationRequest {
        checkoutId: string;
        destinationId: string;
        responseFields?: string;
        commerceRuntimeDestination?: CommerceRuntimeDestination;
    }
    export interface UpdateGiftInfoRequest {
        checkoutId: string;
        itemId: string;
        responseFields?: string;
        giftInfo?: GiftInfo;
    }
    export interface UpdateItemDeliveryDateRequest {
        checkoutId: string;
        itemId: string;
        responseFields?: string;
        body?: string;
    }
    export interface UpdateItemDestinationRequest {
        checkoutId: string;
        itemId: string;
        destinationId: string;
        responseFields?: string;
    }
    export interface UpdateSubscriptionInfoRequest {
        checkoutId: string;
        itemId: string;
        responseFields?: string;
        subscriptionInfo?: SubscriptionInfo;
    }
    export interface UpsertInventoryTagsRequest {
        checkoutId: string;
        itemId: string;
        responseFields?: string;
        inventoryTags?: Array<InventoryTags>;
    }
}
/**
* CheckoutApiService - interface
* 
* @export
* @interface CheckoutApi
*/
export interface CheckoutApiService {
    /**
    * Adds a product or other item to the checkout of the current shopper.
    * @summary Add Checkout Item
    * @param {string} checkoutId ID of the checkout to add an item to.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CommerceRuntimeOrderItem} [commerceRuntimeOrderItem] All properties of the new item. Required property: Product.ProductCode.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    addCheckoutItemRaw(requestParameters: checkoutApiParams.AddCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Adds a product or other item to the checkout of the current shopper.
    * Add Checkout Item
    */
    addCheckoutItem(requestParameters: checkoutApiParams.AddCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Adds a specific destination to the checkout.
    * @summary Add Destination
    * @param {string} checkoutId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CommerceRuntimeDestination} [commerceRuntimeDestination] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    addDestinationRaw(requestParameters: checkoutApiParams.AddDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeDestination>>;

    /**
    * Adds a specific destination to the checkout.
    * Add Destination
    */
    addDestination(requestParameters: checkoutApiParams.AddDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeDestination>;

    /**
    * Apply a coupon to the Checkout.
    * @summary Apply Coupon
    * @param {string} checkoutId Unique identifier of the Checkout with which to associate the coupon.
    * @param {string} couponCode Coupon code that the customer supplies to get the discounted price.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    applyCouponRaw(requestParameters: checkoutApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Apply a coupon to the Checkout.
    * Apply Coupon
    */
    applyCoupon(requestParameters: checkoutApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Update Delivery Dates of Items in bulk
    * @summary Update Delivery Dates of Items in bulk
    * @param {string} checkoutId ID of the Checkout
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<ItemsAndDeliveryDates>} [itemsAndDeliveryDates] Pairings of Delivery Date and associated ItemIds
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    bulkUpdateDeliveryDatesRaw(requestParameters: checkoutApiParams.BulkUpdateDeliveryDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Update Delivery Dates of Items in bulk
    * Update Delivery Dates of Items in bulk
    */
    bulkUpdateDeliveryDates(requestParameters: checkoutApiParams.BulkUpdateDeliveryDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Associate items to destinations in bulk.
    * @summary Bulk Update Item Destinations
    * @param {string} checkoutId ID of the checkout
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<ItemsForDestination>} [itemsForDestination] Pairings of destination IDs with their associated items by ID
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    bulkUpdateItemDestinationsRaw(requestParameters: checkoutApiParams.BulkUpdateItemDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Associate items to destinations in bulk.
    * Bulk Update Item Destinations
    */
    bulkUpdateItemDestinations(requestParameters: checkoutApiParams.BulkUpdateItemDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
    * @summary Change Checkout PriceList
    * @param {string} checkoutId Unique identifier of the checkout to change
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {string} [body] The code for the pricelist to apply
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    changeCheckoutPriceListRaw(requestParameters: checkoutApiParams.ChangeCheckoutPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
    * Change Checkout PriceList
    */
    changeCheckoutPriceList(requestParameters: checkoutApiParams.ChangeCheckoutPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Creates list of checkout attributes specified by checkout Id.
    * @summary Create Checkout Attributes
    * @param {string} checkoutId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<CommerceRuntimeOrderAttribute>} [commerceRuntimeOrderAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    createCheckoutAttributesRaw(requestParameters: checkoutApiParams.CreateCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>>;

    /**
    * Creates list of checkout attributes specified by checkout Id.
    * Create Checkout Attributes
    */
    createCheckoutAttributes(requestParameters: checkoutApiParams.CreateCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>>;

    /**
    * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
    * @summary Create Checkout From Cart
    * @param {string} [cartId] Unique identifier of the cart. This is the original cart ID expressed as a GUID.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    createCheckoutFromCartRaw(requestParameters: checkoutApiParams.CreateCheckoutFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
    * Create Checkout From Cart
    */
    createCheckoutFromCart(requestParameters: checkoutApiParams.CreateCheckoutFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
    * @summary Create Payment Action
    * @param {string} checkoutId Unique identifier of the checkout whose payment action you want to change.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {PaymentAction} [paymentAction] Action to be performed, along with any metadata.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    createPaymentActionRaw(requestParameters: checkoutApiParams.CreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
    * Create Payment Action
    */
    createPaymentAction(requestParameters: checkoutApiParams.CreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Removes a particular item from the checkout of the current shopper.
    * @summary Delete Checkout Item
    * @param {string} checkoutId 
    * @param {string} itemId Unique identifier of the item.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    deleteCheckoutItemRaw(requestParameters: checkoutApiParams.DeleteCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Removes a particular item from the checkout of the current shopper.
    * Delete Checkout Item
    */
    deleteCheckoutItem(requestParameters: checkoutApiParams.DeleteCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Retrieves available actions which depends on the status of the checkout.
    * @summary Get Available Actions
    * @param {string} checkoutId Unique identifier of the checkout whose available actions you want to get.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getAvailableActionsRaw(requestParameters: checkoutApiParams.GetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
    * Retrieves available actions which depends on the status of the checkout.
    * Get Available Actions
    */
    getAvailableActions(requestParameters: checkoutApiParams.GetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
    * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
    * @summary Get Available Shipping Methods
    * @param {string} checkoutId Unique identifier of the checkout whose shipping methods you want to get.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getAvailableShippingMethodsRaw(requestParameters: checkoutApiParams.GetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CheckoutGroupRates>>>;

    /**
    * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
    * Get Available Shipping Methods
    */
    getAvailableShippingMethods(requestParameters: checkoutApiParams.GetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CheckoutGroupRates>>;

    /**
    * Retrieves the details of a checkout specified by the checkout ID.
    * @summary Get Checkout
    * @param {string} checkoutId Unique identifier of the checkout whose details you want.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getCheckoutRaw(requestParameters: checkoutApiParams.GetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Retrieves the details of a checkout specified by the checkout ID.
    * Get Checkout
    */
    getCheckout(requestParameters: checkoutApiParams.GetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Gets the list of attributes specified by checkout Id.
    * @summary Get Checkout Attributes
    * @param {string} checkoutId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getCheckoutAttributesRaw(requestParameters: checkoutApiParams.GetCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>>;

    /**
    * Gets the list of attributes specified by checkout Id.
    * Get Checkout Attributes
    */
    getCheckoutAttributes(requestParameters: checkoutApiParams.GetCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>>;

    /**
    * Retrieves a list of checkouts according to any specified filter criteria and sort options.
    * @summary Get Checkouts
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [q] Text to perform a search on
    * @param {number} [qLimit] Limit of the records to include in a search, used for global search
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getCheckoutsRaw(requestParameters: checkoutApiParams.GetCheckoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutCollection>>;

    /**
    * Retrieves a list of checkouts according to any specified filter criteria and sort options.
    * Get Checkouts
    */
    getCheckouts(requestParameters: checkoutApiParams.GetCheckoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutCollection>;

    /**
    * Gets a destination specified by the checkout Id and destination Id.
    * @summary Get Destination
    * @param {string} checkoutId 
    * @param {string} destinationId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getDestinationRaw(requestParameters: checkoutApiParams.GetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeDestination>>;

    /**
    * Gets a destination specified by the checkout Id and destination Id.
    * Get Destination
    */
    getDestination(requestParameters: checkoutApiParams.GetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeDestination>;

    /**
    * Gets all the destinations specified by the checkout Id.
    * @summary Get Destinations
    * @param {string} checkoutId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    getDestinationsRaw(requestParameters: checkoutApiParams.GetDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeDestination>>>;

    /**
    * Gets all the destinations specified by the checkout Id.
    * Get Destinations
    */
    getDestinations(requestParameters: checkoutApiParams.GetDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeDestination>>;

    /**
    * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
    * @summary Perform Checkout Action
    * @param {string} checkoutId Unique identifier of the checkout.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CheckoutAction} [checkoutAction] The action to perform
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    performCheckoutActionRaw(requestParameters: checkoutApiParams.PerformCheckoutActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
    * Perform Checkout Action
    */
    performCheckoutAction(requestParameters: checkoutApiParams.PerformCheckoutActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
    * @summary Perform Payment Action
    * @param {string} checkoutId Unique identifier of the checkout whose payment action you want to change.
    * @param {string} paymentId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {PaymentAction} [paymentAction] Action to be performed, along with any metadata.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    performPaymentActionRaw(requestParameters: checkoutApiParams.PerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
    * Perform Payment Action
    */
    performPaymentAction(requestParameters: checkoutApiParams.PerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Processes the digital wallet sent specified by checkout id and digital     wallet type.
    * @summary Process Digital Wallet
    * @param {string} checkoutId 
    * @param {string} digitalWalletType 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DigitalWallet} [digitalWallet] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    processDigitalWalletRaw(requestParameters: checkoutApiParams.ProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Processes the digital wallet sent specified by checkout id and digital     wallet type.
    * Process Digital Wallet
    */
    processDigitalWallet(requestParameters: checkoutApiParams.ProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Removes a coupon that had been previously applied to the checkout.
    * @summary Remove Coupon
    * @param {string} checkoutId Unique identifier of the checkout with the coupon you want to remove.
    * @param {string} couponCode Coupon code to remove.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    removeCouponRaw(requestParameters: checkoutApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Removes a coupon that had been previously applied to the checkout.
    * Remove Coupon
    */
    removeCoupon(requestParameters: checkoutApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Removes all coupons that had been previously applied to the checkout.
    * @summary Remove Coupons
    * @param {string} checkoutId Unique identifier of the order with the coupon you want to remove.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    removeCouponsRaw(requestParameters: checkoutApiParams.RemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Removes all coupons that had been previously applied to the checkout.
    * Remove Coupons
    */
    removeCoupons(requestParameters: checkoutApiParams.RemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Removes a destination specified by checkout Id and destination Id.
    * @summary Remove Destination
    * @param {string} checkoutId 
    * @param {string} destinationId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    removeDestinationRaw(requestParameters: checkoutApiParams.RemoveDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Removes a destination specified by checkout Id and destination Id.
    * Remove Destination
    */
    removeDestination(requestParameters: checkoutApiParams.RemoveDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * esends email on checkout confirmation.
    * @summary Resend Checkout Confirmation Email
    * @param {string} checkoutId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    resendCheckoutConfirmationEmailRaw(requestParameters: checkoutApiParams.ResendCheckoutConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * esends email on checkout confirmation.
    * Resend Checkout Confirmation Email
    */
    resendCheckoutConfirmationEmail(requestParameters: checkoutApiParams.ResendCheckoutConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Sets the shipping method for specified groupings.
    * @summary Set Shipping Methods
    * @param {string} checkoutId Unique identifier of the checkout whose shipping methods you want to set.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<CheckoutGroupShippingMethod>} [checkoutGroupShippingMethod] Pairings of checkout group to shipping method
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    setShippingMethodsRaw(requestParameters: checkoutApiParams.SetShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Sets the shipping method for specified groupings.
    * Set Shipping Methods
    */
    setShippingMethods(requestParameters: checkoutApiParams.SetShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Splits an existing item into two. The new item\'s quantity will be !:quantity and the original item\'s quantity will be reduced accordingly.
    * @summary Split Item
    * @param {string} checkoutId ID of the checkout containing the item to split
    * @param {string} itemId The ID of the item to split
    * @param {number} [quantity] What quantity to split off. Defaults to 1.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    splitItemRaw(requestParameters: checkoutApiParams.SplitItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Splits an existing item into two. The new item\'s quantity will be !:quantity and the original item\'s quantity will be reduced accordingly.
    * Split Item
    */
    splitItem(requestParameters: checkoutApiParams.SplitItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Updates the details of a checkout specified by the checkout ID.
    * @summary Update Checkout
    * @param {string} checkoutId Unique identifier of the checkout whose details you want.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Checkout} [checkout] Checkout that needs update
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateCheckoutRaw(requestParameters: checkoutApiParams.UpdateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Updates the details of a checkout specified by the checkout ID.
    * Update Checkout
    */
    updateCheckout(requestParameters: checkoutApiParams.UpdateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
    * @summary Update Checkout Attribute
    * @param {string} checkoutId 
    * @param {boolean} [removeMissing] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<CommerceRuntimeOrderAttribute>} [commerceRuntimeOrderAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateCheckoutAttributeRaw(requestParameters: checkoutApiParams.UpdateCheckoutAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>>;

    /**
    * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
    * Update Checkout Attribute
    */
    updateCheckoutAttribute(requestParameters: checkoutApiParams.UpdateCheckoutAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>>;

    /**
    * Updates a destination specified by checkout Id and destination Id.
    * @summary Update Destination
    * @param {string} checkoutId 
    * @param {string} destinationId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CommerceRuntimeDestination} [commerceRuntimeDestination] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateDestinationRaw(requestParameters: checkoutApiParams.UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeDestination>>;

    /**
    * Updates a destination specified by checkout Id and destination Id.
    * Update Destination
    */
    updateDestination(requestParameters: checkoutApiParams.UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeDestination>;

    /**
    * Update GiftInfo on CheckoutItem
    * @summary Update GiftInfo on CheckoutItem
    * @param {string} checkoutId Unique identifier of the checkout.
    * @param {string} itemId Unique identifier of the checkout item.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {GiftInfo} [giftInfo] Mozu.CommerceRuntime.Contracts.Orders.GiftInfo to use as the update source
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateGiftInfoRaw(requestParameters: checkoutApiParams.UpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Update GiftInfo on CheckoutItem
    * Update GiftInfo on CheckoutItem
    */
    updateGiftInfo(requestParameters: checkoutApiParams.UpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Update the Delivery Date of the Item
    * @summary Update the Delivery Date of the Item
    * @param {string} checkoutId ID of the Checkout
    * @param {string} itemId ID of the item to update
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {string} [body] Delivery DateTme to update to
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateItemDeliveryDateRaw(requestParameters: checkoutApiParams.UpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Update the Delivery Date of the Item
    * Update the Delivery Date of the Item
    */
    updateItemDeliveryDate(requestParameters: checkoutApiParams.UpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Associate an item to a destination.
    * @summary Update Item Destination
    * @param {string} checkoutId ID of the checkout
    * @param {string} itemId ID of the item to update
    * @param {string} destinationId ID of the destination
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateItemDestinationRaw(requestParameters: checkoutApiParams.UpdateItemDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Associate an item to a destination.
    * Update Item Destination
    */
    updateItemDestination(requestParameters: checkoutApiParams.UpdateItemDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Updates the subscription info on the Item.
    * @summary Update Item Subscription Info
    * @param {string} checkoutId ID of the checkout
    * @param {string} itemId ID of the item to update
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SubscriptionInfo} [subscriptionInfo] The Mozu.CommerceRuntime.Contracts.Subscriptions.SubscriptionInfo to use as update source on Item
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    updateSubscriptionInfoRaw(requestParameters: checkoutApiParams.UpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Updates the subscription info on the Item.
    * Update Item Subscription Info
    */
    updateSubscriptionInfo(requestParameters: checkoutApiParams.UpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

    /**
    * Upsert Inventory Tags
    * @summary Upsert Inventory Tags
    * @param {string} checkoutId 
    * @param {string} itemId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<InventoryTags>} [inventoryTags] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CheckoutApiInterface
    */
    upsertInventoryTagsRaw(requestParameters: checkoutApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>>;

    /**
    * Upsert Inventory Tags
    * Upsert Inventory Tags
    */
    upsertInventoryTags(requestParameters: checkoutApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout>;

}


/**
 * 
 */
export class CheckoutApi extends runtime.BaseAPI implements CheckoutApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a product or other item to the checkout of the current shopper.
     * Add Checkout Item
     */


    async addCheckoutItemRaw(requestParameters: checkoutApiParams.AddCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling addCheckoutItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a product or other item to the checkout of the current shopper.
     * Add Checkout Item
     */
    async addCheckoutItem(requestParameters: checkoutApiParams.AddCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.addCheckoutItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a specific destination to the checkout.
     * Add Destination
     */


    async addDestinationRaw(requestParameters: checkoutApiParams.AddDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeDestination>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling addDestination.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeDestination,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a specific destination to the checkout.
     * Add Destination
     */
    async addDestination(requestParameters: checkoutApiParams.AddDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeDestination> {
        const response = await this.addDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a coupon to the Checkout.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: checkoutApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/coupons/{couponCode}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Apply a coupon to the Checkout.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: checkoutApiParams.ApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Delivery Dates of Items in bulk
     * Update Delivery Dates of Items in bulk
     */


    async bulkUpdateDeliveryDatesRaw(requestParameters: checkoutApiParams.BulkUpdateDeliveryDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling bulkUpdateDeliveryDates.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/deliverydates`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.itemsAndDeliveryDates,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Delivery Dates of Items in bulk
     * Update Delivery Dates of Items in bulk
     */
    async bulkUpdateDeliveryDates(requestParameters: checkoutApiParams.BulkUpdateDeliveryDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.bulkUpdateDeliveryDatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associate items to destinations in bulk.
     * Bulk Update Item Destinations
     */


    async bulkUpdateItemDestinationsRaw(requestParameters: checkoutApiParams.BulkUpdateItemDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling bulkUpdateItemDestinations.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/destinations`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.itemsForDestination,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Associate items to destinations in bulk.
     * Bulk Update Item Destinations
     */
    async bulkUpdateItemDestinations(requestParameters: checkoutApiParams.BulkUpdateItemDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.bulkUpdateItemDestinationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * Change Checkout PriceList
     */


    async changeCheckoutPriceListRaw(requestParameters: checkoutApiParams.ChangeCheckoutPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling changeCheckoutPriceList.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/priceList`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Changes the pricelist associated with a checkout.The desired price list code should be specified on the ApiContext.
     * Change Checkout PriceList
     */
    async changeCheckoutPriceList(requestParameters: checkoutApiParams.ChangeCheckoutPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.changeCheckoutPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates list of checkout attributes specified by checkout Id.
     * Create Checkout Attributes
     */


    async createCheckoutAttributesRaw(requestParameters: checkoutApiParams.CreateCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling createCheckoutAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/attributes`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates list of checkout attributes specified by checkout Id.
     * Create Checkout Attributes
     */
    async createCheckoutAttributes(requestParameters: checkoutApiParams.CreateCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>> {
        const response = await this.createCheckoutAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * Create Checkout From Cart
     */


    async createCheckoutFromCartRaw(requestParameters: checkoutApiParams.CreateCheckoutFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        const queryParameters: any = {};

        if (requestParameters.cartId !== undefined) {
            queryParameters['cartId'] = requestParameters.cartId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new checkout from an existing cart, that is, when the customer chooses to proceed to checkout.
     * Create Checkout From Cart
     */
    async createCheckoutFromCart(requestParameters: checkoutApiParams.CreateCheckoutFromCartRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.createCheckoutFromCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */


    async createPaymentActionRaw(requestParameters: checkoutApiParams.CreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling createPaymentAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/payments/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction.If in doubt, get a list of available payment actions first.
     * Create Payment Action
     */
    async createPaymentAction(requestParameters: checkoutApiParams.CreatePaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.createPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a particular item from the checkout of the current shopper.
     * Delete Checkout Item
     */


    async deleteCheckoutItemRaw(requestParameters: checkoutApiParams.DeleteCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling deleteCheckoutItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteCheckoutItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a particular item from the checkout of the current shopper.
     * Delete Checkout Item
     */
    async deleteCheckoutItem(requestParameters: checkoutApiParams.DeleteCheckoutItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.deleteCheckoutItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available actions which depends on the status of the checkout.
     * Get Available Actions
     */


    async getAvailableActionsRaw(requestParameters: checkoutApiParams.GetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getAvailableActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves available actions which depends on the status of the checkout.
     * Get Available Actions
     */
    async getAvailableActions(requestParameters: checkoutApiParams.GetAvailableActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAvailableActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipping Methods
     */


    async getAvailableShippingMethodsRaw(requestParameters: checkoutApiParams.GetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CheckoutGroupRates>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getAvailableShippingMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/shippingMethods`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves available shipping methods for groupings. Typically used to display available shipping method options on the checkout page.
     * Get Available Shipping Methods
     */
    async getAvailableShippingMethods(requestParameters: checkoutApiParams.GetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CheckoutGroupRates>> {
        const response = await this.getAvailableShippingMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a checkout specified by the checkout ID.
     * Get Checkout
     */


    async getCheckoutRaw(requestParameters: checkoutApiParams.GetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getCheckout.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a checkout specified by the checkout ID.
     * Get Checkout
     */
    async getCheckout(requestParameters: checkoutApiParams.GetCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.getCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of attributes specified by checkout Id.
     * Get Checkout Attributes
     */


    async getCheckoutAttributesRaw(requestParameters: checkoutApiParams.GetCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getCheckoutAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/attributes`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets the list of attributes specified by checkout Id.
     * Get Checkout Attributes
     */
    async getCheckoutAttributes(requestParameters: checkoutApiParams.GetCheckoutAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>> {
        const response = await this.getCheckoutAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * Get Checkouts
     */


    async getCheckoutsRaw(requestParameters: checkoutApiParams.GetCheckoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckoutCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of checkouts according to any specified filter criteria and sort options.
     * Get Checkouts
     */
    async getCheckouts(requestParameters: checkoutApiParams.GetCheckoutsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckoutCollection> {
        const response = await this.getCheckoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a destination specified by the checkout Id and destination Id.
     * Get Destination
     */


    async getDestinationRaw(requestParameters: checkoutApiParams.GetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeDestination>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling getDestination.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a destination specified by the checkout Id and destination Id.
     * Get Destination
     */
    async getDestination(requestParameters: checkoutApiParams.GetDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeDestination> {
        const response = await this.getDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all the destinations specified by the checkout Id.
     * Get Destinations
     */


    async getDestinationsRaw(requestParameters: checkoutApiParams.GetDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeDestination>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling getDestinations.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all the destinations specified by the checkout Id.
     * Get Destinations
     */
    async getDestinations(requestParameters: checkoutApiParams.GetDestinationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeDestination>> {
        const response = await this.getDestinationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * Perform Checkout Action
     */


    async performCheckoutActionRaw(requestParameters: checkoutApiParams.PerformCheckoutActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling performCheckoutAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.checkoutAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Perform an action on the checkout. Available actions depend on the current state of the checkout. If in doubt, get a list of available checkout actions first.
     * Perform Checkout Action
     */
    async performCheckoutAction(requestParameters: checkoutApiParams.PerformCheckoutActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.performCheckoutActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * Perform Payment Action
     */


    async performPaymentActionRaw(requestParameters: checkoutApiParams.PerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling performPaymentAction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling performPaymentAction.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/payments/{paymentId}/actions`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.paymentAction,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the action of the specified payment transaction interaction. Available actions depend on the current status of the payment transaction. \\r\\nIf in doubt, get a list of available payment actions first (such as AuthAndCapture, AuthorizePayment, CapturePayment, VoidPayment, CreditPayment, RequestCheck, ApplyCheck, or DeclineCheck). Note that for order management-only systems that use No-Operation payment gateways, such as due to the payments being processed by an external storefront or service instead of UCP, these actions will not actually be performed by UCP and instead will be automatically marked as a success.
     * Perform Payment Action
     */
    async performPaymentAction(requestParameters: checkoutApiParams.PerformPaymentActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.performPaymentActionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * Process Digital Wallet
     */


    async processDigitalWalletRaw(requestParameters: checkoutApiParams.ProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling processDigitalWallet.');
        }

        if (requestParameters.digitalWalletType === null || requestParameters.digitalWalletType === undefined) {
            throw new runtime.RequiredError('digitalWalletType','Required parameter requestParameters.digitalWalletType was null or undefined when calling processDigitalWallet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"digitalWalletType"}}`, encodeURIComponent(String(requestParameters.digitalWalletType))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.digitalWallet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Processes the digital wallet sent specified by checkout id and digital     wallet type.
     * Process Digital Wallet
     */
    async processDigitalWallet(requestParameters: checkoutApiParams.ProcessDigitalWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.processDigitalWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the checkout.
     * Remove Coupon
     */


    async removeCouponRaw(requestParameters: checkoutApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling removeCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/coupons/{couponCode}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes a coupon that had been previously applied to the checkout.
     * Remove Coupon
     */
    async removeCoupon(requestParameters: checkoutApiParams.RemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all coupons that had been previously applied to the checkout.
     * Remove Coupons
     */


    async removeCouponsRaw(requestParameters: checkoutApiParams.RemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/coupons`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Removes all coupons that had been previously applied to the checkout.
     * Remove Coupons
     */
    async removeCoupons(requestParameters: checkoutApiParams.RemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a destination specified by checkout Id and destination Id.
     * Remove Destination
     */


    async removeDestinationRaw(requestParameters: checkoutApiParams.RemoveDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling removeDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling removeDestination.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a destination specified by checkout Id and destination Id.
     * Remove Destination
     */
    async removeDestination(requestParameters: checkoutApiParams.RemoveDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeDestinationRaw(requestParameters, initOverrides);
    }

    /**
     * esends email on checkout confirmation.
     * Resend Checkout Confirmation Email
     */


    async resendCheckoutConfirmationEmailRaw(requestParameters: checkoutApiParams.ResendCheckoutConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling resendCheckoutConfirmationEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/email/resend`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * esends email on checkout confirmation.
     * Resend Checkout Confirmation Email
     */
    async resendCheckoutConfirmationEmail(requestParameters: checkoutApiParams.ResendCheckoutConfirmationEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendCheckoutConfirmationEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the shipping method for specified groupings.
     * Set Shipping Methods
     */


    async setShippingMethodsRaw(requestParameters: checkoutApiParams.SetShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling setShippingMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/shippingMethods`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.checkoutGroupShippingMethod,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the shipping method for specified groupings.
     * Set Shipping Methods
     */
    async setShippingMethods(requestParameters: checkoutApiParams.SetShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.setShippingMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Splits an existing item into two. The new item\'s quantity will be !:quantity and the original item\'s quantity will be reduced accordingly.
     * Split Item
     */


    async splitItemRaw(requestParameters: checkoutApiParams.SplitItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling splitItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling splitItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/split`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Splits an existing item into two. The new item\'s quantity will be !:quantity and the original item\'s quantity will be reduced accordingly.
     * Split Item
     */
    async splitItem(requestParameters: checkoutApiParams.SplitItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.splitItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of a checkout specified by the checkout ID.
     * Update Checkout
     */


    async updateCheckoutRaw(requestParameters: checkoutApiParams.UpdateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateCheckout.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.checkout,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the details of a checkout specified by the checkout ID.
     * Update Checkout
     */
    async updateCheckout(requestParameters: checkoutApiParams.UpdateCheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateCheckoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * Update Checkout Attribute
     */


    async updateCheckoutAttributeRaw(requestParameters: checkoutApiParams.UpdateCheckoutAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommerceRuntimeOrderAttribute>>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateCheckoutAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.removeMissing !== undefined) {
            queryParameters['removeMissing'] = requestParameters.removeMissing;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/attributes`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeOrderAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the list of checkout attributes specified by checkout id and removes the missing attributes if not passed when removeMissing flag is set.
     * Update Checkout Attribute
     */
    async updateCheckoutAttribute(requestParameters: checkoutApiParams.UpdateCheckoutAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommerceRuntimeOrderAttribute>> {
        const response = await this.updateCheckoutAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a destination specified by checkout Id and destination Id.
     * Update Destination
     */


    async updateDestinationRaw(requestParameters: checkoutApiParams.UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommerceRuntimeDestination>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling updateDestination.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/destinations/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.commerceRuntimeDestination,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a destination specified by checkout Id and destination Id.
     * Update Destination
     */
    async updateDestination(requestParameters: checkoutApiParams.UpdateDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommerceRuntimeDestination> {
        const response = await this.updateDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update GiftInfo on CheckoutItem
     * Update GiftInfo on CheckoutItem
     */


    async updateGiftInfoRaw(requestParameters: checkoutApiParams.UpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateGiftInfo.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateGiftInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/updateGiftInfo`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.giftInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update GiftInfo on CheckoutItem
     * Update GiftInfo on CheckoutItem
     */
    async updateGiftInfo(requestParameters: checkoutApiParams.UpdateGiftInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateGiftInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the Delivery Date of the Item
     * Update the Delivery Date of the Item
     */


    async updateItemDeliveryDateRaw(requestParameters: checkoutApiParams.UpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateItemDeliveryDate.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateItemDeliveryDate.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/deliverydate`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the Delivery Date of the Item
     * Update the Delivery Date of the Item
     */
    async updateItemDeliveryDate(requestParameters: checkoutApiParams.UpdateItemDeliveryDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateItemDeliveryDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Associate an item to a destination.
     * Update Item Destination
     */


    async updateItemDestinationRaw(requestParameters: checkoutApiParams.UpdateItemDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateItemDestination.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateItemDestination.');
        }

        if (requestParameters.destinationId === null || requestParameters.destinationId === undefined) {
            throw new runtime.RequiredError('destinationId','Required parameter requestParameters.destinationId was null or undefined when calling updateItemDestination.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/destination/{destinationId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))).replace(`{${"destinationId"}}`, encodeURIComponent(String(requestParameters.destinationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Associate an item to a destination.
     * Update Item Destination
     */
    async updateItemDestination(requestParameters: checkoutApiParams.UpdateItemDestinationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateItemDestinationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the subscription info on the Item.
     * Update Item Subscription Info
     */


    async updateSubscriptionInfoRaw(requestParameters: checkoutApiParams.UpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling updateSubscriptionInfo.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateSubscriptionInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/subscriptionInfo`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.subscriptionInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the subscription info on the Item.
     * Update Item Subscription Info
     */
    async updateSubscriptionInfo(requestParameters: checkoutApiParams.UpdateSubscriptionInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.updateSubscriptionInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     */


    async upsertInventoryTagsRaw(requestParameters: checkoutApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Checkout>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling upsertInventoryTags.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling upsertInventoryTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/checkouts/{checkoutId}/items/{itemId}/upsert-inventory-tags`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.inventoryTags,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Upsert Inventory Tags
     * Upsert Inventory Tags
     */
    async upsertInventoryTags(requestParameters: checkoutApiParams.UpsertInventoryTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Checkout> {
        const response = await this.upsertInventoryTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
