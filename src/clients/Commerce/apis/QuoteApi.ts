/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  FulfillmentInfo,
  OrderItem,
  Quote,
  QuoteAdjustment,
  QuoteCollection,
  QuoteComment,
  ShippingRate,
} from '../models';
import {
    FulfillmentInfoFromJSON,
    FulfillmentInfoToJSON,
    OrderItemFromJSON,
    OrderItemToJSON,
    QuoteFromJSON,
    QuoteToJSON,
    QuoteAdjustmentFromJSON,
    QuoteAdjustmentToJSON,
    QuoteCollectionFromJSON,
    QuoteCollectionToJSON,
    QuoteCommentFromJSON,
    QuoteCommentToJSON,
    ShippingRateFromJSON,
    ShippingRateToJSON,
} from '../models';

export interface QuoteApiAddItemToQuoteRequest {
    quoteId: string;
    updateMode?: string;
    orderItem?: OrderItem;
}

export interface QuoteApiApplyCouponRequest {
    quoteId: string;
    couponCode: string;
    updateMode?: string;
}

export interface QuoteApiCopyQuoteRequest {
    quoteId: string;
}

export interface QuoteApiCreateRequest {
    quoteId: string;
    updateMode?: string;
    quoteComment?: QuoteComment;
}

export interface QuoteApiCreateQuoteRequest {
    quote?: Quote;
}

export interface QuoteApiCreateQuoteFromCartRequest {
    cartId: string;
    updateMode?: string;
}

export interface QuoteApiDeleteQuoteRequest {
    quoteId: string;
    draft?: boolean;
}

export interface QuoteApiDeleteQuoteItemRequest {
    quoteId: string;
    quoteItemId: string;
    updateMode?: string;
}

export interface QuoteApiGetRequest {
    quoteId: string;
    commentId: string;
    draft?: boolean;
}

export interface QuoteApiGetAllRequest {
    quoteId: string;
}

export interface QuoteApiGetAvailableShippingMethodsRequest {
    quoteId: string;
    draft?: boolean;
}

export interface QuoteApiGetQuoteRequest {
    quoteId: string;
    draft?: boolean;
}

export interface QuoteApiGetQuoteByNameRequest {
    customerAccountId: number;
    quoteName: string;
    draft?: boolean;
}

export interface QuoteApiGetQuoteItemRequest {
    quoteId: string;
    quoteItemId: string;
    draft?: boolean;
}

export interface QuoteApiGetQuoteItemsRequest {
    quoteId: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface QuoteApiGetQuoteItemsByQuoteNameRequest {
    customerAccountId: number;
    quoteName: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface QuoteApiGetQuotesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
}

export interface QuoteApiRemoveCouponRequest {
    quoteId: string;
    couponCode: string;
    updateMode?: string;
}

export interface QuoteApiRemoveCouponsRequest {
    quoteId: string;
    updateMode?: string;
}

export interface QuoteApiSendQuoteEmailRequest {
    quoteId: string;
    requestBody?: Array<string>;
}

export interface QuoteApiUpdateFulfillmentInfoRequest {
    quoteId: string;
    updateMode?: string;
    fulfillmentInfo?: FulfillmentInfo;
}

export interface QuoteApiUpdateItemFulfillmentRequest {
    quoteId: string;
    quoteItemId: string;
    updateMode?: string;
    orderItem?: OrderItem;
}

export interface QuoteApiUpdateItemProductPriceRequest {
    quoteId: string;
    quoteItemId: string;
    price: number;
    updateMode?: string;
}

export interface QuoteApiUpdateItemQuantityRequest {
    quoteId: string;
    quoteItemId: string;
    quantity: number;
    updateMode?: string;
}

export interface QuoteApiUpdateQuoteRequest {
    quoteId: string;
    updateMode?: string;
    quote?: Quote;
}

export interface QuoteApiUpdateQuoteAdjustmentsRequest {
    quoteId: string;
    updateMode?: string;
    quoteAdjustment?: QuoteAdjustment;
}

/**
 * 
 */
export class QuoteApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds an item to the Quote of the current shopper.
     * Add Item To Quote
     */


    async addItemToQuoteRaw(requestParameters: QuoteApiAddItemToQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling addItemToQuote.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters.orderItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Adds an item to the Quote of the current shopper.
     * Add Item To Quote
     */
    async addItemToQuote(requestParameters: QuoteApiAddItemToQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.addItemToQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a coupon to the quote.
     * Apply Coupon
     */


    async applyCouponRaw(requestParameters: QuoteApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling applyCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling applyCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/coupons/{couponCode}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Apply a coupon to the quote.
     * Apply Coupon
     */
    async applyCoupon(requestParameters: QuoteApiApplyCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.applyCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copies a source quote and creates a new quote.
     * Copy quote
     */


    async copyQuoteRaw(requestParameters: QuoteApiCopyQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling copyQuote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/copy`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Copies a source quote and creates a new quote.
     * Copy quote
     */
    async copyQuote(requestParameters: QuoteApiCopyQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.copyQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a comment on a specific quote.
     * Create Comment
     */


    async createRaw(requestParameters: QuoteApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteComment>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/comments`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteCommentToJSON(requestParameters.quoteComment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteCommentFromJSON(jsonValue));
    }

    /**
     * Create a comment on a specific quote.
     * Create Comment
     */
    async create(requestParameters: QuoteApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteComment> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.
     * Create quote
     */


    async createQuoteRaw(requestParameters: QuoteApiCreateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteToJSON(requestParameters.quote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Creates a new B2B quote. With quotes, buyers can request an estimate based on a list of products they are interested in. Sellers can evaluate these requests and make adjustments to pricing, discounts, or other criteria before the buyer chooses whether to place the order or not. Comments can be left on the quote to communicate during this negotiation process.
     * Create quote
     */
    async createQuote(requestParameters: QuoteApiCreateQuoteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.createQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.
     * Create Quote From Cart
     */


    async createQuoteFromCartRaw(requestParameters: QuoteApiCreateQuoteFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling createQuoteFromCart.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/create/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Creates a new quote from an existing cart, that is, when the customer chooses to initate quote.
     * Create Quote From Cart
     */
    async createQuoteFromCart(requestParameters: QuoteApiCreateQuoteFromCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.createQuoteFromCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the quote specified by quote Id.
     * Delete Quote
     */


    async deleteQuoteRaw(requestParameters: QuoteApiDeleteQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling deleteQuote.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the quote specified by quote Id.
     * Delete Quote
     */
    async deleteQuote(requestParameters: QuoteApiDeleteQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuoteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Quote Item
     * Delete Quote Item
     */


    async deleteQuoteItemRaw(requestParameters: QuoteApiDeleteQuoteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling deleteQuoteItem.');
        }

        if (requestParameters.quoteItemId === null || requestParameters.quoteItemId === undefined) {
            throw new runtime.RequiredError('quoteItemId','Required parameter requestParameters.quoteItemId was null or undefined when calling deleteQuoteItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items/{quoteItemId}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"quoteItemId"}}`, encodeURIComponent(String(requestParameters.quoteItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Quote Item
     * Delete Quote Item
     */
    async deleteQuoteItem(requestParameters: QuoteApiDeleteQuoteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteQuoteItemRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific quote comment from an quote.
     * Get Quote Comment
     */


    async getRaw(requestParameters: QuoteApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteComment>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling get.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/comments/{commentId}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteCommentFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific quote comment from an quote.
     * Get Quote Comment
     */
    async get(requestParameters: QuoteApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteComment> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all quote comments from an quote.
     * Get All Quote Comments
     */


    async getAllRaw(requestParameters: QuoteApiGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteComment>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling getAll.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/comments`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteCommentFromJSON(jsonValue));
    }

    /**
     * Retrieves all quote comments from an quote.
     * Get All Quote Comments
     */
    async getAll(requestParameters: QuoteApiGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteComment> {
        const response = await this.getAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.
     * Get Available Shipping Methods
     */


    async getAvailableShippingMethodsRaw(requestParameters: QuoteApiGetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingRate>>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling getAvailableShippingMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/shippingMethods`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingRateFromJSON));
    }

    /**
     * Retrieves available shipping methods for quotes. Typically used to display available shipping method options on the quote page.
     * Get Available Shipping Methods
     */
    async getAvailableShippingMethods(requestParameters: QuoteApiGetAvailableShippingMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingRate>> {
        const response = await this.getAvailableShippingMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a quote specified by the quote ID.
     * Get Quote
     */


    async getQuoteRaw(requestParameters: QuoteApiGetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling getQuote.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a quote specified by the quote ID.
     * Get Quote
     */
    async getQuote(requestParameters: QuoteApiGetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.getQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves quote by its name.
     * Get Quote By Name
     */


    async getQuoteByNameRaw(requestParameters: QuoteApiGetQuoteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.customerAccountId === null || requestParameters.customerAccountId === undefined) {
            throw new runtime.RequiredError('customerAccountId','Required parameter requestParameters.customerAccountId was null or undefined when calling getQuoteByName.');
        }

        if (requestParameters.quoteName === null || requestParameters.quoteName === undefined) {
            throw new runtime.RequiredError('quoteName','Required parameter requestParameters.quoteName was null or undefined when calling getQuoteByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/customers/{customerAccountId}/{quoteName}`.replace(`{${"customerAccountId"}}`, encodeURIComponent(String(requestParameters.customerAccountId))).replace(`{${"quoteName"}}`, encodeURIComponent(String(requestParameters.quoteName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Retrieves quote by its name.
     * Get Quote By Name
     */
    async getQuoteByName(requestParameters: QuoteApiGetQuoteByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.getQuoteByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.
     * Get Quote Item
     */


    async getQuoteItemRaw(requestParameters: QuoteApiGetQuoteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling getQuoteItem.');
        }

        if (requestParameters.quoteItemId === null || requestParameters.quoteItemId === undefined) {
            throw new runtime.RequiredError('quoteItemId','Required parameter requestParameters.quoteItemId was null or undefined when calling getQuoteItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.draft !== undefined) {
            queryParameters['draft'] = requestParameters.draft;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items/{quoteItemId}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"quoteItemId"}}`, encodeURIComponent(String(requestParameters.quoteItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     * Retrieves an individual Quote item from a Quote specified by quote Id and quote item Id.
     * Get Quote Item
     */
    async getQuoteItem(requestParameters: QuoteApiGetQuoteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.getQuoteItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a listing of Quotes
     * Get Quote Items
     */


    async getQuoteItemsRaw(requestParameters: QuoteApiGetQuoteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderItem>>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling getQuoteItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderItemFromJSON));
    }

    /**
     * Returns a listing of Quotes
     * Get Quote Items
     */
    async getQuoteItems(requestParameters: QuoteApiGetQuoteItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderItem>> {
        const response = await this.getQuoteItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the quote specified by the quote name.
     * Get Quote Items By Quote Name
     */


    async getQuoteItemsByQuoteNameRaw(requestParameters: QuoteApiGetQuoteItemsByQuoteNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderItem>>> {
        if (requestParameters.customerAccountId === null || requestParameters.customerAccountId === undefined) {
            throw new runtime.RequiredError('customerAccountId','Required parameter requestParameters.customerAccountId was null or undefined when calling getQuoteItemsByQuoteName.');
        }

        if (requestParameters.quoteName === null || requestParameters.quoteName === undefined) {
            throw new runtime.RequiredError('quoteName','Required parameter requestParameters.quoteName was null or undefined when calling getQuoteItemsByQuoteName.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/customers/{customerAccountId}/{quoteName}/items`.replace(`{${"customerAccountId"}}`, encodeURIComponent(String(requestParameters.customerAccountId))).replace(`{${"quoteName"}}`, encodeURIComponent(String(requestParameters.quoteName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderItemFromJSON));
    }

    /**
     * Gets the quote specified by the quote name.
     * Get Quote Items By Quote Name
     */
    async getQuoteItemsByQuoteName(requestParameters: QuoteApiGetQuoteItemsByQuoteNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderItem>> {
        const response = await this.getQuoteItemsByQuoteNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.
     * Get Quotes
     */


    async getQuotesRaw(requestParameters: QuoteApiGetQuotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of B2B Quotes according to any specified filter criteria and sort options.
     * Get Quotes
     */
    async getQuotes(requestParameters: QuoteApiGetQuotesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteCollection> {
        const response = await this.getQuotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a coupon that had been previously applied to the Quote.
     * Remove Coupon
     */


    async removeCouponRaw(requestParameters: QuoteApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling removeCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling removeCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/coupons/{couponCode}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Removes a coupon that had been previously applied to the Quote.
     * Remove Coupon
     */
    async removeCoupon(requestParameters: QuoteApiRemoveCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.removeCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all coupons that had been previously applied to the Quote.
     * Remove Coupons
     */


    async removeCouponsRaw(requestParameters: QuoteApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/coupons`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Removes all coupons that had been previously applied to the Quote.
     * Remove Coupons
     */
    async removeCoupons(requestParameters: QuoteApiRemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send Quote email to provided email addresses or email mentioned on the quote.
     * Send Quote Email
     */


    async sendQuoteEmailRaw(requestParameters: QuoteApiSendQuoteEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling sendQuoteEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/email`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send Quote email to provided email addresses or email mentioned on the quote.
     * Send Quote Email
     */
    async sendQuoteEmail(requestParameters: QuoteApiSendQuoteEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendQuoteEmailRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the fulfillmentInfo of quote.
     * Update Fulfillment Info
     */


    async updateFulfillmentInfoRaw(requestParameters: QuoteApiUpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling updateFulfillmentInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/fulfillmentInfo`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FulfillmentInfoToJSON(requestParameters.fulfillmentInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Updates the fulfillmentInfo of quote.
     * Update Fulfillment Info
     */
    async updateFulfillmentInfo(requestParameters: QuoteApiUpdateFulfillmentInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateFulfillmentInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the fulfillment method and/or location of an individual quote item in the quote.
     * Update Item Fulfillment
     */


    async updateItemFulfillmentRaw(requestParameters: QuoteApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling updateItemFulfillment.');
        }

        if (requestParameters.quoteItemId === null || requestParameters.quoteItemId === undefined) {
            throw new runtime.RequiredError('quoteItemId','Required parameter requestParameters.quoteItemId was null or undefined when calling updateItemFulfillment.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items/{quoteItemId}/fulfillment`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"quoteItemId"}}`, encodeURIComponent(String(requestParameters.quoteItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters.orderItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Updates the fulfillment method and/or location of an individual quote item in the quote.
     * Update Item Fulfillment
     */
    async updateItemFulfillment(requestParameters: QuoteApiUpdateItemFulfillmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateItemFulfillmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Overrides the price of an individual quote item.
     * Update Item Product Price
     */


    async updateItemProductPriceRaw(requestParameters: QuoteApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling updateItemProductPrice.');
        }

        if (requestParameters.quoteItemId === null || requestParameters.quoteItemId === undefined) {
            throw new runtime.RequiredError('quoteItemId','Required parameter requestParameters.quoteItemId was null or undefined when calling updateItemProductPrice.');
        }

        if (requestParameters.price === null || requestParameters.price === undefined) {
            throw new runtime.RequiredError('price','Required parameter requestParameters.price was null or undefined when calling updateItemProductPrice.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items/{quoteItemId}/price/{price}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"quoteItemId"}}`, encodeURIComponent(String(requestParameters.quoteItemId))).replace(`{${"price"}}`, encodeURIComponent(String(requestParameters.price))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Overrides the price of an individual quote item.
     * Update Item Product Price
     */
    async updateItemProductPrice(requestParameters: QuoteApiUpdateItemProductPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateItemProductPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the quantity of an individual Quote item.
     * Update Item Quantity
     */


    async updateItemQuantityRaw(requestParameters: QuoteApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quoteItemId === null || requestParameters.quoteItemId === undefined) {
            throw new runtime.RequiredError('quoteItemId','Required parameter requestParameters.quoteItemId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/items/{quoteItemId}/quantity/{quantity}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))).replace(`{${"quoteItemId"}}`, encodeURIComponent(String(requestParameters.quoteItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Updates the quantity of an individual Quote item.
     * Update Item Quantity
     */
    async updateItemQuantity(requestParameters: QuoteApiUpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a quote specified by quote Id.
     * Update Quote
     */


    async updateQuoteRaw(requestParameters: QuoteApiUpdateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling updateQuote.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteToJSON(requestParameters.quote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Updates a quote specified by quote Id.
     * Update Quote
     */
    async updateQuote(requestParameters: QuoteApiUpdateQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set product, shipping, and handling adjustments on the specified quote.
     * Update Quote Adjustments
     */


    async updateQuoteAdjustmentsRaw(requestParameters: QuoteApiUpdateQuoteAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters.quoteId === null || requestParameters.quoteId === undefined) {
            throw new runtime.RequiredError('quoteId','Required parameter requestParameters.quoteId was null or undefined when calling updateQuoteAdjustments.');
        }

        const queryParameters: any = {};

        if (requestParameters.updateMode !== undefined) {
            queryParameters['updateMode'] = requestParameters.updateMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/quotes/{quoteId}/adjustments`.replace(`{${"quoteId"}}`, encodeURIComponent(String(requestParameters.quoteId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteAdjustmentToJSON(requestParameters.quoteAdjustment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     * Set product, shipping, and handling adjustments on the specified quote.
     * Update Quote Adjustments
     */
    async updateQuoteAdjustments(requestParameters: QuoteApiUpdateQuoteAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.updateQuoteAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
