/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Wishlist,
  WishlistCollection,
  WishlistItem,
  WishlistItemCollection,
} from '../models';

export interface AddItemToWishlistRequest {
    wishlistId: string;
    responseFields?: string;
    wishlistItem?: WishlistItem;
}

export interface CreateWishlistRequest {
    responseFields?: string;
    wishlist?: Wishlist;
}

export interface DeleteWishlistRequest {
    wishlistId: string;
}

export interface DeleteWishlistItemRequest {
    wishlistId: string;
    wishlistItemId: string;
}

export interface GetWishlistRequest {
    wishlistId: string;
    responseFields?: string;
}

export interface GetWishlistByNameRequest {
    customerAccountId: number;
    wishlistName: string;
    responseFields?: string;
}

export interface GetWishlistItemRequest {
    wishlistId: string;
    wishlistItemId: string;
    responseFields?: string;
}

export interface GetWishlistItemsRequest {
    wishlistId: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface GetWishlistItemsByWishlistNameRequest {
    customerAccountId: number;
    wishlistName: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface GetWishlistsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
    responseFields?: string;
}

export interface RemoveAllWishlistItemsRequest {
    wishlistId: string;
}

export interface UpdateWishlistRequest {
    wishlistId: string;
    responseFields?: string;
    wishlist?: Wishlist;
}

export interface UpdateWishlistItemRequest {
    wishlistId: string;
    wishlistItemId: string;
    responseFields?: string;
    wishlistItem?: WishlistItem;
}

export interface UpdateWishlistItemQuantityRequest {
    wishlistId: string;
    wishlistItemId: string;
    quantity: number;
    responseFields?: string;
}

/**
 * WishlistApi - interface
 * 
 * @export
 * @interface WishlistApiInterface
 */
export interface WishlistApiInterface {
    /**
     * Adds an item to the wishlist of the current shopper.
     * @summary Add Item To Wishlist
     * @param {string} wishlistId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {WishlistItem} [wishlistItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    addItemToWishlistRaw(requestParameters: AddItemToWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>>;

    /**
     * Adds an item to the wishlist of the current shopper.
     * Add Item To Wishlist
     */
    addItemToWishlist(requestParameters: AddItemToWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem>;

    /**
     * Create wishlist.
     * @summary Create Wishlist
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Wishlist} [wishlist] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    createWishlistRaw(requestParameters: CreateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>>;

    /**
     * Create wishlist.
     * Create Wishlist
     */
    createWishlist(requestParameters: CreateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist>;

    /**
     * Deletes a wishlist specified by wishlist Id.
     * @summary Deletes Wishlist
     * @param {string} wishlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    deleteWishlistRaw(requestParameters: DeleteWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a wishlist specified by wishlist Id.
     * Deletes Wishlist
     */
    deleteWishlist(requestParameters: DeleteWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete/remove wishlist item.
     * @summary Delete Wishlist Item
     * @param {string} wishlistId 
     * @param {string} wishlistItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    deleteWishlistItemRaw(requestParameters: DeleteWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete/remove wishlist item.
     * Delete Wishlist Item
     */
    deleteWishlistItem(requestParameters: DeleteWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * @summary Get Wishlist
     * @param {string} wishlistId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    getWishlistRaw(requestParameters: GetWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>>;

    /**
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * Get Wishlist
     */
    getWishlist(requestParameters: GetWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist>;

    /**
     * Retrieves wishlist by name.
     * @summary Get Wishlist By Name
     * @param {number} customerAccountId 
     * @param {string} wishlistName 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    getWishlistByNameRaw(requestParameters: GetWishlistByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>>;

    /**
     * Retrieves wishlist by name.
     * Get Wishlist By Name
     */
    getWishlistByName(requestParameters: GetWishlistByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist>;

    /**
     * Retrieves an individual wishlist item from a wishlist.
     * @summary Get Wishlist Item
     * @param {string} wishlistId 
     * @param {string} wishlistItemId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    getWishlistItemRaw(requestParameters: GetWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>>;

    /**
     * Retrieves an individual wishlist item from a wishlist.
     * Get Wishlist Item
     */
    getWishlistItem(requestParameters: GetWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem>;

    /**
     * Returns a listing of wishlists.
     * @summary Get Wishlist Items
     * @param {string} wishlistId 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    getWishlistItemsRaw(requestParameters: GetWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItemCollection>>;

    /**
     * Returns a listing of wishlists.
     * Get Wishlist Items
     */
    getWishlistItems(requestParameters: GetWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItemCollection>;

    /**
     * Returns a listing of wishlists.
     * @summary Get Wishlist Items By WishlistName
     * @param {number} customerAccountId 
     * @param {string} wishlistName 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    getWishlistItemsByWishlistNameRaw(requestParameters: GetWishlistItemsByWishlistNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItemCollection>>;

    /**
     * Returns a listing of wishlists.
     * Get Wishlist Items By WishlistName
     */
    getWishlistItemsByWishlistName(requestParameters: GetWishlistItemsByWishlistNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItemCollection>;

    /**
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * @summary Get Wishlists
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin.               For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals,               gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [q] Text to perform a search on
     * @param {number} [qLimit] Limit of the records to include in a search, used for global search
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    getWishlistsRaw(requestParameters: GetWishlistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistCollection>>;

    /**
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * Get Wishlists
     */
    getWishlists(requestParameters: GetWishlistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistCollection>;

    /**
     * Clears all items in the wishlist.
     * @summary Remove All Wishlist Items
     * @param {string} wishlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    removeAllWishlistItemsRaw(requestParameters: RemoveAllWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>>;

    /**
     * Clears all items in the wishlist.
     * Remove All Wishlist Items
     */
    removeAllWishlistItems(requestParameters: RemoveAllWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist>;

    /**
     * Updates a wishlist specified by wishlist Id.
     * @summary Update Wishlist
     * @param {string} wishlistId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Wishlist} [wishlist] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    updateWishlistRaw(requestParameters: UpdateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>>;

    /**
     * Updates a wishlist specified by wishlist Id.
     * Update Wishlist
     */
    updateWishlist(requestParameters: UpdateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist>;

    /**
     * Updates a wishlist item.
     * @summary Update Wishlist Item
     * @param {string} wishlistId 
     * @param {string} wishlistItemId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {WishlistItem} [wishlistItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    updateWishlistItemRaw(requestParameters: UpdateWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>>;

    /**
     * Updates a wishlist item.
     * Update Wishlist Item
     */
    updateWishlistItem(requestParameters: UpdateWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem>;

    /**
     * Updates the quantity of an item in the wishlist.
     * @summary Update Wishlist Item Quantity
     * @param {string} wishlistId 
     * @param {string} wishlistItemId 
     * @param {number} quantity 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApiInterface
     */
    updateWishlistItemQuantityRaw(requestParameters: UpdateWishlistItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>>;

    /**
     * Updates the quantity of an item in the wishlist.
     * Update Wishlist Item Quantity
     */
    updateWishlistItemQuantity(requestParameters: UpdateWishlistItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem>;

}

/**
 * 
 */
export class WishlistApi extends runtime.BaseAPI implements WishlistApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds an item to the wishlist of the current shopper.
     * Add Item To Wishlist
     */


    async addItemToWishlistRaw(requestParameters: AddItemToWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling addItemToWishlist.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wishlistItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds an item to the wishlist of the current shopper.
     * Add Item To Wishlist
     */
    async addItemToWishlist(requestParameters: AddItemToWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem> {
        const response = await this.addItemToWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create wishlist.
     * Create Wishlist
     */


    async createWishlistRaw(requestParameters: CreateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wishlist,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create wishlist.
     * Create Wishlist
     */
    async createWishlist(requestParameters: CreateWishlistRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist> {
        const response = await this.createWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a wishlist specified by wishlist Id.
     * Deletes Wishlist
     */


    async deleteWishlistRaw(requestParameters: DeleteWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling deleteWishlist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a wishlist specified by wishlist Id.
     * Deletes Wishlist
     */
    async deleteWishlist(requestParameters: DeleteWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWishlistRaw(requestParameters, initOverrides);
    }

    /**
     * Delete/remove wishlist item.
     * Delete Wishlist Item
     */


    async deleteWishlistItemRaw(requestParameters: DeleteWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling deleteWishlistItem.');
        }

        if (requestParameters.wishlistItemId === null || requestParameters.wishlistItemId === undefined) {
            throw new runtime.RequiredError('wishlistItemId','Required parameter requestParameters.wishlistItemId was null or undefined when calling deleteWishlistItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items/{wishlistItemId}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))).replace(`{${"wishlistItemId"}}`, encodeURIComponent(String(requestParameters.wishlistItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete/remove wishlist item.
     * Delete Wishlist Item
     */
    async deleteWishlistItem(requestParameters: DeleteWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWishlistItemRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * Get Wishlist
     */


    async getWishlistRaw(requestParameters: GetWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling getWishlist.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a wishlist specified by the wishlist ID.
     * Get Wishlist
     */
    async getWishlist(requestParameters: GetWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist> {
        const response = await this.getWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves wishlist by name.
     * Get Wishlist By Name
     */


    async getWishlistByNameRaw(requestParameters: GetWishlistByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>> {
        if (requestParameters.customerAccountId === null || requestParameters.customerAccountId === undefined) {
            throw new runtime.RequiredError('customerAccountId','Required parameter requestParameters.customerAccountId was null or undefined when calling getWishlistByName.');
        }

        if (requestParameters.wishlistName === null || requestParameters.wishlistName === undefined) {
            throw new runtime.RequiredError('wishlistName','Required parameter requestParameters.wishlistName was null or undefined when calling getWishlistByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/customers/{customerAccountId}/{wishlistName}`.replace(`{${"customerAccountId"}}`, encodeURIComponent(String(requestParameters.customerAccountId))).replace(`{${"wishlistName"}}`, encodeURIComponent(String(requestParameters.wishlistName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves wishlist by name.
     * Get Wishlist By Name
     */
    async getWishlistByName(requestParameters: GetWishlistByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist> {
        const response = await this.getWishlistByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves an individual wishlist item from a wishlist.
     * Get Wishlist Item
     */


    async getWishlistItemRaw(requestParameters: GetWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling getWishlistItem.');
        }

        if (requestParameters.wishlistItemId === null || requestParameters.wishlistItemId === undefined) {
            throw new runtime.RequiredError('wishlistItemId','Required parameter requestParameters.wishlistItemId was null or undefined when calling getWishlistItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items/{wishlistItemId}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))).replace(`{${"wishlistItemId"}}`, encodeURIComponent(String(requestParameters.wishlistItemId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves an individual wishlist item from a wishlist.
     * Get Wishlist Item
     */
    async getWishlistItem(requestParameters: GetWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem> {
        const response = await this.getWishlistItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a listing of wishlists.
     * Get Wishlist Items
     */


    async getWishlistItemsRaw(requestParameters: GetWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItemCollection>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling getWishlistItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a listing of wishlists.
     * Get Wishlist Items
     */
    async getWishlistItems(requestParameters: GetWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItemCollection> {
        const response = await this.getWishlistItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a listing of wishlists.
     * Get Wishlist Items By WishlistName
     */


    async getWishlistItemsByWishlistNameRaw(requestParameters: GetWishlistItemsByWishlistNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItemCollection>> {
        if (requestParameters.customerAccountId === null || requestParameters.customerAccountId === undefined) {
            throw new runtime.RequiredError('customerAccountId','Required parameter requestParameters.customerAccountId was null or undefined when calling getWishlistItemsByWishlistName.');
        }

        if (requestParameters.wishlistName === null || requestParameters.wishlistName === undefined) {
            throw new runtime.RequiredError('wishlistName','Required parameter requestParameters.wishlistName was null or undefined when calling getWishlistItemsByWishlistName.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/customers/{customerAccountId}/{wishlistName}/items`.replace(`{${"customerAccountId"}}`, encodeURIComponent(String(requestParameters.customerAccountId))).replace(`{${"wishlistName"}}`, encodeURIComponent(String(requestParameters.wishlistName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a listing of wishlists.
     * Get Wishlist Items By WishlistName
     */
    async getWishlistItemsByWishlistName(requestParameters: GetWishlistItemsByWishlistNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItemCollection> {
        const response = await this.getWishlistItemsByWishlistNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * Get Wishlists
     */


    async getWishlistsRaw(requestParameters: GetWishlistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of wishlists according to any specified filter criteria and sort options.
     * Get Wishlists
     */
    async getWishlists(requestParameters: GetWishlistsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistCollection> {
        const response = await this.getWishlistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clears all items in the wishlist.
     * Remove All Wishlist Items
     */


    async removeAllWishlistItemsRaw(requestParameters: RemoveAllWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling removeAllWishlistItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Clears all items in the wishlist.
     * Remove All Wishlist Items
     */
    async removeAllWishlistItems(requestParameters: RemoveAllWishlistItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist> {
        const response = await this.removeAllWishlistItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a wishlist specified by wishlist Id.
     * Update Wishlist
     */


    async updateWishlistRaw(requestParameters: UpdateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Wishlist>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling updateWishlist.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wishlist,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a wishlist specified by wishlist Id.
     * Update Wishlist
     */
    async updateWishlist(requestParameters: UpdateWishlistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Wishlist> {
        const response = await this.updateWishlistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a wishlist item.
     * Update Wishlist Item
     */


    async updateWishlistItemRaw(requestParameters: UpdateWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling updateWishlistItem.');
        }

        if (requestParameters.wishlistItemId === null || requestParameters.wishlistItemId === undefined) {
            throw new runtime.RequiredError('wishlistItemId','Required parameter requestParameters.wishlistItemId was null or undefined when calling updateWishlistItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items/{wishlistItemId}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))).replace(`{${"wishlistItemId"}}`, encodeURIComponent(String(requestParameters.wishlistItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.wishlistItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a wishlist item.
     * Update Wishlist Item
     */
    async updateWishlistItem(requestParameters: UpdateWishlistItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem> {
        const response = await this.updateWishlistItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the quantity of an item in the wishlist.
     * Update Wishlist Item Quantity
     */


    async updateWishlistItemQuantityRaw(requestParameters: UpdateWishlistItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WishlistItem>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling updateWishlistItemQuantity.');
        }

        if (requestParameters.wishlistItemId === null || requestParameters.wishlistItemId === undefined) {
            throw new runtime.RequiredError('wishlistItemId','Required parameter requestParameters.wishlistItemId was null or undefined when calling updateWishlistItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateWishlistItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/wishlists/{wishlistId}/items/{wishlistItemId}/{quantity}`.replace(`{${"wishlistId"}}`, encodeURIComponent(String(requestParameters.wishlistId))).replace(`{${"wishlistItemId"}}`, encodeURIComponent(String(requestParameters.wishlistItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the quantity of an item in the wishlist.
     * Update Wishlist Item Quantity
     */
    async updateWishlistItemQuantity(requestParameters: UpdateWishlistItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WishlistItem> {
        const response = await this.updateWishlistItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
