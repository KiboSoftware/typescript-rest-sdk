/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BillingInfo } from './BillingInfo';
import {
    BillingInfoFromJSON,
    BillingInfoFromJSONTyped,
    BillingInfoToJSON,
} from './BillingInfo';
import type { PaymentGatewayInteraction } from './PaymentGatewayInteraction';
import {
    PaymentGatewayInteractionFromJSON,
    PaymentGatewayInteractionFromJSONTyped,
    PaymentGatewayInteractionToJSON,
} from './PaymentGatewayInteraction';

/**
 * 
 * @export
 * @interface PaymentAction
 */
export interface PaymentAction {
    /**
     * Name of the Action to post
     * @type {string}
     * @memberof PaymentAction
     */
    actionName?: string | null;
    /**
     * ISO currency code for the transaction. Currently, only USD is supported.
     * @type {string}
     * @memberof PaymentAction
     */
    currencyCode?: string | null;
    /**
     * If paying by check, the check number.
     * @type {string}
     * @memberof PaymentAction
     */
    checkNumber?: string | null;
    /**
     * If paying by Paypal Express or some other potential non-gateway payment provider, a return redirect URL must be provided.
     * @type {string}
     * @memberof PaymentAction
     */
    returnUrl?: string | null;
    /**
     * If paying by Paypal Express or some other potential non-gateway payment provider, a cancel redirect URL must be provided.
     * This will be used if something goes wrong on the third-party side.
     * @type {string}
     * @memberof PaymentAction
     */
    cancelUrl?: string | null;
    /**
     * Amount of funds to withdraw to pay for this order.
     * @type {number}
     * @memberof PaymentAction
     */
    amount?: number | null;
    /**
     * Date the interaction occurred
     * @type {Date}
     * @memberof PaymentAction
     */
    interactionDate?: Date | null;
    /**
     * 
     * @type {BillingInfo}
     * @memberof PaymentAction
     */
    newBillingInfo?: BillingInfo;
    /**
     * Reference payment id from which to copy the billing info.
     * @type {string}
     * @memberof PaymentAction
     */
    referenceSourcePaymentId?: string | null;
    /**
     * 
     * @type {PaymentGatewayInteraction}
     * @memberof PaymentAction
     */
    manualGatewayInteraction?: PaymentGatewayInteraction;
    /**
     * 
     * @type {string}
     * @memberof PaymentAction
     */
    externalTransactionId?: string | null;
    /**
     * Custom data from payment providers
     * @type {object}
     * @memberof PaymentAction
     */
    data?: object | null;
    /**
     * Recaptcha for validation.
     * @type {string}
     * @memberof PaymentAction
     */
    recaptcha?: string | null;
}

/**
 * Check if a given object implements the PaymentAction interface.
 */
export function instanceOfPaymentAction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentActionFromJSON(json: any): PaymentAction {
    return PaymentActionFromJSONTyped(json, false);
}

export function PaymentActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionName': !exists(json, 'actionName') ? undefined : json['actionName'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'checkNumber': !exists(json, 'checkNumber') ? undefined : json['checkNumber'],
        'returnUrl': !exists(json, 'returnUrl') ? undefined : json['returnUrl'],
        'cancelUrl': !exists(json, 'cancelUrl') ? undefined : json['cancelUrl'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'interactionDate': !exists(json, 'interactionDate') ? undefined : (json['interactionDate'] === null ? null : new Date(json['interactionDate'])),
        'newBillingInfo': !exists(json, 'newBillingInfo') ? undefined : BillingInfoFromJSON(json['newBillingInfo']),
        'referenceSourcePaymentId': !exists(json, 'referenceSourcePaymentId') ? undefined : json['referenceSourcePaymentId'],
        'manualGatewayInteraction': !exists(json, 'manualGatewayInteraction') ? undefined : PaymentGatewayInteractionFromJSON(json['manualGatewayInteraction']),
        'externalTransactionId': !exists(json, 'externalTransactionId') ? undefined : json['externalTransactionId'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'recaptcha': !exists(json, 'recaptcha') ? undefined : json['recaptcha'],
    };
}

export function PaymentActionToJSON(value?: PaymentAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionName': value.actionName,
        'currencyCode': value.currencyCode,
        'checkNumber': value.checkNumber,
        'returnUrl': value.returnUrl,
        'cancelUrl': value.cancelUrl,
        'amount': value.amount,
        'interactionDate': value.interactionDate === undefined ? undefined : (value.interactionDate === null ? null : value.interactionDate.toISOString()),
        'newBillingInfo': BillingInfoToJSON(value.newBillingInfo),
        'referenceSourcePaymentId': value.referenceSourcePaymentId,
        'manualGatewayInteraction': PaymentGatewayInteractionToJSON(value.manualGatewayInteraction),
        'externalTransactionId': value.externalTransactionId,
        'data': value.data,
        'recaptcha': value.recaptcha,
    };
}

