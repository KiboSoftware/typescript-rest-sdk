/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RefundPaymentAction
 */
export interface RefundPaymentAction {
    /**
     * 
     * @type {string}
     * @memberof RefundPaymentAction
     */
    paymentId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefundPaymentAction
     */
    paymentType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RefundPaymentAction
     */
    paymentSource?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RefundPaymentAction
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundPaymentAction
     */
    amountCollected?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundPaymentAction
     */
    amountRefunded?: number;
}

/**
 * Check if a given object implements the RefundPaymentAction interface.
 */
export function instanceOfRefundPaymentAction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RefundPaymentActionFromJSON(json: any): RefundPaymentAction {
    return RefundPaymentActionFromJSONTyped(json, false);
}

export function RefundPaymentActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundPaymentAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'paymentId': !exists(json, 'paymentId') ? undefined : json['paymentId'],
        'paymentType': !exists(json, 'paymentType') ? undefined : json['paymentType'],
        'paymentSource': !exists(json, 'paymentSource') ? undefined : json['paymentSource'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'amountCollected': !exists(json, 'amountCollected') ? undefined : json['amountCollected'],
        'amountRefunded': !exists(json, 'amountRefunded') ? undefined : json['amountRefunded'],
    };
}

export function RefundPaymentActionToJSON(value?: RefundPaymentAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'paymentId': value.paymentId,
        'paymentType': value.paymentType,
        'paymentSource': value.paymentSource,
        'amount': value.amount,
        'amountCollected': value.amountCollected,
        'amountRefunded': value.amountRefunded,
    };
}

