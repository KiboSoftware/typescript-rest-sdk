/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditRecordChangeField } from './AuditRecordChangeField';
import {
    AuditRecordChangeFieldFromJSON,
    AuditRecordChangeFieldFromJSONTyped,
    AuditRecordChangeFieldToJSON,
} from './AuditRecordChangeField';

/**
 * Group all related audit changes into AuditRecordChange.
 * @export
 * @interface AuditRecordChange
 */
export interface AuditRecordChange {
    /**
     * Indicate type of change like Add, Update, Remove.
     * @type {string}
     * @memberof AuditRecordChange
     */
    type?: string | null;
    /**
     * This will applicable only to the nested objects (Collection) on the quote like Quote Items, Destination contacts.
     * This field will indicate which item in the collection got modified exactly.
     * Null path means it's not nested on the quote object.
     * @type {string}
     * @memberof AuditRecordChange
     */
    path?: string | null;
    /**
     * List of actual changes.
     * @type {Array<AuditRecordChangeField>}
     * @memberof AuditRecordChange
     */
    fields?: Array<AuditRecordChangeField> | null;
}

/**
 * Check if a given object implements the AuditRecordChange interface.
 */
export function instanceOfAuditRecordChange(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuditRecordChangeFromJSON(json: any): AuditRecordChange {
    return AuditRecordChangeFromJSONTyped(json, false);
}

export function AuditRecordChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditRecordChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'fields': !exists(json, 'fields') ? undefined : (json['fields'] === null ? null : (json['fields'] as Array<any>).map(AuditRecordChangeFieldFromJSON)),
    };
}

export function AuditRecordChangeToJSON(value?: AuditRecordChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'path': value.path,
        'fields': value.fields === undefined ? undefined : (value.fields === null ? null : (value.fields as Array<any>).map(AuditRecordChangeFieldToJSON)),
    };
}

