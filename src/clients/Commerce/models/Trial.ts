/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductOption } from './ProductOption';
import {
    ProductOptionFromJSON,
    ProductOptionFromJSONTyped,
    ProductOptionToJSON,
} from './ProductOption';

/**
 * 
 * @export
 * @interface Trial
 */
export interface Trial {
    /**
     * Indicates if the trial is enabled
     * @type {boolean}
     * @memberof Trial
     */
    enabled?: boolean;
    /**
     * Trial duration in days
     * @type {number}
     * @memberof Trial
     */
    duration?: number;
    /**
     * Product code to substitute once the trial period is finished.
     * @type {string}
     * @memberof Trial
     */
    substituteProductCode?: string | null;
    /**
     * Product quantity to substitute once the trail period is finished.
     * @type {number}
     * @memberof Trial
     */
    substituteProductQuantity?: number;
    /**
     * Variation product code to substitute once the trail period is finished.
     * @type {string}
     * @memberof Trial
     */
    substituteVariationProductCode?: string | null;
    /**
     * Configurable Options to substitute once the trial period is finished.
     * @type {Array<ProductOption>}
     * @memberof Trial
     */
    substituteProductOptions?: Array<ProductOption> | null;
}

/**
 * Check if a given object implements the Trial interface.
 */
export function instanceOfTrial(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrialFromJSON(json: any): Trial {
    return TrialFromJSONTyped(json, false);
}

export function TrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): Trial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'substituteProductCode': !exists(json, 'substituteProductCode') ? undefined : json['substituteProductCode'],
        'substituteProductQuantity': !exists(json, 'substituteProductQuantity') ? undefined : json['substituteProductQuantity'],
        'substituteVariationProductCode': !exists(json, 'substituteVariationProductCode') ? undefined : json['substituteVariationProductCode'],
        'substituteProductOptions': !exists(json, 'substituteProductOptions') ? undefined : (json['substituteProductOptions'] === null ? null : (json['substituteProductOptions'] as Array<any>).map(ProductOptionFromJSON)),
    };
}

export function TrialToJSON(value?: Trial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enabled': value.enabled,
        'duration': value.duration,
        'substituteProductCode': value.substituteProductCode,
        'substituteProductQuantity': value.substituteProductQuantity,
        'substituteVariationProductCode': value.substituteVariationProductCode,
        'substituteProductOptions': value.substituteProductOptions === undefined ? undefined : (value.substituteProductOptions === null ? null : (value.substituteProductOptions as Array<any>).map(ProductOptionToJSON)),
    };
}

