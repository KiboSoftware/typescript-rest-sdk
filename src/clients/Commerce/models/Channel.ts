/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';

/**
 * Channel used to group sites for commerce purposes.
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * Tenant that owns the channel.
     * @type {number}
     * @memberof Channel
     */
    tenantId?: number;
    /**
     * Code to uniquely identify the channel.
     * @type {string}
     * @memberof Channel
     */
    code?: string | null;
    /**
     * Friendly name of the channel.
     * @type {string}
     * @memberof Channel
     */
    name?: string | null;
    /**
     * Region of the channel.
     * @type {string}
     * @memberof Channel
     */
    region?: string | null;
    /**
     * Country code of the channel.
     * @type {string}
     * @memberof Channel
     */
    countryCode?: string | null;
    /**
     * Code to uniquely identify the channel group, if any that contains this channel.
     * @type {string}
     * @memberof Channel
     */
    groupCode?: string | null;
    /**
     * A list of site Id's that this channel contains.
     * @type {Array<number>}
     * @memberof Channel
     */
    siteIds?: Array<number> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof Channel
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the Channel interface.
 */
export function instanceOfChannel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelFromJSON(json: any): Channel {
    return ChannelFromJSONTyped(json, false);
}

export function ChannelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Channel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'groupCode': !exists(json, 'groupCode') ? undefined : json['groupCode'],
        'siteIds': !exists(json, 'siteIds') ? undefined : json['siteIds'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function ChannelToJSON(value?: Channel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tenantId': value.tenantId,
        'code': value.code,
        'name': value.name,
        'region': value.region,
        'countryCode': value.countryCode,
        'groupCode': value.groupCode,
        'siteIds': value.siteIds,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

