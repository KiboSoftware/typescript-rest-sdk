/* tslint:disable */
/* eslint-disable */
/**
 * Kibo CommerceRuntime Service
 * OpenAPI Spec for Kibo CommerceRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppliedDiscount } from './AppliedDiscount';
import {
    AppliedDiscountFromJSON,
    AppliedDiscountFromJSONTyped,
    AppliedDiscountToJSON,
} from './AppliedDiscount';
import type { ShippingDiscount } from './ShippingDiscount';
import {
    ShippingDiscountFromJSON,
    ShippingDiscountFromJSONTyped,
    ShippingDiscountToJSON,
} from './ShippingDiscount';

/**
 * 
 * @export
 * @interface CheckoutGrouping
 */
export interface CheckoutGrouping {
    /**
     * A unique identifier for this grouping.
     * @type {string}
     * @memberof CheckoutGrouping
     */
    id?: string | null;
    /**
     * The DestinationId used by items in this grouping, which may be {null}.
     * @type {string}
     * @memberof CheckoutGrouping
     */
    destinationId?: string | null;
    /**
     * The FulfillmentMethod used by items in this grouping.
     * @type {string}
     * @memberof CheckoutGrouping
     */
    fulfillmentMethod?: string | null;
    /**
     * Identifiers of the items that make up this grouping.
     * @type {Array<string>}
     * @memberof CheckoutGrouping
     */
    orderItemIds?: Array<string> | null;
    /**
     * Code that uniquely identifies the shipping method such as "Ground," "Overnight," or "Digital."
     * The site's shipping settings lists the valid shipping methods specified for this site.
     * @type {string}
     * @memberof CheckoutGrouping
     */
    shippingMethodCode?: string | null;
    /**
     * Readable name of the shipping method.
     * @type {string}
     * @memberof CheckoutGrouping
     */
    shippingMethodName?: string | null;
    /**
     * Indicates whether a non ship group should combine with a ship group
     * @type {boolean}
     * @memberof CheckoutGrouping
     */
    standaloneGroup?: boolean;
    /**
     * 
     * @type {Array<ShippingDiscount>}
     * @memberof CheckoutGrouping
     */
    shippingDiscounts?: Array<ShippingDiscount> | null;
    /**
     * 
     * @type {Array<AppliedDiscount>}
     * @memberof CheckoutGrouping
     */
    handlingDiscounts?: Array<AppliedDiscount> | null;
    /**
     * Any duty fee applied directly to this group. Items can also have their own duty fee.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    dutyAmount?: number | null;
    /**
     * Total raw duty amounts for this group.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    dutyTotal?: number;
    /**
     * If a shipping method applies directly to this grouping (versus the items), this is the raw shipping amount for the group.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    shippingAmount?: number | null;
    /**
     * The raw shipping amount minus shipping discounts.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    shippingSubTotal?: number;
    /**
     * The total value of item-level shipping discounts applied to this group.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    itemLevelShippingDiscountTotal?: number;
    /**
     * The total value of order-level (group-level) shipping discounts applied to this group.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    orderLevelShippingDiscountTotal?: number;
    /**
     * Group-level shipping tax. Does not account for item shipping tax.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    shippingTax?: number | null;
    /**
     * The total shipping tax for this group, accounting for both group-level and item-level shipping tax.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    shippingTaxTotal?: number;
    /**
     * The total shipping cost for this group, accounting for discounts and tax.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    shippingTotal?: number;
    /**
     * The handling fee amount that's applicable to this grouping.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    handlingAmount?: number | null;
    /**
     * The total raw handling amounts minus handling discounts.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    handlingSubTotal?: number;
    /**
     * The total value of item-level handling discounts applied to this group.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    itemLevelHandlingDiscountTotal?: number;
    /**
     * The total value of order-level (group-level) handling discounts applied to this group.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    orderLevelHandlingDiscountTotal?: number;
    /**
     * Group-level handling tax. Does not account for item handling tax.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    handlingTax?: number | null;
    /**
     * The total handling tax for this group, accounting for both group-level and item-level handling tax.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    handlingTaxTotal?: number;
    /**
     * The total handling cost for this group, accounting for discounts and tax.
     * @type {number}
     * @memberof CheckoutGrouping
     */
    handlingTotal?: number;
    /**
     * 
     * @type {object}
     * @memberof CheckoutGrouping
     */
    taxData?: object | null;
}

/**
 * Check if a given object implements the CheckoutGrouping interface.
 */
export function instanceOfCheckoutGrouping(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CheckoutGroupingFromJSON(json: any): CheckoutGrouping {
    return CheckoutGroupingFromJSONTyped(json, false);
}

export function CheckoutGroupingFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutGrouping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'destinationId': !exists(json, 'destinationId') ? undefined : json['destinationId'],
        'fulfillmentMethod': !exists(json, 'fulfillmentMethod') ? undefined : json['fulfillmentMethod'],
        'orderItemIds': !exists(json, 'orderItemIds') ? undefined : json['orderItemIds'],
        'shippingMethodCode': !exists(json, 'shippingMethodCode') ? undefined : json['shippingMethodCode'],
        'shippingMethodName': !exists(json, 'shippingMethodName') ? undefined : json['shippingMethodName'],
        'standaloneGroup': !exists(json, 'standaloneGroup') ? undefined : json['standaloneGroup'],
        'shippingDiscounts': !exists(json, 'shippingDiscounts') ? undefined : (json['shippingDiscounts'] === null ? null : (json['shippingDiscounts'] as Array<any>).map(ShippingDiscountFromJSON)),
        'handlingDiscounts': !exists(json, 'handlingDiscounts') ? undefined : (json['handlingDiscounts'] === null ? null : (json['handlingDiscounts'] as Array<any>).map(AppliedDiscountFromJSON)),
        'dutyAmount': !exists(json, 'dutyAmount') ? undefined : json['dutyAmount'],
        'dutyTotal': !exists(json, 'dutyTotal') ? undefined : json['dutyTotal'],
        'shippingAmount': !exists(json, 'shippingAmount') ? undefined : json['shippingAmount'],
        'shippingSubTotal': !exists(json, 'shippingSubTotal') ? undefined : json['shippingSubTotal'],
        'itemLevelShippingDiscountTotal': !exists(json, 'itemLevelShippingDiscountTotal') ? undefined : json['itemLevelShippingDiscountTotal'],
        'orderLevelShippingDiscountTotal': !exists(json, 'orderLevelShippingDiscountTotal') ? undefined : json['orderLevelShippingDiscountTotal'],
        'shippingTax': !exists(json, 'shippingTax') ? undefined : json['shippingTax'],
        'shippingTaxTotal': !exists(json, 'shippingTaxTotal') ? undefined : json['shippingTaxTotal'],
        'shippingTotal': !exists(json, 'shippingTotal') ? undefined : json['shippingTotal'],
        'handlingAmount': !exists(json, 'handlingAmount') ? undefined : json['handlingAmount'],
        'handlingSubTotal': !exists(json, 'handlingSubTotal') ? undefined : json['handlingSubTotal'],
        'itemLevelHandlingDiscountTotal': !exists(json, 'itemLevelHandlingDiscountTotal') ? undefined : json['itemLevelHandlingDiscountTotal'],
        'orderLevelHandlingDiscountTotal': !exists(json, 'orderLevelHandlingDiscountTotal') ? undefined : json['orderLevelHandlingDiscountTotal'],
        'handlingTax': !exists(json, 'handlingTax') ? undefined : json['handlingTax'],
        'handlingTaxTotal': !exists(json, 'handlingTaxTotal') ? undefined : json['handlingTaxTotal'],
        'handlingTotal': !exists(json, 'handlingTotal') ? undefined : json['handlingTotal'],
        'taxData': !exists(json, 'taxData') ? undefined : json['taxData'],
    };
}

export function CheckoutGroupingToJSON(value?: CheckoutGrouping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'destinationId': value.destinationId,
        'fulfillmentMethod': value.fulfillmentMethod,
        'orderItemIds': value.orderItemIds,
        'shippingMethodCode': value.shippingMethodCode,
        'shippingMethodName': value.shippingMethodName,
        'standaloneGroup': value.standaloneGroup,
        'shippingDiscounts': value.shippingDiscounts === undefined ? undefined : (value.shippingDiscounts === null ? null : (value.shippingDiscounts as Array<any>).map(ShippingDiscountToJSON)),
        'handlingDiscounts': value.handlingDiscounts === undefined ? undefined : (value.handlingDiscounts === null ? null : (value.handlingDiscounts as Array<any>).map(AppliedDiscountToJSON)),
        'dutyAmount': value.dutyAmount,
        'dutyTotal': value.dutyTotal,
        'shippingAmount': value.shippingAmount,
        'shippingSubTotal': value.shippingSubTotal,
        'itemLevelShippingDiscountTotal': value.itemLevelShippingDiscountTotal,
        'orderLevelShippingDiscountTotal': value.orderLevelShippingDiscountTotal,
        'shippingTax': value.shippingTax,
        'shippingTaxTotal': value.shippingTaxTotal,
        'shippingTotal': value.shippingTotal,
        'handlingAmount': value.handlingAmount,
        'handlingSubTotal': value.handlingSubTotal,
        'itemLevelHandlingDiscountTotal': value.itemLevelHandlingDiscountTotal,
        'orderLevelHandlingDiscountTotal': value.orderLevelHandlingDiscountTotal,
        'handlingTax': value.handlingTax,
        'handlingTaxTotal': value.handlingTaxTotal,
        'handlingTotal': value.handlingTotal,
        'taxData': value.taxData,
    };
}

