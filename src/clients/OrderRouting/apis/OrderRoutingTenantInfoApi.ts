/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  ModelAndView,
} from '../models';


export namespace orderRoutingTenantInfoApiParams { 
    export interface GetCurrentTenantAndSiteRequest {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetCurrentTenantAndSite1Request {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetCurrentTenantAndSite2Request {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetCurrentTenantAndSite3Request {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetCurrentTenantAndSite4Request {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetCurrentTenantAndSite5Request {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetCurrentTenantAndSite6Request {
        tenantID: number;
        siteID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetSitesByTenantIDRequest {
        tenantID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetTenantByIDRequest {
        tenantID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetTenantByNameRequest {
        substring: string;
        xVolTenant: number;
        xVolSite: number;
        maxResults?: number;
    }
}
/**
* OrderRoutingTenantInfoApiService - interface
* 
* @export
* @interface OrderRoutingTenantInfoApi
*/
export interface OrderRoutingTenantInfoApiService {
    /**
    * Get Current Tenant And Site
    * @summary Get Current Tenant And Site
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSiteRaw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site
    * Get Current Tenant And Site
    */
    getCurrentTenantAndSite(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Current Tenant And Site_1
    * @summary Get Current Tenant And Site_1
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSite1Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site_1
    * Get Current Tenant And Site_1
    */
    getCurrentTenantAndSite1(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Current Tenant And Site_2
    * @summary Get Current Tenant And Site_2
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSite2Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site_2
    * Get Current Tenant And Site_2
    */
    getCurrentTenantAndSite2(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Current Tenant And Site_3
    * @summary Get Current Tenant And Site_3
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSite3Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site_3
    * Get Current Tenant And Site_3
    */
    getCurrentTenantAndSite3(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Current Tenant And Site_4
    * @summary Get Current Tenant And Site_4
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSite4Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site_4
    * Get Current Tenant And Site_4
    */
    getCurrentTenantAndSite4(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Current Tenant And Site_5
    * @summary Get Current Tenant And Site_5
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSite5Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site_5
    * Get Current Tenant And Site_5
    */
    getCurrentTenantAndSite5(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Current Tenant And Site_6
    * @summary Get Current Tenant And Site_6
    * @param {number} tenantID 
    * @param {number} siteID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getCurrentTenantAndSite6Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Current Tenant And Site_6
    * Get Current Tenant And Site_6
    */
    getCurrentTenantAndSite6(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Sites By Tenant ID
    * @summary Get Sites By Tenant ID
    * @param {number} tenantID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getSitesByTenantIDRaw(requestParameters: orderRoutingTenantInfoApiParams.GetSitesByTenantIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Sites By Tenant ID
    * Get Sites By Tenant ID
    */
    getSitesByTenantID(requestParameters: orderRoutingTenantInfoApiParams.GetSitesByTenantIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Tenant By ID
    * @summary Get Tenant By ID
    * @param {number} tenantID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getTenantByIDRaw(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Tenant By ID
    * Get Tenant By ID
    */
    getTenantByID(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Get Tenant By Name
    * @summary Get Tenant By Name
    * @param {string} substring 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {number} [maxResults] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingTenantInfoApiInterface
    */
    getTenantByNameRaw(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Tenant By Name
    * Get Tenant By Name
    */
    getTenantByName(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingTenantInfoApi extends runtime.BaseAPI implements OrderRoutingTenantInfoApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Current Tenant And Site
     * Get Current Tenant And Site
     */


    async getCurrentTenantAndSiteRaw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site
     * Get Current Tenant And Site
     */
    async getCurrentTenantAndSite(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Current Tenant And Site_1
     * Get Current Tenant And Site_1
     */


    async getCurrentTenantAndSite1Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite1.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite1.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite1.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site_1
     * Get Current Tenant And Site_1
     */
    async getCurrentTenantAndSite1(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSite1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Current Tenant And Site_2
     * Get Current Tenant And Site_2
     */


    async getCurrentTenantAndSite2Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite2.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite2.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite2.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site_2
     * Get Current Tenant And Site_2
     */
    async getCurrentTenantAndSite2(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSite2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Current Tenant And Site_3
     * Get Current Tenant And Site_3
     */


    async getCurrentTenantAndSite3Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite3.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite3.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite3.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site_3
     * Get Current Tenant And Site_3
     */
    async getCurrentTenantAndSite3(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSite3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Current Tenant And Site_4
     * Get Current Tenant And Site_4
     */


    async getCurrentTenantAndSite4Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite4.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite4.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite4.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite4.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site_4
     * Get Current Tenant And Site_4
     */
    async getCurrentTenantAndSite4(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSite4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Current Tenant And Site_5
     * Get Current Tenant And Site_5
     */


    async getCurrentTenantAndSite5Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite5.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite5.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite5.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite5.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site_5
     * Get Current Tenant And Site_5
     */
    async getCurrentTenantAndSite5(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSite5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Current Tenant And Site_6
     * Get Current Tenant And Site_6
     */


    async getCurrentTenantAndSite6Raw(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getCurrentTenantAndSite6.');
        }

        if (requestParameters.siteID === null || requestParameters.siteID === undefined) {
            throw new runtime.RequiredError('siteID','Required parameter requestParameters.siteID was null or undefined when calling getCurrentTenantAndSite6.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCurrentTenantAndSite6.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCurrentTenantAndSite6.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/current/{tenantID}/{siteID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))).replace(`{${"siteID"}}`, encodeURIComponent(String(requestParameters.siteID))),
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Current Tenant And Site_6
     * Get Current Tenant And Site_6
     */
    async getCurrentTenantAndSite6(requestParameters: orderRoutingTenantInfoApiParams.GetCurrentTenantAndSite6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getCurrentTenantAndSite6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Sites By Tenant ID
     * Get Sites By Tenant ID
     */


    async getSitesByTenantIDRaw(requestParameters: orderRoutingTenantInfoApiParams.GetSitesByTenantIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getSitesByTenantID.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSitesByTenantID.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSitesByTenantID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/{tenantID}/sites`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Sites By Tenant ID
     * Get Sites By Tenant ID
     */
    async getSitesByTenantID(requestParameters: orderRoutingTenantInfoApiParams.GetSitesByTenantIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getSitesByTenantIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Tenant By ID
     * Get Tenant By ID
     */


    async getTenantByIDRaw(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling getTenantByID.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getTenantByID.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getTenantByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant/{tenantID}`.replace(`{${"tenantID"}}`, encodeURIComponent(String(requestParameters.tenantID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Tenant By ID
     * Get Tenant By ID
     */
    async getTenantByID(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getTenantByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Tenant By Name
     * Get Tenant By Name
     */


    async getTenantByNameRaw(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.substring === null || requestParameters.substring === undefined) {
            throw new runtime.RequiredError('substring','Required parameter requestParameters.substring was null or undefined when calling getTenantByName.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getTenantByName.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getTenantByName.');
        }

        const queryParameters: any = {};

        if (requestParameters.substring !== undefined) {
            queryParameters['substring'] = requestParameters.substring;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/tenant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Tenant By Name
     * Get Tenant By Name
     */
    async getTenantByName(requestParameters: orderRoutingTenantInfoApiParams.GetTenantByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getTenantByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
