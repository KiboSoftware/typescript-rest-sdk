/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CandidateSuggestionsRequest,
  CandidateSuggestionsResponse,
  SuggestionLog,
  SuggestionRequest,
  SuggestionResponse,
  SuggestionTestRequest,
} from '../models';


export namespace routingApiParams { 
    export interface GetSampleRequestRequest {
        xVolSite: number;
        xVolTenant: number;
    }
    export interface GetSuggestionLogRequest {
        xVolSite: number;
        xVolTenant: number;
        externalResponseID?: string;
        orderID?: number;
        responseID?: number;
        suggestionID?: number;
    }
    export interface SuggestCandidatesRequest {
        xVolSite: number;
        xVolTenant: number;
        request: CandidateSuggestionsRequest;
    }
    export interface SuggestRoutingRequest {
        xVolSite: number;
        xVolTenant: number;
        request: SuggestionRequest;
        returnSuggestionLog?: boolean;
    }
    export interface SuggestRoutingTestRequest {
        xVolSite: number;
        xVolTenant: number;
        request: SuggestionTestRequest;
        returnSuggestionLog?: boolean;
    }
}
/**
* RoutingApiService - interface
* 
* @export
* @interface RoutingApi
*/
export interface RoutingApiService {
    /**
    * getSampleRequest
    * @summary getSampleRequest
    * @param {number} xVolSite 
    * @param {number} xVolTenant 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RoutingApiInterface
    */
    getSampleRequestRaw(requestParameters: routingApiParams.GetSampleRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionRequest>>;

    /**
    * getSampleRequest
    * getSampleRequest
    */
    getSampleRequest(requestParameters: routingApiParams.GetSampleRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionRequest>;

    /**
    * getSuggestionLog
    * @summary getSuggestionLog
    * @param {number} xVolSite 
    * @param {number} xVolTenant 
    * @param {string} [externalResponseID] externalResponseID
    * @param {number} [orderID] orderID
    * @param {number} [responseID] responseID
    * @param {number} [suggestionID] suggestionID
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RoutingApiInterface
    */
    getSuggestionLogRaw(requestParameters: routingApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SuggestionLog>>>;

    /**
    * getSuggestionLog
    * getSuggestionLog
    */
    getSuggestionLog(requestParameters: routingApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SuggestionLog>>;

    /**
    * suggestCandidates
    * @summary suggestCandidates
    * @param {number} xVolSite 
    * @param {number} xVolTenant 
    * @param {CandidateSuggestionsRequest} request request
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RoutingApiInterface
    */
    suggestCandidatesRaw(requestParameters: routingApiParams.SuggestCandidatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CandidateSuggestionsResponse>>;

    /**
    * suggestCandidates
    * suggestCandidates
    */
    suggestCandidates(requestParameters: routingApiParams.SuggestCandidatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CandidateSuggestionsResponse>;

    /**
    * suggestRouting
    * @summary suggestRouting
    * @param {number} xVolSite 
    * @param {number} xVolTenant 
    * @param {SuggestionRequest} request request
    * @param {boolean} [returnSuggestionLog] returnSuggestionLog
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RoutingApiInterface
    */
    suggestRoutingRaw(requestParameters: routingApiParams.SuggestRoutingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionResponse>>;

    /**
    * suggestRouting
    * suggestRouting
    */
    suggestRouting(requestParameters: routingApiParams.SuggestRoutingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionResponse>;

    /**
    * suggestRoutingTest
    * @summary suggestRoutingTest
    * @param {number} xVolSite 
    * @param {number} xVolTenant 
    * @param {SuggestionTestRequest} request request
    * @param {boolean} [returnSuggestionLog] returnSuggestionLog
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RoutingApiInterface
    */
    suggestRoutingTestRaw(requestParameters: routingApiParams.SuggestRoutingTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionResponse>>;

    /**
    * suggestRoutingTest
    * suggestRoutingTest
    */
    suggestRoutingTest(requestParameters: routingApiParams.SuggestRoutingTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionResponse>;

}


/**
 * 
 */
export class RoutingApi extends runtime.BaseAPI implements RoutingApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * getSampleRequest
     * getSampleRequest
     */


    async getSampleRequestRaw(requestParameters: routingApiParams.GetSampleRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionRequest>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSampleRequest.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSampleRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/routing/samplerequest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getSampleRequest
     * getSampleRequest
     */
    async getSampleRequest(requestParameters: routingApiParams.GetSampleRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionRequest> {
        const response = await this.getSampleRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getSuggestionLog
     * getSuggestionLog
     */


    async getSuggestionLogRaw(requestParameters: routingApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SuggestionLog>>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSuggestionLog.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSuggestionLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.externalResponseID !== undefined) {
            queryParameters['externalResponseID'] = requestParameters.externalResponseID;
        }

        if (requestParameters.orderID !== undefined) {
            queryParameters['orderID'] = requestParameters.orderID;
        }

        if (requestParameters.responseID !== undefined) {
            queryParameters['responseID'] = requestParameters.responseID;
        }

        if (requestParameters.suggestionID !== undefined) {
            queryParameters['suggestionID'] = requestParameters.suggestionID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/routing/suggestionLog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getSuggestionLog
     * getSuggestionLog
     */
    async getSuggestionLog(requestParameters: routingApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SuggestionLog>> {
        const response = await this.getSuggestionLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * suggestCandidates
     * suggestCandidates
     */


    async suggestCandidatesRaw(requestParameters: routingApiParams.SuggestCandidatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CandidateSuggestionsResponse>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling suggestCandidates.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling suggestCandidates.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling suggestCandidates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/routing/candidates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * suggestCandidates
     * suggestCandidates
     */
    async suggestCandidates(requestParameters: routingApiParams.SuggestCandidatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CandidateSuggestionsResponse> {
        const response = await this.suggestCandidatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * suggestRouting
     * suggestRouting
     */


    async suggestRoutingRaw(requestParameters: routingApiParams.SuggestRoutingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionResponse>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling suggestRouting.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling suggestRouting.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling suggestRouting.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnSuggestionLog !== undefined) {
            queryParameters['returnSuggestionLog'] = requestParameters.returnSuggestionLog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/routing/suggestion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * suggestRouting
     * suggestRouting
     */
    async suggestRouting(requestParameters: routingApiParams.SuggestRoutingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionResponse> {
        const response = await this.suggestRoutingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * suggestRoutingTest
     * suggestRoutingTest
     */


    async suggestRoutingTestRaw(requestParameters: routingApiParams.SuggestRoutingTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionResponse>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling suggestRoutingTest.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling suggestRoutingTest.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling suggestRoutingTest.');
        }

        const queryParameters: any = {};

        if (requestParameters.returnSuggestionLog !== undefined) {
            queryParameters['returnSuggestionLog'] = requestParameters.returnSuggestionLog;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/routing/suggestionTest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.request,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * suggestRoutingTest
     * suggestRoutingTest
     */
    async suggestRoutingTest(requestParameters: routingApiParams.SuggestRoutingTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionResponse> {
        const response = await this.suggestRoutingTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
