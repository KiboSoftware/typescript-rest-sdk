/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  APIErrorResponse,
  LocationListResponseModel,
  LocationResponseModel,
} from '../models';


export namespace orderRoutingLocationApiParams { 
    export interface GetLocationByLocationCodeRequest {
        xVolTenant: number;
        locationCode: string;
        xVolTenant2: number;
        xVolSite: number;
    }
    export interface GetLocationsRequest {
        xVolTenant: number;
        xVolTenant2: number;
        xVolSite: number;
        pageNum?: number;
        pageSize?: number;
    }
}
/**
* OrderRoutingLocationApiService - interface
* 
* @export
* @interface OrderRoutingLocationApi
*/
export interface OrderRoutingLocationApiService {
    /**
    * Get Location By Location Code
    * @summary Get Location By Location Code
    * @param {number} xVolTenant 
    * @param {string} locationCode 
    * @param {number} xVolTenant2 Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationApiInterface
    */
    getLocationByLocationCodeRaw(requestParameters: orderRoutingLocationApiParams.GetLocationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationResponseModel>>;

    /**
    * Get Location By Location Code
    * Get Location By Location Code
    */
    getLocationByLocationCode(requestParameters: orderRoutingLocationApiParams.GetLocationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationResponseModel>;

    /**
    * Get Locations
    * @summary Get Locations
    * @param {number} xVolTenant 
    * @param {number} xVolTenant2 Tenant
    * @param {number} xVolSite Site
    * @param {number} [pageNum] 
    * @param {number} [pageSize] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationApiInterface
    */
    getLocationsRaw(requestParameters: orderRoutingLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationListResponseModel>>;

    /**
    * Get Locations
    * Get Locations
    */
    getLocations(requestParameters: orderRoutingLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationListResponseModel>;

}


/**
 * 
 */
export class OrderRoutingLocationApi extends runtime.BaseAPI implements OrderRoutingLocationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Location By Location Code
     * Get Location By Location Code
     */


    async getLocationByLocationCodeRaw(requestParameters: orderRoutingLocationApiParams.GetLocationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationResponseModel>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getLocationByLocationCode.');
        }

        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling getLocationByLocationCode.');
        }

        if (requestParameters.xVolTenant2 === null || requestParameters.xVolTenant2 === undefined) {
            throw new runtime.RequiredError('xVolTenant2','Required parameter requestParameters.xVolTenant2 was null or undefined when calling getLocationByLocationCode.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getLocationByLocationCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolTenant2 !== undefined && requestParameters.xVolTenant2 !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant2);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/location/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Location By Location Code
     * Get Location By Location Code
     */
    async getLocationByLocationCode(requestParameters: orderRoutingLocationApiParams.GetLocationByLocationCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationResponseModel> {
        const response = await this.getLocationByLocationCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Locations
     * Get Locations
     */


    async getLocationsRaw(requestParameters: orderRoutingLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationListResponseModel>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getLocations.');
        }

        if (requestParameters.xVolTenant2 === null || requestParameters.xVolTenant2 === undefined) {
            throw new runtime.RequiredError('xVolTenant2','Required parameter requestParameters.xVolTenant2 was null or undefined when calling getLocations.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getLocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.pageNum !== undefined) {
            queryParameters['pageNum'] = requestParameters.pageNum;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolTenant2 !== undefined && requestParameters.xVolTenant2 !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant2);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Locations
     * Get Locations
     */
    async getLocations(requestParameters: orderRoutingLocationApiParams.GetLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationListResponseModel> {
        const response = await this.getLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
