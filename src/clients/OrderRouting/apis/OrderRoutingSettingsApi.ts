/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  APIErrorResponse,
  FilterAttribute,
  OrderRoutingSettings,
} from '../models';


export namespace orderRoutingSettingsApiParams { 
    export interface DeleteFilterAttributeRequest {
        attributeName: string;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface DeleteSettingsRequest {
        tenantID: number;
        xVolTenant: number;
        xVolSite: number;
        siteID?: number;
    }
    export interface GetFilterAttributeRequest {
        attributeName: string;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetFilterAttributesRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetSettingsRequest {
        xVolTenant: number;
        xVolSite: number;
        tenantID?: number;
        siteID?: number;
        getDefaults?: boolean;
    }
    export interface SaveFilterAttributeRequest {
        xVolTenant: number;
        xVolSite: number;
        filterAttribute: FilterAttribute;
    }
    export interface SaveSettingsRequest {
        xVolTenant: number;
        xVolSite: number;
        orderRoutingSettings: OrderRoutingSettings;
    }
}
/**
* OrderRoutingSettingsApiService - interface
* 
* @export
* @interface OrderRoutingSettingsApi
*/
export interface OrderRoutingSettingsApiService {
    /**
    * Delete Filter Attribute
    * @summary Delete Filter Attribute
    * @param {string} attributeName 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    deleteFilterAttributeRaw(requestParameters: orderRoutingSettingsApiParams.DeleteFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>>;

    /**
    * Delete Filter Attribute
    * Delete Filter Attribute
    */
    deleteFilterAttribute(requestParameters: orderRoutingSettingsApiParams.DeleteFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute>;

    /**
    * Delete Settings
    * @summary Delete Settings
    * @param {number} tenantID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {number} [siteID] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    deleteSettingsRaw(requestParameters: orderRoutingSettingsApiParams.DeleteSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
    * Delete Settings
    * Delete Settings
    */
    deleteSettings(requestParameters: orderRoutingSettingsApiParams.DeleteSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

    /**
    * Get Filter Attribute
    * @summary Get Filter Attribute
    * @param {string} attributeName 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    getFilterAttributeRaw(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>>;

    /**
    * Get Filter Attribute
    * Get Filter Attribute
    */
    getFilterAttribute(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute>;

    /**
    * Get Filter Attributes
    * @summary Get Filter Attributes
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    getFilterAttributesRaw(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FilterAttribute>>>;

    /**
    * Get Filter Attributes
    * Get Filter Attributes
    */
    getFilterAttributes(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FilterAttribute>>;

    /**
    * Get Settings
    * @summary Get Settings
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {number} [tenantID] 
    * @param {number} [siteID] 
    * @param {boolean} [getDefaults] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    getSettingsRaw(requestParameters: orderRoutingSettingsApiParams.GetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>>;

    /**
    * Get Settings
    * Get Settings
    */
    getSettings(requestParameters: orderRoutingSettingsApiParams.GetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings>;

    /**
    * Save Filter Attribute
    * @summary Save Filter Attribute
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {FilterAttribute} filterAttribute 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    saveFilterAttributeRaw(requestParameters: orderRoutingSettingsApiParams.SaveFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>>;

    /**
    * Save Filter Attribute
    * Save Filter Attribute
    */
    saveFilterAttribute(requestParameters: orderRoutingSettingsApiParams.SaveFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute>;

    /**
    * Save Settings
    * @summary Save Settings
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {OrderRoutingSettings} orderRoutingSettings 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSettingsApiInterface
    */
    saveSettingsRaw(requestParameters: orderRoutingSettingsApiParams.SaveSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>>;

    /**
    * Save Settings
    * Save Settings
    */
    saveSettings(requestParameters: orderRoutingSettingsApiParams.SaveSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings>;

}


/**
 * 
 */
export class OrderRoutingSettingsApi extends runtime.BaseAPI implements OrderRoutingSettingsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Filter Attribute
     * Delete Filter Attribute
     */


    async deleteFilterAttributeRaw(requestParameters: orderRoutingSettingsApiParams.DeleteFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>> {
        if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
            throw new runtime.RequiredError('attributeName','Required parameter requestParameters.attributeName was null or undefined when calling deleteFilterAttribute.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFilterAttribute.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteFilterAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes/{attributeName}`.replace(`{${"attributeName"}}`, encodeURIComponent(String(requestParameters.attributeName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Filter Attribute
     * Delete Filter Attribute
     */
    async deleteFilterAttribute(requestParameters: orderRoutingSettingsApiParams.DeleteFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute> {
        const response = await this.deleteFilterAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Settings
     * Delete Settings
     */


    async deleteSettingsRaw(requestParameters: orderRoutingSettingsApiParams.DeleteSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling deleteSettings.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteSettings.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.tenantID !== undefined) {
            queryParameters['tenantID'] = requestParameters.tenantID;
        }

        if (requestParameters.siteID !== undefined) {
            queryParameters['siteID'] = requestParameters.siteID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Settings
     * Delete Settings
     */
    async deleteSettings(requestParameters: orderRoutingSettingsApiParams.DeleteSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Filter Attribute
     * Get Filter Attribute
     */


    async getFilterAttributeRaw(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>> {
        if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
            throw new runtime.RequiredError('attributeName','Required parameter requestParameters.attributeName was null or undefined when calling getFilterAttribute.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFilterAttribute.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getFilterAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes/{attributeName}`.replace(`{${"attributeName"}}`, encodeURIComponent(String(requestParameters.attributeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Filter Attribute
     * Get Filter Attribute
     */
    async getFilterAttribute(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute> {
        const response = await this.getFilterAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Filter Attributes
     * Get Filter Attributes
     */


    async getFilterAttributesRaw(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FilterAttribute>>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFilterAttributes.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getFilterAttributes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Filter Attributes
     * Get Filter Attributes
     */
    async getFilterAttributes(requestParameters: orderRoutingSettingsApiParams.GetFilterAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FilterAttribute>> {
        const response = await this.getFilterAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Settings
     * Get Settings
     */


    async getSettingsRaw(requestParameters: orderRoutingSettingsApiParams.GetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSettings.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.tenantID !== undefined) {
            queryParameters['tenantID'] = requestParameters.tenantID;
        }

        if (requestParameters.siteID !== undefined) {
            queryParameters['siteID'] = requestParameters.siteID;
        }

        if (requestParameters.getDefaults !== undefined) {
            queryParameters['getDefaults'] = requestParameters.getDefaults;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Settings
     * Get Settings
     */
    async getSettings(requestParameters: orderRoutingSettingsApiParams.GetSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings> {
        const response = await this.getSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save Filter Attribute
     * Save Filter Attribute
     */


    async saveFilterAttributeRaw(requestParameters: orderRoutingSettingsApiParams.SaveFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveFilterAttribute.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveFilterAttribute.');
        }

        if (requestParameters.filterAttribute === null || requestParameters.filterAttribute === undefined) {
            throw new runtime.RequiredError('filterAttribute','Required parameter requestParameters.filterAttribute was null or undefined when calling saveFilterAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.filterAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Save Filter Attribute
     * Save Filter Attribute
     */
    async saveFilterAttribute(requestParameters: orderRoutingSettingsApiParams.SaveFilterAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute> {
        const response = await this.saveFilterAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save Settings
     * Save Settings
     */


    async saveSettingsRaw(requestParameters: orderRoutingSettingsApiParams.SaveSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveSettings.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveSettings.');
        }

        if (requestParameters.orderRoutingSettings === null || requestParameters.orderRoutingSettings === undefined) {
            throw new runtime.RequiredError('orderRoutingSettings','Required parameter requestParameters.orderRoutingSettings was null or undefined when calling saveSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderRoutingSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Save Settings
     * Save Settings
     */
    async saveSettings(requestParameters: orderRoutingSettingsApiParams.SaveSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings> {
        const response = await this.saveSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
