/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  FilterAttribute,
  OrderRoutingSettings,
} from '../models';

export interface DeleteFilterAttributeUsingDELETERequest {
    attributeName: string;
    xVolSite: number;
    xVolTenant: number;
}

export interface DeleteSettingsUsingDELETERequest {
    tenantID: number;
    xVolSite: number;
    xVolTenant: number;
    siteID?: number;
}

export interface GetFilterAttributeUsingGETRequest {
    attributeName: string;
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

export interface GetFilterAttributesUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

export interface GetSettingsUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
    getDefaults?: boolean;
    siteID?: number;
    tenantID?: number;
    responseFields?: string;
}

export interface SaveFilterAttributeUsingPUTRequest {
    xVolSite: number;
    xVolTenant: number;
    attribute: FilterAttribute;
    responseFields?: string;
}

export interface SaveSettingsUsingPUTRequest {
    xVolSite: number;
    xVolTenant: number;
    settings: OrderRoutingSettings;
    responseFields?: string;
}

/**
 * OrderRoutingSettingsApi - interface
 * 
 * @export
 * @interface OrderRoutingSettingsApiInterface
 */
export interface OrderRoutingSettingsApiInterface {
    /**
     * deleteFilterAttribute
     * @summary deleteFilterAttribute
     * @param {string} attributeName attributeName
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    deleteFilterAttributeUsingDELETERaw(requestParameters: DeleteFilterAttributeUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>>;

    /**
     * deleteFilterAttribute
     * deleteFilterAttribute
     */
    deleteFilterAttributeUsingDELETE(requestParameters: DeleteFilterAttributeUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute>;

    /**
     * deleteSettings
     * @summary deleteSettings
     * @param {number} tenantID tenantID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {number} [siteID] siteID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    deleteSettingsUsingDELETERaw(requestParameters: DeleteSettingsUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     * deleteSettings
     * deleteSettings
     */
    deleteSettingsUsingDELETE(requestParameters: DeleteSettingsUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

    /**
     * getFilterAttribute
     * @summary getFilterAttribute
     * @param {string} attributeName attributeName
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    getFilterAttributeUsingGETRaw(requestParameters: GetFilterAttributeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>>;

    /**
     * getFilterAttribute
     * getFilterAttribute
     */
    getFilterAttributeUsingGET(requestParameters: GetFilterAttributeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute>;

    /**
     * getFilterAttributes
     * @summary getFilterAttributes
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    getFilterAttributesUsingGETRaw(requestParameters: GetFilterAttributesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FilterAttribute>>>;

    /**
     * getFilterAttributes
     * getFilterAttributes
     */
    getFilterAttributesUsingGET(requestParameters: GetFilterAttributesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FilterAttribute>>;

    /**
     * getSettings
     * @summary getSettings
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {boolean} [getDefaults] getDefaults
     * @param {number} [siteID] siteID
     * @param {number} [tenantID] tenantID
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    getSettingsUsingGETRaw(requestParameters: GetSettingsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>>;

    /**
     * getSettings
     * getSettings
     */
    getSettingsUsingGET(requestParameters: GetSettingsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings>;

    /**
     * saveFilterAttribute
     * @summary saveFilterAttribute
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {FilterAttribute} attribute attribute
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    saveFilterAttributeUsingPUTRaw(requestParameters: SaveFilterAttributeUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>>;

    /**
     * saveFilterAttribute
     * saveFilterAttribute
     */
    saveFilterAttributeUsingPUT(requestParameters: SaveFilterAttributeUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute>;

    /**
     * saveSettings
     * @summary saveSettings
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {OrderRoutingSettings} settings settings
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingSettingsApiInterface
     */
    saveSettingsUsingPUTRaw(requestParameters: SaveSettingsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>>;

    /**
     * saveSettings
     * saveSettings
     */
    saveSettingsUsingPUT(requestParameters: SaveSettingsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings>;

}

/**
 * 
 */
export class OrderRoutingSettingsApi extends runtime.BaseAPI implements OrderRoutingSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteFilterAttribute
     * deleteFilterAttribute
     */


    async deleteFilterAttributeUsingDELETERaw(requestParameters: DeleteFilterAttributeUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>> {
        if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
            throw new runtime.RequiredError('attributeName','Required parameter requestParameters.attributeName was null or undefined when calling deleteFilterAttributeUsingDELETE.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteFilterAttributeUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFilterAttributeUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes/{attributeName}`.replace(`{${"attributeName"}}`, encodeURIComponent(String(requestParameters.attributeName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * deleteFilterAttribute
     * deleteFilterAttribute
     */
    async deleteFilterAttributeUsingDELETE(requestParameters: DeleteFilterAttributeUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute> {
        const response = await this.deleteFilterAttributeUsingDELETERaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deleteSettings
     * deleteSettings
     */


    async deleteSettingsUsingDELETERaw(requestParameters: DeleteSettingsUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.tenantID === null || requestParameters.tenantID === undefined) {
            throw new runtime.RequiredError('tenantID','Required parameter requestParameters.tenantID was null or undefined when calling deleteSettingsUsingDELETE.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteSettingsUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteSettingsUsingDELETE.');
        }

        const queryParameters: any = {};

        if (requestParameters.siteID !== undefined) {
            queryParameters['siteID'] = requestParameters.siteID;
        }

        if (requestParameters.tenantID !== undefined) {
            queryParameters['tenantID'] = requestParameters.tenantID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * deleteSettings
     * deleteSettings
     */
    async deleteSettingsUsingDELETE(requestParameters: DeleteSettingsUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteSettingsUsingDELETERaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getFilterAttribute
     * getFilterAttribute
     */


    async getFilterAttributeUsingGETRaw(requestParameters: GetFilterAttributeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>> {
        if (requestParameters.attributeName === null || requestParameters.attributeName === undefined) {
            throw new runtime.RequiredError('attributeName','Required parameter requestParameters.attributeName was null or undefined when calling getFilterAttributeUsingGET.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getFilterAttributeUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFilterAttributeUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes/{attributeName}`.replace(`{${"attributeName"}}`, encodeURIComponent(String(requestParameters.attributeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getFilterAttribute
     * getFilterAttribute
     */
    async getFilterAttributeUsingGET(requestParameters: GetFilterAttributeUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute> {
        const response = await this.getFilterAttributeUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getFilterAttributes
     * getFilterAttributes
     */


    async getFilterAttributesUsingGETRaw(requestParameters: GetFilterAttributesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FilterAttribute>>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getFilterAttributesUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFilterAttributesUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getFilterAttributes
     * getFilterAttributes
     */
    async getFilterAttributesUsingGET(requestParameters: GetFilterAttributesUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FilterAttribute>> {
        const response = await this.getFilterAttributesUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * getSettings
     * getSettings
     */


    async getSettingsUsingGETRaw(requestParameters: GetSettingsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSettingsUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSettingsUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.getDefaults !== undefined) {
            queryParameters['getDefaults'] = requestParameters.getDefaults;
        }

        if (requestParameters.siteID !== undefined) {
            queryParameters['siteID'] = requestParameters.siteID;
        }

        if (requestParameters.tenantID !== undefined) {
            queryParameters['tenantID'] = requestParameters.tenantID;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getSettings
     * getSettings
     */
    async getSettingsUsingGET(requestParameters: GetSettingsUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings> {
        const response = await this.getSettingsUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveFilterAttribute
     * saveFilterAttribute
     */


    async saveFilterAttributeUsingPUTRaw(requestParameters: SaveFilterAttributeUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterAttribute>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveFilterAttributeUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveFilterAttributeUsingPUT.');
        }

        if (requestParameters.attribute === null || requestParameters.attribute === undefined) {
            throw new runtime.RequiredError('attribute','Required parameter requestParameters.attribute was null or undefined when calling saveFilterAttributeUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings/filterAttributes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveFilterAttribute
     * saveFilterAttribute
     */
    async saveFilterAttributeUsingPUT(requestParameters: SaveFilterAttributeUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterAttribute> {
        const response = await this.saveFilterAttributeUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveSettings
     * saveSettings
     */


    async saveSettingsUsingPUTRaw(requestParameters: SaveSettingsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingSettings>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveSettingsUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveSettingsUsingPUT.');
        }

        if (requestParameters.settings === null || requestParameters.settings === undefined) {
            throw new runtime.RequiredError('settings','Required parameter requestParameters.settings was null or undefined when calling saveSettingsUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/settings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.settings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveSettings
     * saveSettings
     */
    async saveSettingsUsingPUT(requestParameters: SaveSettingsUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingSettings> {
        const response = await this.saveSettingsUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
