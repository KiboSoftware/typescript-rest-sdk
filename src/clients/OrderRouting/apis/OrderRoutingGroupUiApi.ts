/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  GroupFiltersData,
  ModelAndView,
  UserContextInformation,
} from '../models';


export namespace orderRoutingGroupUiApiParams { 
    export interface AddFiltersToGroupRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        groupFiltersData: GroupFiltersData;
    }
    export interface ToggleActive1Request {
        groupID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
}
/**
* OrderRoutingGroupUiApiService - interface
* 
* @export
* @interface OrderRoutingGroupUiApi
*/
export interface OrderRoutingGroupUiApiService {
    /**
    * Add Filters To Group
    * @summary Add Filters To Group
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {GroupFiltersData} groupFiltersData 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupUiApiInterface
    */
    addFiltersToGroupRaw(requestParameters: orderRoutingGroupUiApiParams.AddFiltersToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Add Filters To Group
    * Add Filters To Group
    */
    addFiltersToGroup(requestParameters: orderRoutingGroupUiApiParams.AddFiltersToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Toggle Active_1
    * @summary Toggle Active_1
    * @param {number} groupID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupUiApiInterface
    */
    toggleActive1Raw(requestParameters: orderRoutingGroupUiApiParams.ToggleActive1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Toggle Active_1
    * Toggle Active_1
    */
    toggleActive1(requestParameters: orderRoutingGroupUiApiParams.ToggleActive1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingGroupUiApi extends runtime.BaseAPI implements OrderRoutingGroupUiApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add Filters To Group
     * Add Filters To Group
     */


    async addFiltersToGroupRaw(requestParameters: orderRoutingGroupUiApiParams.AddFiltersToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling addFiltersToGroup.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling addFiltersToGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling addFiltersToGroup.');
        }

        if (requestParameters.groupFiltersData === null || requestParameters.groupFiltersData === undefined) {
            throw new runtime.RequiredError('groupFiltersData','Required parameter requestParameters.groupFiltersData was null or undefined when calling addFiltersToGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/group/add-filters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.groupFiltersData,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Filters To Group
     * Add Filters To Group
     */
    async addFiltersToGroup(requestParameters: orderRoutingGroupUiApiParams.AddFiltersToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.addFiltersToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle Active_1
     * Toggle Active_1
     */


    async toggleActive1Raw(requestParameters: orderRoutingGroupUiApiParams.ToggleActive1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling toggleActive1.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling toggleActive1.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling toggleActive1.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling toggleActive1.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/group/toggleActive/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Toggle Active_1
     * Toggle Active_1
     */
    async toggleActive1(requestParameters: orderRoutingGroupUiApiParams.ToggleActive1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.toggleActive1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
