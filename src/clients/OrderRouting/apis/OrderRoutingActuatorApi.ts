/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  OrderRoutingLink,
} from '../models';


export namespace orderRoutingActuatorApiParams { 
    export interface BeansRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface CachesRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface Caches2Request {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface CachesCacheRequest {
        xVolTenant: number;
        xVolSite: number;
        cache: string;
    }
    export interface CachesCache2Request {
        xVolTenant: number;
        xVolSite: number;
        cache: string;
    }
    export interface ConditionsRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface ConfigpropsRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface ConfigpropsPrefixRequest {
        xVolTenant: number;
        xVolSite: number;
        prefix: string;
    }
    export interface EnvRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface EnvToMatchRequest {
        xVolTenant: number;
        xVolSite: number;
        toMatch: string;
    }
    export interface FeaturesRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface FlywayRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface HealthRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface HealthPathRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface HeapdumpRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface InfoRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface LinksRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface LoggersRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface LoggersNameRequest {
        xVolTenant: number;
        xVolSite: number;
        name: string;
    }
    export interface LoggersName2Request {
        xVolTenant: number;
        xVolSite: number;
        name: string;
        body?: string;
    }
    export interface MappingsRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface MetricsRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface MetricsRequiredMetricNameRequest {
        xVolTenant: number;
        xVolSite: number;
        requiredMetricName: string;
    }
    export interface QuartzRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface QuartzJobsOrTriggersRequest {
        xVolTenant: number;
        xVolSite: number;
        jobsOrTriggers: string;
    }
    export interface QuartzJobsOrTriggersGroupRequest {
        xVolTenant: number;
        xVolSite: number;
        jobsOrTriggers: string;
        group: string;
    }
    export interface QuartzJobsOrTriggersGroupNameRequest {
        xVolTenant: number;
        xVolSite: number;
        jobsOrTriggers: string;
        group: string;
        name: string;
    }
    export interface RefreshRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface ScheduledtasksRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface SessionsRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface SessionsSessionIdRequest {
        xVolTenant: number;
        xVolSite: number;
        sessionId: string;
    }
    export interface SessionsSessionId2Request {
        xVolTenant: number;
        xVolSite: number;
        sessionId: string;
    }
    export interface ThreaddumpRequest {
        xVolTenant: number;
        xVolSite: number;
    }
}
/**
* OrderRoutingActuatorApiService - interface
* 
* @export
* @interface OrderRoutingActuatorApi
*/
export interface OrderRoutingActuatorApiService {
    /**
    * Actuator web endpoint \'beans\'
    * @summary Actuator web endpoint \'beans\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    beansRaw(requestParameters: orderRoutingActuatorApiParams.BeansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'beans\'
    * Actuator web endpoint \'beans\'
    */
    beans(requestParameters: orderRoutingActuatorApiParams.BeansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'caches\'
    * @summary Actuator web endpoint \'caches\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    cachesRaw(requestParameters: orderRoutingActuatorApiParams.CachesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'caches\'
    * Actuator web endpoint \'caches\'
    */
    caches(requestParameters: orderRoutingActuatorApiParams.CachesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'caches\'
    * @summary Actuator web endpoint \'caches\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    caches2Raw(requestParameters: orderRoutingActuatorApiParams.Caches2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'caches\'
    * Actuator web endpoint \'caches\'
    */
    caches2(requestParameters: orderRoutingActuatorApiParams.Caches2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'caches-cache\'
    * @summary Actuator web endpoint \'caches-cache\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} cache 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    cachesCacheRaw(requestParameters: orderRoutingActuatorApiParams.CachesCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'caches-cache\'
    * Actuator web endpoint \'caches-cache\'
    */
    cachesCache(requestParameters: orderRoutingActuatorApiParams.CachesCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'caches-cache\'
    * @summary Actuator web endpoint \'caches-cache\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} cache 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    cachesCache2Raw(requestParameters: orderRoutingActuatorApiParams.CachesCache2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'caches-cache\'
    * Actuator web endpoint \'caches-cache\'
    */
    cachesCache2(requestParameters: orderRoutingActuatorApiParams.CachesCache2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'conditions\'
    * @summary Actuator web endpoint \'conditions\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    conditionsRaw(requestParameters: orderRoutingActuatorApiParams.ConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'conditions\'
    * Actuator web endpoint \'conditions\'
    */
    conditions(requestParameters: orderRoutingActuatorApiParams.ConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'configprops\'
    * @summary Actuator web endpoint \'configprops\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    configpropsRaw(requestParameters: orderRoutingActuatorApiParams.ConfigpropsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'configprops\'
    * Actuator web endpoint \'configprops\'
    */
    configprops(requestParameters: orderRoutingActuatorApiParams.ConfigpropsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'configprops-prefix\'
    * @summary Actuator web endpoint \'configprops-prefix\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} prefix 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    configpropsPrefixRaw(requestParameters: orderRoutingActuatorApiParams.ConfigpropsPrefixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'configprops-prefix\'
    * Actuator web endpoint \'configprops-prefix\'
    */
    configpropsPrefix(requestParameters: orderRoutingActuatorApiParams.ConfigpropsPrefixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'env\'
    * @summary Actuator web endpoint \'env\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    envRaw(requestParameters: orderRoutingActuatorApiParams.EnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'env\'
    * Actuator web endpoint \'env\'
    */
    env(requestParameters: orderRoutingActuatorApiParams.EnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'env-toMatch\'
    * @summary Actuator web endpoint \'env-toMatch\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} toMatch 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    envToMatchRaw(requestParameters: orderRoutingActuatorApiParams.EnvToMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'env-toMatch\'
    * Actuator web endpoint \'env-toMatch\'
    */
    envToMatch(requestParameters: orderRoutingActuatorApiParams.EnvToMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'features\'
    * @summary Actuator web endpoint \'features\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    featuresRaw(requestParameters: orderRoutingActuatorApiParams.FeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'features\'
    * Actuator web endpoint \'features\'
    */
    features(requestParameters: orderRoutingActuatorApiParams.FeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'flyway\'
    * @summary Actuator web endpoint \'flyway\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    flywayRaw(requestParameters: orderRoutingActuatorApiParams.FlywayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'flyway\'
    * Actuator web endpoint \'flyway\'
    */
    flyway(requestParameters: orderRoutingActuatorApiParams.FlywayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'health\'
    * @summary Actuator web endpoint \'health\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    healthRaw(requestParameters: orderRoutingActuatorApiParams.HealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'health\'
    * Actuator web endpoint \'health\'
    */
    health(requestParameters: orderRoutingActuatorApiParams.HealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'health-path\'
    * @summary Actuator web endpoint \'health-path\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    healthPathRaw(requestParameters: orderRoutingActuatorApiParams.HealthPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'health-path\'
    * Actuator web endpoint \'health-path\'
    */
    healthPath(requestParameters: orderRoutingActuatorApiParams.HealthPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'heapdump\'
    * @summary Actuator web endpoint \'heapdump\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    heapdumpRaw(requestParameters: orderRoutingActuatorApiParams.HeapdumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'heapdump\'
    * Actuator web endpoint \'heapdump\'
    */
    heapdump(requestParameters: orderRoutingActuatorApiParams.HeapdumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'info\'
    * @summary Actuator web endpoint \'info\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    infoRaw(requestParameters: orderRoutingActuatorApiParams.InfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'info\'
    * Actuator web endpoint \'info\'
    */
    info(requestParameters: orderRoutingActuatorApiParams.InfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator root web endpoint
    * @summary Actuator root web endpoint
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    linksRaw(requestParameters: orderRoutingActuatorApiParams.LinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: { [key: string]: OrderRoutingLink; }; }>>;

    /**
    * Actuator root web endpoint
    * Actuator root web endpoint
    */
    links(requestParameters: orderRoutingActuatorApiParams.LinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: { [key: string]: OrderRoutingLink; }; }>;

    /**
    * Actuator web endpoint \'loggers\'
    * @summary Actuator web endpoint \'loggers\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    loggersRaw(requestParameters: orderRoutingActuatorApiParams.LoggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'loggers\'
    * Actuator web endpoint \'loggers\'
    */
    loggers(requestParameters: orderRoutingActuatorApiParams.LoggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'loggers-name\'
    * @summary Actuator web endpoint \'loggers-name\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} name 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    loggersNameRaw(requestParameters: orderRoutingActuatorApiParams.LoggersNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'loggers-name\'
    * Actuator web endpoint \'loggers-name\'
    */
    loggersName(requestParameters: orderRoutingActuatorApiParams.LoggersNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'loggers-name\'
    * @summary Actuator web endpoint \'loggers-name\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} name 
    * @param {string} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    loggersName2Raw(requestParameters: orderRoutingActuatorApiParams.LoggersName2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'loggers-name\'
    * Actuator web endpoint \'loggers-name\'
    */
    loggersName2(requestParameters: orderRoutingActuatorApiParams.LoggersName2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'mappings\'
    * @summary Actuator web endpoint \'mappings\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    mappingsRaw(requestParameters: orderRoutingActuatorApiParams.MappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'mappings\'
    * Actuator web endpoint \'mappings\'
    */
    mappings(requestParameters: orderRoutingActuatorApiParams.MappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'metrics\'
    * @summary Actuator web endpoint \'metrics\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    metricsRaw(requestParameters: orderRoutingActuatorApiParams.MetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'metrics\'
    * Actuator web endpoint \'metrics\'
    */
    metrics(requestParameters: orderRoutingActuatorApiParams.MetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'metrics-requiredMetricName\'
    * @summary Actuator web endpoint \'metrics-requiredMetricName\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} requiredMetricName 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    metricsRequiredMetricNameRaw(requestParameters: orderRoutingActuatorApiParams.MetricsRequiredMetricNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'metrics-requiredMetricName\'
    * Actuator web endpoint \'metrics-requiredMetricName\'
    */
    metricsRequiredMetricName(requestParameters: orderRoutingActuatorApiParams.MetricsRequiredMetricNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'quartz\'
    * @summary Actuator web endpoint \'quartz\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    quartzRaw(requestParameters: orderRoutingActuatorApiParams.QuartzRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'quartz\'
    * Actuator web endpoint \'quartz\'
    */
    quartz(requestParameters: orderRoutingActuatorApiParams.QuartzRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'quartz-jobsOrTriggers\'
    * @summary Actuator web endpoint \'quartz-jobsOrTriggers\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} jobsOrTriggers 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    quartzJobsOrTriggersRaw(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'quartz-jobsOrTriggers\'
    * Actuator web endpoint \'quartz-jobsOrTriggers\'
    */
    quartzJobsOrTriggers(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
    * @summary Actuator web endpoint \'quartz-jobsOrTriggers-group\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} jobsOrTriggers 
    * @param {string} group 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    quartzJobsOrTriggersGroupRaw(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
    * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
    */
    quartzJobsOrTriggersGroup(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
    * @summary Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} jobsOrTriggers 
    * @param {string} group 
    * @param {string} name 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    quartzJobsOrTriggersGroupNameRaw(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
    * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
    */
    quartzJobsOrTriggersGroupName(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'refresh\'
    * @summary Actuator web endpoint \'refresh\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    refreshRaw(requestParameters: orderRoutingActuatorApiParams.RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'refresh\'
    * Actuator web endpoint \'refresh\'
    */
    refresh(requestParameters: orderRoutingActuatorApiParams.RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'scheduledtasks\'
    * @summary Actuator web endpoint \'scheduledtasks\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    scheduledtasksRaw(requestParameters: orderRoutingActuatorApiParams.ScheduledtasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'scheduledtasks\'
    * Actuator web endpoint \'scheduledtasks\'
    */
    scheduledtasks(requestParameters: orderRoutingActuatorApiParams.ScheduledtasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'sessions\'
    * @summary Actuator web endpoint \'sessions\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    sessionsRaw(requestParameters: orderRoutingActuatorApiParams.SessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'sessions\'
    * Actuator web endpoint \'sessions\'
    */
    sessions(requestParameters: orderRoutingActuatorApiParams.SessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'sessions-sessionId\'
    * @summary Actuator web endpoint \'sessions-sessionId\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} sessionId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    sessionsSessionIdRaw(requestParameters: orderRoutingActuatorApiParams.SessionsSessionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'sessions-sessionId\'
    * Actuator web endpoint \'sessions-sessionId\'
    */
    sessionsSessionId(requestParameters: orderRoutingActuatorApiParams.SessionsSessionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'sessions-sessionId\'
    * @summary Actuator web endpoint \'sessions-sessionId\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} sessionId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    sessionsSessionId2Raw(requestParameters: orderRoutingActuatorApiParams.SessionsSessionId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'sessions-sessionId\'
    * Actuator web endpoint \'sessions-sessionId\'
    */
    sessionsSessionId2(requestParameters: orderRoutingActuatorApiParams.SessionsSessionId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
    * Actuator web endpoint \'threaddump\'
    * @summary Actuator web endpoint \'threaddump\'
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingActuatorApiInterface
    */
    threaddumpRaw(requestParameters: orderRoutingActuatorApiParams.ThreaddumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
    * Actuator web endpoint \'threaddump\'
    * Actuator web endpoint \'threaddump\'
    */
    threaddump(requestParameters: orderRoutingActuatorApiParams.ThreaddumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}


/**
 * 
 */
export class OrderRoutingActuatorApi extends runtime.BaseAPI implements OrderRoutingActuatorApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Actuator web endpoint \'beans\'
     * Actuator web endpoint \'beans\'
     */


    async beansRaw(requestParameters: orderRoutingActuatorApiParams.BeansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling beans.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling beans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/beans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'beans\'
     * Actuator web endpoint \'beans\'
     */
    async beans(requestParameters: orderRoutingActuatorApiParams.BeansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.beansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'caches\'
     * Actuator web endpoint \'caches\'
     */


    async cachesRaw(requestParameters: orderRoutingActuatorApiParams.CachesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling caches.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling caches.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/caches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'caches\'
     * Actuator web endpoint \'caches\'
     */
    async caches(requestParameters: orderRoutingActuatorApiParams.CachesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cachesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'caches\'
     * Actuator web endpoint \'caches\'
     */


    async caches2Raw(requestParameters: orderRoutingActuatorApiParams.Caches2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling caches2.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling caches2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/caches`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'caches\'
     * Actuator web endpoint \'caches\'
     */
    async caches2(requestParameters: orderRoutingActuatorApiParams.Caches2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.caches2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'caches-cache\'
     * Actuator web endpoint \'caches-cache\'
     */


    async cachesCacheRaw(requestParameters: orderRoutingActuatorApiParams.CachesCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling cachesCache.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling cachesCache.');
        }

        if (requestParameters.cache === null || requestParameters.cache === undefined) {
            throw new runtime.RequiredError('cache','Required parameter requestParameters.cache was null or undefined when calling cachesCache.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/caches/{cache}`.replace(`{${"cache"}}`, encodeURIComponent(String(requestParameters.cache))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'caches-cache\'
     * Actuator web endpoint \'caches-cache\'
     */
    async cachesCache(requestParameters: orderRoutingActuatorApiParams.CachesCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cachesCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'caches-cache\'
     * Actuator web endpoint \'caches-cache\'
     */


    async cachesCache2Raw(requestParameters: orderRoutingActuatorApiParams.CachesCache2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling cachesCache2.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling cachesCache2.');
        }

        if (requestParameters.cache === null || requestParameters.cache === undefined) {
            throw new runtime.RequiredError('cache','Required parameter requestParameters.cache was null or undefined when calling cachesCache2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/caches/{cache}`.replace(`{${"cache"}}`, encodeURIComponent(String(requestParameters.cache))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'caches-cache\'
     * Actuator web endpoint \'caches-cache\'
     */
    async cachesCache2(requestParameters: orderRoutingActuatorApiParams.CachesCache2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.cachesCache2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'conditions\'
     * Actuator web endpoint \'conditions\'
     */


    async conditionsRaw(requestParameters: orderRoutingActuatorApiParams.ConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling conditions.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling conditions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/conditions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'conditions\'
     * Actuator web endpoint \'conditions\'
     */
    async conditions(requestParameters: orderRoutingActuatorApiParams.ConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.conditionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'configprops\'
     * Actuator web endpoint \'configprops\'
     */


    async configpropsRaw(requestParameters: orderRoutingActuatorApiParams.ConfigpropsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling configprops.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling configprops.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/configprops`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'configprops\'
     * Actuator web endpoint \'configprops\'
     */
    async configprops(requestParameters: orderRoutingActuatorApiParams.ConfigpropsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.configpropsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'configprops-prefix\'
     * Actuator web endpoint \'configprops-prefix\'
     */


    async configpropsPrefixRaw(requestParameters: orderRoutingActuatorApiParams.ConfigpropsPrefixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling configpropsPrefix.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling configpropsPrefix.');
        }

        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling configpropsPrefix.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/configprops/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters.prefix))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'configprops-prefix\'
     * Actuator web endpoint \'configprops-prefix\'
     */
    async configpropsPrefix(requestParameters: orderRoutingActuatorApiParams.ConfigpropsPrefixRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.configpropsPrefixRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'env\'
     * Actuator web endpoint \'env\'
     */


    async envRaw(requestParameters: orderRoutingActuatorApiParams.EnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling env.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling env.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/env`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'env\'
     * Actuator web endpoint \'env\'
     */
    async env(requestParameters: orderRoutingActuatorApiParams.EnvRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.envRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'env-toMatch\'
     * Actuator web endpoint \'env-toMatch\'
     */


    async envToMatchRaw(requestParameters: orderRoutingActuatorApiParams.EnvToMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling envToMatch.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling envToMatch.');
        }

        if (requestParameters.toMatch === null || requestParameters.toMatch === undefined) {
            throw new runtime.RequiredError('toMatch','Required parameter requestParameters.toMatch was null or undefined when calling envToMatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/env/{toMatch}`.replace(`{${"toMatch"}}`, encodeURIComponent(String(requestParameters.toMatch))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'env-toMatch\'
     * Actuator web endpoint \'env-toMatch\'
     */
    async envToMatch(requestParameters: orderRoutingActuatorApiParams.EnvToMatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.envToMatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'features\'
     * Actuator web endpoint \'features\'
     */


    async featuresRaw(requestParameters: orderRoutingActuatorApiParams.FeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling features.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling features.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'features\'
     * Actuator web endpoint \'features\'
     */
    async features(requestParameters: orderRoutingActuatorApiParams.FeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.featuresRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'flyway\'
     * Actuator web endpoint \'flyway\'
     */


    async flywayRaw(requestParameters: orderRoutingActuatorApiParams.FlywayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling flyway.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling flyway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/flyway`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'flyway\'
     * Actuator web endpoint \'flyway\'
     */
    async flyway(requestParameters: orderRoutingActuatorApiParams.FlywayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.flywayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'health\'
     * Actuator web endpoint \'health\'
     */


    async healthRaw(requestParameters: orderRoutingActuatorApiParams.HealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling health.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling health.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'health\'
     * Actuator web endpoint \'health\'
     */
    async health(requestParameters: orderRoutingActuatorApiParams.HealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.healthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'health-path\'
     * Actuator web endpoint \'health-path\'
     */


    async healthPathRaw(requestParameters: orderRoutingActuatorApiParams.HealthPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling healthPath.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling healthPath.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/health/**`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'health-path\'
     * Actuator web endpoint \'health-path\'
     */
    async healthPath(requestParameters: orderRoutingActuatorApiParams.HealthPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.healthPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'heapdump\'
     * Actuator web endpoint \'heapdump\'
     */


    async heapdumpRaw(requestParameters: orderRoutingActuatorApiParams.HeapdumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling heapdump.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling heapdump.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/heapdump`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'heapdump\'
     * Actuator web endpoint \'heapdump\'
     */
    async heapdump(requestParameters: orderRoutingActuatorApiParams.HeapdumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.heapdumpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'info\'
     * Actuator web endpoint \'info\'
     */


    async infoRaw(requestParameters: orderRoutingActuatorApiParams.InfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling info.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling info.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'info\'
     * Actuator web endpoint \'info\'
     */
    async info(requestParameters: orderRoutingActuatorApiParams.InfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.infoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator root web endpoint
     * Actuator root web endpoint
     */


    async linksRaw(requestParameters: orderRoutingActuatorApiParams.LinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: { [key: string]: OrderRoutingLink; }; }>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling links.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling links.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator root web endpoint
     * Actuator root web endpoint
     */
    async links(requestParameters: orderRoutingActuatorApiParams.LinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: { [key: string]: OrderRoutingLink; }; }> {
        const response = await this.linksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'loggers\'
     * Actuator web endpoint \'loggers\'
     */


    async loggersRaw(requestParameters: orderRoutingActuatorApiParams.LoggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling loggers.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling loggers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/loggers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'loggers\'
     * Actuator web endpoint \'loggers\'
     */
    async loggers(requestParameters: orderRoutingActuatorApiParams.LoggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.loggersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'loggers-name\'
     * Actuator web endpoint \'loggers-name\'
     */


    async loggersNameRaw(requestParameters: orderRoutingActuatorApiParams.LoggersNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling loggersName.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling loggersName.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling loggersName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'loggers-name\'
     * Actuator web endpoint \'loggers-name\'
     */
    async loggersName(requestParameters: orderRoutingActuatorApiParams.LoggersNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.loggersNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'loggers-name\'
     * Actuator web endpoint \'loggers-name\'
     */


    async loggersName2Raw(requestParameters: orderRoutingActuatorApiParams.LoggersName2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling loggersName2.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling loggersName2.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling loggersName2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/loggers/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'loggers-name\'
     * Actuator web endpoint \'loggers-name\'
     */
    async loggersName2(requestParameters: orderRoutingActuatorApiParams.LoggersName2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.loggersName2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'mappings\'
     * Actuator web endpoint \'mappings\'
     */


    async mappingsRaw(requestParameters: orderRoutingActuatorApiParams.MappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling mappings.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling mappings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/mappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'mappings\'
     * Actuator web endpoint \'mappings\'
     */
    async mappings(requestParameters: orderRoutingActuatorApiParams.MappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.mappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'metrics\'
     * Actuator web endpoint \'metrics\'
     */


    async metricsRaw(requestParameters: orderRoutingActuatorApiParams.MetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling metrics.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling metrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'metrics\'
     * Actuator web endpoint \'metrics\'
     */
    async metrics(requestParameters: orderRoutingActuatorApiParams.MetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.metricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'metrics-requiredMetricName\'
     * Actuator web endpoint \'metrics-requiredMetricName\'
     */


    async metricsRequiredMetricNameRaw(requestParameters: orderRoutingActuatorApiParams.MetricsRequiredMetricNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling metricsRequiredMetricName.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling metricsRequiredMetricName.');
        }

        if (requestParameters.requiredMetricName === null || requestParameters.requiredMetricName === undefined) {
            throw new runtime.RequiredError('requiredMetricName','Required parameter requestParameters.requiredMetricName was null or undefined when calling metricsRequiredMetricName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/metrics/{requiredMetricName}`.replace(`{${"requiredMetricName"}}`, encodeURIComponent(String(requestParameters.requiredMetricName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'metrics-requiredMetricName\'
     * Actuator web endpoint \'metrics-requiredMetricName\'
     */
    async metricsRequiredMetricName(requestParameters: orderRoutingActuatorApiParams.MetricsRequiredMetricNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.metricsRequiredMetricNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'quartz\'
     * Actuator web endpoint \'quartz\'
     */


    async quartzRaw(requestParameters: orderRoutingActuatorApiParams.QuartzRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling quartz.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling quartz.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/quartz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'quartz\'
     * Actuator web endpoint \'quartz\'
     */
    async quartz(requestParameters: orderRoutingActuatorApiParams.QuartzRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.quartzRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'quartz-jobsOrTriggers\'
     * Actuator web endpoint \'quartz-jobsOrTriggers\'
     */


    async quartzJobsOrTriggersRaw(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling quartzJobsOrTriggers.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling quartzJobsOrTriggers.');
        }

        if (requestParameters.jobsOrTriggers === null || requestParameters.jobsOrTriggers === undefined) {
            throw new runtime.RequiredError('jobsOrTriggers','Required parameter requestParameters.jobsOrTriggers was null or undefined when calling quartzJobsOrTriggers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/quartz/{jobsOrTriggers}`.replace(`{${"jobsOrTriggers"}}`, encodeURIComponent(String(requestParameters.jobsOrTriggers))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'quartz-jobsOrTriggers\'
     * Actuator web endpoint \'quartz-jobsOrTriggers\'
     */
    async quartzJobsOrTriggers(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.quartzJobsOrTriggersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
     * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
     */


    async quartzJobsOrTriggersGroupRaw(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling quartzJobsOrTriggersGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling quartzJobsOrTriggersGroup.');
        }

        if (requestParameters.jobsOrTriggers === null || requestParameters.jobsOrTriggers === undefined) {
            throw new runtime.RequiredError('jobsOrTriggers','Required parameter requestParameters.jobsOrTriggers was null or undefined when calling quartzJobsOrTriggersGroup.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling quartzJobsOrTriggersGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/quartz/{jobsOrTriggers}/{group}`.replace(`{${"jobsOrTriggers"}}`, encodeURIComponent(String(requestParameters.jobsOrTriggers))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
     * Actuator web endpoint \'quartz-jobsOrTriggers-group\'
     */
    async quartzJobsOrTriggersGroup(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.quartzJobsOrTriggersGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
     * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
     */


    async quartzJobsOrTriggersGroupNameRaw(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling quartzJobsOrTriggersGroupName.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling quartzJobsOrTriggersGroupName.');
        }

        if (requestParameters.jobsOrTriggers === null || requestParameters.jobsOrTriggers === undefined) {
            throw new runtime.RequiredError('jobsOrTriggers','Required parameter requestParameters.jobsOrTriggers was null or undefined when calling quartzJobsOrTriggersGroupName.');
        }

        if (requestParameters.group === null || requestParameters.group === undefined) {
            throw new runtime.RequiredError('group','Required parameter requestParameters.group was null or undefined when calling quartzJobsOrTriggersGroupName.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling quartzJobsOrTriggersGroupName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/quartz/{jobsOrTriggers}/{group}/{name}`.replace(`{${"jobsOrTriggers"}}`, encodeURIComponent(String(requestParameters.jobsOrTriggers))).replace(`{${"group"}}`, encodeURIComponent(String(requestParameters.group))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
     * Actuator web endpoint \'quartz-jobsOrTriggers-group-name\'
     */
    async quartzJobsOrTriggersGroupName(requestParameters: orderRoutingActuatorApiParams.QuartzJobsOrTriggersGroupNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.quartzJobsOrTriggersGroupNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'refresh\'
     * Actuator web endpoint \'refresh\'
     */


    async refreshRaw(requestParameters: orderRoutingActuatorApiParams.RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling refresh.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling refresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'refresh\'
     * Actuator web endpoint \'refresh\'
     */
    async refresh(requestParameters: orderRoutingActuatorApiParams.RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.refreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'scheduledtasks\'
     * Actuator web endpoint \'scheduledtasks\'
     */


    async scheduledtasksRaw(requestParameters: orderRoutingActuatorApiParams.ScheduledtasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling scheduledtasks.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling scheduledtasks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/scheduledtasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'scheduledtasks\'
     * Actuator web endpoint \'scheduledtasks\'
     */
    async scheduledtasks(requestParameters: orderRoutingActuatorApiParams.ScheduledtasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.scheduledtasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'sessions\'
     * Actuator web endpoint \'sessions\'
     */


    async sessionsRaw(requestParameters: orderRoutingActuatorApiParams.SessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling sessions.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling sessions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'sessions\'
     * Actuator web endpoint \'sessions\'
     */
    async sessions(requestParameters: orderRoutingActuatorApiParams.SessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'sessions-sessionId\'
     * Actuator web endpoint \'sessions-sessionId\'
     */


    async sessionsSessionIdRaw(requestParameters: orderRoutingActuatorApiParams.SessionsSessionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling sessionsSessionId.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling sessionsSessionId.');
        }

        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sessionsSessionId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'sessions-sessionId\'
     * Actuator web endpoint \'sessions-sessionId\'
     */
    async sessionsSessionId(requestParameters: orderRoutingActuatorApiParams.SessionsSessionIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sessionsSessionIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'sessions-sessionId\'
     * Actuator web endpoint \'sessions-sessionId\'
     */


    async sessionsSessionId2Raw(requestParameters: orderRoutingActuatorApiParams.SessionsSessionId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling sessionsSessionId2.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling sessionsSessionId2.');
        }

        if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
            throw new runtime.RequiredError('sessionId','Required parameter requestParameters.sessionId was null or undefined when calling sessionsSessionId2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/sessions/{sessionId}`.replace(`{${"sessionId"}}`, encodeURIComponent(String(requestParameters.sessionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'sessions-sessionId\'
     * Actuator web endpoint \'sessions-sessionId\'
     */
    async sessionsSessionId2(requestParameters: orderRoutingActuatorApiParams.SessionsSessionId2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sessionsSessionId2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actuator web endpoint \'threaddump\'
     * Actuator web endpoint \'threaddump\'
     */


    async threaddumpRaw(requestParameters: orderRoutingActuatorApiParams.ThreaddumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling threaddump.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling threaddump.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/api/actuator/threaddump`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Actuator web endpoint \'threaddump\'
     * Actuator web endpoint \'threaddump\'
     */
    async threaddump(requestParameters: orderRoutingActuatorApiParams.ThreaddumpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.threaddumpRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
