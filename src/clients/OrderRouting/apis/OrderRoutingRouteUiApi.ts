/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  CandidateSortStrategyForm,
  ModelAndView,
  PreferAtomicAssignmentsRequestData,
  UserContextInformation,
} from '../models';


export namespace orderRoutingRouteUiApiParams { 
    export interface DeleteGroupRequest {
        groupID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface MoveGroupToRankRequest {
        groupID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        position?: number;
    }
    export interface OpenDeleteGroupConfirmationRequest {
        groupID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface RemoveFilterFromGroupRequest {
        groupID: number;
        afterActionType: string;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface SetCandidateSortStrategyRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        candidateSortStrategyForm?: CandidateSortStrategyForm;
    }
    export interface ToggleActiveRequest {
        routeID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface TogglePreferAtomicAssignmentsRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        preferAtomicAssignmentsRequestData: PreferAtomicAssignmentsRequestData;
    }
}
/**
* OrderRoutingRouteUiApiService - interface
* 
* @export
* @interface OrderRoutingRouteUiApi
*/
export interface OrderRoutingRouteUiApiService {
    /**
    * Delete Group
    * @summary Delete Group
    * @param {number} groupID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    deleteGroupRaw(requestParameters: orderRoutingRouteUiApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Group
    * Delete Group
    */
    deleteGroup(requestParameters: orderRoutingRouteUiApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Move Group To Rank
    * @summary Move Group To Rank
    * @param {number} groupID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {number} [position] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    moveGroupToRankRaw(requestParameters: orderRoutingRouteUiApiParams.MoveGroupToRankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Move Group To Rank
    * Move Group To Rank
    */
    moveGroupToRank(requestParameters: orderRoutingRouteUiApiParams.MoveGroupToRankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Open Delete Group Confirmation
    * @summary Open Delete Group Confirmation
    * @param {number} groupID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    openDeleteGroupConfirmationRaw(requestParameters: orderRoutingRouteUiApiParams.OpenDeleteGroupConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Open Delete Group Confirmation
    * Open Delete Group Confirmation
    */
    openDeleteGroupConfirmation(requestParameters: orderRoutingRouteUiApiParams.OpenDeleteGroupConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Remove Filter From Group
    * @summary Remove Filter From Group
    * @param {number} groupID 
    * @param {string} afterActionType 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    removeFilterFromGroupRaw(requestParameters: orderRoutingRouteUiApiParams.RemoveFilterFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Remove Filter From Group
    * Remove Filter From Group
    */
    removeFilterFromGroup(requestParameters: orderRoutingRouteUiApiParams.RemoveFilterFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Set Candidate Sort Strategy
    * @summary Set Candidate Sort Strategy
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {CandidateSortStrategyForm} [candidateSortStrategyForm] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    setCandidateSortStrategyRaw(requestParameters: orderRoutingRouteUiApiParams.SetCandidateSortStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Set Candidate Sort Strategy
    * Set Candidate Sort Strategy
    */
    setCandidateSortStrategy(requestParameters: orderRoutingRouteUiApiParams.SetCandidateSortStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Toggle Active
    * @summary Toggle Active
    * @param {number} routeID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    toggleActiveRaw(requestParameters: orderRoutingRouteUiApiParams.ToggleActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Toggle Active
    * Toggle Active
    */
    toggleActive(requestParameters: orderRoutingRouteUiApiParams.ToggleActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Toggle Prefer Atomic Assignments
    * @summary Toggle Prefer Atomic Assignments
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {PreferAtomicAssignmentsRequestData} preferAtomicAssignmentsRequestData 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingRouteUiApiInterface
    */
    togglePreferAtomicAssignmentsRaw(requestParameters: orderRoutingRouteUiApiParams.TogglePreferAtomicAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Toggle Prefer Atomic Assignments
    * Toggle Prefer Atomic Assignments
    */
    togglePreferAtomicAssignments(requestParameters: orderRoutingRouteUiApiParams.TogglePreferAtomicAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingRouteUiApi extends runtime.BaseAPI implements OrderRoutingRouteUiApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete Group
     * Delete Group
     */


    async deleteGroupRaw(requestParameters: orderRoutingRouteUiApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupID !== undefined) {
            queryParameters['groupID'] = requestParameters.groupID;
        }

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/delete-group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Group
     * Delete Group
     */
    async deleteGroup(requestParameters: orderRoutingRouteUiApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move Group To Rank
     * Move Group To Rank
     */


    async moveGroupToRankRaw(requestParameters: orderRoutingRouteUiApiParams.MoveGroupToRankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling moveGroupToRank.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling moveGroupToRank.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling moveGroupToRank.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling moveGroupToRank.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        if (requestParameters.position !== undefined) {
            queryParameters['position'] = requestParameters.position;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/move-group-to-rank/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Move Group To Rank
     * Move Group To Rank
     */
    async moveGroupToRank(requestParameters: orderRoutingRouteUiApiParams.MoveGroupToRankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.moveGroupToRankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Open Delete Group Confirmation
     * Open Delete Group Confirmation
     */


    async openDeleteGroupConfirmationRaw(requestParameters: orderRoutingRouteUiApiParams.OpenDeleteGroupConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling openDeleteGroupConfirmation.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling openDeleteGroupConfirmation.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling openDeleteGroupConfirmation.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupID !== undefined) {
            queryParameters['groupID'] = requestParameters.groupID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/delete-group-confirmation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Open Delete Group Confirmation
     * Open Delete Group Confirmation
     */
    async openDeleteGroupConfirmation(requestParameters: orderRoutingRouteUiApiParams.OpenDeleteGroupConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.openDeleteGroupConfirmationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Filter From Group
     * Remove Filter From Group
     */


    async removeFilterFromGroupRaw(requestParameters: orderRoutingRouteUiApiParams.RemoveFilterFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling removeFilterFromGroup.');
        }

        if (requestParameters.afterActionType === null || requestParameters.afterActionType === undefined) {
            throw new runtime.RequiredError('afterActionType','Required parameter requestParameters.afterActionType was null or undefined when calling removeFilterFromGroup.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling removeFilterFromGroup.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling removeFilterFromGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling removeFilterFromGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupID !== undefined) {
            queryParameters['groupID'] = requestParameters.groupID;
        }

        if (requestParameters.afterActionType !== undefined) {
            queryParameters['afterActionType'] = requestParameters.afterActionType;
        }

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/remove-after-action-from-group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Filter From Group
     * Remove Filter From Group
     */
    async removeFilterFromGroup(requestParameters: orderRoutingRouteUiApiParams.RemoveFilterFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.removeFilterFromGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set Candidate Sort Strategy
     * Set Candidate Sort Strategy
     */


    async setCandidateSortStrategyRaw(requestParameters: orderRoutingRouteUiApiParams.SetCandidateSortStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling setCandidateSortStrategy.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling setCandidateSortStrategy.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling setCandidateSortStrategy.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/setCandidateSortStrategy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.candidateSortStrategyForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set Candidate Sort Strategy
     * Set Candidate Sort Strategy
     */
    async setCandidateSortStrategy(requestParameters: orderRoutingRouteUiApiParams.SetCandidateSortStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.setCandidateSortStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle Active
     * Toggle Active
     */


    async toggleActiveRaw(requestParameters: orderRoutingRouteUiApiParams.ToggleActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.routeID === null || requestParameters.routeID === undefined) {
            throw new runtime.RequiredError('routeID','Required parameter requestParameters.routeID was null or undefined when calling toggleActive.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling toggleActive.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling toggleActive.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling toggleActive.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/toggleActive/{routeID}`.replace(`{${"routeID"}}`, encodeURIComponent(String(requestParameters.routeID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Toggle Active
     * Toggle Active
     */
    async toggleActive(requestParameters: orderRoutingRouteUiApiParams.ToggleActiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.toggleActiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle Prefer Atomic Assignments
     * Toggle Prefer Atomic Assignments
     */


    async togglePreferAtomicAssignmentsRaw(requestParameters: orderRoutingRouteUiApiParams.TogglePreferAtomicAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling togglePreferAtomicAssignments.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling togglePreferAtomicAssignments.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling togglePreferAtomicAssignments.');
        }

        if (requestParameters.preferAtomicAssignmentsRequestData === null || requestParameters.preferAtomicAssignmentsRequestData === undefined) {
            throw new runtime.RequiredError('preferAtomicAssignmentsRequestData','Required parameter requestParameters.preferAtomicAssignmentsRequestData was null or undefined when calling togglePreferAtomicAssignments.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/route/togglePreferAtomicAssignments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.preferAtomicAssignmentsRequestData,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Toggle Prefer Atomic Assignments
     * Toggle Prefer Atomic Assignments
     */
    async togglePreferAtomicAssignments(requestParameters: orderRoutingRouteUiApiParams.TogglePreferAtomicAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.togglePreferAtomicAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
