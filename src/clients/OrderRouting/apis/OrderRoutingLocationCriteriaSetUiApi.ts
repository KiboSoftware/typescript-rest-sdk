/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  CreateCriteriaSetRowForm,
  DataDefinitionForm,
  EditCriteriaSetRowForm,
  EditSetNameForm,
  ModelAndView,
  UserContextInformation,
} from '../models';


export namespace orderRoutingLocationCriteriaSetUiApiParams { 
    export interface CreateLocationCriteriaSetRowRequest {
        criteriaSetID: number;
        info: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        createCriteriaSetRowForm: CreateCriteriaSetRowForm;
    }
    export interface DeleteConfirmationRequest {
        criteriaSetId: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface DeleteCriteriaSetRequest {
        criteriaSetId: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface DeleteFilterRequest {
        filterID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface DeleteLocationCriteriaSetRowRequest {
        criteriaSetID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        editCriteriaSetRowForm: EditCriteriaSetRowForm;
    }
    export interface DuplicateDataDefinitionRequest {
        definitionID: number;
        info: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface RemoveDataDefinitionRequest {
        definitionID: number;
        info: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface UpdateDataDefinitionRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        dataDefinitionForm?: DataDefinitionForm;
    }
    export interface UpdateLocationCriteriaSetRowRequest {
        criteriaSetID: number;
        info: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        editCriteriaSetRowForm: EditCriteriaSetRowForm;
    }
    export interface UpdateSetNameRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        editSetNameForm: EditSetNameForm;
    }
}
/**
* OrderRoutingLocationCriteriaSetUiApiService - interface
* 
* @export
* @interface OrderRoutingLocationCriteriaSetUiApi
*/
export interface OrderRoutingLocationCriteriaSetUiApiService {
    /**
    * Create Location Criteria Set Row
    * @summary Create Location Criteria Set Row
    * @param {number} criteriaSetID 
    * @param {UserContextInformation} info 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {CreateCriteriaSetRowForm} createCriteriaSetRowForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    createLocationCriteriaSetRowRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.CreateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Create Location Criteria Set Row
    * Create Location Criteria Set Row
    */
    createLocationCriteriaSetRow(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.CreateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Delete Confirmation
    * @summary Delete Confirmation
    * @param {number} criteriaSetId 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    deleteConfirmationRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Confirmation
    * Delete Confirmation
    */
    deleteConfirmation(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Delete Criteria Set
    * @summary Delete Criteria Set
    * @param {number} criteriaSetId 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    deleteCriteriaSetRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteCriteriaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Criteria Set
    * Delete Criteria Set
    */
    deleteCriteriaSet(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteCriteriaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Delete Filter
    * @summary Delete Filter
    * @param {number} filterID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    deleteFilterRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Filter
    * Delete Filter
    */
    deleteFilter(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Delete Location Criteria Set Row
    * @summary Delete Location Criteria Set Row
    * @param {number} criteriaSetID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {EditCriteriaSetRowForm} editCriteriaSetRowForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    deleteLocationCriteriaSetRowRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Location Criteria Set Row
    * Delete Location Criteria Set Row
    */
    deleteLocationCriteriaSetRow(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Duplicate Data Definition
    * @summary Duplicate Data Definition
    * @param {number} definitionID 
    * @param {UserContextInformation} info 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    duplicateDataDefinitionRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DuplicateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Duplicate Data Definition
    * Duplicate Data Definition
    */
    duplicateDataDefinition(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DuplicateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Remove Data Definition
    * @summary Remove Data Definition
    * @param {number} definitionID 
    * @param {UserContextInformation} info 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    removeDataDefinitionRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.RemoveDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Remove Data Definition
    * Remove Data Definition
    */
    removeDataDefinition(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.RemoveDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Update Data Definition
    * @summary Update Data Definition
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {DataDefinitionForm} [dataDefinitionForm] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    updateDataDefinitionRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Update Data Definition
    * Update Data Definition
    */
    updateDataDefinition(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Update Location Criteria Set Row
    * @summary Update Location Criteria Set Row
    * @param {number} criteriaSetID 
    * @param {UserContextInformation} info 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {EditCriteriaSetRowForm} editCriteriaSetRowForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    updateLocationCriteriaSetRowRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Update Location Criteria Set Row
    * Update Location Criteria Set Row
    */
    updateLocationCriteriaSetRow(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Update Set Name
    * @summary Update Set Name
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {EditSetNameForm} editSetNameForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingLocationCriteriaSetUiApiInterface
    */
    updateSetNameRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateSetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Update Set Name
    * Update Set Name
    */
    updateSetName(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateSetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingLocationCriteriaSetUiApi extends runtime.BaseAPI implements OrderRoutingLocationCriteriaSetUiApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Location Criteria Set Row
     * Create Location Criteria Set Row
     */


    async createLocationCriteriaSetRowRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.CreateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.criteriaSetID === null || requestParameters.criteriaSetID === undefined) {
            throw new runtime.RequiredError('criteriaSetID','Required parameter requestParameters.criteriaSetID was null or undefined when calling createLocationCriteriaSetRow.');
        }

        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling createLocationCriteriaSetRow.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createLocationCriteriaSetRow.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling createLocationCriteriaSetRow.');
        }

        if (requestParameters.createCriteriaSetRowForm === null || requestParameters.createCriteriaSetRowForm === undefined) {
            throw new runtime.RequiredError('createCriteriaSetRowForm','Required parameter requestParameters.createCriteriaSetRowForm was null or undefined when calling createLocationCriteriaSetRow.');
        }

        const queryParameters: any = {};

        if (requestParameters.info !== undefined) {
            queryParameters['info'] = requestParameters.info;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/{criteriaSetID}/createRow`.replace(`{${"criteriaSetID"}}`, encodeURIComponent(String(requestParameters.criteriaSetID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createCriteriaSetRowForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Location Criteria Set Row
     * Create Location Criteria Set Row
     */
    async createLocationCriteriaSetRow(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.CreateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.createLocationCriteriaSetRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Confirmation
     * Delete Confirmation
     */


    async deleteConfirmationRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.criteriaSetId === null || requestParameters.criteriaSetId === undefined) {
            throw new runtime.RequiredError('criteriaSetId','Required parameter requestParameters.criteriaSetId was null or undefined when calling deleteConfirmation.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteConfirmation.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteConfirmation.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteConfirmation.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/deleteConfirm/{criteriaSetId}`.replace(`{${"criteriaSetId"}}`, encodeURIComponent(String(requestParameters.criteriaSetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Confirmation
     * Delete Confirmation
     */
    async deleteConfirmation(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteConfirmationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteConfirmationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Criteria Set
     * Delete Criteria Set
     */


    async deleteCriteriaSetRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteCriteriaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.criteriaSetId === null || requestParameters.criteriaSetId === undefined) {
            throw new runtime.RequiredError('criteriaSetId','Required parameter requestParameters.criteriaSetId was null or undefined when calling deleteCriteriaSet.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteCriteriaSet.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteCriteriaSet.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteCriteriaSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/delete/{criteriaSetId}`.replace(`{${"criteriaSetId"}}`, encodeURIComponent(String(requestParameters.criteriaSetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Criteria Set
     * Delete Criteria Set
     */
    async deleteCriteriaSet(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteCriteriaSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteCriteriaSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Filter
     * Delete Filter
     */


    async deleteFilterRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.filterID === null || requestParameters.filterID === undefined) {
            throw new runtime.RequiredError('filterID','Required parameter requestParameters.filterID was null or undefined when calling deleteFilter.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteFilter.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFilter.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteFilter.');
        }

        const queryParameters: any = {};

        if (requestParameters.filterID !== undefined) {
            queryParameters['filterID'] = requestParameters.filterID;
        }

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/delete-filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Filter
     * Delete Filter
     */
    async deleteFilter(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Location Criteria Set Row
     * Delete Location Criteria Set Row
     */


    async deleteLocationCriteriaSetRowRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.criteriaSetID === null || requestParameters.criteriaSetID === undefined) {
            throw new runtime.RequiredError('criteriaSetID','Required parameter requestParameters.criteriaSetID was null or undefined when calling deleteLocationCriteriaSetRow.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteLocationCriteriaSetRow.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteLocationCriteriaSetRow.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteLocationCriteriaSetRow.');
        }

        if (requestParameters.editCriteriaSetRowForm === null || requestParameters.editCriteriaSetRowForm === undefined) {
            throw new runtime.RequiredError('editCriteriaSetRowForm','Required parameter requestParameters.editCriteriaSetRowForm was null or undefined when calling deleteLocationCriteriaSetRow.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/{criteriaSetID}/deleteRow`.replace(`{${"criteriaSetID"}}`, encodeURIComponent(String(requestParameters.criteriaSetID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.editCriteriaSetRowForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Location Criteria Set Row
     * Delete Location Criteria Set Row
     */
    async deleteLocationCriteriaSetRow(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DeleteLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteLocationCriteriaSetRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Duplicate Data Definition
     * Duplicate Data Definition
     */


    async duplicateDataDefinitionRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DuplicateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.definitionID === null || requestParameters.definitionID === undefined) {
            throw new runtime.RequiredError('definitionID','Required parameter requestParameters.definitionID was null or undefined when calling duplicateDataDefinition.');
        }

        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling duplicateDataDefinition.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling duplicateDataDefinition.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling duplicateDataDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.info !== undefined) {
            queryParameters['info'] = requestParameters.info;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/duplicateDataDefinition/{definitionID}`.replace(`{${"definitionID"}}`, encodeURIComponent(String(requestParameters.definitionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Duplicate Data Definition
     * Duplicate Data Definition
     */
    async duplicateDataDefinition(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.DuplicateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.duplicateDataDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Data Definition
     * Remove Data Definition
     */


    async removeDataDefinitionRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.RemoveDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.definitionID === null || requestParameters.definitionID === undefined) {
            throw new runtime.RequiredError('definitionID','Required parameter requestParameters.definitionID was null or undefined when calling removeDataDefinition.');
        }

        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling removeDataDefinition.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling removeDataDefinition.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling removeDataDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.info !== undefined) {
            queryParameters['info'] = requestParameters.info;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/removeDataDefinition/{definitionID}`.replace(`{${"definitionID"}}`, encodeURIComponent(String(requestParameters.definitionID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Data Definition
     * Remove Data Definition
     */
    async removeDataDefinition(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.RemoveDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.removeDataDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Data Definition
     * Update Data Definition
     */


    async updateDataDefinitionRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling updateDataDefinition.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateDataDefinition.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateDataDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/updateDataDefinition`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dataDefinitionForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Data Definition
     * Update Data Definition
     */
    async updateDataDefinition(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateDataDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.updateDataDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Location Criteria Set Row
     * Update Location Criteria Set Row
     */


    async updateLocationCriteriaSetRowRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.criteriaSetID === null || requestParameters.criteriaSetID === undefined) {
            throw new runtime.RequiredError('criteriaSetID','Required parameter requestParameters.criteriaSetID was null or undefined when calling updateLocationCriteriaSetRow.');
        }

        if (requestParameters.info === null || requestParameters.info === undefined) {
            throw new runtime.RequiredError('info','Required parameter requestParameters.info was null or undefined when calling updateLocationCriteriaSetRow.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateLocationCriteriaSetRow.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateLocationCriteriaSetRow.');
        }

        if (requestParameters.editCriteriaSetRowForm === null || requestParameters.editCriteriaSetRowForm === undefined) {
            throw new runtime.RequiredError('editCriteriaSetRowForm','Required parameter requestParameters.editCriteriaSetRowForm was null or undefined when calling updateLocationCriteriaSetRow.');
        }

        const queryParameters: any = {};

        if (requestParameters.info !== undefined) {
            queryParameters['info'] = requestParameters.info;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/{criteriaSetID}/updateRow`.replace(`{${"criteriaSetID"}}`, encodeURIComponent(String(requestParameters.criteriaSetID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.editCriteriaSetRowForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Location Criteria Set Row
     * Update Location Criteria Set Row
     */
    async updateLocationCriteriaSetRow(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateLocationCriteriaSetRowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.updateLocationCriteriaSetRowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Set Name
     * Update Set Name
     */


    async updateSetNameRaw(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateSetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling updateSetName.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateSetName.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateSetName.');
        }

        if (requestParameters.editSetNameForm === null || requestParameters.editSetNameForm === undefined) {
            throw new runtime.RequiredError('editSetNameForm','Required parameter requestParameters.editSetNameForm was null or undefined when calling updateSetName.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locationCriteriaSets/updateSetName`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.editSetNameForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Set Name
     * Update Set Name
     */
    async updateSetName(requestParameters: orderRoutingLocationCriteriaSetUiApiParams.UpdateSetNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.updateSetNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
