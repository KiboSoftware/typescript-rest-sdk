/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  ModelAndView,
  UserContextInformation,
} from '../models';


export namespace orderRoutingSuggestionLogUiApiParams { 
    export interface GetSuggestionLogRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        suggestionID?: number;
        orderID?: number;
        externalResponseID?: string;
    }
}
/**
* OrderRoutingSuggestionLogUiApiService - interface
* 
* @export
* @interface OrderRoutingSuggestionLogUiApi
*/
export interface OrderRoutingSuggestionLogUiApiService {
    /**
    * Get Suggestion Log
    * @summary Get Suggestion Log
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {number} [suggestionID] 
    * @param {number} [orderID] 
    * @param {string} [externalResponseID] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingSuggestionLogUiApiInterface
    */
    getSuggestionLogRaw(requestParameters: orderRoutingSuggestionLogUiApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Suggestion Log
    * Get Suggestion Log
    */
    getSuggestionLog(requestParameters: orderRoutingSuggestionLogUiApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingSuggestionLogUiApi extends runtime.BaseAPI implements OrderRoutingSuggestionLogUiApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Suggestion Log
     * Get Suggestion Log
     */


    async getSuggestionLogRaw(requestParameters: orderRoutingSuggestionLogUiApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling getSuggestionLog.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSuggestionLog.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSuggestionLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.suggestionID !== undefined) {
            queryParameters['suggestionID'] = requestParameters.suggestionID;
        }

        if (requestParameters.orderID !== undefined) {
            queryParameters['orderID'] = requestParameters.orderID;
        }

        if (requestParameters.externalResponseID !== undefined) {
            queryParameters['externalResponseID'] = requestParameters.externalResponseID;
        }

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/suggestionLog/json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Suggestion Log
     * Get Suggestion Log
     */
    async getSuggestionLog(requestParameters: orderRoutingSuggestionLogUiApiParams.GetSuggestionLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getSuggestionLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
