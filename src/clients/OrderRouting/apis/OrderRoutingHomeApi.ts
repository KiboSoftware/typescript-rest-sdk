/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  ModelAndView,
} from '../models';


export namespace orderRoutingHomeApiParams { 
    export interface AjaxMessageRequest {
        code: string;
        xVolTenant: number;
        xVolSite: number;
    }
}
/**
* OrderRoutingHomeApiService - interface
* 
* @export
* @interface OrderRoutingHomeApi
*/
export interface OrderRoutingHomeApiService {
    /**
    * Ajax Message
    * @summary Ajax Message
    * @param {string} code 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingHomeApiInterface
    */
    ajaxMessageRaw(requestParameters: orderRoutingHomeApiParams.AjaxMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Ajax Message
    * Ajax Message
    */
    ajaxMessage(requestParameters: orderRoutingHomeApiParams.AjaxMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingHomeApi extends runtime.BaseAPI implements OrderRoutingHomeApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Ajax Message
     * Ajax Message
     */


    async ajaxMessageRaw(requestParameters: orderRoutingHomeApiParams.AjaxMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling ajaxMessage.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling ajaxMessage.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling ajaxMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/locale/message`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Ajax Message
     * Ajax Message
     */
    async ajaxMessage(requestParameters: orderRoutingHomeApiParams.AjaxMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.ajaxMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
