/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  APIErrorResponse,
  LocationGroupModel,
  LocationSort,
  OrderRoutingLocationGroup,
} from '../models';


export namespace orderRoutingGroupApiParams { 
    export interface GetGroupRequest {
        groupID: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface SaveGroupRequest {
        xVolTenant: number;
        xVolSite: number;
        locationGroupModel: LocationGroupModel;
    }
    export interface SetGroupFiltersRequest {
        groupID: number;
        xVolTenant: number;
        xVolSite: number;
        requestBody: Set<number>;
    }
    export interface SetGroupSortsRequest {
        groupID: number;
        xVolTenant: number;
        xVolSite: number;
        locationSort: Array<LocationSort>;
    }
    export interface TestGroupRequest {
        xVolTenant: number;
        xVolSite: number;
    }
}
/**
* OrderRoutingGroupApiService - interface
* 
* @export
* @interface OrderRoutingGroupApi
*/
export interface OrderRoutingGroupApiService {
    /**
    * Get Group
    * @summary Get Group
    * @param {number} groupID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    getGroupRaw(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>>;

    /**
    * Get Group
    * Get Group
    */
    getGroup(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup>;

    /**
    * Save Group
    * @summary Save Group
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {LocationGroupModel} locationGroupModel 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    saveGroupRaw(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>>;

    /**
    * Save Group
    * Save Group
    */
    saveGroup(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup>;

    /**
    * Set Group Filters
    * @summary Set Group Filters
    * @param {number} groupID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {Set<number>} requestBody 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    setGroupFiltersRaw(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>>;

    /**
    * Set Group Filters
    * Set Group Filters
    */
    setGroupFilters(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup>;

    /**
    * Set Group Sorts
    * @summary Set Group Sorts
    * @param {number} groupID 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {Array<LocationSort>} locationSort 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    setGroupSortsRaw(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>>;

    /**
    * Set Group Sorts
    * Set Group Sorts
    */
    setGroupSorts(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup>;

    /**
    * Test Group
    * @summary Test Group
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    testGroupRaw(requestParameters: orderRoutingGroupApiParams.TestGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>>;

    /**
    * Test Group
    * Test Group
    */
    testGroup(requestParameters: orderRoutingGroupApiParams.TestGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup>;

}


/**
 * 
 */
export class OrderRoutingGroupApi extends runtime.BaseAPI implements OrderRoutingGroupApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Group
     * Get Group
     */


    async getGroupRaw(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling getGroup.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Group
     * Get Group
     */
    async getGroup(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save Group
     * Save Group
     */


    async saveGroupRaw(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveGroup.');
        }

        if (requestParameters.locationGroupModel === null || requestParameters.locationGroupModel === undefined) {
            throw new runtime.RequiredError('locationGroupModel','Required parameter requestParameters.locationGroupModel was null or undefined when calling saveGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationGroupModel,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Save Group
     * Save Group
     */
    async saveGroup(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup> {
        const response = await this.saveGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set Group Filters
     * Set Group Filters
     */


    async setGroupFiltersRaw(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling setGroupFilters.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling setGroupFilters.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling setGroupFilters.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling setGroupFilters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}/setFilters`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set Group Filters
     * Set Group Filters
     */
    async setGroupFilters(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup> {
        const response = await this.setGroupFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set Group Sorts
     * Set Group Sorts
     */


    async setGroupSortsRaw(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling setGroupSorts.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling setGroupSorts.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling setGroupSorts.');
        }

        if (requestParameters.locationSort === null || requestParameters.locationSort === undefined) {
            throw new runtime.RequiredError('locationSort','Required parameter requestParameters.locationSort was null or undefined when calling setGroupSorts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}/setSorts`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationSort,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set Group Sorts
     * Set Group Sorts
     */
    async setGroupSorts(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup> {
        const response = await this.setGroupSortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Group
     * Test Group
     */


    async testGroupRaw(requestParameters: orderRoutingGroupApiParams.TestGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderRoutingLocationGroup>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling testGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Test Group
     * Test Group
     */
    async testGroup(requestParameters: orderRoutingGroupApiParams.TestGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderRoutingLocationGroup> {
        const response = await this.testGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
