/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ApiDocumentationLocationGroup,
  LocationGroupModel,
  LocationSort,
} from '../models';


export namespace orderRoutingGroupApiParams { 
    export interface DeleteGroupRequest {
        groupID: number;
    }
    export interface GetGroupRequest {
        groupID: number;
    }
    export interface SaveGroupRequest {
        loc: LocationGroupModel;
    }
    export interface SetGroupFiltersRequest {
        groupID: number;
        filterIDs: Array<number>;
    }
    export interface SetGroupSortsRequest {
        groupID: number;
        sorts: Array<LocationSort>;
    }
}
/**
* OrderRoutingGroupApiService - interface
* 
* @export
* @interface OrderRoutingGroupApi
*/
export interface OrderRoutingGroupApiService {
    /**
    * deleteGroup
    * @summary deleteGroup
    * @param {number} groupID groupID
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    deleteGroupRaw(requestParameters: orderRoutingGroupApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * deleteGroup
    * deleteGroup
    */
    deleteGroup(requestParameters: orderRoutingGroupApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * getGroup
    * @summary getGroup
    * @param {number} groupID groupID
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    getGroupRaw(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
    * getGroup
    * getGroup
    */
    getGroup(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
    * saveGroup
    * @summary saveGroup
    * @param {LocationGroupModel} loc loc
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    saveGroupRaw(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
    * saveGroup
    * saveGroup
    */
    saveGroup(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
    * setGroupFilters
    * @summary setGroupFilters
    * @param {number} groupID groupID
    * @param {Array<number>} filterIDs filterIDs
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    setGroupFiltersRaw(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
    * setGroupFilters
    * setGroupFilters
    */
    setGroupFilters(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
    * setGroupSorts
    * @summary setGroupSorts
    * @param {number} groupID groupID
    * @param {Array<LocationSort>} sorts sorts
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    setGroupSortsRaw(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
    * setGroupSorts
    * setGroupSorts
    */
    setGroupSorts(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
    * testGroup
    * @summary testGroup
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGroupApiInterface
    */
    testGroupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
    * testGroup
    * testGroup
    */
    testGroup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

}


/**
 * 
 */
export class OrderRoutingGroupApi extends runtime.BaseAPI implements OrderRoutingGroupApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteGroup
     * deleteGroup
     */


    async deleteGroupRaw(requestParameters: orderRoutingGroupApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling deleteGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/delete/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteGroup
     * deleteGroup
     */
    async deleteGroup(requestParameters: orderRoutingGroupApiParams.DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * getGroup
     * getGroup
     */


    async getGroupRaw(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getGroup
     * getGroup
     */
    async getGroup(requestParameters: orderRoutingGroupApiParams.GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveGroup
     * saveGroup
     */


    async saveGroupRaw(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.loc === null || requestParameters.loc === undefined) {
            throw new runtime.RequiredError('loc','Required parameter requestParameters.loc was null or undefined when calling saveGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.loc,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveGroup
     * saveGroup
     */
    async saveGroup(requestParameters: orderRoutingGroupApiParams.SaveGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.saveGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * setGroupFilters
     * setGroupFilters
     */


    async setGroupFiltersRaw(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling setGroupFilters.');
        }

        if (requestParameters.filterIDs === null || requestParameters.filterIDs === undefined) {
            throw new runtime.RequiredError('filterIDs','Required parameter requestParameters.filterIDs was null or undefined when calling setGroupFilters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}/setFilters`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.filterIDs,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * setGroupFilters
     * setGroupFilters
     */
    async setGroupFilters(requestParameters: orderRoutingGroupApiParams.SetGroupFiltersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.setGroupFiltersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * setGroupSorts
     * setGroupSorts
     */


    async setGroupSortsRaw(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling setGroupSorts.');
        }

        if (requestParameters.sorts === null || requestParameters.sorts === undefined) {
            throw new runtime.RequiredError('sorts','Required parameter requestParameters.sorts was null or undefined when calling setGroupSorts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}/setSorts`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.sorts,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * setGroupSorts
     * setGroupSorts
     */
    async setGroupSorts(requestParameters: orderRoutingGroupApiParams.SetGroupSortsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.setGroupSortsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * testGroup
     * testGroup
     */


    async testGroupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * testGroup
     * testGroup
     */
    async testGroup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.testGroupRaw(initOverrides);
        return await response.value();
    }

}
