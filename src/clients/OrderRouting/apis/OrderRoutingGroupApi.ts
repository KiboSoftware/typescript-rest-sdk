/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ApiDocumentationLocationGroup,
  LocationGroupModel,
  LocationSort,
} from '../models';

export interface OrderRoutingGroupApiDeleteGroupUsingDELETERequest {
    groupID: number;
    xVolSite: number;
    xVolTenant: number;
}

export interface OrderRoutingGroupApiGetGroupUsingGETRequest {
    groupID: number;
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

export interface OrderRoutingGroupApiSaveGroupUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    loc: LocationGroupModel;
    responseFields?: string;
}

export interface OrderRoutingGroupApiSetGroupFiltersUsingPOSTRequest {
    groupID: number;
    xVolSite: number;
    xVolTenant: number;
    filterIDs: Array<number>;
    responseFields?: string;
}

export interface OrderRoutingGroupApiSetGroupSortsUsingPOSTRequest {
    groupID: number;
    xVolSite: number;
    xVolTenant: number;
    sorts: Array<LocationSort>;
    responseFields?: string;
}

export interface OrderRoutingGroupApiTestGroupUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

/**
 * OrderRoutingGroupApi - interface
 * 
 * @export
 * @interface OrderRoutingGroupApiInterface
 */
export interface OrderRoutingGroupApiInterface {
    /**
     * deleteGroup
     * @summary deleteGroup
     * @param {number} groupID groupID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingGroupApiInterface
     */
    deleteGroupUsingDELETERaw(requestParameters: OrderRoutingGroupApiDeleteGroupUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteGroup
     * deleteGroup
     */
    deleteGroupUsingDELETE(requestParameters: OrderRoutingGroupApiDeleteGroupUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * getGroup
     * @summary getGroup
     * @param {number} groupID groupID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingGroupApiInterface
     */
    getGroupUsingGETRaw(requestParameters: OrderRoutingGroupApiGetGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
     * getGroup
     * getGroup
     */
    getGroupUsingGET(requestParameters: OrderRoutingGroupApiGetGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
     * saveGroup
     * @summary saveGroup
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {LocationGroupModel} loc loc
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingGroupApiInterface
     */
    saveGroupUsingPOSTRaw(requestParameters: OrderRoutingGroupApiSaveGroupUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
     * saveGroup
     * saveGroup
     */
    saveGroupUsingPOST(requestParameters: OrderRoutingGroupApiSaveGroupUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
     * setGroupFilters
     * @summary setGroupFilters
     * @param {number} groupID groupID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {Array<number>} filterIDs filterIDs
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingGroupApiInterface
     */
    setGroupFiltersUsingPOSTRaw(requestParameters: OrderRoutingGroupApiSetGroupFiltersUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
     * setGroupFilters
     * setGroupFilters
     */
    setGroupFiltersUsingPOST(requestParameters: OrderRoutingGroupApiSetGroupFiltersUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
     * setGroupSorts
     * @summary setGroupSorts
     * @param {number} groupID groupID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {Array<LocationSort>} sorts sorts
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingGroupApiInterface
     */
    setGroupSortsUsingPOSTRaw(requestParameters: OrderRoutingGroupApiSetGroupSortsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
     * setGroupSorts
     * setGroupSorts
     */
    setGroupSortsUsingPOST(requestParameters: OrderRoutingGroupApiSetGroupSortsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

    /**
     * testGroup
     * @summary testGroup
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingGroupApiInterface
     */
    testGroupUsingGETRaw(requestParameters: OrderRoutingGroupApiTestGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>>;

    /**
     * testGroup
     * testGroup
     */
    testGroupUsingGET(requestParameters: OrderRoutingGroupApiTestGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup>;

}

/**
 * 
 */
export class OrderRoutingGroupApi extends runtime.BaseAPI implements OrderRoutingGroupApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteGroup
     * deleteGroup
     */


    async deleteGroupUsingDELETERaw(requestParameters: OrderRoutingGroupApiDeleteGroupUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling deleteGroupUsingDELETE.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteGroupUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteGroupUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/delete/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteGroup
     * deleteGroup
     */
    async deleteGroupUsingDELETE(requestParameters: OrderRoutingGroupApiDeleteGroupUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * getGroup
     * getGroup
     */


    async getGroupUsingGETRaw(requestParameters: OrderRoutingGroupApiGetGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling getGroupUsingGET.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getGroupUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getGroupUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getGroup
     * getGroup
     */
    async getGroupUsingGET(requestParameters: OrderRoutingGroupApiGetGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.getGroupUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveGroup
     * saveGroup
     */


    async saveGroupUsingPOSTRaw(requestParameters: OrderRoutingGroupApiSaveGroupUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveGroupUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveGroupUsingPOST.');
        }

        if (requestParameters.loc === null || requestParameters.loc === undefined) {
            throw new runtime.RequiredError('loc','Required parameter requestParameters.loc was null or undefined when calling saveGroupUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.loc,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveGroup
     * saveGroup
     */
    async saveGroupUsingPOST(requestParameters: OrderRoutingGroupApiSaveGroupUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.saveGroupUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * setGroupFilters
     * setGroupFilters
     */


    async setGroupFiltersUsingPOSTRaw(requestParameters: OrderRoutingGroupApiSetGroupFiltersUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling setGroupFiltersUsingPOST.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling setGroupFiltersUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling setGroupFiltersUsingPOST.');
        }

        if (requestParameters.filterIDs === null || requestParameters.filterIDs === undefined) {
            throw new runtime.RequiredError('filterIDs','Required parameter requestParameters.filterIDs was null or undefined when calling setGroupFiltersUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}/setFilters`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.filterIDs,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * setGroupFilters
     * setGroupFilters
     */
    async setGroupFiltersUsingPOST(requestParameters: OrderRoutingGroupApiSetGroupFiltersUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.setGroupFiltersUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * setGroupSorts
     * setGroupSorts
     */


    async setGroupSortsUsingPOSTRaw(requestParameters: OrderRoutingGroupApiSetGroupSortsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling setGroupSortsUsingPOST.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling setGroupSortsUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling setGroupSortsUsingPOST.');
        }

        if (requestParameters.sorts === null || requestParameters.sorts === undefined) {
            throw new runtime.RequiredError('sorts','Required parameter requestParameters.sorts was null or undefined when calling setGroupSortsUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/{groupID}/setSorts`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters.groupID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.sorts,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * setGroupSorts
     * setGroupSorts
     */
    async setGroupSortsUsingPOST(requestParameters: OrderRoutingGroupApiSetGroupSortsUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.setGroupSortsUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * testGroup
     * testGroup
     */


    async testGroupUsingGETRaw(requestParameters: OrderRoutingGroupApiTestGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDocumentationLocationGroup>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling testGroupUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testGroupUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/group/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * testGroup
     * testGroup
     */
    async testGroupUsingGET(requestParameters: OrderRoutingGroupApiTestGroupUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDocumentationLocationGroup> {
        const response = await this.testGroupUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
