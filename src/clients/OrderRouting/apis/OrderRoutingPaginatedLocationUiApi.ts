/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  ChangeActiveStatusRequestData,
  LocationsData,
  ModelAndView,
  UserContextInformation,
} from '../models';


export namespace orderRoutingPaginatedLocationUiApiParams { 
    export interface ChangeLocationActivationStatusRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        changeActiveStatusRequestData: ChangeActiveStatusRequestData;
    }
    export interface GroupLocationsRequest {
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        locationsData: LocationsData;
    }
    export interface ReloadLocationCardRequest {
        locationID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface RemoveLocationFromGroupRequest {
        groupID: number;
        locationID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
}
/**
* OrderRoutingPaginatedLocationUiApiService - interface
* 
* @export
* @interface OrderRoutingPaginatedLocationUiApi
*/
export interface OrderRoutingPaginatedLocationUiApiService {
    /**
    * Change Location Activation Status
    * @summary Change Location Activation Status
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {ChangeActiveStatusRequestData} changeActiveStatusRequestData 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingPaginatedLocationUiApiInterface
    */
    changeLocationActivationStatusRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.ChangeLocationActivationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Change Location Activation Status
    * Change Location Activation Status
    */
    changeLocationActivationStatus(requestParameters: orderRoutingPaginatedLocationUiApiParams.ChangeLocationActivationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Group Locations
    * @summary Group Locations
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {LocationsData} locationsData 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingPaginatedLocationUiApiInterface
    */
    groupLocationsRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.GroupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Group Locations
    * Group Locations
    */
    groupLocations(requestParameters: orderRoutingPaginatedLocationUiApiParams.GroupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Reload Location Card
    * @summary Reload Location Card
    * @param {number} locationID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingPaginatedLocationUiApiInterface
    */
    reloadLocationCardRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.ReloadLocationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Reload Location Card
    * Reload Location Card
    */
    reloadLocationCard(requestParameters: orderRoutingPaginatedLocationUiApiParams.ReloadLocationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Remove Location From Group
    * @summary Remove Location From Group
    * @param {number} groupID 
    * @param {number} locationID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingPaginatedLocationUiApiInterface
    */
    removeLocationFromGroupRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.RemoveLocationFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Remove Location From Group
    * Remove Location From Group
    */
    removeLocationFromGroup(requestParameters: orderRoutingPaginatedLocationUiApiParams.RemoveLocationFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingPaginatedLocationUiApi extends runtime.BaseAPI implements OrderRoutingPaginatedLocationUiApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Change Location Activation Status
     * Change Location Activation Status
     */


    async changeLocationActivationStatusRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.ChangeLocationActivationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling changeLocationActivationStatus.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling changeLocationActivationStatus.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling changeLocationActivationStatus.');
        }

        if (requestParameters.changeActiveStatusRequestData === null || requestParameters.changeActiveStatusRequestData === undefined) {
            throw new runtime.RequiredError('changeActiveStatusRequestData','Required parameter requestParameters.changeActiveStatusRequestData was null or undefined when calling changeLocationActivationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locations/change-status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.changeActiveStatusRequestData,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Change Location Activation Status
     * Change Location Activation Status
     */
    async changeLocationActivationStatus(requestParameters: orderRoutingPaginatedLocationUiApiParams.ChangeLocationActivationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.changeLocationActivationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Group Locations
     * Group Locations
     */


    async groupLocationsRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.GroupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling groupLocations.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling groupLocations.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling groupLocations.');
        }

        if (requestParameters.locationsData === null || requestParameters.locationsData === undefined) {
            throw new runtime.RequiredError('locationsData','Required parameter requestParameters.locationsData was null or undefined when calling groupLocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locations/group-or-ungroup-locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationsData,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Group Locations
     * Group Locations
     */
    async groupLocations(requestParameters: orderRoutingPaginatedLocationUiApiParams.GroupLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.groupLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reload Location Card
     * Reload Location Card
     */


    async reloadLocationCardRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.ReloadLocationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.locationID === null || requestParameters.locationID === undefined) {
            throw new runtime.RequiredError('locationID','Required parameter requestParameters.locationID was null or undefined when calling reloadLocationCard.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling reloadLocationCard.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling reloadLocationCard.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling reloadLocationCard.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locations/detail/{locationID}/reload`.replace(`{${"locationID"}}`, encodeURIComponent(String(requestParameters.locationID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Reload Location Card
     * Reload Location Card
     */
    async reloadLocationCard(requestParameters: orderRoutingPaginatedLocationUiApiParams.ReloadLocationCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.reloadLocationCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Location From Group
     * Remove Location From Group
     */


    async removeLocationFromGroupRaw(requestParameters: orderRoutingPaginatedLocationUiApiParams.RemoveLocationFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.groupID === null || requestParameters.groupID === undefined) {
            throw new runtime.RequiredError('groupID','Required parameter requestParameters.groupID was null or undefined when calling removeLocationFromGroup.');
        }

        if (requestParameters.locationID === null || requestParameters.locationID === undefined) {
            throw new runtime.RequiredError('locationID','Required parameter requestParameters.locationID was null or undefined when calling removeLocationFromGroup.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling removeLocationFromGroup.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling removeLocationFromGroup.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling removeLocationFromGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.groupID !== undefined) {
            queryParameters['groupID'] = requestParameters.groupID;
        }

        if (requestParameters.locationID !== undefined) {
            queryParameters['locationID'] = requestParameters.locationID;
        }

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/locations/remove-location`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Location From Group
     * Remove Location From Group
     */
    async removeLocationFromGroup(requestParameters: orderRoutingPaginatedLocationUiApiParams.RemoveLocationFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.removeLocationFromGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
