/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  SessionTest,
  ShopatronUser,
} from '../models';


export namespace orderRoutingGlobalApiParams { 
    export interface AuthorityRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetBuildVersionRequest {
        xVolTenant: number;
        xVolSite: number;
    }
    export interface GetSessionDataRequest {
        sessionTest: SessionTest;
        expectedSessionVar: number;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface UserSearchRequest {
        xVolTenant: number;
        xVolSite: number;
    }
}
/**
* OrderRoutingGlobalApiService - interface
* 
* @export
* @interface OrderRoutingGlobalApi
*/
export interface OrderRoutingGlobalApiService {
    /**
    * Authority
    * @summary Authority
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGlobalApiInterface
    */
    authorityRaw(requestParameters: orderRoutingGlobalApiParams.AuthorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
    * Authority
    * Authority
    */
    authority(requestParameters: orderRoutingGlobalApiParams.AuthorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
    * Get Build Version
    * @summary Get Build Version
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGlobalApiInterface
    */
    getBuildVersionRaw(requestParameters: orderRoutingGlobalApiParams.GetBuildVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>>;

    /**
    * Get Build Version
    * Get Build Version
    */
    getBuildVersion(requestParameters: orderRoutingGlobalApiParams.GetBuildVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }>;

    /**
    * Get Session Data
    * @summary Get Session Data
    * @param {SessionTest} sessionTest 
    * @param {number} expectedSessionVar 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGlobalApiInterface
    */
    getSessionDataRaw(requestParameters: orderRoutingGlobalApiParams.GetSessionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Get Session Data
    * Get Session Data
    */
    getSessionData(requestParameters: orderRoutingGlobalApiParams.GetSessionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * User Search
    * @summary User Search
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingGlobalApiInterface
    */
    userSearchRaw(requestParameters: orderRoutingGlobalApiParams.UserSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShopatronUser>>;

    /**
    * User Search
    * User Search
    */
    userSearch(requestParameters: orderRoutingGlobalApiParams.UserSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShopatronUser>;

}


/**
 * 
 */
export class OrderRoutingGlobalApi extends runtime.BaseAPI implements OrderRoutingGlobalApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Authority
     * Authority
     */


    async authorityRaw(requestParameters: orderRoutingGlobalApiParams.AuthorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling authority.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling authority.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/authority`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Authority
     * Authority
     */
    async authority(requestParameters: orderRoutingGlobalApiParams.AuthorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.authorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Build Version
     * Get Build Version
     */


    async getBuildVersionRaw(requestParameters: orderRoutingGlobalApiParams.GetBuildVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getBuildVersion.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getBuildVersion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Build Version
     * Get Build Version
     */
    async getBuildVersion(requestParameters: orderRoutingGlobalApiParams.GetBuildVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.getBuildVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Session Data
     * Get Session Data
     */


    async getSessionDataRaw(requestParameters: orderRoutingGlobalApiParams.GetSessionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.sessionTest === null || requestParameters.sessionTest === undefined) {
            throw new runtime.RequiredError('sessionTest','Required parameter requestParameters.sessionTest was null or undefined when calling getSessionData.');
        }

        if (requestParameters.expectedSessionVar === null || requestParameters.expectedSessionVar === undefined) {
            throw new runtime.RequiredError('expectedSessionVar','Required parameter requestParameters.expectedSessionVar was null or undefined when calling getSessionData.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getSessionData.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getSessionData.');
        }

        const queryParameters: any = {};

        if (requestParameters.sessionTest !== undefined) {
            queryParameters['sessionTest'] = requestParameters.sessionTest;
        }

        if (requestParameters.expectedSessionVar !== undefined) {
            queryParameters['expectedSessionVar'] = requestParameters.expectedSessionVar;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/developer/test/getSession`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Session Data
     * Get Session Data
     */
    async getSessionData(requestParameters: orderRoutingGlobalApiParams.GetSessionDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.getSessionDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Search
     * User Search
     */


    async userSearchRaw(requestParameters: orderRoutingGlobalApiParams.UserSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShopatronUser>> {
        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling userSearch.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling userSearch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * User Search
     * User Search
     */
    async userSearch(requestParameters: orderRoutingGlobalApiParams.UserSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShopatronUser> {
        const response = await this.userSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
