/* tslint:disable */
/* eslint-disable */
/**
 * Order Routing
 * Order Routing API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AjaxResponse,
  EditCustomDataListForm,
  EditDataListEntryForm,
  ModelAndView,
  UserContextInformation,
} from '../models';


export namespace orderRoutingCustomDataListUiApiParams { 
    export interface CreateEntryRequest {
        listID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        editDataListEntryForm: EditDataListEntryForm;
    }
    export interface DeleteDataListRequest {
        listID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface DeleteDataListEntryRequest {
        entryID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
    }
    export interface UpdateDataListRequest {
        oldListID: number;
        newListID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        accept?: string;
    }
    export interface UpdateDataListInfoRequest {
        listID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        editCustomDataListForm: EditCustomDataListForm;
    }
    export interface UpdateEntryRequest {
        listEntryID: number;
        userContextInformation: UserContextInformation;
        xVolTenant: number;
        xVolSite: number;
        editDataListEntryForm: EditDataListEntryForm;
    }
}
/**
* OrderRoutingCustomDataListUiApiService - interface
* 
* @export
* @interface OrderRoutingCustomDataListUiApi
*/
export interface OrderRoutingCustomDataListUiApiService {
    /**
    * Create Entry
    * @summary Create Entry
    * @param {number} listID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {EditDataListEntryForm} editDataListEntryForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingCustomDataListUiApiInterface
    */
    createEntryRaw(requestParameters: orderRoutingCustomDataListUiApiParams.CreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Create Entry
    * Create Entry
    */
    createEntry(requestParameters: orderRoutingCustomDataListUiApiParams.CreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Delete Data List
    * @summary Delete Data List
    * @param {number} listID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingCustomDataListUiApiInterface
    */
    deleteDataListRaw(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Data List
    * Delete Data List
    */
    deleteDataList(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Delete Data List Entry
    * @summary Delete Data List Entry
    * @param {number} entryID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingCustomDataListUiApiInterface
    */
    deleteDataListEntryRaw(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Delete Data List Entry
    * Delete Data List Entry
    */
    deleteDataListEntry(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Update Data List
    * @summary Update Data List
    * @param {number} oldListID 
    * @param {number} newListID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {string} [accept] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingCustomDataListUiApiInterface
    */
    updateDataListRaw(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Update Data List
    * Update Data List
    */
    updateDataList(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Update Data List Info
    * @summary Update Data List Info
    * @param {number} listID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {EditCustomDataListForm} editCustomDataListForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingCustomDataListUiApiInterface
    */
    updateDataListInfoRaw(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Update Data List Info
    * Update Data List Info
    */
    updateDataListInfo(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

    /**
    * Update Entry
    * @summary Update Entry
    * @param {number} listEntryID 
    * @param {UserContextInformation} userContextInformation 
    * @param {number} xVolTenant Tenant
    * @param {number} xVolSite Site
    * @param {EditDataListEntryForm} editDataListEntryForm 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof OrderRoutingCustomDataListUiApiInterface
    */
    updateEntryRaw(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>>;

    /**
    * Update Entry
    * Update Entry
    */
    updateEntry(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse>;

}


/**
 * 
 */
export class OrderRoutingCustomDataListUiApi extends runtime.BaseAPI implements OrderRoutingCustomDataListUiApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Entry
     * Create Entry
     */


    async createEntryRaw(requestParameters: orderRoutingCustomDataListUiApiParams.CreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.listID === null || requestParameters.listID === undefined) {
            throw new runtime.RequiredError('listID','Required parameter requestParameters.listID was null or undefined when calling createEntry.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling createEntry.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createEntry.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling createEntry.');
        }

        if (requestParameters.editDataListEntryForm === null || requestParameters.editDataListEntryForm === undefined) {
            throw new runtime.RequiredError('editDataListEntryForm','Required parameter requestParameters.editDataListEntryForm was null or undefined when calling createEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/customDataLists/{listID}/createEntry`.replace(`{${"listID"}}`, encodeURIComponent(String(requestParameters.listID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.editDataListEntryForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Entry
     * Create Entry
     */
    async createEntry(requestParameters: orderRoutingCustomDataListUiApiParams.CreateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.createEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Data List
     * Delete Data List
     */


    async deleteDataListRaw(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.listID === null || requestParameters.listID === undefined) {
            throw new runtime.RequiredError('listID','Required parameter requestParameters.listID was null or undefined when calling deleteDataList.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteDataList.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteDataList.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteDataList.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/customDataLists/delete/{listID}`.replace(`{${"listID"}}`, encodeURIComponent(String(requestParameters.listID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Data List
     * Delete Data List
     */
    async deleteDataList(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteDataListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Data List Entry
     * Delete Data List Entry
     */


    async deleteDataListEntryRaw(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.entryID === null || requestParameters.entryID === undefined) {
            throw new runtime.RequiredError('entryID','Required parameter requestParameters.entryID was null or undefined when calling deleteDataListEntry.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling deleteDataListEntry.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteDataListEntry.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteDataListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/customDataLists/deleteEntry/{entryID}`.replace(`{${"entryID"}}`, encodeURIComponent(String(requestParameters.entryID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Data List Entry
     * Delete Data List Entry
     */
    async deleteDataListEntry(requestParameters: orderRoutingCustomDataListUiApiParams.DeleteDataListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.deleteDataListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Data List
     * Update Data List
     */


    async updateDataListRaw(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.oldListID === null || requestParameters.oldListID === undefined) {
            throw new runtime.RequiredError('oldListID','Required parameter requestParameters.oldListID was null or undefined when calling updateDataList.');
        }

        if (requestParameters.newListID === null || requestParameters.newListID === undefined) {
            throw new runtime.RequiredError('newListID','Required parameter requestParameters.newListID was null or undefined when calling updateDataList.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling updateDataList.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateDataList.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateDataList.');
        }

        const queryParameters: any = {};

        if (requestParameters.oldListID !== undefined) {
            queryParameters['oldListID'] = requestParameters.oldListID;
        }

        if (requestParameters.newListID !== undefined) {
            queryParameters['newListID'] = requestParameters.newListID;
        }

        if (requestParameters.accept !== undefined) {
            queryParameters['accept'] = requestParameters.accept;
        }

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/customDataLists/replaceList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Data List
     * Update Data List
     */
    async updateDataList(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.updateDataListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Data List Info
     * Update Data List Info
     */


    async updateDataListInfoRaw(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.listID === null || requestParameters.listID === undefined) {
            throw new runtime.RequiredError('listID','Required parameter requestParameters.listID was null or undefined when calling updateDataListInfo.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling updateDataListInfo.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateDataListInfo.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateDataListInfo.');
        }

        if (requestParameters.editCustomDataListForm === null || requestParameters.editCustomDataListForm === undefined) {
            throw new runtime.RequiredError('editCustomDataListForm','Required parameter requestParameters.editCustomDataListForm was null or undefined when calling updateDataListInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/customDataLists/{listID}`.replace(`{${"listID"}}`, encodeURIComponent(String(requestParameters.listID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.editCustomDataListForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Data List Info
     * Update Data List Info
     */
    async updateDataListInfo(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateDataListInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.updateDataListInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Entry
     * Update Entry
     */


    async updateEntryRaw(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AjaxResponse>> {
        if (requestParameters.listEntryID === null || requestParameters.listEntryID === undefined) {
            throw new runtime.RequiredError('listEntryID','Required parameter requestParameters.listEntryID was null or undefined when calling updateEntry.');
        }

        if (requestParameters.userContextInformation === null || requestParameters.userContextInformation === undefined) {
            throw new runtime.RequiredError('userContextInformation','Required parameter requestParameters.userContextInformation was null or undefined when calling updateEntry.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateEntry.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateEntry.');
        }

        if (requestParameters.editDataListEntryForm === null || requestParameters.editDataListEntryForm === undefined) {
            throw new runtime.RequiredError('editDataListEntryForm','Required parameter requestParameters.editDataListEntryForm was null or undefined when calling updateEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.userContextInformation !== undefined) {
            queryParameters['userContextInformation'] = requestParameters.userContextInformation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/{tenantID}/{siteID}/{environmentID}/customDataLists/updateEntry/{listEntryID}`.replace(`{${"listEntryID"}}`, encodeURIComponent(String(requestParameters.listEntryID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.editDataListEntryForm,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Entry
     * Update Entry
     */
    async updateEntry(requestParameters: orderRoutingCustomDataListUiApiParams.UpdateEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AjaxResponse> {
        const response = await this.updateEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
