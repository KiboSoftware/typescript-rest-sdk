/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CustomDataList,
  CustomDataListResponse,
} from '../models';

export interface OrderRoutingDataListApiCreateCustomDataListUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    customDataList: CustomDataList;
    responseFields?: string;
}

export interface OrderRoutingDataListApiDeleteCustomDataListUsingDELETERequest {
    dataListID: number;
    xVolSite: number;
    xVolTenant: number;
}

export interface OrderRoutingDataListApiGetCustomDataListUsingGETRequest {
    dataListID: number;
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

export interface OrderRoutingDataListApiUpdateCustomDataListUsingPUTRequest {
    dataListID: number;
    xVolSite: number;
    xVolTenant: number;
    newDataList: CustomDataList;
    responseFields?: string;
}

/**
 * OrderRoutingDataListApi - interface
 * 
 * @export
 * @interface OrderRoutingDataListApiInterface
 */
export interface OrderRoutingDataListApiInterface {
    /**
     * createCustomDataList
     * @summary createCustomDataList
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {CustomDataList} customDataList customDataList
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingDataListApiInterface
     */
    createCustomDataListUsingPOSTRaw(requestParameters: OrderRoutingDataListApiCreateCustomDataListUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDataListResponse>>;

    /**
     * createCustomDataList
     * createCustomDataList
     */
    createCustomDataListUsingPOST(requestParameters: OrderRoutingDataListApiCreateCustomDataListUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDataListResponse>;

    /**
     * deleteCustomDataList
     * @summary deleteCustomDataList
     * @param {number} dataListID dataListID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingDataListApiInterface
     */
    deleteCustomDataListUsingDELETERaw(requestParameters: OrderRoutingDataListApiDeleteCustomDataListUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteCustomDataList
     * deleteCustomDataList
     */
    deleteCustomDataListUsingDELETE(requestParameters: OrderRoutingDataListApiDeleteCustomDataListUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * getCustomDataList
     * @summary getCustomDataList
     * @param {number} dataListID dataListID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingDataListApiInterface
     */
    getCustomDataListUsingGETRaw(requestParameters: OrderRoutingDataListApiGetCustomDataListUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDataListResponse>>;

    /**
     * getCustomDataList
     * getCustomDataList
     */
    getCustomDataListUsingGET(requestParameters: OrderRoutingDataListApiGetCustomDataListUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDataListResponse>;

    /**
     * updateCustomDataList
     * @summary updateCustomDataList
     * @param {number} dataListID dataListID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {CustomDataList} newDataList newDataList
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingDataListApiInterface
     */
    updateCustomDataListUsingPUTRaw(requestParameters: OrderRoutingDataListApiUpdateCustomDataListUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDataListResponse>>;

    /**
     * updateCustomDataList
     * updateCustomDataList
     */
    updateCustomDataListUsingPUT(requestParameters: OrderRoutingDataListApiUpdateCustomDataListUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDataListResponse>;

}

/**
 * 
 */
export class OrderRoutingDataListApi extends runtime.BaseAPI implements OrderRoutingDataListApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * createCustomDataList
     * createCustomDataList
     */


    async createCustomDataListUsingPOSTRaw(requestParameters: OrderRoutingDataListApiCreateCustomDataListUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDataListResponse>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling createCustomDataListUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling createCustomDataListUsingPOST.');
        }

        if (requestParameters.customDataList === null || requestParameters.customDataList === undefined) {
            throw new runtime.RequiredError('customDataList','Required parameter requestParameters.customDataList was null or undefined when calling createCustomDataListUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/dataList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customDataList,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * createCustomDataList
     * createCustomDataList
     */
    async createCustomDataListUsingPOST(requestParameters: OrderRoutingDataListApiCreateCustomDataListUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDataListResponse> {
        const response = await this.createCustomDataListUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deleteCustomDataList
     * deleteCustomDataList
     */


    async deleteCustomDataListUsingDELETERaw(requestParameters: OrderRoutingDataListApiDeleteCustomDataListUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.dataListID === null || requestParameters.dataListID === undefined) {
            throw new runtime.RequiredError('dataListID','Required parameter requestParameters.dataListID was null or undefined when calling deleteCustomDataListUsingDELETE.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteCustomDataListUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteCustomDataListUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/dataList/{dataListID}`.replace(`{${"dataListID"}}`, encodeURIComponent(String(requestParameters.dataListID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteCustomDataList
     * deleteCustomDataList
     */
    async deleteCustomDataListUsingDELETE(requestParameters: OrderRoutingDataListApiDeleteCustomDataListUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCustomDataListUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * getCustomDataList
     * getCustomDataList
     */


    async getCustomDataListUsingGETRaw(requestParameters: OrderRoutingDataListApiGetCustomDataListUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDataListResponse>> {
        if (requestParameters.dataListID === null || requestParameters.dataListID === undefined) {
            throw new runtime.RequiredError('dataListID','Required parameter requestParameters.dataListID was null or undefined when calling getCustomDataListUsingGET.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getCustomDataListUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getCustomDataListUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/dataList/{dataListID}`.replace(`{${"dataListID"}}`, encodeURIComponent(String(requestParameters.dataListID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getCustomDataList
     * getCustomDataList
     */
    async getCustomDataListUsingGET(requestParameters: OrderRoutingDataListApiGetCustomDataListUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDataListResponse> {
        const response = await this.getCustomDataListUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * updateCustomDataList
     * updateCustomDataList
     */


    async updateCustomDataListUsingPUTRaw(requestParameters: OrderRoutingDataListApiUpdateCustomDataListUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomDataListResponse>> {
        if (requestParameters.dataListID === null || requestParameters.dataListID === undefined) {
            throw new runtime.RequiredError('dataListID','Required parameter requestParameters.dataListID was null or undefined when calling updateCustomDataListUsingPUT.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling updateCustomDataListUsingPUT.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling updateCustomDataListUsingPUT.');
        }

        if (requestParameters.newDataList === null || requestParameters.newDataList === undefined) {
            throw new runtime.RequiredError('newDataList','Required parameter requestParameters.newDataList was null or undefined when calling updateCustomDataListUsingPUT.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/dataList/{dataListID}`.replace(`{${"dataListID"}}`, encodeURIComponent(String(requestParameters.dataListID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.newDataList,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * updateCustomDataList
     * updateCustomDataList
     */
    async updateCustomDataListUsingPUT(requestParameters: OrderRoutingDataListApiUpdateCustomDataListUsingPUTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomDataListResponse> {
        const response = await this.updateCustomDataListUsingPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
