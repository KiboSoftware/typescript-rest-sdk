/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AbstractFilter,
  CustomDataListFilter,
  CustomDataValueFilter,
  LocationCriteriaSetFilter,
} from '../models';

export interface DeleteFilterUsingDELETERequest {
    filterID: number;
    xVolSite: number;
    xVolTenant: number;
}

export interface GetFilterUsingGETRequest {
    filterID: number;
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

export interface SaveCriteriaSetFilterUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    loc: LocationCriteriaSetFilter;
    responseFields?: string;
}

export interface SaveCustomDataListFilterUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    filter: CustomDataListFilter;
    responseFields?: string;
}

export interface SaveCustomDataValueFilterUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    customDataValueFilter: CustomDataValueFilter;
    responseFields?: string;
}

export interface TestFilterUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

export interface TestSetFilterUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
    responseFields?: string;
}

/**
 * OrderRoutingFilterApi - interface
 * 
 * @export
 * @interface OrderRoutingFilterApiInterface
 */
export interface OrderRoutingFilterApiInterface {
    /**
     * deleteFilter
     * @summary deleteFilter
     * @param {number} filterID filterID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    deleteFilterUsingDELETERaw(requestParameters: DeleteFilterUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * deleteFilter
     * deleteFilter
     */
    deleteFilterUsingDELETE(requestParameters: DeleteFilterUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * getFilter
     * @summary getFilter
     * @param {number} filterID filterID
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    getFilterUsingGETRaw(requestParameters: GetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>>;

    /**
     * getFilter
     * getFilter
     */
    getFilterUsingGET(requestParameters: GetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter>;

    /**
     * saveCriteriaSetFilter
     * @summary saveCriteriaSetFilter
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {LocationCriteriaSetFilter} loc loc
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    saveCriteriaSetFilterUsingPOSTRaw(requestParameters: SaveCriteriaSetFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>>;

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     */
    saveCriteriaSetFilterUsingPOST(requestParameters: SaveCriteriaSetFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter>;

    /**
     * saveCustomDataListFilter
     * @summary saveCustomDataListFilter
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {CustomDataListFilter} filter filter
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    saveCustomDataListFilterUsingPOSTRaw(requestParameters: SaveCustomDataListFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>>;

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     */
    saveCustomDataListFilterUsingPOST(requestParameters: SaveCustomDataListFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter>;

    /**
     * saveCustomDataValueFilter
     * @summary saveCustomDataValueFilter
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {CustomDataValueFilter} customDataValueFilter customDataValueFilter
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    saveCustomDataValueFilterUsingPOSTRaw(requestParameters: SaveCustomDataValueFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>>;

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     */
    saveCustomDataValueFilterUsingPOST(requestParameters: SaveCustomDataValueFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter>;

    /**
     * testFilter
     * @summary testFilter
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    testFilterUsingGETRaw(requestParameters: TestFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>>;

    /**
     * testFilter
     * testFilter
     */
    testFilterUsingGET(requestParameters: TestFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter>;

    /**
     * testSetFilter
     * @summary testSetFilter
     * @param {number} xVolSite 
     * @param {number} xVolTenant 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRoutingFilterApiInterface
     */
    testSetFilterUsingGETRaw(requestParameters: TestSetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>>;

    /**
     * testSetFilter
     * testSetFilter
     */
    testSetFilterUsingGET(requestParameters: TestSetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter>;

}

/**
 * 
 */
export class OrderRoutingFilterApi extends runtime.BaseAPI implements OrderRoutingFilterApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteFilter
     * deleteFilter
     */


    async deleteFilterUsingDELETERaw(requestParameters: DeleteFilterUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filterID === null || requestParameters.filterID === undefined) {
            throw new runtime.RequiredError('filterID','Required parameter requestParameters.filterID was null or undefined when calling deleteFilterUsingDELETE.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteFilterUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFilterUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/delete/{filterID}`.replace(`{${"filterID"}}`, encodeURIComponent(String(requestParameters.filterID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteFilter
     * deleteFilter
     */
    async deleteFilterUsingDELETE(requestParameters: DeleteFilterUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFilterUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * getFilter
     * getFilter
     */


    async getFilterUsingGETRaw(requestParameters: GetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.filterID === null || requestParameters.filterID === undefined) {
            throw new runtime.RequiredError('filterID','Required parameter requestParameters.filterID was null or undefined when calling getFilterUsingGET.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getFilterUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFilterUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/{filterID}`.replace(`{${"filterID"}}`, encodeURIComponent(String(requestParameters.filterID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * getFilter
     * getFilter
     */
    async getFilterUsingGET(requestParameters: GetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.getFilterUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     */


    async saveCriteriaSetFilterUsingPOSTRaw(requestParameters: SaveCriteriaSetFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveCriteriaSetFilterUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveCriteriaSetFilterUsingPOST.');
        }

        if (requestParameters.loc === null || requestParameters.loc === undefined) {
            throw new runtime.RequiredError('loc','Required parameter requestParameters.loc was null or undefined when calling saveCriteriaSetFilterUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/criteriaSet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.loc,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     */
    async saveCriteriaSetFilterUsingPOST(requestParameters: SaveCriteriaSetFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.saveCriteriaSetFilterUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     */


    async saveCustomDataListFilterUsingPOSTRaw(requestParameters: SaveCustomDataListFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveCustomDataListFilterUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveCustomDataListFilterUsingPOST.');
        }

        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling saveCustomDataListFilterUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/customDataListFilter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.filter,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     */
    async saveCustomDataListFilterUsingPOST(requestParameters: SaveCustomDataListFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.saveCustomDataListFilterUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     */


    async saveCustomDataValueFilterUsingPOSTRaw(requestParameters: SaveCustomDataValueFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveCustomDataValueFilterUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveCustomDataValueFilterUsingPOST.');
        }

        if (requestParameters.customDataValueFilter === null || requestParameters.customDataValueFilter === undefined) {
            throw new runtime.RequiredError('customDataValueFilter','Required parameter requestParameters.customDataValueFilter was null or undefined when calling saveCustomDataValueFilterUsingPOST.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/customDataValueFilter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customDataValueFilter,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     */
    async saveCustomDataValueFilterUsingPOST(requestParameters: SaveCustomDataValueFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.saveCustomDataValueFilterUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * testFilter
     * testFilter
     */


    async testFilterUsingGETRaw(requestParameters: TestFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling testFilterUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testFilterUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/testcriteria`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * testFilter
     * testFilter
     */
    async testFilterUsingGET(requestParameters: TestFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.testFilterUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * testSetFilter
     * testSetFilter
     */


    async testSetFilterUsingGETRaw(requestParameters: TestSetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling testSetFilterUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testSetFilterUsingGET.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/testset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * testSetFilter
     * testSetFilter
     */
    async testSetFilterUsingGET(requestParameters: TestSetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.testSetFilterUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
