/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AbstractFilter,
  CustomDataListFilter,
  CustomDataValueFilter,
  LocationCriteriaSetFilter,
} from '../models';
import {
    AbstractFilterFromJSON,
    AbstractFilterToJSON,
    CustomDataListFilterFromJSON,
    CustomDataListFilterToJSON,
    CustomDataValueFilterFromJSON,
    CustomDataValueFilterToJSON,
    LocationCriteriaSetFilterFromJSON,
    LocationCriteriaSetFilterToJSON,
} from '../models';

export interface OrderRoutingFilterApiDeleteFilterUsingDELETERequest {
    filterID: number;
    xVolSite: number;
    xVolTenant: number;
}

export interface OrderRoutingFilterApiGetFilterUsingGETRequest {
    filterID: number;
    xVolSite: number;
    xVolTenant: number;
}

export interface OrderRoutingFilterApiSaveCriteriaSetFilterUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    loc: LocationCriteriaSetFilter;
}

export interface OrderRoutingFilterApiSaveCustomDataListFilterUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    filter: CustomDataListFilter;
}

export interface OrderRoutingFilterApiSaveCustomDataValueFilterUsingPOSTRequest {
    xVolSite: number;
    xVolTenant: number;
    customDataValueFilter: CustomDataValueFilter;
}

export interface OrderRoutingFilterApiTestFilterUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
}

export interface OrderRoutingFilterApiTestSetFilterUsingGETRequest {
    xVolSite: number;
    xVolTenant: number;
}

/**
 * 
 */
export class OrderRoutingFilterApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * deleteFilter
     * deleteFilter
     */


    async deleteFilterUsingDELETERaw(requestParameters: OrderRoutingFilterApiDeleteFilterUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filterID === null || requestParameters.filterID === undefined) {
            throw new runtime.RequiredError('filterID','Required parameter requestParameters.filterID was null or undefined when calling deleteFilterUsingDELETE.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling deleteFilterUsingDELETE.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling deleteFilterUsingDELETE.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/delete/{filterID}`.replace(`{${"filterID"}}`, encodeURIComponent(String(requestParameters.filterID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deleteFilter
     * deleteFilter
     */
    async deleteFilterUsingDELETE(requestParameters: OrderRoutingFilterApiDeleteFilterUsingDELETERequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFilterUsingDELETERaw(requestParameters, initOverrides);
    }

    /**
     * getFilter
     * getFilter
     */


    async getFilterUsingGETRaw(requestParameters: OrderRoutingFilterApiGetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.filterID === null || requestParameters.filterID === undefined) {
            throw new runtime.RequiredError('filterID','Required parameter requestParameters.filterID was null or undefined when calling getFilterUsingGET.');
        }

        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling getFilterUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling getFilterUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/{filterID}`.replace(`{${"filterID"}}`, encodeURIComponent(String(requestParameters.filterID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractFilterFromJSON(jsonValue));
    }

    /**
     * getFilter
     * getFilter
     */
    async getFilterUsingGET(requestParameters: OrderRoutingFilterApiGetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.getFilterUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     */


    async saveCriteriaSetFilterUsingPOSTRaw(requestParameters: OrderRoutingFilterApiSaveCriteriaSetFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveCriteriaSetFilterUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveCriteriaSetFilterUsingPOST.');
        }

        if (requestParameters.loc === null || requestParameters.loc === undefined) {
            throw new runtime.RequiredError('loc','Required parameter requestParameters.loc was null or undefined when calling saveCriteriaSetFilterUsingPOST.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/criteriaSet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationCriteriaSetFilterToJSON(requestParameters.loc),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractFilterFromJSON(jsonValue));
    }

    /**
     * saveCriteriaSetFilter
     * saveCriteriaSetFilter
     */
    async saveCriteriaSetFilterUsingPOST(requestParameters: OrderRoutingFilterApiSaveCriteriaSetFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.saveCriteriaSetFilterUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     */


    async saveCustomDataListFilterUsingPOSTRaw(requestParameters: OrderRoutingFilterApiSaveCustomDataListFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveCustomDataListFilterUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveCustomDataListFilterUsingPOST.');
        }

        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling saveCustomDataListFilterUsingPOST.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/customDataListFilter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomDataListFilterToJSON(requestParameters.filter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractFilterFromJSON(jsonValue));
    }

    /**
     * saveCustomDataListFilter
     * saveCustomDataListFilter
     */
    async saveCustomDataListFilterUsingPOST(requestParameters: OrderRoutingFilterApiSaveCustomDataListFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.saveCustomDataListFilterUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     */


    async saveCustomDataValueFilterUsingPOSTRaw(requestParameters: OrderRoutingFilterApiSaveCustomDataValueFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling saveCustomDataValueFilterUsingPOST.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling saveCustomDataValueFilterUsingPOST.');
        }

        if (requestParameters.customDataValueFilter === null || requestParameters.customDataValueFilter === undefined) {
            throw new runtime.RequiredError('customDataValueFilter','Required parameter requestParameters.customDataValueFilter was null or undefined when calling saveCustomDataValueFilterUsingPOST.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/customDataValueFilter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomDataValueFilterToJSON(requestParameters.customDataValueFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractFilterFromJSON(jsonValue));
    }

    /**
     * saveCustomDataValueFilter
     * saveCustomDataValueFilter
     */
    async saveCustomDataValueFilterUsingPOST(requestParameters: OrderRoutingFilterApiSaveCustomDataValueFilterUsingPOSTRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.saveCustomDataValueFilterUsingPOSTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * testFilter
     * testFilter
     */


    async testFilterUsingGETRaw(requestParameters: OrderRoutingFilterApiTestFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling testFilterUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testFilterUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/testcriteria`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractFilterFromJSON(jsonValue));
    }

    /**
     * testFilter
     * testFilter
     */
    async testFilterUsingGET(requestParameters: OrderRoutingFilterApiTestFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.testFilterUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * testSetFilter
     * testSetFilter
     */


    async testSetFilterUsingGETRaw(requestParameters: OrderRoutingFilterApiTestSetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AbstractFilter>> {
        if (requestParameters.xVolSite === null || requestParameters.xVolSite === undefined) {
            throw new runtime.RequiredError('xVolSite','Required parameter requestParameters.xVolSite was null or undefined when calling testSetFilterUsingGET.');
        }

        if (requestParameters.xVolTenant === null || requestParameters.xVolTenant === undefined) {
            throw new runtime.RequiredError('xVolTenant','Required parameter requestParameters.xVolTenant was null or undefined when calling testSetFilterUsingGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xVolSite !== undefined && requestParameters.xVolSite !== null) {
            headerParameters['x-vol-site'] = String(requestParameters.xVolSite);
        }

        if (requestParameters.xVolTenant !== undefined && requestParameters.xVolTenant !== null) {
            headerParameters['x-vol-tenant'] = String(requestParameters.xVolTenant);
        }


        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/orders/orderrouting/api/v1/filter/testset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AbstractFilterFromJSON(jsonValue));
    }

    /**
     * testSetFilter
     * testSetFilter
     */
    async testSetFilterUsingGET(requestParameters: OrderRoutingFilterApiTestSetFilterUsingGETRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AbstractFilter> {
        const response = await this.testSetFilterUsingGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
