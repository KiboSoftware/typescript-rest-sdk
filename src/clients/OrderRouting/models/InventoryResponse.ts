/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FutureInventory } from './FutureInventory';
import {
    FutureInventoryFromJSON,
    FutureInventoryFromJSONTyped,
    FutureInventoryToJSON,
} from './FutureInventory';
import type { TagQuantity } from './TagQuantity';
import {
    TagQuantityFromJSON,
    TagQuantityFromJSONTyped,
    TagQuantityToJSON,
} from './TagQuantity';

/**
 * Inventory Response
 * @export
 * @interface InventoryResponse
 */
export interface InventoryResponse {
    /**
     * The quantity the location has that are already allocated.
     * @type {number}
     * @memberof InventoryResponse
     */
    allocated?: number;
    /**
     * List of Inventory Attributes
     * @type {Array<string>}
     * @memberof InventoryResponse
     */
    attributes?: Array<string>;
    /**
     * The quantity the location has that are available for purchase
     * @type {number}
     * @memberof InventoryResponse
     */
    available?: number;
    /**
     * Whether or not the product is blocked for assignment
     * @type {boolean}
     * @memberof InventoryResponse
     */
    blockAssignment?: boolean;
    /**
     * The country code of this location
     * @type {string}
     * @memberof InventoryResponse
     */
    countryCode?: string;
    /**
     * The currency identifier for the retailPrice
     * @type {number}
     * @memberof InventoryResponse
     */
    currencyID?: number;
    /**
     * Whether this location can ship to a consumer
     * @type {boolean}
     * @memberof InventoryResponse
     */
    directShip?: boolean;
    /**
     * The distance in miles from this location to the item's destination
     * @type {number}
     * @memberof InventoryResponse
     */
    distance?: number;
    /**
     * Absolute minimum quantity of this item that should be in stock at any time
     * @type {number}
     * @memberof InventoryResponse
     */
    floor?: number;
    /**
     * 
     * @type {Array<FutureInventory>}
     * @memberof InventoryResponse
     */
    futureInventory?: Array<FutureInventory>;
    /**
     * The inventory locator name of the individual item
     * @type {string}
     * @memberof InventoryResponse
     */
    inventoryLocatorName?: string;
    /**
     * Location Code
     * @type {string}
     * @memberof InventoryResponse
     */
    locationCode?: string;
    /**
     * Location Name
     * @type {string}
     * @memberof InventoryResponse
     */
    locationName?: string;
    /**
     * Custom field used for store prioritization
     * @type {number}
     * @memberof InventoryResponse
     */
    ltd?: number;
    /**
     * List of messages
     * @type {Array<string>}
     * @memberof InventoryResponse
     */
    messages?: Array<string>;
    /**
     * Number of results
     * @type {number}
     * @memberof InventoryResponse
     */
    numResults?: number;
    /**
     * The quantity the location has in its possession
     * @type {number}
     * @memberof InventoryResponse
     */
    onHand?: number;
    /**
     * Part/Product Number
     * @type {string}
     * @memberof InventoryResponse
     */
    partNumber?: string;
    /**
     * The quantity the location has that are pending.
     * @type {number}
     * @memberof InventoryResponse
     */
    pending?: number;
    /**
     * Whether a consumer can pick up product at this location (store)
     * @type {boolean}
     * @memberof InventoryResponse
     */
    pickup?: boolean;
    /**
     * The price of the product at this location
     * @type {number}
     * @memberof InventoryResponse
     */
    retailPrice?: number;
    /**
     * Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted
     * @type {number}
     * @memberof InventoryResponse
     */
    safetyStock?: number;
    /**
     * Stock Keeping Unit
     * @type {string}
     * @memberof InventoryResponse
     */
    sku?: string;
    /**
     * Flag for success
     * @type {boolean}
     * @memberof InventoryResponse
     */
    success?: boolean;
    /**
     * 
     * @type {Array<TagQuantity>}
     * @memberof InventoryResponse
     */
    taggedInventory?: Array<TagQuantity>;
    /**
     * Tenant Identifier
     * @type {number}
     * @memberof InventoryResponse
     */
    tenantID?: number;
    /**
     * Whether the location can ship to another location (store), thus restocking that location.
     * @type {boolean}
     * @memberof InventoryResponse
     */
    transferEnabled?: boolean;
    /**
     * Universal Product Code
     * @type {string}
     * @memberof InventoryResponse
     */
    upc?: string;
}

/**
 * Check if a given object implements the InventoryResponse interface.
 */
export function instanceOfInventoryResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryResponseFromJSON(json: any): InventoryResponse {
    return InventoryResponseFromJSONTyped(json, false);
}

export function InventoryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocated': !exists(json, 'allocated') ? undefined : json['allocated'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'available': !exists(json, 'available') ? undefined : json['available'],
        'blockAssignment': !exists(json, 'blockAssignment') ? undefined : json['blockAssignment'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'currencyID': !exists(json, 'currencyID') ? undefined : json['currencyID'],
        'directShip': !exists(json, 'directShip') ? undefined : json['directShip'],
        'distance': !exists(json, 'distance') ? undefined : json['distance'],
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'futureInventory': !exists(json, 'futureInventory') ? undefined : ((json['futureInventory'] as Array<any>).map(FutureInventoryFromJSON)),
        'inventoryLocatorName': !exists(json, 'inventoryLocatorName') ? undefined : json['inventoryLocatorName'],
        'locationCode': !exists(json, 'locationCode') ? undefined : json['locationCode'],
        'locationName': !exists(json, 'locationName') ? undefined : json['locationName'],
        'ltd': !exists(json, 'ltd') ? undefined : json['ltd'],
        'messages': !exists(json, 'messages') ? undefined : json['messages'],
        'numResults': !exists(json, 'numResults') ? undefined : json['numResults'],
        'onHand': !exists(json, 'onHand') ? undefined : json['onHand'],
        'partNumber': !exists(json, 'partNumber') ? undefined : json['partNumber'],
        'pending': !exists(json, 'pending') ? undefined : json['pending'],
        'pickup': !exists(json, 'pickup') ? undefined : json['pickup'],
        'retailPrice': !exists(json, 'retailPrice') ? undefined : json['retailPrice'],
        'safetyStock': !exists(json, 'safetyStock') ? undefined : json['safetyStock'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'success': !exists(json, 'success') ? undefined : json['success'],
        'taggedInventory': !exists(json, 'taggedInventory') ? undefined : ((json['taggedInventory'] as Array<any>).map(TagQuantityFromJSON)),
        'tenantID': !exists(json, 'tenantID') ? undefined : json['tenantID'],
        'transferEnabled': !exists(json, 'transferEnabled') ? undefined : json['transferEnabled'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
    };
}

export function InventoryResponseToJSON(value?: InventoryResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocated': value.allocated,
        'attributes': value.attributes,
        'available': value.available,
        'blockAssignment': value.blockAssignment,
        'countryCode': value.countryCode,
        'currencyID': value.currencyID,
        'directShip': value.directShip,
        'distance': value.distance,
        'floor': value.floor,
        'futureInventory': value.futureInventory === undefined ? undefined : ((value.futureInventory as Array<any>).map(FutureInventoryToJSON)),
        'inventoryLocatorName': value.inventoryLocatorName,
        'locationCode': value.locationCode,
        'locationName': value.locationName,
        'ltd': value.ltd,
        'messages': value.messages,
        'numResults': value.numResults,
        'onHand': value.onHand,
        'partNumber': value.partNumber,
        'pending': value.pending,
        'pickup': value.pickup,
        'retailPrice': value.retailPrice,
        'safetyStock': value.safetyStock,
        'sku': value.sku,
        'success': value.success,
        'taggedInventory': value.taggedInventory === undefined ? undefined : ((value.taggedInventory as Array<any>).map(TagQuantityToJSON)),
        'tenantID': value.tenantID,
        'transferEnabled': value.transferEnabled,
        'upc': value.upc,
    };
}

