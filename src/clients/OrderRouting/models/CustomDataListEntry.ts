/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomDataList } from './CustomDataList';
import {
    CustomDataListFromJSON,
    CustomDataListFromJSONTyped,
    CustomDataListToJSON,
} from './CustomDataList';

/**
 * 
 * @export
 * @interface CustomDataListEntry
 */
export interface CustomDataListEntry {
    /**
     * 
     * @type {number}
     * @memberof CustomDataListEntry
     */
    customDataListEntryID?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomDataListEntry
     */
    dataValid?: boolean;
    /**
     * 
     * @type {CustomDataList}
     * @memberof CustomDataListEntry
     */
    list?: CustomDataList;
    /**
     * 
     * @type {string}
     * @memberof CustomDataListEntry
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomDataListEntry
     */
    stringValue?: string;
}

/**
 * Check if a given object implements the CustomDataListEntry interface.
 */
export function instanceOfCustomDataListEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomDataListEntryFromJSON(json: any): CustomDataListEntry {
    return CustomDataListEntryFromJSONTyped(json, false);
}

export function CustomDataListEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomDataListEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customDataListEntryID': !exists(json, 'customDataListEntryID') ? undefined : json['customDataListEntryID'],
        'dataValid': !exists(json, 'dataValid') ? undefined : json['dataValid'],
        'list': !exists(json, 'list') ? undefined : CustomDataListFromJSON(json['list']),
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'stringValue': !exists(json, 'stringValue') ? undefined : json['stringValue'],
    };
}

export function CustomDataListEntryToJSON(value?: CustomDataListEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customDataListEntryID': value.customDataListEntryID,
        'dataValid': value.dataValid,
        'list': CustomDataListToJSON(value.list),
        'notes': value.notes,
        'stringValue': value.stringValue,
    };
}

