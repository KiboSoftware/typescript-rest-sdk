/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AbstractFilter } from './AbstractFilter';
import {
    AbstractFilterFromJSON,
    AbstractFilterFromJSONTyped,
    AbstractFilterToJSON,
} from './AbstractFilter';
import type { FulfillmentLimit } from './FulfillmentLimit';
import {
    FulfillmentLimitFromJSON,
    FulfillmentLimitFromJSONTyped,
    FulfillmentLimitToJSON,
} from './FulfillmentLimit';
import type { GroupAfterAction } from './GroupAfterAction';
import {
    GroupAfterActionFromJSON,
    GroupAfterActionFromJSONTyped,
    GroupAfterActionToJSON,
} from './GroupAfterAction';
import type { LocationSort } from './LocationSort';
import {
    LocationSortFromJSON,
    LocationSortFromJSONTyped,
    LocationSortToJSON,
} from './LocationSort';
import type { RankedLocation } from './RankedLocation';
import {
    RankedLocationFromJSON,
    RankedLocationFromJSONTyped,
    RankedLocationToJSON,
} from './RankedLocation';

/**
 * 
 * @export
 * @interface LocationGroup
 */
export interface LocationGroup {
    /**
     * 
     * @type {boolean}
     * @memberof LocationGroup
     */
    active?: boolean;
    /**
     * 
     * @type {GroupAfterAction}
     * @memberof LocationGroup
     */
    afterActionNone?: GroupAfterAction;
    /**
     * 
     * @type {GroupAfterAction}
     * @memberof LocationGroup
     */
    afterActionPartial?: GroupAfterAction;
    /**
     * 
     * @type {Date}
     * @memberof LocationGroup
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof LocationGroup
     */
    creatorUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationGroup
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof LocationGroup
     */
    environmentID?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof LocationGroup
     */
    excludedLocationsFromDefaultGroup?: Array<number>;
    /**
     * 
     * @type {Array<AbstractFilter>}
     * @memberof LocationGroup
     */
    filters?: Array<AbstractFilter>;
    /**
     * 
     * @type {FulfillmentLimit}
     * @memberof LocationGroup
     */
    fulfillmentLimit?: FulfillmentLimit;
    /**
     * 
     * @type {number}
     * @memberof LocationGroup
     */
    groupID?: number;
    /**
     * 
     * @type {boolean}
     * @memberof LocationGroup
     */
    isDefaultGroup?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LocationGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationGroup
     */
    pathString?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LocationGroup
     */
    persisted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LocationGroup
     */
    rank?: number;
    /**
     * 
     * @type {Array<RankedLocation>}
     * @memberof LocationGroup
     */
    rankedLocations?: Array<RankedLocation>;
    /**
     * 
     * @type {number}
     * @memberof LocationGroup
     */
    siteID?: number;
    /**
     * 
     * @type {Array<LocationSort>}
     * @memberof LocationGroup
     */
    sorts?: Array<LocationSort>;
    /**
     * 
     * @type {number}
     * @memberof LocationGroup
     */
    tenantID?: number;
    /**
     * 
     * @type {Date}
     * @memberof LocationGroup
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof LocationGroup
     */
    updaterUsername?: string;
    /**
     * 
     * @type {boolean}
     * @memberof LocationGroup
     */
    useRetailerExclusionList?: boolean;
}

/**
 * Check if a given object implements the LocationGroup interface.
 */
export function instanceOfLocationGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationGroupFromJSON(json: any): LocationGroup {
    return LocationGroupFromJSONTyped(json, false);
}

export function LocationGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'afterActionNone': !exists(json, 'afterActionNone') ? undefined : GroupAfterActionFromJSON(json['afterActionNone']),
        'afterActionPartial': !exists(json, 'afterActionPartial') ? undefined : GroupAfterActionFromJSON(json['afterActionPartial']),
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'creatorUsername': !exists(json, 'creatorUsername') ? undefined : json['creatorUsername'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'environmentID': !exists(json, 'environmentID') ? undefined : json['environmentID'],
        'excludedLocationsFromDefaultGroup': !exists(json, 'excludedLocationsFromDefaultGroup') ? undefined : json['excludedLocationsFromDefaultGroup'],
        'filters': !exists(json, 'filters') ? undefined : ((json['filters'] as Array<any>).map(AbstractFilterFromJSON)),
        'fulfillmentLimit': !exists(json, 'fulfillmentLimit') ? undefined : FulfillmentLimitFromJSON(json['fulfillmentLimit']),
        'groupID': !exists(json, 'groupID') ? undefined : json['groupID'],
        'isDefaultGroup': !exists(json, 'isDefaultGroup') ? undefined : json['isDefaultGroup'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'pathString': !exists(json, 'pathString') ? undefined : json['pathString'],
        'persisted': !exists(json, 'persisted') ? undefined : json['persisted'],
        'rank': !exists(json, 'rank') ? undefined : json['rank'],
        'rankedLocations': !exists(json, 'rankedLocations') ? undefined : ((json['rankedLocations'] as Array<any>).map(RankedLocationFromJSON)),
        'siteID': !exists(json, 'siteID') ? undefined : json['siteID'],
        'sorts': !exists(json, 'sorts') ? undefined : ((json['sorts'] as Array<any>).map(LocationSortFromJSON)),
        'tenantID': !exists(json, 'tenantID') ? undefined : json['tenantID'],
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
        'updaterUsername': !exists(json, 'updaterUsername') ? undefined : json['updaterUsername'],
        'useRetailerExclusionList': !exists(json, 'useRetailerExclusionList') ? undefined : json['useRetailerExclusionList'],
    };
}

export function LocationGroupToJSON(value?: LocationGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'afterActionNone': GroupAfterActionToJSON(value.afterActionNone),
        'afterActionPartial': GroupAfterActionToJSON(value.afterActionPartial),
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'creatorUsername': value.creatorUsername,
        'description': value.description,
        'environmentID': value.environmentID,
        'excludedLocationsFromDefaultGroup': value.excludedLocationsFromDefaultGroup,
        'filters': value.filters === undefined ? undefined : ((value.filters as Array<any>).map(AbstractFilterToJSON)),
        'fulfillmentLimit': FulfillmentLimitToJSON(value.fulfillmentLimit),
        'groupID': value.groupID,
        'isDefaultGroup': value.isDefaultGroup,
        'name': value.name,
        'pathString': value.pathString,
        'persisted': value.persisted,
        'rank': value.rank,
        'rankedLocations': value.rankedLocations === undefined ? undefined : ((value.rankedLocations as Array<any>).map(RankedLocationToJSON)),
        'siteID': value.siteID,
        'sorts': value.sorts === undefined ? undefined : ((value.sorts as Array<any>).map(LocationSortToJSON)),
        'tenantID': value.tenantID,
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
        'updaterUsername': value.updaterUsername,
        'useRetailerExclusionList': value.useRetailerExclusionList,
    };
}

