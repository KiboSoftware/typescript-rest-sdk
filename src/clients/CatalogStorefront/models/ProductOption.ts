/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttributeDetail } from './AttributeDetail';
import {
    AttributeDetailFromJSON,
    AttributeDetailFromJSONTyped,
    AttributeDetailToJSON,
} from './AttributeDetail';
import type { ProductOptionValue } from './ProductOptionValue';
import {
    ProductOptionValueFromJSON,
    ProductOptionValueFromJSONTyped,
    ProductOptionValueToJSON,
} from './ProductOptionValue';

/**
 * An option for a product and its list of values, if any. Also includes whether the option is configurable or stand-alone, whether it is required, whether it can have mulitple values and whether the shopper can supply its value (for example, engraved initials).
 * @export
 * @interface ProductOption
 */
export interface ProductOption {
    /**
     * Attribute fully qualified name
     * @type {string}
     * @memberof ProductOption
     */
    attributeFQN?: string | null;
    /**
     * If true, the shopper must provide a value for the option before it can be purchased.
     * @type {boolean}
     * @memberof ProductOption
     */
    isRequired?: boolean | null;
    /**
     * If true, more than one value can be assigned to an option. Only possible with stand-alone options.
     * @type {boolean}
     * @memberof ProductOption
     */
    isMultiValue?: boolean | null;
    /**
     * Possible choices for an option, for example, values of the option "Color" can be "red," "white," and "blue."
     * @type {Array<ProductOptionValue>}
     * @memberof ProductOption
     */
    values?: Array<ProductOptionValue> | null;
    /**
     * 
     * @type {AttributeDetail}
     * @memberof ProductOption
     */
    attributeDetail?: AttributeDetail;
    /**
     * 
     * @type {boolean}
     * @memberof ProductOption
     */
    isProductImageGroupSelector?: boolean;
}

/**
 * Check if a given object implements the ProductOption interface.
 */
export function instanceOfProductOption(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductOptionFromJSON(json: any): ProductOption {
    return ProductOptionFromJSONTyped(json, false);
}

export function ProductOptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductOption {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeFQN': !exists(json, 'attributeFQN') ? undefined : json['attributeFQN'],
        'isRequired': !exists(json, 'isRequired') ? undefined : json['isRequired'],
        'isMultiValue': !exists(json, 'isMultiValue') ? undefined : json['isMultiValue'],
        'values': !exists(json, 'values') ? undefined : (json['values'] === null ? null : (json['values'] as Array<any>).map(ProductOptionValueFromJSON)),
        'attributeDetail': !exists(json, 'attributeDetail') ? undefined : AttributeDetailFromJSON(json['attributeDetail']),
        'isProductImageGroupSelector': !exists(json, 'isProductImageGroupSelector') ? undefined : json['isProductImageGroupSelector'],
    };
}

export function ProductOptionToJSON(value?: ProductOption | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributeFQN': value.attributeFQN,
        'isRequired': value.isRequired,
        'isMultiValue': value.isMultiValue,
        'values': value.values === undefined ? undefined : (value.values === null ? null : (value.values as Array<any>).map(ProductOptionValueToJSON)),
        'attributeDetail': AttributeDetailToJSON(value.attributeDetail),
        'isProductImageGroupSelector': value.isProductImageGroupSelector,
    };
}

