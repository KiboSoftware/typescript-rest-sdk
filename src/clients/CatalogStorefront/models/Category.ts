/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryAttribute } from './CategoryAttribute';
import {
    CategoryAttributeFromJSON,
    CategoryAttributeFromJSONTyped,
    CategoryAttributeToJSON,
} from './CategoryAttribute';
import type { CategoryContent } from './CategoryContent';
import {
    CategoryContentFromJSON,
    CategoryContentFromJSONTyped,
    CategoryContentToJSON,
} from './CategoryContent';

/**
 * The category hierarchy of your store as it appears on the storefront. This is the category heirarchy defined with the admin/category resource except for any categories with an IsDisplayed value set to false.
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * Internal unique identifier of the category. System-supplied and read-only.
     * @type {number}
     * @memberof Category
     */
    categoryId?: number;
    /**
     * 
     * @type {Category}
     * @memberof Category
     */
    parentCategory?: Category;
    /**
     * 
     * @type {CategoryContent}
     * @memberof Category
     */
    content?: CategoryContent;
    /**
     * List of subcategories that belong to this category.
     * @type {Array<Category>}
     * @memberof Category
     */
    childrenCategories?: Array<Category> | null;
    /**
     * Order in which categories appear when they are at the same level (siblings). For example, categories can be sequenced so that a specific category always appears first (or last).
     * @type {number}
     * @memberof Category
     */
    sequence?: number | null;
    /**
     * Indicates whether the category should be displayed.
     * @type {boolean}
     * @memberof Category
     */
    isDisplayed?: boolean;
    /**
     * External unique identifier of the category.
     * @type {string}
     * @memberof Category
     */
    categoryCode?: string | null;
    /**
     * Indicates whether the category should be displayed.
     * @type {number}
     * @memberof Category
     */
    count?: number | null;
    /**
     * Last Modified Date Time
     * @type {Date}
     * @memberof Category
     */
    updateDate?: Date;
    /**
     * Indicates whether the category should be sliced
     * @type {boolean}
     * @memberof Category
     */
    shouldSlice?: boolean;
    /**
     * 
     * @type {Array<CategoryAttribute>}
     * @memberof Category
     */
    attributes?: Array<CategoryAttribute> | null;
}

/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'parentCategory': !exists(json, 'parentCategory') ? undefined : CategoryFromJSON(json['parentCategory']),
        'content': !exists(json, 'content') ? undefined : CategoryContentFromJSON(json['content']),
        'childrenCategories': !exists(json, 'childrenCategories') ? undefined : (json['childrenCategories'] === null ? null : (json['childrenCategories'] as Array<any>).map(CategoryFromJSON)),
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'isDisplayed': !exists(json, 'isDisplayed') ? undefined : json['isDisplayed'],
        'categoryCode': !exists(json, 'categoryCode') ? undefined : json['categoryCode'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'updateDate': !exists(json, 'updateDate') ? undefined : (new Date(json['updateDate'])),
        'shouldSlice': !exists(json, 'shouldSlice') ? undefined : json['shouldSlice'],
        'attributes': !exists(json, 'attributes') ? undefined : (json['attributes'] === null ? null : (json['attributes'] as Array<any>).map(CategoryAttributeFromJSON)),
    };
}

export function CategoryToJSON(value?: Category | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'categoryId': value.categoryId,
        'parentCategory': CategoryToJSON(value.parentCategory),
        'content': CategoryContentToJSON(value.content),
        'childrenCategories': value.childrenCategories === undefined ? undefined : (value.childrenCategories === null ? null : (value.childrenCategories as Array<any>).map(CategoryToJSON)),
        'sequence': value.sequence,
        'isDisplayed': value.isDisplayed,
        'categoryCode': value.categoryCode,
        'count': value.count,
        'updateDate': value.updateDate === undefined ? undefined : (value.updateDate.toISOString()),
        'shouldSlice': value.shouldSlice,
        'attributes': value.attributes === undefined ? undefined : (value.attributes === null ? null : (value.attributes as Array<any>).map(CategoryAttributeToJSON)),
    };
}

