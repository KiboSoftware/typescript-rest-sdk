/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Facet } from './Facet';
import {
    FacetFromJSON,
    FacetFromJSONTyped,
    FacetToJSON,
} from './Facet';
import type { Product } from './Product';
import {
    ProductFromJSON,
    ProductFromJSONTyped,
    ProductToJSON,
} from './Product';
import type { SolrDebugInfo } from './SolrDebugInfo';
import {
    SolrDebugInfoFromJSON,
    SolrDebugInfoFromJSONTyped,
    SolrDebugInfoToJSON,
} from './SolrDebugInfo';
import type { Spellcheck } from './Spellcheck';
import {
    SpellcheckFromJSON,
    SpellcheckFromJSONTyped,
    SpellcheckToJSON,
} from './Spellcheck';

/**
 * Products and facets returned from search criteria supplied in a ProductSearch query.
 * @export
 * @interface ProductSearchResult
 */
export interface ProductSearchResult {
    /**
     * 
     * @type {Array<Facet>}
     * @memberof ProductSearchResult
     */
    facets?: Array<Facet> | null;
    /**
     * 
     * @type {SolrDebugInfo}
     * @memberof ProductSearchResult
     */
    solrDebugInfo?: SolrDebugInfo;
    /**
     * 
     * @type {string}
     * @memberof ProductSearchResult
     */
    searchRedirect?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductSearchResult
     */
    searchEngine?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductSearchResult
     */
    nextCursorMark?: string | null;
    /**
     * 
     * @type {Spellcheck}
     * @memberof ProductSearchResult
     */
    spellcheck?: Spellcheck;
    /**
     * 
     * @type {number}
     * @memberof ProductSearchResult
     */
    startIndex?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductSearchResult
     */
    pageSize?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductSearchResult
     */
    pageCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductSearchResult
     */
    totalCount?: number;
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductSearchResult
     */
    items?: Array<Product> | null;
}

/**
 * Check if a given object implements the ProductSearchResult interface.
 */
export function instanceOfProductSearchResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductSearchResultFromJSON(json: any): ProductSearchResult {
    return ProductSearchResultFromJSONTyped(json, false);
}

export function ProductSearchResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductSearchResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'facets': !exists(json, 'facets') ? undefined : (json['facets'] === null ? null : (json['facets'] as Array<any>).map(FacetFromJSON)),
        'solrDebugInfo': !exists(json, 'solrDebugInfo') ? undefined : SolrDebugInfoFromJSON(json['solrDebugInfo']),
        'searchRedirect': !exists(json, 'searchRedirect') ? undefined : json['searchRedirect'],
        'searchEngine': !exists(json, 'searchEngine') ? undefined : json['searchEngine'],
        'nextCursorMark': !exists(json, 'nextCursorMark') ? undefined : json['nextCursorMark'],
        'spellcheck': !exists(json, 'spellcheck') ? undefined : SpellcheckFromJSON(json['spellcheck']),
        'startIndex': !exists(json, 'startIndex') ? undefined : json['startIndex'],
        'pageSize': !exists(json, 'pageSize') ? undefined : json['pageSize'],
        'pageCount': !exists(json, 'pageCount') ? undefined : json['pageCount'],
        'totalCount': !exists(json, 'totalCount') ? undefined : json['totalCount'],
        'items': !exists(json, 'items') ? undefined : (json['items'] === null ? null : (json['items'] as Array<any>).map(ProductFromJSON)),
    };
}

export function ProductSearchResultToJSON(value?: ProductSearchResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'facets': value.facets === undefined ? undefined : (value.facets === null ? null : (value.facets as Array<any>).map(FacetToJSON)),
        'solrDebugInfo': SolrDebugInfoToJSON(value.solrDebugInfo),
        'searchRedirect': value.searchRedirect,
        'searchEngine': value.searchEngine,
        'nextCursorMark': value.nextCursorMark,
        'spellcheck': SpellcheckToJSON(value.spellcheck),
        'startIndex': value.startIndex,
        'pageSize': value.pageSize,
        'pageCount': value.pageCount,
        'totalCount': value.totalCount,
        'items': value.items === undefined ? undefined : (value.items === null ? null : (value.items as Array<any>).map(ProductToJSON)),
    };
}

