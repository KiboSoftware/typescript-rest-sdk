/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BoostField } from './BoostField';
import {
    BoostFieldFromJSON,
    BoostFieldFromJSONTyped,
    BoostFieldToJSON,
} from './BoostField';

/**
 * 
 * @export
 * @interface FieldValueBoost
 */
export interface FieldValueBoost {
    /**
     * 
     * @type {string}
     * @memberof FieldValueBoost
     */
    boostType?: string | null;
    /**
     * 
     * @type {Array<BoostField>}
     * @memberof FieldValueBoost
     */
    fields?: Array<BoostField> | null;
}

/**
 * Check if a given object implements the FieldValueBoost interface.
 */
export function instanceOfFieldValueBoost(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FieldValueBoostFromJSON(json: any): FieldValueBoost {
    return FieldValueBoostFromJSONTyped(json, false);
}

export function FieldValueBoostFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldValueBoost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'boostType': !exists(json, 'boostType') ? undefined : json['boostType'],
        'fields': !exists(json, 'fields') ? undefined : (json['fields'] === null ? null : (json['fields'] as Array<any>).map(BoostFieldFromJSON)),
    };
}

export function FieldValueBoostToJSON(value?: FieldValueBoost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'boostType': value.boostType,
        'fields': value.fields === undefined ? undefined : (value.fields === null ? null : (value.fields as Array<any>).map(BoostFieldToJSON)),
    };
}

