/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Image or video associated with a category.
 * @export
 * @interface CategoryImage
 */
export interface CategoryImage {
    /**
     * Image title.  Unicode data with a maximum length of 50 characters.
     * @type {string}
     * @memberof CategoryImage
     */
    imageLabel?: string | null;
    /**
     * Descriptive text associated with the image. Unicode data with a maximum length of 200 characters.
     * @type {string}
     * @memberof CategoryImage
     */
    altText?: string | null;
    /**
     * Image URL. Unicode data with a maximum length of 4000 characters.
     * @type {string}
     * @memberof CategoryImage
     */
    imageUrl?: string | null;
    /**
     * Id of the image in the CMS.
     * @type {string}
     * @memberof CategoryImage
     */
    cmsId?: string | null;
    /**
     * URL of the video. Unicode data with a maximum length of 4000 characters.
     * @type {string}
     * @memberof CategoryImage
     */
    videoUrl?: string | null;
    /**
     * Type of media. Used by the client to determine how to render the image or video or what have you.
     * @type {string}
     * @memberof CategoryImage
     */
    mediaType?: string | null;
    /**
     * For categories with multiple images, the sequence is the order in which this image appears. Whole number data. Required.
     * @type {number}
     * @memberof CategoryImage
     */
    sequence?: number | null;
}

/**
 * Check if a given object implements the CategoryImage interface.
 */
export function instanceOfCategoryImage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CategoryImageFromJSON(json: any): CategoryImage {
    return CategoryImageFromJSONTyped(json, false);
}

export function CategoryImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryImage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'imageLabel': !exists(json, 'imageLabel') ? undefined : json['imageLabel'],
        'altText': !exists(json, 'altText') ? undefined : json['altText'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'cmsId': !exists(json, 'cmsId') ? undefined : json['cmsId'],
        'videoUrl': !exists(json, 'videoUrl') ? undefined : json['videoUrl'],
        'mediaType': !exists(json, 'mediaType') ? undefined : json['mediaType'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function CategoryImageToJSON(value?: CategoryImage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'imageLabel': value.imageLabel,
        'altText': value.altText,
        'imageUrl': value.imageUrl,
        'cmsId': value.cmsId,
        'videoUrl': value.videoUrl,
        'mediaType': value.mediaType,
        'sequence': value.sequence,
    };
}

