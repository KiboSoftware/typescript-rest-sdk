/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductImage } from './ProductImage';
import {
    ProductImageFromJSON,
    ProductImageFromJSONTyped,
    ProductImageToJSON,
} from './ProductImage';

/**
 * Name of the product and, if supplied, description, metatags, friendly URL, and associated images.
 * @export
 * @interface ProductContent
 */
export interface ProductContent {
    /**
     * Name of the product.
     * @type {string}
     * @memberof ProductContent
     */
    productName?: string | null;
    /**
     * Detailed description of the product typically used for a product details page.
     * @type {string}
     * @memberof ProductContent
     */
    productFullDescription?: string | null;
    /**
     * Brief description of the product typically used when the product is displayed in a list or search results.
     * @type {string}
     * @memberof ProductContent
     */
    productShortDescription?: string | null;
    /**
     * Metadata title used to manage information internally.
     * @type {string}
     * @memberof ProductContent
     */
    metaTagTitle?: string | null;
    /**
     * Metadata description used to manage information internally.
     * @type {string}
     * @memberof ProductContent
     */
    metaTagDescription?: string | null;
    /**
     * Metadata keywords used to manage information internally.
     * @type {string}
     * @memberof ProductContent
     */
    metaTagKeywords?: string | null;
    /**
     * Human-readable identifier defined for the product to create friendly URLs.
     * @type {string}
     * @memberof ProductContent
     */
    seoFriendlyUrl?: string | null;
    /**
     * Images associated with the product.
     * @type {Array<ProductImage>}
     * @memberof ProductContent
     */
    productImages?: Array<ProductImage> | null;
}

/**
 * Check if a given object implements the ProductContent interface.
 */
export function instanceOfProductContent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductContentFromJSON(json: any): ProductContent {
    return ProductContentFromJSONTyped(json, false);
}

export function ProductContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productName': !exists(json, 'productName') ? undefined : json['productName'],
        'productFullDescription': !exists(json, 'productFullDescription') ? undefined : json['productFullDescription'],
        'productShortDescription': !exists(json, 'productShortDescription') ? undefined : json['productShortDescription'],
        'metaTagTitle': !exists(json, 'metaTagTitle') ? undefined : json['metaTagTitle'],
        'metaTagDescription': !exists(json, 'metaTagDescription') ? undefined : json['metaTagDescription'],
        'metaTagKeywords': !exists(json, 'metaTagKeywords') ? undefined : json['metaTagKeywords'],
        'seoFriendlyUrl': !exists(json, 'seoFriendlyUrl') ? undefined : json['seoFriendlyUrl'],
        'productImages': !exists(json, 'productImages') ? undefined : (json['productImages'] === null ? null : (json['productImages'] as Array<any>).map(ProductImageFromJSON)),
    };
}

export function ProductContentToJSON(value?: ProductContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productName': value.productName,
        'productFullDescription': value.productFullDescription,
        'productShortDescription': value.productShortDescription,
        'metaTagTitle': value.metaTagTitle,
        'metaTagDescription': value.metaTagDescription,
        'metaTagKeywords': value.metaTagKeywords,
        'seoFriendlyUrl': value.seoFriendlyUrl,
        'productImages': value.productImages === undefined ? undefined : (value.productImages === null ? null : (value.productImages as Array<any>).map(ProductImageToJSON)),
    };
}

