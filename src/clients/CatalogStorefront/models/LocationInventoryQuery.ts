/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryTag } from './InventoryTag';
import {
    InventoryTagFromJSON,
    InventoryTagFromJSONTyped,
    InventoryTagToJSON,
} from './InventoryTag';

/**
 * The inventory for a product at a specific Location
 * @export
 * @interface LocationInventoryQuery
 */
export interface LocationInventoryQuery {
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationInventoryQuery
     */
    locationCodes?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationInventoryQuery
     */
    productCodes?: Array<string> | null;
    /**
     * 
     * @type {Array<InventoryTag>}
     * @memberof LocationInventoryQuery
     */
    inventoryTags?: Array<InventoryTag> | null;
    /**
     * 
     * @type {boolean}
     * @memberof LocationInventoryQuery
     */
    includeFutureInventory?: boolean;
}

/**
 * Check if a given object implements the LocationInventoryQuery interface.
 */
export function instanceOfLocationInventoryQuery(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationInventoryQueryFromJSON(json: any): LocationInventoryQuery {
    return LocationInventoryQueryFromJSONTyped(json, false);
}

export function LocationInventoryQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationInventoryQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locationCodes': !exists(json, 'locationCodes') ? undefined : json['locationCodes'],
        'productCodes': !exists(json, 'productCodes') ? undefined : json['productCodes'],
        'inventoryTags': !exists(json, 'inventoryTags') ? undefined : (json['inventoryTags'] === null ? null : (json['inventoryTags'] as Array<any>).map(InventoryTagFromJSON)),
        'includeFutureInventory': !exists(json, 'includeFutureInventory') ? undefined : json['includeFutureInventory'],
    };
}

export function LocationInventoryQueryToJSON(value?: LocationInventoryQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'locationCodes': value.locationCodes,
        'productCodes': value.productCodes,
        'inventoryTags': value.inventoryTags === undefined ? undefined : (value.inventoryTags === null ? null : (value.inventoryTags as Array<any>).map(InventoryTagToJSON)),
        'includeFutureInventory': value.includeFutureInventory,
    };
}

