/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductImage } from './ProductImage';
import {
    ProductImageFromJSON,
    ProductImageFromJSONTyped,
    ProductImageToJSON,
} from './ProductImage';
import type { ProductPrice } from './ProductPrice';
import {
    ProductPriceFromJSON,
    ProductPriceFromJSONTyped,
    ProductPriceToJSON,
} from './ProductPrice';

/**
 * 
 * @export
 * @interface ProductSubstitution
 */
export interface ProductSubstitution {
    /**
     * Merchant-created code associated with the product, for example, a SKU.
     * @type {string}
     * @memberof ProductSubstitution
     */
    productCode?: string | null;
    /**
     * When a configurable product has IsPurchasable=true on a GetProduct, this property will be populated for submission to cart.
     * @type {string}
     * @memberof ProductSubstitution
     */
    baseProductCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductSubstitution
     */
    productName?: string | null;
    /**
     * The UsageType of this product (Standard, Configurable, Bundle, Component, Collection)
     * @type {string}
     * @memberof ProductSubstitution
     */
    productUsage?: string | null;
    /**
     * UPC code of the products (populated for configurable products).
     * @type {string}
     * @memberof ProductSubstitution
     */
    upc?: string | null;
    /**
     * Manufacturer part number.
     * @type {string}
     * @memberof ProductSubstitution
     */
    mfgPartNumber?: string | null;
    /**
     * 
     * @type {ProductPrice}
     * @memberof ProductSubstitution
     */
    price?: ProductPrice;
    /**
     * 
     * @type {Array<ProductImage>}
     * @memberof ProductSubstitution
     */
    productImages?: Array<ProductImage> | null;
}

/**
 * Check if a given object implements the ProductSubstitution interface.
 */
export function instanceOfProductSubstitution(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductSubstitutionFromJSON(json: any): ProductSubstitution {
    return ProductSubstitutionFromJSONTyped(json, false);
}

export function ProductSubstitutionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductSubstitution {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'baseProductCode': !exists(json, 'baseProductCode') ? undefined : json['baseProductCode'],
        'productName': !exists(json, 'productName') ? undefined : json['productName'],
        'productUsage': !exists(json, 'productUsage') ? undefined : json['productUsage'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'mfgPartNumber': !exists(json, 'mfgPartNumber') ? undefined : json['mfgPartNumber'],
        'price': !exists(json, 'price') ? undefined : ProductPriceFromJSON(json['price']),
        'productImages': !exists(json, 'productImages') ? undefined : (json['productImages'] === null ? null : (json['productImages'] as Array<any>).map(ProductImageFromJSON)),
    };
}

export function ProductSubstitutionToJSON(value?: ProductSubstitution | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productCode': value.productCode,
        'baseProductCode': value.baseProductCode,
        'productName': value.productName,
        'productUsage': value.productUsage,
        'upc': value.upc,
        'mfgPartNumber': value.mfgPartNumber,
        'price': ProductPriceToJSON(value.price),
        'productImages': value.productImages === undefined ? undefined : (value.productImages === null ? null : (value.productImages as Array<any>).map(ProductImageToJSON)),
    };
}

