/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FacetValue
 */
export interface FacetValue {
    /**
     * 
     * @type {string}
     * @memberof FacetValue
     */
    label?: string | null;
    /**
     * True if this FacetValue was supplied as a facet value filter in the current search
     * @type {boolean}
     * @memberof FacetValue
     */
    isApplied?: boolean | null;
    /**
     * Number of occurrences of FacetValue in result set.
     * @type {number}
     * @memberof FacetValue
     */
    count?: number;
    /**
     * String representation of Facet Value
     * @type {string}
     * @memberof FacetValue
     */
    value?: string | null;
    /**
     * Submit this as a facet value filter
     * @type {string}
     * @memberof FacetValue
     */
    filterValue?: string | null;
    /**
     * When range query Facet
     * @type {string}
     * @memberof FacetValue
     */
    rangeQueryValueStart?: string | null;
    /**
     * When range query Facet
     * @type {string}
     * @memberof FacetValue
     */
    rangeQueryValueEnd?: string | null;
    /**
     * When hierarchical Facet
     * @type {string}
     * @memberof FacetValue
     */
    parentFacetValue?: string | null;
    /**
     * Indicates whether the FacetValue should be displayed
     * @type {boolean}
     * @memberof FacetValue
     */
    isDisplayed?: boolean;
    /**
     * When hierarchical Facet
     * @type {Array<FacetValue>}
     * @memberof FacetValue
     */
    childrenFacetValues?: Array<FacetValue> | null;
}

/**
 * Check if a given object implements the FacetValue interface.
 */
export function instanceOfFacetValue(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacetValueFromJSON(json: any): FacetValue {
    return FacetValueFromJSONTyped(json, false);
}

export function FacetValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacetValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'label': !exists(json, 'label') ? undefined : json['label'],
        'isApplied': !exists(json, 'isApplied') ? undefined : json['isApplied'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'filterValue': !exists(json, 'filterValue') ? undefined : json['filterValue'],
        'rangeQueryValueStart': !exists(json, 'rangeQueryValueStart') ? undefined : json['rangeQueryValueStart'],
        'rangeQueryValueEnd': !exists(json, 'rangeQueryValueEnd') ? undefined : json['rangeQueryValueEnd'],
        'parentFacetValue': !exists(json, 'parentFacetValue') ? undefined : json['parentFacetValue'],
        'isDisplayed': !exists(json, 'isDisplayed') ? undefined : json['isDisplayed'],
        'childrenFacetValues': !exists(json, 'childrenFacetValues') ? undefined : (json['childrenFacetValues'] === null ? null : (json['childrenFacetValues'] as Array<any>).map(FacetValueFromJSON)),
    };
}

export function FacetValueToJSON(value?: FacetValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'label': value.label,
        'isApplied': value.isApplied,
        'count': value.count,
        'value': value.value,
        'filterValue': value.filterValue,
        'rangeQueryValueStart': value.rangeQueryValueStart,
        'rangeQueryValueEnd': value.rangeQueryValueEnd,
        'parentFacetValue': value.parentFacetValue,
        'isDisplayed': value.isDisplayed,
        'childrenFacetValues': value.childrenFacetValues === undefined ? undefined : (value.childrenFacetValues === null ? null : (value.childrenFacetValues as Array<any>).map(FacetValueToJSON)),
    };
}

