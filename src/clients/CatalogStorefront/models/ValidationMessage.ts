/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ValidationMessage
 */
export interface ValidationMessage {
    /**
     * Severity level of the validation failure.
     *  Must be one of the values in SeverityConst.
     * @type {string}
     * @memberof ValidationMessage
     */
    severity?: string | null;
    /**
     * What invoked the validation.  Must be one of the values in SourceTypeConst.
     * @type {string}
     * @memberof ValidationMessage
     */
    source?: string | null;
    /**
     * Message displayed to the user when this validation failure occurred.
     * @type {string}
     * @memberof ValidationMessage
     */
    message?: string | null;
    /**
     * Type of validation error that occurred. This can be checked programatically. 
     *  Must be one of the values in ValidationTypeConst.
     * @type {string}
     * @memberof ValidationMessage
     */
    validationType?: string | null;
    /**
     * Unique identifier of the source that invoked the validation failure.
     * @type {string}
     * @memberof ValidationMessage
     */
    sourceId?: string | null;
}

/**
 * Check if a given object implements the ValidationMessage interface.
 */
export function instanceOfValidationMessage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ValidationMessageFromJSON(json: any): ValidationMessage {
    return ValidationMessageFromJSONTyped(json, false);
}

export function ValidationMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'severity': !exists(json, 'severity') ? undefined : json['severity'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'validationType': !exists(json, 'validationType') ? undefined : json['validationType'],
        'sourceId': !exists(json, 'sourceId') ? undefined : json['sourceId'],
    };
}

export function ValidationMessageToJSON(value?: ValidationMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'severity': value.severity,
        'source': value.source,
        'message': value.message,
        'validationType': value.validationType,
        'sourceId': value.sourceId,
    };
}

