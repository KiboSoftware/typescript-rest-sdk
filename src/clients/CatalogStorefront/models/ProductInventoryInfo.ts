/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
 * @export
 * @interface ProductInventoryInfo
 */
export interface ProductInventoryInfo {
    /**
     * If true, the Products service manages inventory for this product.
     * @type {boolean}
     * @memberof ProductInventoryInfo
     */
    manageStock?: boolean | null;
    /**
     * The behvior when the ManageStock is true and the product is not in stock.
     * @type {string}
     * @memberof ProductInventoryInfo
     */
    outOfStockBehavior?: string | null;
    /**
     * Number of product items currently available for purchase.
     * @type {number}
     * @memberof ProductInventoryInfo
     */
    onlineStockAvailable?: number | null;
    /**
     * Number of product items currently available for purchase.
     * @type {number}
     * @memberof ProductInventoryInfo
     */
    onlineSoftStockAvailable?: number | null;
    /**
     * Directship location code for OnlineStockAvailable
     * @type {string}
     * @memberof ProductInventoryInfo
     */
    onlineLocationCode?: string | null;
    /**
     * Date the item will become available for back order if out of stock
     * @type {Date}
     * @memberof ProductInventoryInfo
     */
    availableDate?: Date | null;
    /**
     * ReadOnly flag indicates is the product has substitutions defined
     * @type {boolean}
     * @memberof ProductInventoryInfo
     */
    isSubstitutable?: boolean;
}

/**
 * Check if a given object implements the ProductInventoryInfo interface.
 */
export function instanceOfProductInventoryInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductInventoryInfoFromJSON(json: any): ProductInventoryInfo {
    return ProductInventoryInfoFromJSONTyped(json, false);
}

export function ProductInventoryInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductInventoryInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'manageStock': !exists(json, 'manageStock') ? undefined : json['manageStock'],
        'outOfStockBehavior': !exists(json, 'outOfStockBehavior') ? undefined : json['outOfStockBehavior'],
        'onlineStockAvailable': !exists(json, 'onlineStockAvailable') ? undefined : json['onlineStockAvailable'],
        'onlineSoftStockAvailable': !exists(json, 'onlineSoftStockAvailable') ? undefined : json['onlineSoftStockAvailable'],
        'onlineLocationCode': !exists(json, 'onlineLocationCode') ? undefined : json['onlineLocationCode'],
        'availableDate': !exists(json, 'availableDate') ? undefined : (json['availableDate'] === null ? null : new Date(json['availableDate'])),
        'isSubstitutable': !exists(json, 'isSubstitutable') ? undefined : json['isSubstitutable'],
    };
}

export function ProductInventoryInfoToJSON(value?: ProductInventoryInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'manageStock': value.manageStock,
        'outOfStockBehavior': value.outOfStockBehavior,
        'onlineStockAvailable': value.onlineStockAvailable,
        'onlineSoftStockAvailable': value.onlineSoftStockAvailable,
        'onlineLocationCode': value.onlineLocationCode,
        'availableDate': value.availableDate === undefined ? undefined : (value.availableDate === null ? null : value.availableDate.toISOString()),
        'isSubstitutable': value.isSubstitutable,
    };
}

