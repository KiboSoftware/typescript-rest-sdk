/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchSuggestionGroup } from './SearchSuggestionGroup';
import {
    SearchSuggestionGroupFromJSON,
    SearchSuggestionGroupFromJSONTyped,
    SearchSuggestionGroupToJSON,
} from './SearchSuggestionGroup';

/**
 * List of items to suggest to the shopper who is entering a search query, for example, a search box on the storefront.
 * @export
 * @interface SearchSuggestionResult
 */
export interface SearchSuggestionResult {
    /**
     * Text that the shopper types in a search query.
     * @type {string}
     * @memberof SearchSuggestionResult
     */
    query?: string | null;
    /**
     * List of SearchSuggestionGroups
     * @type {Array<SearchSuggestionGroup>}
     * @memberof SearchSuggestionResult
     */
    suggestionGroups?: Array<SearchSuggestionGroup> | null;
}

/**
 * Check if a given object implements the SearchSuggestionResult interface.
 */
export function instanceOfSearchSuggestionResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchSuggestionResultFromJSON(json: any): SearchSuggestionResult {
    return SearchSuggestionResultFromJSONTyped(json, false);
}

export function SearchSuggestionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchSuggestionResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'query': !exists(json, 'query') ? undefined : json['query'],
        'suggestionGroups': !exists(json, 'suggestionGroups') ? undefined : (json['suggestionGroups'] === null ? null : (json['suggestionGroups'] as Array<any>).map(SearchSuggestionGroupFromJSON)),
    };
}

export function SearchSuggestionResultToJSON(value?: SearchSuggestionResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'query': value.query,
        'suggestionGroups': value.suggestionGroups === undefined ? undefined : (value.suggestionGroups === null ? null : (value.suggestionGroups as Array<any>).map(SearchSuggestionGroupToJSON)),
    };
}

