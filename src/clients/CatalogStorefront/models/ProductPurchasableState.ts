/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidationMessage } from './ValidationMessage';
import {
    ValidationMessageFromJSON,
    ValidationMessageFromJSONTyped,
    ValidationMessageToJSON,
} from './ValidationMessage';

/**
 * Current state of the product purchase, that is, whether it is ready to be purchased. For products with configurable options,     /// the product is purchaseable if the shopper has selected all required options. If not, a message lists which required options are missing.
 * @export
 * @interface ProductPurchasableState
 */
export interface ProductPurchasableState {
    /**
     * If true, this product is currently available for purchase. For products with options, this is false until the shopper selects all required options.
     * @type {boolean}
     * @memberof ProductPurchasableState
     */
    isPurchasable?: boolean;
    /**
     * Message associated with this product if it is not ready to be purchased. For products with options, message contains which required options are missing.
     * @type {Array<ValidationMessage>}
     * @memberof ProductPurchasableState
     */
    messages?: Array<ValidationMessage> | null;
}

/**
 * Check if a given object implements the ProductPurchasableState interface.
 */
export function instanceOfProductPurchasableState(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductPurchasableStateFromJSON(json: any): ProductPurchasableState {
    return ProductPurchasableStateFromJSONTyped(json, false);
}

export function ProductPurchasableStateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductPurchasableState {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isPurchasable': !exists(json, 'isPurchasable') ? undefined : json['isPurchasable'],
        'messages': !exists(json, 'messages') ? undefined : (json['messages'] === null ? null : (json['messages'] as Array<any>).map(ValidationMessageFromJSON)),
    };
}

export function ProductPurchasableStateToJSON(value?: ProductPurchasableState | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isPurchasable': value.isPurchasable,
        'messages': value.messages === undefined ? undefined : (value.messages === null ? null : (value.messages as Array<any>).map(ValidationMessageToJSON)),
    };
}

