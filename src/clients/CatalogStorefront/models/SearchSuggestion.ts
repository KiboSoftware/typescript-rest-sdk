/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A suggested result based on the search query
 * @export
 * @interface SearchSuggestion
 */
export interface SearchSuggestion {
    /**
     * The type of Suggestion (e.g. Term, Product, Category). 
     * Will be one of the values of the SuggestionTypeConst type.
     * @type {string}
     * @memberof SearchSuggestion
     */
    suggestionType?: string | null;
    /**
     * A suggested entity based on the search query. Use the SuggestionType to determine the type of entity.
     * Could be a SearchTerm, Product, or Category
     * @type {any}
     * @memberof SearchSuggestion
     */
    suggestion?: any | null;
}

/**
 * Check if a given object implements the SearchSuggestion interface.
 */
export function instanceOfSearchSuggestion(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchSuggestionFromJSON(json: any): SearchSuggestion {
    return SearchSuggestionFromJSONTyped(json, false);
}

export function SearchSuggestionFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchSuggestion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'suggestionType': !exists(json, 'suggestionType') ? undefined : json['suggestionType'],
        'suggestion': !exists(json, 'suggestion') ? undefined : json['suggestion'],
    };
}

export function SearchSuggestionToJSON(value?: SearchSuggestion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'suggestionType': value.suggestionType,
        'suggestion': value.suggestion,
    };
}

