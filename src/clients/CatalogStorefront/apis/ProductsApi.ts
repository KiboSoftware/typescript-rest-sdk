/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogRuntimesProduct,
  CatalogRuntimesProductCollection,
  ConfiguredProduct,
  DiscountSelections,
  DiscountValidationSummary,
  LocationInventoryCollection,
  LocationInventoryQuery,
  ProductCostCollection,
  ProductCostQuery,
  ProductForIndexing,
  ProductOptionSelections,
  ProductSubstituteCollection,
  ProductValidationSummary,
} from '../models';


export namespace productsApiParams { 
    export interface StorefrontConfigureProductRequest {
        productCode: string;
        includeOptionDetails?: boolean;
        skipInventoryCheck?: boolean;
        quantity?: number;
        purchaseLocation?: string;
        variationProductCodeFilter?: string;
        useSubscriptionPricing?: boolean;
        subscriptionFrequency?: string;
        responseFields?: string;
        productOptionSelections?: ProductOptionSelections;
    }
    export interface StorefrontGetProductRequest {
        productCode: string;
        variationProductCode?: string;
        responseGroups?: string;
        allowInactive?: boolean;
        skipInventoryCheck?: boolean;
        supressOutOfStock404?: boolean;
        quantity?: number;
        acceptVariantProductCode?: boolean;
        purchaseLocation?: string;
        variationProductCodeFilter?: string;
        sliceValue?: string;
        includeAllImages?: boolean;
        useSubscriptionPricing?: boolean;
        responseFields?: string;
    }
    export interface StorefrontGetProductCostsRequest {
        responseFields?: string;
        productCostQuery?: ProductCostQuery;
    }
    export interface StorefrontGetProductForIndexingRequest {
        productCode: string;
        responseGroups?: string;
        productVersion?: number;
        lastModifiedDate?: string;
        responseFields?: string;
    }
    export interface StorefrontGetProductInventoriesRequest {
        responseFields?: string;
        locationInventoryQuery?: LocationInventoryQuery;
    }
    export interface StorefrontGetProductInventoryRequest {
        productCode: string;
        locationCodes?: string;
        includeFutureInventory?: boolean;
        includeSegmentedInventory?: boolean;
        serialNumber?: string;
        condition?: string;
        responseFields?: string;
    }
    export interface StorefrontGetProductsRequest {
        filter?: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        responseGroups?: string;
        responseOptions?: string;
        cursorMark?: string;
        defaultSort?: string;
        mid?: string;
        includeAllImages?: boolean;
        useSubscriptionPricing?: boolean;
        includeProductDetailsOnlyProperty?: boolean;
        collapse?: boolean;
        responseFields?: string;
    }
    export interface StorefrontProductSubstitutionsRequest {
        productCode: string;
        preferredProductCode?: string;
        responseFields?: string;
    }
    export interface StorefrontValidateDiscountsRequest {
        productCode: string;
        variationProductCode?: string;
        customerAccountId?: number;
        allowInactive?: boolean;
        skipInventoryCheck?: boolean;
        responseFields?: string;
        discountSelections?: DiscountSelections;
    }
    export interface StorefrontValidateProductRequest {
        productCode: string;
        skipInventoryCheck?: boolean;
        quantity?: number;
        skipDefaults?: boolean;
        purchaseLocation?: string;
        useSubscriptionPricing?: boolean;
        recalculateDynamicCategories?: boolean;
        acceptVariantProductCode?: boolean;
        responseFields?: string;
        productOptionSelections?: ProductOptionSelections;
    }
}
/**
* ProductsApiService - interface
* 
* @export
* @interface ProductsApi
*/
export interface ProductsApiService {
    /**
    * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
    * @summary Configures a variant product
    * @param {string} productCode Merchant-created code for the product being configured, for example, a SKU. Max length: 30.
    * @param {boolean} [includeOptionDetails] If true, the response returns product details such as. If false, returns a product summary such as the product name, price, and sale price.
    * @param {boolean} [skipInventoryCheck] Determines whether or not to check inventory on an item when validating
    * @param {number} [quantity] Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified.
    * @param {string} [purchaseLocation] 
    * @param {string} [variationProductCodeFilter] 
    * @param {boolean} [useSubscriptionPricing] 
    * @param {string} [subscriptionFrequency] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ProductOptionSelections} [productOptionSelections] Shopper-selected options.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontConfigureProductRaw(requestParameters: productsApiParams.StorefrontConfigureProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfiguredProduct>>;

    /**
    * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
    * Configures a variant product
    */
    storefrontConfigureProduct(requestParameters: productsApiParams.StorefrontConfigureProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfiguredProduct>;

    /**
    * Retrieves information about a single product given its product code.
    * @summary Get a product
    * @param {string} productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30.
    * @param {string} [variationProductCode] Optional. Merchant-created code associated with a specific product variation. Max length: #.
    * @param {string} [responseGroups] Optional. Response groups to be determined.
    * @param {boolean} [allowInactive] Optional. If true, return a product if it is located but inactive.
    * @param {boolean} [skipInventoryCheck] Determines whether or not to check inventory on an item when validating
    * @param {boolean} [supressOutOfStock404] Optional. If true, will still return the product, even if product is out of stock and the out of stock behavior is set to “Hide Product in Store”. If false or omitted, the same product will return a 404 not found. Suppressing the 404 not found is useful for site SEO.
    * @param {number} [quantity] Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified.
    * @param {boolean} [acceptVariantProductCode] 
    * @param {string} [purchaseLocation] 
    * @param {string} [variationProductCodeFilter] 
    * @param {string} [sliceValue] 
    * @param {boolean} [includeAllImages] 
    * @param {boolean} [useSubscriptionPricing] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontGetProductRaw(requestParameters: productsApiParams.StorefrontGetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogRuntimesProduct>>;

    /**
    * Retrieves information about a single product given its product code.
    * Get a product
    */
    storefrontGetProduct(requestParameters: productsApiParams.StorefrontGetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogRuntimesProduct>;

    /**
    * Get costs for products
    * @summary Get costs for products
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ProductCostQuery} [productCostQuery] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontGetProductCostsRaw(requestParameters: productsApiParams.StorefrontGetProductCostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCostCollection>>;

    /**
    * Get costs for products
    * Get costs for products
    */
    storefrontGetProductCosts(requestParameters: productsApiParams.StorefrontGetProductCostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCostCollection>;

    /**
    * Retrieves information about a single product given its product code for Mozu to index in the search engine
    * @summary Get a product for indexing
    * @param {string} productCode Required. Merchant-created code associated with the product, for example, a SKU. Max length: 30.
    * @param {string} [responseGroups] Optional. Response groups to be determined.
    * @param {number} [productVersion] Optional. The current version of the product to use for latency checking.                If this instance of Product Runtime is configured to run against a replicated database node that has a lesser version than this value, it will read from the primary database node to prevent stale data.
    * @param {string} [lastModifiedDate] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontGetProductForIndexingRaw(requestParameters: productsApiParams.StorefrontGetProductForIndexingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductForIndexing>>;

    /**
    * Retrieves information about a single product given its product code for Mozu to index in the search engine
    * Get a product for indexing
    */
    storefrontGetProductForIndexing(requestParameters: productsApiParams.StorefrontGetProductForIndexingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductForIndexing>;

    /**
    * Get location inventories for a list of products
    * @summary Get location inventories for a list of products
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {LocationInventoryQuery} [locationInventoryQuery] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontGetProductInventoriesRaw(requestParameters: productsApiParams.StorefrontGetProductInventoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationInventoryCollection>>;

    /**
    * Get location inventories for a list of products
    * Get location inventories for a list of products
    */
    storefrontGetProductInventories(requestParameters: productsApiParams.StorefrontGetProductInventoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationInventoryCollection>;

    /**
    * Get product inventory
    * @summary Get product inventory
    * @param {string} productCode 
    * @param {string} [locationCodes] 
    * @param {boolean} [includeFutureInventory] 
    * @param {boolean} [includeSegmentedInventory] 
    * @param {string} [serialNumber] 
    * @param {string} [condition] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontGetProductInventoryRaw(requestParameters: productsApiParams.StorefrontGetProductInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationInventoryCollection>>;

    /**
    * Get product inventory
    * Get product inventory
    */
    storefrontGetProductInventory(requestParameters: productsApiParams.StorefrontGetProductInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationInventoryCollection>;

    /**
    * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
    * @summary Get a list of products
    * @param {string} [filter] Optional. A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than, gt &#x3D; greater than or equals, le &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains.
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a pageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. Default value: 0.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a single query. Default value: 20. Maximum value: 200.
    * @param {string} [sortBy] Optional. Sort the results by and the order in which the results appear. Either ascending order (a-z) which accepts \&#39;asc\&#39; or \&#39;ASC\&#39; or descending order (z-a) which accepts \&#39;desc\&#39; or \&#39;DESC\&#39;. The sortBy parameter follows an available property. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc.
    * @param {string} [responseGroups] Optional. Response groups to be determined.
    * @param {string} [responseOptions] 
    * @param {string} [cursorMark] Pass in * to begin a deep page operation. The response will include a nextCursorMark value. Pass this into the next call. Continue with this pattern until nextCursorMark is null.
    * @param {string} [defaultSort] 
    * @param {string} [mid] 
    * @param {boolean} [includeAllImages] Optional. If true return all images instead of default images.
    * @param {boolean} [useSubscriptionPricing] 
    * @param {boolean} [includeProductDetailsOnlyProperty] 
    * @param {boolean} [collapse] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontGetProductsRaw(requestParameters: productsApiParams.StorefrontGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogRuntimesProductCollection>>;

    /**
    * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
    * Get a list of products
    */
    storefrontGetProducts(requestParameters: productsApiParams.StorefrontGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogRuntimesProductCollection>;

    /**
    * Returns a list of up to 10 products that can be substituted for the provided product code.
    * @summary Get product substitutions
    * @param {string} productCode 
    * @param {string} [preferredProductCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontProductSubstitutionsRaw(requestParameters: productsApiParams.StorefrontProductSubstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSubstituteCollection>>;

    /**
    * Returns a list of up to 10 products that can be substituted for the provided product code.
    * Get product substitutions
    */
    storefrontProductSubstitutions(requestParameters: productsApiParams.StorefrontProductSubstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSubstituteCollection>;

    /**
    * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
    * @summary Validates discounts for a product
    * @param {string} productCode 
    * @param {string} [variationProductCode] 
    * @param {number} [customerAccountId] Customer Id may be set in the querystring or in the user claims bag if the caller context is a shopper.
    * @param {boolean} [allowInactive] 
    * @param {boolean} [skipInventoryCheck] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DiscountSelections} [discountSelections] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontValidateDiscountsRaw(requestParameters: productsApiParams.StorefrontValidateDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountValidationSummary>>;

    /**
    * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
    * Validates discounts for a product
    */
    storefrontValidateDiscounts(requestParameters: productsApiParams.StorefrontValidateDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountValidationSummary>;

    /**
    * Validate the final state of shopper-selected options.
    * @summary Validates a variant product
    * @param {string} productCode Merchant-created code of product being validated.
    * @param {boolean} [skipInventoryCheck] Determines whether or not to check inventory on an item when validating
    * @param {number} [quantity] Optional.  If specified, will be used for returning pricing based on volume if applicable.  Defaults to 1 if not specified.
    * @param {boolean} [skipDefaults] Determines whether or not to add configured default-extras on an item when validating
    * @param {string} [purchaseLocation] 
    * @param {boolean} [useSubscriptionPricing] 
    * @param {boolean} [recalculateDynamicCategories] 
    * @param {boolean} [acceptVariantProductCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ProductOptionSelections} [productOptionSelections] Final state of shopper selected options.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontValidateProductRaw(requestParameters: productsApiParams.StorefrontValidateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductValidationSummary>>;

    /**
    * Validate the final state of shopper-selected options.
    * Validates a variant product
    */
    storefrontValidateProduct(requestParameters: productsApiParams.StorefrontValidateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductValidationSummary>;

}


/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI implements ProductsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
     * Configures a variant product
     */


    async storefrontConfigureProductRaw(requestParameters: productsApiParams.StorefrontConfigureProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfiguredProduct>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontConfigureProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeOptionDetails !== undefined) {
            queryParameters['includeOptionDetails'] = requestParameters.includeOptionDetails;
        }

        if (requestParameters.skipInventoryCheck !== undefined) {
            queryParameters['skipInventoryCheck'] = requestParameters.skipInventoryCheck;
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.purchaseLocation !== undefined) {
            queryParameters['purchaseLocation'] = requestParameters.purchaseLocation;
        }

        if (requestParameters.variationProductCodeFilter !== undefined) {
            queryParameters['variationProductCodeFilter'] = requestParameters.variationProductCodeFilter;
        }

        if (requestParameters.useSubscriptionPricing !== undefined) {
            queryParameters['useSubscriptionPricing'] = requestParameters.useSubscriptionPricing;
        }

        if (requestParameters.subscriptionFrequency !== undefined) {
            queryParameters['subscriptionFrequency'] = requestParameters.subscriptionFrequency;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/{productCode}/configure`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productOptionSelections,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new product selection. A create occurs each time a shopper selects a product option as they configure a product. Once all the required product options are configured, the product can be added to a cart.
     * Configures a variant product
     */
    async storefrontConfigureProduct(requestParameters: productsApiParams.StorefrontConfigureProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfiguredProduct> {
        const response = await this.storefrontConfigureProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves information about a single product given its product code.
     * Get a product
     */


    async storefrontGetProductRaw(requestParameters: productsApiParams.StorefrontGetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogRuntimesProduct>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontGetProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.variationProductCode !== undefined) {
            queryParameters['variationProductCode'] = requestParameters.variationProductCode;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.allowInactive !== undefined) {
            queryParameters['allowInactive'] = requestParameters.allowInactive;
        }

        if (requestParameters.skipInventoryCheck !== undefined) {
            queryParameters['skipInventoryCheck'] = requestParameters.skipInventoryCheck;
        }

        if (requestParameters.supressOutOfStock404 !== undefined) {
            queryParameters['supressOutOfStock404'] = requestParameters.supressOutOfStock404;
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.acceptVariantProductCode !== undefined) {
            queryParameters['acceptVariantProductCode'] = requestParameters.acceptVariantProductCode;
        }

        if (requestParameters.purchaseLocation !== undefined) {
            queryParameters['purchaseLocation'] = requestParameters.purchaseLocation;
        }

        if (requestParameters.variationProductCodeFilter !== undefined) {
            queryParameters['variationProductCodeFilter'] = requestParameters.variationProductCodeFilter;
        }

        if (requestParameters.sliceValue !== undefined) {
            queryParameters['sliceValue'] = requestParameters.sliceValue;
        }

        if (requestParameters.includeAllImages !== undefined) {
            queryParameters['includeAllImages'] = requestParameters.includeAllImages;
        }

        if (requestParameters.useSubscriptionPricing !== undefined) {
            queryParameters['useSubscriptionPricing'] = requestParameters.useSubscriptionPricing;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/{productCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves information about a single product given its product code.
     * Get a product
     */
    async storefrontGetProduct(requestParameters: productsApiParams.StorefrontGetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogRuntimesProduct> {
        const response = await this.storefrontGetProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get costs for products
     * Get costs for products
     */


    async storefrontGetProductCostsRaw(requestParameters: productsApiParams.StorefrontGetProductCostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCostCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/costs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productCostQuery,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get costs for products
     * Get costs for products
     */
    async storefrontGetProductCosts(requestParameters: productsApiParams.StorefrontGetProductCostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCostCollection> {
        const response = await this.storefrontGetProductCostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves information about a single product given its product code for Mozu to index in the search engine
     * Get a product for indexing
     */


    async storefrontGetProductForIndexingRaw(requestParameters: productsApiParams.StorefrontGetProductForIndexingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductForIndexing>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontGetProductForIndexing.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.productVersion !== undefined) {
            queryParameters['productVersion'] = requestParameters.productVersion;
        }

        if (requestParameters.lastModifiedDate !== undefined) {
            queryParameters['lastModifiedDate'] = requestParameters.lastModifiedDate;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/indexing/{productCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves information about a single product given its product code for Mozu to index in the search engine
     * Get a product for indexing
     */
    async storefrontGetProductForIndexing(requestParameters: productsApiParams.StorefrontGetProductForIndexingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductForIndexing> {
        const response = await this.storefrontGetProductForIndexingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get location inventories for a list of products
     * Get location inventories for a list of products
     */


    async storefrontGetProductInventoriesRaw(requestParameters: productsApiParams.StorefrontGetProductInventoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationInventoryCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/locationinventory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.locationInventoryQuery,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get location inventories for a list of products
     * Get location inventories for a list of products
     */
    async storefrontGetProductInventories(requestParameters: productsApiParams.StorefrontGetProductInventoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationInventoryCollection> {
        const response = await this.storefrontGetProductInventoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product inventory
     * Get product inventory
     */


    async storefrontGetProductInventoryRaw(requestParameters: productsApiParams.StorefrontGetProductInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationInventoryCollection>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontGetProductInventory.');
        }

        const queryParameters: any = {};

        if (requestParameters.locationCodes !== undefined) {
            queryParameters['locationCodes'] = requestParameters.locationCodes;
        }

        if (requestParameters.includeFutureInventory !== undefined) {
            queryParameters['includeFutureInventory'] = requestParameters.includeFutureInventory;
        }

        if (requestParameters.includeSegmentedInventory !== undefined) {
            queryParameters['includeSegmentedInventory'] = requestParameters.includeSegmentedInventory;
        }

        if (requestParameters.serialNumber !== undefined) {
            queryParameters['serialNumber'] = requestParameters.serialNumber;
        }

        if (requestParameters.condition !== undefined) {
            queryParameters['condition'] = requestParameters.condition;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/{productCode}/locationinventory`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get product inventory
     * Get product inventory
     */
    async storefrontGetProductInventory(requestParameters: productsApiParams.StorefrontGetProductInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationInventoryCollection> {
        const response = await this.storefrontGetProductInventoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
     * Get a list of products
     */


    async storefrontGetProductsRaw(requestParameters: productsApiParams.StorefrontGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogRuntimesProductCollection>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseOptions !== undefined) {
            queryParameters['responseOptions'] = requestParameters.responseOptions;
        }

        if (requestParameters.cursorMark !== undefined) {
            queryParameters['cursorMark'] = requestParameters.cursorMark;
        }

        if (requestParameters.defaultSort !== undefined) {
            queryParameters['defaultSort'] = requestParameters.defaultSort;
        }

        if (requestParameters.mid !== undefined) {
            queryParameters['mid'] = requestParameters.mid;
        }

        if (requestParameters.includeAllImages !== undefined) {
            queryParameters['includeAllImages'] = requestParameters.includeAllImages;
        }

        if (requestParameters.useSubscriptionPricing !== undefined) {
            queryParameters['useSubscriptionPricing'] = requestParameters.useSubscriptionPricing;
        }

        if (requestParameters.includeProductDetailsOnlyProperty !== undefined) {
            queryParameters['includeProductDetailsOnlyProperty'] = requestParameters.includeProductDetailsOnlyProperty;
        }

        if (requestParameters.collapse !== undefined) {
            queryParameters['collapse'] = requestParameters.collapse;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of products that appear on the storefront according to any specified filter criteria and sort options.
     * Get a list of products
     */
    async storefrontGetProducts(requestParameters: productsApiParams.StorefrontGetProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogRuntimesProductCollection> {
        const response = await this.storefrontGetProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of up to 10 products that can be substituted for the provided product code.
     * Get product substitutions
     */


    async storefrontProductSubstitutionsRaw(requestParameters: productsApiParams.StorefrontProductSubstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSubstituteCollection>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontProductSubstitutions.');
        }

        const queryParameters: any = {};

        if (requestParameters.preferredProductCode !== undefined) {
            queryParameters['preferredProductCode'] = requestParameters.preferredProductCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/{productCode}/substitutions`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of up to 10 products that can be substituted for the provided product code.
     * Get product substitutions
     */
    async storefrontProductSubstitutions(requestParameters: productsApiParams.StorefrontProductSubstitutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSubstituteCollection> {
        const response = await this.storefrontProductSubstitutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
     * Validates discounts for a product
     */


    async storefrontValidateDiscountsRaw(requestParameters: productsApiParams.StorefrontValidateDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountValidationSummary>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontValidateDiscounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.variationProductCode !== undefined) {
            queryParameters['variationProductCode'] = requestParameters.variationProductCode;
        }

        if (requestParameters.customerAccountId !== undefined) {
            queryParameters['customerAccountId'] = requestParameters.customerAccountId;
        }

        if (requestParameters.allowInactive !== undefined) {
            queryParameters['allowInactive'] = requestParameters.allowInactive;
        }

        if (requestParameters.skipInventoryCheck !== undefined) {
            queryParameters['skipInventoryCheck'] = requestParameters.skipInventoryCheck;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/{productCode}/validateDiscounts`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.discountSelections,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Validate if a collection of discounts is valid for a product.  This includes discounts that would normally be considered order level discounts.
     * Validates discounts for a product
     */
    async storefrontValidateDiscounts(requestParameters: productsApiParams.StorefrontValidateDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountValidationSummary> {
        const response = await this.storefrontValidateDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate the final state of shopper-selected options.
     * Validates a variant product
     */


    async storefrontValidateProductRaw(requestParameters: productsApiParams.StorefrontValidateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductValidationSummary>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontValidateProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.skipInventoryCheck !== undefined) {
            queryParameters['skipInventoryCheck'] = requestParameters.skipInventoryCheck;
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.skipDefaults !== undefined) {
            queryParameters['skipDefaults'] = requestParameters.skipDefaults;
        }

        if (requestParameters.purchaseLocation !== undefined) {
            queryParameters['purchaseLocation'] = requestParameters.purchaseLocation;
        }

        if (requestParameters.useSubscriptionPricing !== undefined) {
            queryParameters['useSubscriptionPricing'] = requestParameters.useSubscriptionPricing;
        }

        if (requestParameters.recalculateDynamicCategories !== undefined) {
            queryParameters['recalculateDynamicCategories'] = requestParameters.recalculateDynamicCategories;
        }

        if (requestParameters.acceptVariantProductCode !== undefined) {
            queryParameters['acceptVariantProductCode'] = requestParameters.acceptVariantProductCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/products/{productCode}/validate`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productOptionSelections,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Validate the final state of shopper-selected options.
     * Validates a variant product
     */
    async storefrontValidateProduct(requestParameters: productsApiParams.StorefrontValidateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductValidationSummary> {
        const response = await this.storefrontValidateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
