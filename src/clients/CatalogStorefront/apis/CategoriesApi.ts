/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Category,
  CategoryCollection,
  CategoryPagedCollection,
} from '../models';
import {
    CategoryFromJSON,
    CategoryToJSON,
    CategoryCollectionFromJSON,
    CategoryCollectionToJSON,
    CategoryPagedCollectionFromJSON,
    CategoryPagedCollectionToJSON,
} from '../models';

export interface CategoriesApiStorefrontGetCategoriesRequest {
    filter?: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    includeAttributes?: boolean;
}

export interface CategoriesApiStorefrontGetCategoryRequest {
    categoryId: number;
    allowInactive?: boolean;
    includeAttributes?: boolean;
}

export interface CategoriesApiStorefrontGetCategoryTreeRequest {
    includeAttributes?: boolean;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves a list of product categories that appear on the storefront as a flat list. Hidden categories do not appear in the list.
     * Get a list of product categories
     */


    async storefrontGetCategoriesRaw(requestParameters: CategoriesApiStorefrontGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryPagedCollection>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryPagedCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of product categories that appear on the storefront as a flat list. Hidden categories do not appear in the list.
     * Get a list of product categories
     */
    async storefrontGetCategories(requestParameters: CategoriesApiStorefrontGetCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryPagedCollection> {
        const response = await this.storefrontGetCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the name and details of a category that appears on the storefront. 
     * Get a product category
     */


    async storefrontGetCategoryRaw(requestParameters: CategoriesApiStorefrontGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling storefrontGetCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowInactive !== undefined) {
            queryParameters['allowInactive'] = requestParameters.allowInactive;
        }

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Retrieves the name and details of a category that appears on the storefront. 
     * Get a product category
     */
    async storefrontGetCategory(requestParameters: CategoriesApiStorefrontGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.storefrontGetCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the list of product categories that appear on the storefront organized in a hierarchical format. Hidden categories do not appear in the list.
     * Get a category tree
     */


    async storefrontGetCategoryTreeRaw(requestParameters: CategoriesApiStorefrontGetCategoryTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryCollection>> {
        const queryParameters: any = {};

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/categories/tree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the list of product categories that appear on the storefront organized in a hierarchical format. Hidden categories do not appear in the list.
     * Get a category tree
     */
    async storefrontGetCategoryTree(requestParameters: CategoriesApiStorefrontGetCategoryTreeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryCollection> {
        const response = await this.storefrontGetCategoryTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
