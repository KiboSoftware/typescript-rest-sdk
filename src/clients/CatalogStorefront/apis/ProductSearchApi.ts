/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../../../client-runtime'
import { basePathTemplate } from '../api-path'
import type {
  ProductSearchRandomAccessCursor,
  ProductSearchResult,
  RequestFilter,
  SearchSuggestionResult,
  VisualSearchResult,
} from '../models'
import {
  ProductSearchRandomAccessCursorFromJSON,
  ProductSearchRandomAccessCursorToJSON,
  ProductSearchResultFromJSON,
  ProductSearchResultToJSON,
  RequestFilterFromJSON,
  RequestFilterToJSON,
  SearchSuggestionResultFromJSON,
  SearchSuggestionResultToJSON,
  VisualSearchResultFromJSON,
  VisualSearchResultToJSON,
} from '../models'

export interface ProductSearchApiSearchDebugRequest {
  query?: string
  filter?: string
  facetTemplate?: string
  facetTemplateSubset?: string
  facet?: string
  facetFieldRangeQuery?: string
  facetHierPrefix?: string
  facetHierValue?: string
  facetHierDepth?: string
  facetStartIndex?: string
  facetPageSize?: string
  facetSettings?: string
  facetValueFilter?: string
  sortBy?: string
  sliceSearchResults?: boolean
  pageSize?: number
  startIndex?: number
  searchSettings?: string
  enableSearchTuningRules?: boolean
  searchTuningRuleContext?: string
  searchTuningRuleCode?: string
  responseGroups?: string
  facetTemplateExclude?: string
  facetPrefix?: string
  responseOptions?: string
  cursorMark?: string
  facetValueSort?: string
  returnUrl?: boolean
  mid?: string
  omitNamespace?: boolean
  campaignId?: string
  merchandizingRuleCode?: string
  responseFields?: string
}

export interface ProductSearchApiStorefrontGetRandomAccessCursorRequest {
  query?: string
  filter?: string
  pageSize?: number
}

export interface ProductSearchApiStorefrontSearchRequest {
  query?: string
  filter?: string
  facetTemplate?: string
  facetTemplateSubset?: string
  facet?: string
  facetFieldRangeQuery?: string
  facetHierPrefix?: string
  facetHierValue?: string
  facetHierDepth?: string
  facetStartIndex?: string
  facetPageSize?: string
  facetSettings?: string
  facetValueFilter?: string
  sortBy?: string
  pageSize?: number
  startIndex?: number
  searchSettings?: string
  enableSearchTuningRules?: boolean
  searchTuningRuleContext?: string
  searchTuningRuleCode?: string
  responseGroups?: string
  facetTemplateExclude?: string
  facetPrefix?: string
  responseOptions?: string
  cursorMark?: string
  facetValueSort?: string
  defaultSort?: string
  sortDefinitionName?: string
  defaultSortDefinitionName?: string
  shouldSlice?: boolean
  mid?: string
  omitNamespace?: boolean
  includeAllImages?: boolean
  spellcorrectOverride?: string
  useSubscriptionPricing?: boolean
  merchandizingRuleCode?: string
}

export interface ProductSearchApiStorefrontSiteSearchRequest {
  query?: string
  filter?: string
  facetTemplate?: string
  facetTemplateSubset?: string
  facet?: string
  facetFieldRangeQuery?: string
  facetHierPrefix?: string
  facetHierValue?: string
  facetHierDepth?: string
  facetStartIndex?: string
  facetPageSize?: string
  facetSettings?: string
  facetValueFilter?: string
  sortBy?: string
  pageSize?: number
  startIndex?: number
  searchSettings?: string
  enableSearchTuningRules?: boolean
  searchTuningRuleContext?: string
  searchTuningRuleCode?: string
  responseGroups?: string
  facetTemplateExclude?: string
  facetPrefix?: string
  responseOptions?: string
  cursorMark?: string
  facetValueSort?: string
  defaultSort?: string
  sortDefinitionName?: string
  defaultSortDefinitionName?: string
  shouldSlice?: boolean
  mid?: string
  fieldList?: string
  omitNamespace?: boolean
  includeAllImages?: boolean
  spellcorrectOverride?: string
  useSubscriptionPricing?: boolean
  merchandizingRuleCode?: string
}

export interface ProductSearchApiStorefrontSuggestRequest {
  query?: string
  groups?: string
  pageSize?: number
  mid?: string
  filter?: string
}

export interface ProductSearchApiStorefrontSuggest2Request {
  query?: string
  groups?: string
  pageSize?: number
  searchSettingsName?: string
  mid?: string
  filter?: string
}

export interface ProductSearchApiStorefrontVisualSearchRequest {
  searchTerm: string
  filters?: Array<RequestFilter>
  returnfields?: Array<string>
  searchfields?: Array<string>
  ignoregrouping?: boolean
  numResults?: number
  pageNumber?: number
  applicationId?: string
  catalogId?: string
  sessionId?: string
  trackingId?: string
  apiKey?: string
  revision?: string
  cip?: string
  displayDebug?: boolean
}

export interface ProductSearchApiSuggestDebugRequest {
  groups?: string
  query?: string
  pageSize?: number
  searchSettingsName?: string
  mid?: string
  filter?: string
  campaignId?: string
  returnUrl?: boolean
}

/**
 *
 */
export class ProductSearchApi extends runtime.BaseAPI {
  constructor(configuration?) {
    super(configuration)
    this.basePathTemplate = basePathTemplate
  }
  /**
   * Searches the items displayed on the storefront for products or product options that the shopper types in a search query. Used for debugging explain plans from solr
   * Searches the items displayed on the storefront. Used for debugging explain plans from solr
   */

  async searchDebugRaw(
    requestParameters: ProductSearchApiSearchDebugRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.facetTemplate !== undefined) {
      queryParameters['facetTemplate'] = requestParameters.facetTemplate
    }

    if (requestParameters.facetTemplateSubset !== undefined) {
      queryParameters['facetTemplateSubset'] = requestParameters.facetTemplateSubset
    }

    if (requestParameters.facet !== undefined) {
      queryParameters['facet'] = requestParameters.facet
    }

    if (requestParameters.facetFieldRangeQuery !== undefined) {
      queryParameters['facetFieldRangeQuery'] = requestParameters.facetFieldRangeQuery
    }

    if (requestParameters.facetHierPrefix !== undefined) {
      queryParameters['facetHierPrefix'] = requestParameters.facetHierPrefix
    }

    if (requestParameters.facetHierValue !== undefined) {
      queryParameters['facetHierValue'] = requestParameters.facetHierValue
    }

    if (requestParameters.facetHierDepth !== undefined) {
      queryParameters['facetHierDepth'] = requestParameters.facetHierDepth
    }

    if (requestParameters.facetStartIndex !== undefined) {
      queryParameters['facetStartIndex'] = requestParameters.facetStartIndex
    }

    if (requestParameters.facetPageSize !== undefined) {
      queryParameters['facetPageSize'] = requestParameters.facetPageSize
    }

    if (requestParameters.facetSettings !== undefined) {
      queryParameters['facetSettings'] = requestParameters.facetSettings
    }

    if (requestParameters.facetValueFilter !== undefined) {
      queryParameters['facetValueFilter'] = requestParameters.facetValueFilter
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy
    }

    if (requestParameters.sliceSearchResults !== undefined) {
      queryParameters['sliceSearchResults'] = requestParameters.sliceSearchResults
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    if (requestParameters.startIndex !== undefined) {
      queryParameters['startIndex'] = requestParameters.startIndex
    }

    if (requestParameters.searchSettings !== undefined) {
      queryParameters['searchSettings'] = requestParameters.searchSettings
    }

    if (requestParameters.enableSearchTuningRules !== undefined) {
      queryParameters['enableSearchTuningRules'] = requestParameters.enableSearchTuningRules
    }

    if (requestParameters.searchTuningRuleContext !== undefined) {
      queryParameters['searchTuningRuleContext'] = requestParameters.searchTuningRuleContext
    }

    if (requestParameters.searchTuningRuleCode !== undefined) {
      queryParameters['searchTuningRuleCode'] = requestParameters.searchTuningRuleCode
    }

    if (requestParameters.responseGroups !== undefined) {
      queryParameters['responseGroups'] = requestParameters.responseGroups
    }

    if (requestParameters.facetTemplateExclude !== undefined) {
      queryParameters['facetTemplateExclude'] = requestParameters.facetTemplateExclude
    }

    if (requestParameters.facetPrefix !== undefined) {
      queryParameters['facetPrefix'] = requestParameters.facetPrefix
    }

    if (requestParameters.responseOptions !== undefined) {
      queryParameters['responseOptions'] = requestParameters.responseOptions
    }

    if (requestParameters.cursorMark !== undefined) {
      queryParameters['cursorMark'] = requestParameters.cursorMark
    }

    if (requestParameters.facetValueSort !== undefined) {
      queryParameters['facetValueSort'] = requestParameters.facetValueSort
    }

    if (requestParameters.returnUrl !== undefined) {
      queryParameters['returnUrl'] = requestParameters.returnUrl
    }

    if (requestParameters.mid !== undefined) {
      queryParameters['mid'] = requestParameters.mid
    }

    if (requestParameters.omitNamespace !== undefined) {
      queryParameters['omitNamespace'] = requestParameters.omitNamespace
    }

    if (requestParameters.campaignId !== undefined) {
      queryParameters['campaignId'] = requestParameters.campaignId
    }

    if (requestParameters.merchandizingRuleCode !== undefined) {
      queryParameters['merchandizingRuleCode'] = requestParameters.merchandizingRuleCode
    }

    if (requestParameters.responseFields !== undefined) {
      queryParameters['responseFields'] = requestParameters.responseFields
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.accessToken ||
        (this.configuration.clientId && this.configuration.sharedSecret))
    ) {
      const token = await this.configuration.accessToken
      const tokenString = await token()
      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    if (this.configuration && this.configuration.jwt) {
      const token = this.configuration.jwt
      const tokenString = await token()

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/searchDebug`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Searches the items displayed on the storefront for products or product options that the shopper types in a search query. Used for debugging explain plans from solr
   * Searches the items displayed on the storefront. Used for debugging explain plans from solr
   */
  async searchDebug(
    requestParameters: ProductSearchApiSearchDebugRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.searchDebugRaw(requestParameters, initOverrides)
  }

  /**
   * Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.     Optionally provide a query and/or filter to generate a cursor for a subset of products.     After retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.     You may provide cursorMarks in any order or even in parallel operations.
   * Gets list of cursors for search results
   */

  async storefrontGetRandomAccessCursorRaw(
    requestParameters: ProductSearchApiStorefrontGetRandomAccessCursorRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ProductSearchRandomAccessCursor>> {
    const queryParameters: any = {}

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    const headerParameters: runtime.HTTPHeaders = {}

    await this.addAuthorizationHeaders(headerParameters)

    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/randomAccessCursor`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProductSearchRandomAccessCursorFromJSON(jsonValue)
    )
  }

  /**
   * Generate a list of cursors that then allows you to retrieve all products with efficient deep paging.     Optionally provide a query and/or filter to generate a cursor for a subset of products.     After retrieving the cursor, provide a cursorMark to the cursorMark argument of the /search or /getProducts operations.     You may provide cursorMarks in any order or even in parallel operations.
   * Gets list of cursors for search results
   */
  async storefrontGetRandomAccessCursor(
    requestParameters: ProductSearchApiStorefrontGetRandomAccessCursorRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ProductSearchRandomAccessCursor> {
    const response = await this.storefrontGetRandomAccessCursorRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
   * Search for products.
   */

  async storefrontSearchRaw(
    requestParameters: ProductSearchApiStorefrontSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ProductSearchResult>> {
    const queryParameters: any = {}
    console.log('requestParameters', requestParameters)
    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.facetTemplate !== undefined) {
      queryParameters['facetTemplate'] = requestParameters.facetTemplate
    }

    if (requestParameters.facetTemplateSubset !== undefined) {
      queryParameters['facetTemplateSubset'] = requestParameters.facetTemplateSubset
    }

    if (requestParameters.facet !== undefined) {
      queryParameters['facet'] = requestParameters.facet
    }

    if (requestParameters.facetFieldRangeQuery !== undefined) {
      queryParameters['facetFieldRangeQuery'] = requestParameters.facetFieldRangeQuery
    }

    if (requestParameters.facetHierPrefix !== undefined) {
      queryParameters['facetHierPrefix'] = requestParameters.facetHierPrefix
    }

    if (requestParameters.facetHierValue !== undefined) {
      queryParameters['facetHierValue'] = requestParameters.facetHierValue
    }

    if (requestParameters.facetHierDepth !== undefined) {
      queryParameters['facetHierDepth'] = requestParameters.facetHierDepth
    }

    if (requestParameters.facetStartIndex !== undefined) {
      queryParameters['facetStartIndex'] = requestParameters.facetStartIndex
    }

    if (requestParameters.facetPageSize !== undefined) {
      queryParameters['facetPageSize'] = requestParameters.facetPageSize
    }

    if (requestParameters.facetSettings !== undefined) {
      queryParameters['facetSettings'] = requestParameters.facetSettings
    }

    if (requestParameters.facetValueFilter !== undefined) {
      queryParameters['facetValueFilter'] = requestParameters.facetValueFilter
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    if (requestParameters.startIndex !== undefined) {
      queryParameters['startIndex'] = requestParameters.startIndex
    }

    if (requestParameters.searchSettings !== undefined) {
      queryParameters['searchSettings'] = requestParameters.searchSettings
    }

    if (requestParameters.enableSearchTuningRules !== undefined) {
      queryParameters['enableSearchTuningRules'] = requestParameters.enableSearchTuningRules
    }

    if (requestParameters.searchTuningRuleContext !== undefined) {
      queryParameters['searchTuningRuleContext'] = requestParameters.searchTuningRuleContext
    }

    if (requestParameters.searchTuningRuleCode !== undefined) {
      queryParameters['searchTuningRuleCode'] = requestParameters.searchTuningRuleCode
    }

    if (requestParameters.responseGroups !== undefined) {
      queryParameters['responseGroups'] = requestParameters.responseGroups
    }

    if (requestParameters.facetTemplateExclude !== undefined) {
      queryParameters['facetTemplateExclude'] = requestParameters.facetTemplateExclude
    }

    if (requestParameters.facetPrefix !== undefined) {
      queryParameters['facetPrefix'] = requestParameters.facetPrefix
    }

    if (requestParameters.responseOptions !== undefined) {
      queryParameters['responseOptions'] = requestParameters.responseOptions
    }

    if (requestParameters.cursorMark !== undefined) {
      queryParameters['cursorMark'] = requestParameters.cursorMark
    }

    if (requestParameters.facetValueSort !== undefined) {
      queryParameters['facetValueSort'] = requestParameters.facetValueSort
    }

    if (requestParameters.defaultSort !== undefined) {
      queryParameters['defaultSort'] = requestParameters.defaultSort
    }

    if (requestParameters.sortDefinitionName !== undefined) {
      queryParameters['sortDefinitionName'] = requestParameters.sortDefinitionName
    }

    if (requestParameters.defaultSortDefinitionName !== undefined) {
      queryParameters['defaultSortDefinitionName'] = requestParameters.defaultSortDefinitionName
    }

    if (requestParameters.shouldSlice !== undefined) {
      queryParameters['shouldSlice'] = requestParameters.shouldSlice
    }

    if (requestParameters.mid !== undefined) {
      queryParameters['mid'] = requestParameters.mid
    }

    if (requestParameters.omitNamespace !== undefined) {
      queryParameters['omitNamespace'] = requestParameters.omitNamespace
    }

    if (requestParameters.includeAllImages !== undefined) {
      queryParameters['includeAllImages'] = requestParameters.includeAllImages
    }

    if (requestParameters.spellcorrectOverride !== undefined) {
      queryParameters['spellcorrectOverride'] = requestParameters.spellcorrectOverride
    }

    if (requestParameters.useSubscriptionPricing !== undefined) {
      queryParameters['useSubscriptionPricing'] = requestParameters.useSubscriptionPricing
    }

    if (requestParameters.merchandizingRuleCode !== undefined) {
      queryParameters['merchandizingRuleCode'] = requestParameters.merchandizingRuleCode
    }

    const headerParameters: runtime.HTTPHeaders = {}

    await this.addAuthorizationHeaders(headerParameters)

    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/search`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProductSearchResultFromJSON(jsonValue)
    )
  }

  /**
   * Searches the categories displayed on the storefront for products or product options that the shopper types in a search query.
   * Search for products.
   */
  async storefrontSearch(
    requestParameters: ProductSearchApiStorefrontSearchRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ProductSearchResult> {
    const response = await this.storefrontSearchRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Site Search - Searches the items displayed on the storefront.
   * Site Search - Searches the items displayed on the storefront.
   */

  async storefrontSiteSearchRaw(
    requestParameters: ProductSearchApiStorefrontSiteSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ProductSearchResult>> {
    const queryParameters: any = {}

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.facetTemplate !== undefined) {
      queryParameters['facetTemplate'] = requestParameters.facetTemplate
    }

    if (requestParameters.facetTemplateSubset !== undefined) {
      queryParameters['facetTemplateSubset'] = requestParameters.facetTemplateSubset
    }

    if (requestParameters.facet !== undefined) {
      queryParameters['facet'] = requestParameters.facet
    }

    if (requestParameters.facetFieldRangeQuery !== undefined) {
      queryParameters['facetFieldRangeQuery'] = requestParameters.facetFieldRangeQuery
    }

    if (requestParameters.facetHierPrefix !== undefined) {
      queryParameters['facetHierPrefix'] = requestParameters.facetHierPrefix
    }

    if (requestParameters.facetHierValue !== undefined) {
      queryParameters['facetHierValue'] = requestParameters.facetHierValue
    }

    if (requestParameters.facetHierDepth !== undefined) {
      queryParameters['facetHierDepth'] = requestParameters.facetHierDepth
    }

    if (requestParameters.facetStartIndex !== undefined) {
      queryParameters['facetStartIndex'] = requestParameters.facetStartIndex
    }

    if (requestParameters.facetPageSize !== undefined) {
      queryParameters['facetPageSize'] = requestParameters.facetPageSize
    }

    if (requestParameters.facetSettings !== undefined) {
      queryParameters['facetSettings'] = requestParameters.facetSettings
    }

    if (requestParameters.facetValueFilter !== undefined) {
      queryParameters['facetValueFilter'] = requestParameters.facetValueFilter
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    if (requestParameters.startIndex !== undefined) {
      queryParameters['startIndex'] = requestParameters.startIndex
    }

    if (requestParameters.searchSettings !== undefined) {
      queryParameters['searchSettings'] = requestParameters.searchSettings
    }

    if (requestParameters.enableSearchTuningRules !== undefined) {
      queryParameters['enableSearchTuningRules'] = requestParameters.enableSearchTuningRules
    }

    if (requestParameters.searchTuningRuleContext !== undefined) {
      queryParameters['searchTuningRuleContext'] = requestParameters.searchTuningRuleContext
    }

    if (requestParameters.searchTuningRuleCode !== undefined) {
      queryParameters['searchTuningRuleCode'] = requestParameters.searchTuningRuleCode
    }

    if (requestParameters.responseGroups !== undefined) {
      queryParameters['responseGroups'] = requestParameters.responseGroups
    }

    if (requestParameters.facetTemplateExclude !== undefined) {
      queryParameters['facetTemplateExclude'] = requestParameters.facetTemplateExclude
    }

    if (requestParameters.facetPrefix !== undefined) {
      queryParameters['facetPrefix'] = requestParameters.facetPrefix
    }

    if (requestParameters.responseOptions !== undefined) {
      queryParameters['responseOptions'] = requestParameters.responseOptions
    }

    if (requestParameters.cursorMark !== undefined) {
      queryParameters['cursorMark'] = requestParameters.cursorMark
    }

    if (requestParameters.facetValueSort !== undefined) {
      queryParameters['facetValueSort'] = requestParameters.facetValueSort
    }

    if (requestParameters.defaultSort !== undefined) {
      queryParameters['defaultSort'] = requestParameters.defaultSort
    }

    if (requestParameters.sortDefinitionName !== undefined) {
      queryParameters['sortDefinitionName'] = requestParameters.sortDefinitionName
    }

    if (requestParameters.defaultSortDefinitionName !== undefined) {
      queryParameters['defaultSortDefinitionName'] = requestParameters.defaultSortDefinitionName
    }

    if (requestParameters.shouldSlice !== undefined) {
      queryParameters['shouldSlice'] = requestParameters.shouldSlice
    }

    if (requestParameters.mid !== undefined) {
      queryParameters['mid'] = requestParameters.mid
    }

    if (requestParameters.fieldList !== undefined) {
      queryParameters['fieldList'] = requestParameters.fieldList
    }

    if (requestParameters.omitNamespace !== undefined) {
      queryParameters['omitNamespace'] = requestParameters.omitNamespace
    }

    if (requestParameters.includeAllImages !== undefined) {
      queryParameters['includeAllImages'] = requestParameters.includeAllImages
    }

    if (requestParameters.spellcorrectOverride !== undefined) {
      queryParameters['spellcorrectOverride'] = requestParameters.spellcorrectOverride
    }

    if (requestParameters.useSubscriptionPricing !== undefined) {
      queryParameters['useSubscriptionPricing'] = requestParameters.useSubscriptionPricing
    }

    if (requestParameters.merchandizingRuleCode !== undefined) {
      queryParameters['merchandizingRuleCode'] = requestParameters.merchandizingRuleCode
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.accessToken ||
        (this.configuration.clientId && this.configuration.sharedSecret))
    ) {
      const token = await this.configuration.accessToken
      const tokenString = await token()
      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    if (this.configuration && this.configuration.jwt) {
      const token = this.configuration.jwt
      const tokenString = await token()

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/siteSearch`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProductSearchResultFromJSON(jsonValue)
    )
  }

  /**
   * Site Search - Searches the items displayed on the storefront.
   * Site Search - Searches the items displayed on the storefront.
   */
  async storefrontSiteSearch(
    requestParameters: ProductSearchApiStorefrontSiteSearchRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ProductSearchResult> {
    const response = await this.storefrontSiteSearchRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Suggests possible search terms as the shopper enters search text.
   * Gets suggested search terms
   */

  async storefrontSuggestRaw(
    requestParameters: ProductSearchApiStorefrontSuggestRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchSuggestionResult>> {
    const queryParameters: any = {}

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.groups !== undefined) {
      queryParameters['groups'] = requestParameters.groups
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    if (requestParameters.mid !== undefined) {
      queryParameters['mid'] = requestParameters.mid
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.accessToken ||
        (this.configuration.clientId && this.configuration.sharedSecret))
    ) {
      const token = await this.configuration.accessToken
      const tokenString = await token()
      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    if (this.configuration && this.configuration.jwt) {
      const token = this.configuration.jwt
      const tokenString = await token()

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/suggest`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchSuggestionResultFromJSON(jsonValue)
    )
  }

  /**
   * Suggests possible search terms as the shopper enters search text.
   * Gets suggested search terms
   */
  async storefrontSuggest(
    requestParameters: ProductSearchApiStorefrontSuggestRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchSuggestionResult> {
    const response = await this.storefrontSuggestRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Suggests possible search terms as the shopper enters search text.
   * Gets suggested search terms
   */

  async storefrontSuggest2Raw(
    requestParameters: ProductSearchApiStorefrontSuggest2Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchSuggestionResult>> {
    const queryParameters: any = {}

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.groups !== undefined) {
      queryParameters['groups'] = requestParameters.groups
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    if (requestParameters.searchSettingsName !== undefined) {
      queryParameters['searchSettingsName'] = requestParameters.searchSettingsName
    }

    if (requestParameters.mid !== undefined) {
      queryParameters['mid'] = requestParameters.mid
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.accessToken ||
        (this.configuration.clientId && this.configuration.sharedSecret))
    ) {
      const token = await this.configuration.accessToken
      const tokenString = await token()
      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    if (this.configuration && this.configuration.jwt) {
      const token = this.configuration.jwt
      const tokenString = await token()

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/suggest2`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchSuggestionResultFromJSON(jsonValue)
    )
  }

  /**
   * Suggests possible search terms as the shopper enters search text.
   * Gets suggested search terms
   */
  async storefrontSuggest2(
    requestParameters: ProductSearchApiStorefrontSuggest2Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchSuggestionResult> {
    const response = await this.storefrontSuggest2Raw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Type ahead - Searches the items displayed on the storefront.
   * Type ahead - Searches the items displayed on the storefront.
   */

  async storefrontVisualSearchRaw(
    requestParameters: ProductSearchApiStorefrontVisualSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<VisualSearchResult>> {
    if (requestParameters.searchTerm === null || requestParameters.searchTerm === undefined) {
      throw new runtime.RequiredError(
        'searchTerm',
        'Required parameter requestParameters.searchTerm was null or undefined when calling storefrontVisualSearch.'
      )
    }

    const queryParameters: any = {}

    if (requestParameters.searchTerm !== undefined) {
      queryParameters['SearchTerm'] = requestParameters.searchTerm
    }

    if (requestParameters.filters) {
      queryParameters['Filters'] = requestParameters.filters
    }

    if (requestParameters.returnfields) {
      queryParameters['Returnfields'] = requestParameters.returnfields
    }

    if (requestParameters.searchfields) {
      queryParameters['Searchfields'] = requestParameters.searchfields
    }

    if (requestParameters.ignoregrouping !== undefined) {
      queryParameters['Ignoregrouping'] = requestParameters.ignoregrouping
    }

    if (requestParameters.numResults !== undefined) {
      queryParameters['NumResults'] = requestParameters.numResults
    }

    if (requestParameters.pageNumber !== undefined) {
      queryParameters['PageNumber'] = requestParameters.pageNumber
    }

    if (requestParameters.applicationId !== undefined) {
      queryParameters['ApplicationId'] = requestParameters.applicationId
    }

    if (requestParameters.catalogId !== undefined) {
      queryParameters['CatalogId'] = requestParameters.catalogId
    }

    if (requestParameters.sessionId !== undefined) {
      queryParameters['SessionId'] = requestParameters.sessionId
    }

    if (requestParameters.trackingId !== undefined) {
      queryParameters['TrackingId'] = requestParameters.trackingId
    }

    if (requestParameters.apiKey !== undefined) {
      queryParameters['ApiKey'] = requestParameters.apiKey
    }

    if (requestParameters.revision !== undefined) {
      queryParameters['Revision'] = requestParameters.revision
    }

    if (requestParameters.cip !== undefined) {
      queryParameters['Cip'] = requestParameters.cip
    }

    if (requestParameters.displayDebug !== undefined) {
      queryParameters['DisplayDebug'] = requestParameters.displayDebug
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.accessToken ||
        (this.configuration.clientId && this.configuration.sharedSecret))
    ) {
      const token = await this.configuration.accessToken
      const tokenString = await token()
      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    if (this.configuration && this.configuration.jwt) {
      const token = this.configuration.jwt
      const tokenString = await token()

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/visualsearch`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VisualSearchResultFromJSON(jsonValue)
    )
  }

  /**
   * Type ahead - Searches the items displayed on the storefront.
   * Type ahead - Searches the items displayed on the storefront.
   */
  async storefrontVisualSearch(
    requestParameters: ProductSearchApiStorefrontVisualSearchRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<VisualSearchResult> {
    const response = await this.storefrontVisualSearchRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.
   * Debugging relevancy for the Suggest endpoint
   */

  async suggestDebugRaw(
    requestParameters: ProductSearchApiSuggestDebugRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {}

    if (requestParameters.groups !== undefined) {
      queryParameters['groups'] = requestParameters.groups
    }

    if (requestParameters.query !== undefined) {
      queryParameters['query'] = requestParameters.query
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['pageSize'] = requestParameters.pageSize
    }

    if (requestParameters.searchSettingsName !== undefined) {
      queryParameters['searchSettingsName'] = requestParameters.searchSettingsName
    }

    if (requestParameters.mid !== undefined) {
      queryParameters['mid'] = requestParameters.mid
    }

    if (requestParameters.filter !== undefined) {
      queryParameters['filter'] = requestParameters.filter
    }

    if (requestParameters.campaignId !== undefined) {
      queryParameters['campaignId'] = requestParameters.campaignId
    }

    if (requestParameters.returnUrl !== undefined) {
      queryParameters['returnUrl'] = requestParameters.returnUrl
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.accessToken ||
        (this.configuration.clientId && this.configuration.sharedSecret))
    ) {
      const token = await this.configuration.accessToken
      const tokenString = await token()
      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }

    if (this.configuration && this.configuration.jwt) {
      const token = this.configuration.jwt
      const tokenString = await token()

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request(
      {
        path: `/commerce/catalog/storefront/productsearch/suggestdebug`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Comma delimited list of suggestion groups that should be returned. The default is everything. e.g. categories, products.
   * Debugging relevancy for the Suggest endpoint
   */
  async suggestDebug(
    requestParameters: ProductSearchApiSuggestDebugRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.suggestDebugRaw(requestParameters, initOverrides)
  }
}
