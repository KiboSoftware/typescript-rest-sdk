/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';

export interface SearchRedirectApiGetRedirectRequest {
    redirectId: string;
}

/**
 * 
 */
export class SearchRedirectApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get search redirect item by redirect Id.
     * Get search redirect
     */


    async getRedirectRaw(requestParameters: SearchRedirectApiGetRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.redirectId === null || requestParameters.redirectId === undefined) {
            throw new runtime.RequiredError('redirectId','Required parameter requestParameters.redirectId was null or undefined when calling getRedirect.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/searchredirect/{redirectId}`.replace(`{${"redirectId"}}`, encodeURIComponent(String(requestParameters.redirectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get search redirect item by redirect Id.
     * Get search redirect
     */
    async getRedirect(requestParameters: SearchRedirectApiGetRedirectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRedirectRaw(requestParameters, initOverrides);
    }

    /**
     * Get list of search redirect items.
     * Get search redirects
     */


    async getRedirectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/searchredirect/redirects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get list of search redirect items.
     * Get search redirects
     */
    async getRedirects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRedirectsRaw(initOverrides);
    }

}
