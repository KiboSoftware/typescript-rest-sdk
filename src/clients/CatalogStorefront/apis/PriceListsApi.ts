/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  PriceList,
  ResolvedPriceList,
} from '../models';
import {
    PriceListFromJSON,
    PriceListToJSON,
    ResolvedPriceListFromJSON,
    ResolvedPriceListToJSON,
} from '../models';

export interface PriceListsApiStorefrontGetPriceListRequest {
    priceListCode: string;
}

export interface PriceListsApiStorefrontGetResolvedPriceListRequest {
    customerAccountId?: number;
}

export interface PriceListsApiStorefrontGetResolvedPriceList2Request {
    body?: object;
}

/**
 * 
 */
export class PriceListsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves the price list for the given priceListCode
     * Get price list
     */


    async storefrontGetPriceListRaw(requestParameters: PriceListsApiStorefrontGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceList>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling storefrontGetPriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/storefront/pricelists/{priceListCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListFromJSON(jsonValue));
    }

    /**
     * Retrieves the price list for the given priceListCode
     * Get price list
     */
    async storefrontGetPriceList(requestParameters: PriceListsApiStorefrontGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceList> {
        const response = await this.storefrontGetPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get resolved price list
     */


    async storefrontGetResolvedPriceListRaw(requestParameters: PriceListsApiStorefrontGetResolvedPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedPriceList>> {
        const queryParameters: any = {};

        if (requestParameters.customerAccountId !== undefined) {
            queryParameters['customerAccountId'] = requestParameters.customerAccountId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/storefront/pricelists/resolved`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResolvedPriceListFromJSON(jsonValue));
    }

    /**
     * 
     * Get resolved price list
     */
    async storefrontGetResolvedPriceList(requestParameters: PriceListsApiStorefrontGetResolvedPriceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedPriceList> {
        const response = await this.storefrontGetResolvedPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get resolved price list
     */


    async storefrontGetResolvedPriceList2Raw(requestParameters: PriceListsApiStorefrontGetResolvedPriceList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedPriceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/storefront/pricelists/resolved`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResolvedPriceListFromJSON(jsonValue));
    }

    /**
     * 
     * Get resolved price list
     */
    async storefrontGetResolvedPriceList2(requestParameters: PriceListsApiStorefrontGetResolvedPriceList2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedPriceList> {
        const response = await this.storefrontGetResolvedPriceList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
