/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Runtime Services
 * OpenAPI Spec for Kibo Catalog Runtime Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogRuntimesPriceList,
  ResolvedPriceList,
} from '../models';


export namespace priceListsApiParams { 
    export interface StorefrontGetPriceListRequest {
        priceListCode: string;
        responseFields?: string;
    }
    export interface StorefrontGetResolvedPriceListRequest {
        customerAccountId?: number;
        responseFields?: string;
    }
    export interface StorefrontGetResolvedPriceList2Request {
        responseFields?: string;
        body?: object;
    }
}
/**
* PriceListsApiService - interface
* 
* @export
* @interface PriceListsApi
*/
export interface PriceListsApiService {
    /**
    * Retrieves the price list for the given priceListCode
    * @summary Get price list
    * @param {string} priceListCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListsApiInterface
    */
    storefrontGetPriceListRaw(requestParameters: priceListsApiParams.StorefrontGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogRuntimesPriceList>>;

    /**
    * Retrieves the price list for the given priceListCode
    * Get price list
    */
    storefrontGetPriceList(requestParameters: priceListsApiParams.StorefrontGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogRuntimesPriceList>;

    /**
    * 
    * @summary Get resolved price list
    * @param {number} [customerAccountId] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListsApiInterface
    */
    storefrontGetResolvedPriceListRaw(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedPriceList>>;

    /**
    * 
    * Get resolved price list
    */
    storefrontGetResolvedPriceList(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedPriceList>;

    /**
    * 
    * @summary Get resolved price list
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {object} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListsApiInterface
    */
    storefrontGetResolvedPriceList2Raw(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedPriceList>>;

    /**
    * 
    * Get resolved price list
    */
    storefrontGetResolvedPriceList2(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedPriceList>;

}


/**
 * 
 */
export class PriceListsApi extends runtime.BaseAPI implements PriceListsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves the price list for the given priceListCode
     * Get price list
     */


    async storefrontGetPriceListRaw(requestParameters: priceListsApiParams.StorefrontGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogRuntimesPriceList>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling storefrontGetPriceList.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/pricelists/{priceListCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the price list for the given priceListCode
     * Get price list
     */
    async storefrontGetPriceList(requestParameters: priceListsApiParams.StorefrontGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogRuntimesPriceList> {
        const response = await this.storefrontGetPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get resolved price list
     */


    async storefrontGetResolvedPriceListRaw(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedPriceList>> {
        const queryParameters: any = {};

        if (requestParameters.customerAccountId !== undefined) {
            queryParameters['customerAccountId'] = requestParameters.customerAccountId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/pricelists/resolved`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get resolved price list
     */
    async storefrontGetResolvedPriceList(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedPriceList> {
        const response = await this.storefrontGetResolvedPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get resolved price list
     */


    async storefrontGetResolvedPriceList2Raw(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceList2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedPriceList>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/pricelists/resolved`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get resolved price list
     */
    async storefrontGetResolvedPriceList2(requestParameters: priceListsApiParams.StorefrontGetResolvedPriceList2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedPriceList> {
        const response = await this.storefrontGetResolvedPriceList2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
