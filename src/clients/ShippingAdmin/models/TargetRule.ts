/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An object used to define a bool expression against a particular domain type
 * @export
 * @interface TargetRule
 */
export interface TargetRule {
    /**
     * The user defined code for this rule
     * <remarks>must be unique</remarks>
     * @type {string}
     * @memberof TargetRule
     */
    code?: string | null;
    /**
     * The description of this rule
     * @type {string}
     * @memberof TargetRule
     */
    description?: string | null;
    /**
     * The domain of this rule
     * <value>Product</value><value>Order</value>
     * @type {string}
     * @memberof TargetRule
     */
    domain?: string | null;
    /**
     * the expression of this rule
     * @type {string}
     * @memberof TargetRule
     */
    expression?: string | null;
}

/**
 * Check if a given object implements the TargetRule interface.
 */
export function instanceOfTargetRule(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TargetRuleFromJSON(json: any): TargetRule {
    return TargetRuleFromJSONTyped(json, false);
}

export function TargetRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): TargetRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'expression': !exists(json, 'expression') ? undefined : json['expression'],
    };
}

export function TargetRuleToJSON(value?: TargetRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'domain': value.domain,
        'expression': value.expression,
    };
}

