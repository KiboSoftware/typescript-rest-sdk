/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { ServiceType } from './ServiceType';
import {
    ServiceTypeFromJSON,
    ServiceTypeFromJSONTyped,
    ServiceTypeToJSON,
} from './ServiceType';

/**
 * An object to bind service types to shipping target rules and/or product target rules
 * @export
 * @interface ShippingInclusionRule
 */
export interface ShippingInclusionRule {
    /**
     * The system generated id of this shipping inclusion rule
     * @type {string}
     * @memberof ShippingInclusionRule
     */
    id?: string | null;
    /**
     * The sequence in which this rule is preferred over others
     * @type {number}
     * @memberof ShippingInclusionRule
     */
    sequence?: number;
    /**
     * The shipping target rule codes associated with this rule
     * <remarks>leave empty or null to denote all destinations</remarks>
     * @type {Array<string>}
     * @memberof ShippingInclusionRule
     */
    shippingTargetRuleCodes?: Array<string> | null;
    /**
     * the product target rule codes associated with this rule
     * <remarks>leave empty or null to denote all products</remarks>
     * @type {Array<string>}
     * @memberof ShippingInclusionRule
     */
    productTargetRuleCodes?: Array<string> | null;
    /**
     * the servicetypes associated with this rule
     * <remarks>leave empty or null to denote all carriers and subsequent service types</remarks>
     * @type {Array<ServiceType>}
     * @memberof ShippingInclusionRule
     */
    serviceTypes?: Array<ServiceType> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof ShippingInclusionRule
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the ShippingInclusionRule interface.
 */
export function instanceOfShippingInclusionRule(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ShippingInclusionRuleFromJSON(json: any): ShippingInclusionRule {
    return ShippingInclusionRuleFromJSONTyped(json, false);
}

export function ShippingInclusionRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShippingInclusionRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'shippingTargetRuleCodes': !exists(json, 'shippingTargetRuleCodes') ? undefined : json['shippingTargetRuleCodes'],
        'productTargetRuleCodes': !exists(json, 'productTargetRuleCodes') ? undefined : json['productTargetRuleCodes'],
        'serviceTypes': !exists(json, 'serviceTypes') ? undefined : (json['serviceTypes'] === null ? null : (json['serviceTypes'] as Array<any>).map(ServiceTypeFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function ShippingInclusionRuleToJSON(value?: ShippingInclusionRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sequence': value.sequence,
        'shippingTargetRuleCodes': value.shippingTargetRuleCodes,
        'productTargetRuleCodes': value.productTargetRuleCodes,
        'serviceTypes': value.serviceTypes === undefined ? undefined : (value.serviceTypes === null ? null : (value.serviceTypes as Array<any>).map(ServiceTypeToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

