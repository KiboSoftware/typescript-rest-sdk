/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  TargetRule,
  TargetRuleCollection,
} from '../models';
import {
    TargetRuleFromJSON,
    TargetRuleToJSON,
    TargetRuleCollectionFromJSON,
    TargetRuleCollectionToJSON,
} from '../models';

export interface TargetRulesApiCreateTargetRuleRequest {
    targetRule?: TargetRule;
}

export interface TargetRulesApiDeleteTargetRuleRequest {
    code: string;
}

export interface TargetRulesApiGetTargetRuleRequest {
    code: string;
}

export interface TargetRulesApiGetTargetRulesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface TargetRulesApiUpdateTargetRuleRequest {
    code: string;
    targetRule?: TargetRule;
}

export interface TargetRulesApiValidateTargetRuleRequest {
    targetRule?: TargetRule;
}

/**
 * 
 */
export class TargetRulesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Target Rule
     * Create Target Rule
     */


    async createTargetRuleRaw(requestParameters: TargetRulesApiCreateTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TargetRule>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/targetrules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TargetRuleToJSON(requestParameters.targetRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TargetRuleFromJSON(jsonValue));
    }

    /**
     * Create Target Rule
     * Create Target Rule
     */
    async createTargetRule(requestParameters: TargetRulesApiCreateTargetRuleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TargetRule> {
        const response = await this.createTargetRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Target Rule
     * Delete Target Rule
     */


    async deleteTargetRuleRaw(requestParameters: TargetRulesApiDeleteTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteTargetRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/targetrules/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Target Rule
     * Delete Target Rule
     */
    async deleteTargetRule(requestParameters: TargetRulesApiDeleteTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTargetRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Get Target Rule
     * Get Target Rule
     */


    async getTargetRuleRaw(requestParameters: TargetRulesApiGetTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TargetRule>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getTargetRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/targetrules/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TargetRuleFromJSON(jsonValue));
    }

    /**
     * Get Target Rule
     * Get Target Rule
     */
    async getTargetRule(requestParameters: TargetRulesApiGetTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TargetRule> {
        const response = await this.getTargetRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Retrieves a list of TargetRules according to any specified filter criteria and sort options
     */


    async getTargetRulesRaw(requestParameters: TargetRulesApiGetTargetRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TargetRuleCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/targetrules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TargetRuleCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Retrieves a list of TargetRules according to any specified filter criteria and sort options
     */
    async getTargetRules(requestParameters: TargetRulesApiGetTargetRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TargetRuleCollection> {
        const response = await this.getTargetRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Target Rule
     * Update Target Rule
     */


    async updateTargetRuleRaw(requestParameters: TargetRulesApiUpdateTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TargetRule>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateTargetRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/targetrules/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TargetRuleToJSON(requestParameters.targetRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TargetRuleFromJSON(jsonValue));
    }

    /**
     * Update Target Rule
     * Update Target Rule
     */
    async updateTargetRule(requestParameters: TargetRulesApiUpdateTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TargetRule> {
        const response = await this.updateTargetRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate Target Rule
     * Validate Target Rule
     */


    async validateTargetRuleRaw(requestParameters: TargetRulesApiValidateTargetRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/targetrules/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TargetRuleToJSON(requestParameters.targetRule),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Validate Target Rule
     * Validate Target Rule
     */
    async validateTargetRule(requestParameters: TargetRulesApiValidateTargetRuleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateTargetRuleRaw(requestParameters, initOverrides);
    }

}
