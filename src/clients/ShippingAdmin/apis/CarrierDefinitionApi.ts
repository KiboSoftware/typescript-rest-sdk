/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CarrierDefinition,
} from '../models';
import {
    CarrierDefinitionFromJSON,
    CarrierDefinitionToJSON,
} from '../models';

export interface CarrierDefinitionApiGetCarrierDefinitionRequest {
    carrierId: string;
}

/**
 * 
 */
export class CarrierDefinitionApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * hippingAdmin.Contracts.Carriers.CarrierDefinition for the specified carrier.
     * Returns a Mozu
     */


    async getCarrierDefinitionRaw(requestParameters: CarrierDefinitionApiGetCarrierDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierDefinition>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getCarrierDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/definitions/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarrierDefinitionFromJSON(jsonValue));
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierDefinition for the specified carrier.
     * Returns a Mozu
     */
    async getCarrierDefinition(requestParameters: CarrierDefinitionApiGetCarrierDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierDefinition> {
        const response = await this.getCarrierDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierDefinitions for the specified tenant.
     * Returns a list of Mozu
     */


    async getCarrierDefinitionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CarrierDefinition>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/definitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CarrierDefinitionFromJSON));
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierDefinitions for the specified tenant.
     * Returns a list of Mozu
     */
    async getCarrierDefinitions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CarrierDefinition>> {
        const response = await this.getCarrierDefinitionsRaw(initOverrides);
        return await response.value();
    }

}
