/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CarrierConfiguration,
  CarrierConfigurationCollection,
} from '../models';

export interface CreateConfigurationRequest {
    carrierId: string;
    responseFields?: string;
    carrierConfiguration?: CarrierConfiguration;
}

export interface DeleteConfigurationRequest {
    carrierId: string;
}

export interface GetConfigurationRequest {
    carrierId: string;
    responseFields?: string;
}

export interface GetConfigurationsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface UpdateConfigurationRequest {
    carrierId: string;
    responseFields?: string;
    carrierConfiguration?: CarrierConfiguration;
}

/**
 * CarrierConfigurationApi - interface
 * 
 * @export
 * @interface CarrierConfigurationApiInterface
 */
export interface CarrierConfigurationApiInterface {
    /**
     * Create Carrier Configuration
     * @summary Create Carrier Configuration
     * @param {string} carrierId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CarrierConfiguration} [carrierConfiguration] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationApiInterface
     */
    createConfigurationRaw(requestParameters: CreateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfiguration>>;

    /**
     * Create Carrier Configuration
     * Create Carrier Configuration
     */
    createConfiguration(requestParameters: CreateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfiguration>;

    /**
     * Delete an existing Carrier Configuration
     * @summary Delete an existing Carrier Configuration
     * @param {string} carrierId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationApiInterface
     */
    deleteConfigurationRaw(requestParameters: DeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an existing Carrier Configuration
     * Delete an existing Carrier Configuration
     */
    deleteConfiguration(requestParameters: DeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Carrier Configuration (for this particular site)
     * @summary Get Carrier Configuration (for this particular site)
     * @param {string} carrierId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationApiInterface
     */
    getConfigurationRaw(requestParameters: GetConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfiguration>>;

    /**
     * Get Carrier Configuration (for this particular site)
     * Get Carrier Configuration (for this particular site)
     */
    getConfiguration(requestParameters: GetConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfiguration>;

    /**
     * 
     * @summary Retrieves a list of Carrier Configurations according to any specified filter criteria and sort options
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationApiInterface
     */
    getConfigurationsRaw(requestParameters: GetConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfigurationCollection>>;

    /**
     * 
     * Retrieves a list of Carrier Configurations according to any specified filter criteria and sort options
     */
    getConfigurations(requestParameters: GetConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfigurationCollection>;

    /**
     * Update an existing Carrier Configuration
     * @summary Update an existing Carrier Configuration
     * @param {string} carrierId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CarrierConfiguration} [carrierConfiguration] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationApiInterface
     */
    updateConfigurationRaw(requestParameters: UpdateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfiguration>>;

    /**
     * Update an existing Carrier Configuration
     * Update an existing Carrier Configuration
     */
    updateConfiguration(requestParameters: UpdateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfiguration>;

}

/**
 * 
 */
export class CarrierConfigurationApi extends runtime.BaseAPI implements CarrierConfigurationApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Carrier Configuration
     * Create Carrier Configuration
     */


    async createConfigurationRaw(requestParameters: CreateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfiguration>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling createConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.carrierConfiguration,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Carrier Configuration
     * Create Carrier Configuration
     */
    async createConfiguration(requestParameters: CreateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfiguration> {
        const response = await this.createConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Carrier Configuration
     * Delete an existing Carrier Configuration
     */


    async deleteConfigurationRaw(requestParameters: DeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling deleteConfiguration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing Carrier Configuration
     * Delete an existing Carrier Configuration
     */
    async deleteConfiguration(requestParameters: DeleteConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteConfigurationRaw(requestParameters, initOverrides);
    }

    /**
     * Get Carrier Configuration (for this particular site)
     * Get Carrier Configuration (for this particular site)
     */


    async getConfigurationRaw(requestParameters: GetConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfiguration>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Carrier Configuration (for this particular site)
     * Get Carrier Configuration (for this particular site)
     */
    async getConfiguration(requestParameters: GetConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfiguration> {
        const response = await this.getConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Retrieves a list of Carrier Configurations according to any specified filter criteria and sort options
     */


    async getConfigurationsRaw(requestParameters: GetConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfigurationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Retrieves a list of Carrier Configurations according to any specified filter criteria and sort options
     */
    async getConfigurations(requestParameters: GetConfigurationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfigurationCollection> {
        const response = await this.getConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Carrier Configuration
     * Update an existing Carrier Configuration
     */


    async updateConfigurationRaw(requestParameters: UpdateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierConfiguration>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling updateConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.carrierConfiguration,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update an existing Carrier Configuration
     * Update an existing Carrier Configuration
     */
    async updateConfiguration(requestParameters: UpdateConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierConfiguration> {
        const response = await this.updateConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
