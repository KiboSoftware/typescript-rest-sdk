/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ServiceType,
} from '../models';

export interface CarrierConfigurationGlobalApiGetAllServiceTypesRequest {
    localeCode: string;
    responseFields?: string;
}

export interface CarrierConfigurationGlobalApiGetCarrierServiceTypesRequest {
    carrierId: string;
    localeCode: string;
    responseFields?: string;
}

/**
 * CarrierConfigurationGlobalApi - interface
 * 
 * @export
 * @interface CarrierConfigurationGlobalApiInterface
 */
export interface CarrierConfigurationGlobalApiInterface {
    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * @summary Used for retrieving the available service types for the Mozu Default Application carriers
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationGlobalApiInterface
     */
    getAllServiceTypesRaw(requestParameters: CarrierConfigurationGlobalApiGetAllServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceType>>>;

    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * Used for retrieving the available service types for the Mozu Default Application carriers
     */
    getAllServiceTypes(requestParameters: CarrierConfigurationGlobalApiGetAllServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceType>>;

    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * @summary Used for retrieving the available service types for the Mozu Default Application carriers
     * @param {string} carrierId 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierConfigurationGlobalApiInterface
     */
    getCarrierServiceTypesRaw(requestParameters: CarrierConfigurationGlobalApiGetCarrierServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceType>>>;

    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * Used for retrieving the available service types for the Mozu Default Application carriers
     */
    getCarrierServiceTypes(requestParameters: CarrierConfigurationGlobalApiGetCarrierServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceType>>;

}

/**
 * 
 */
export class CarrierConfigurationGlobalApi extends runtime.BaseAPI implements CarrierConfigurationGlobalApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * Used for retrieving the available service types for the Mozu Default Application carriers
     */


    async getAllServiceTypesRaw(requestParameters: CarrierConfigurationGlobalApiGetAllServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceType>>> {
        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getAllServiceTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/global/carriers/serviceTypes/{localeCode}`.replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * Used for retrieving the available service types for the Mozu Default Application carriers
     */
    async getAllServiceTypes(requestParameters: CarrierConfigurationGlobalApiGetAllServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceType>> {
        const response = await this.getAllServiceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * Used for retrieving the available service types for the Mozu Default Application carriers
     */


    async getCarrierServiceTypesRaw(requestParameters: CarrierConfigurationGlobalApiGetCarrierServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceType>>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getCarrierServiceTypes.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getCarrierServiceTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/global/carriers/{carrierId}/serviceTypes/{localeCode}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Used for retrieving the available service types for the Mozu Default Application carriers
     * Used for retrieving the available service types for the Mozu Default Application carriers
     */
    async getCarrierServiceTypes(requestParameters: CarrierConfigurationGlobalApiGetCarrierServiceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceType>> {
        const response = await this.getCarrierServiceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
