/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CarrierCredential,
  CarrierCredentialCollection,
} from '../models';

export interface CreateCarrierCredentialRequest {
    carrierId: string;
    responseFields?: string;
    carrierCredential?: CarrierCredential;
}

export interface DeleteCarrierCredentialRequest {
    carrierId: string;
    siteId?: number;
    locationGroupCode?: string;
    locationCode?: string;
}

export interface GetCarrierCredentialRequest {
    carrierId: string;
    siteId?: number;
    locationGroupCode?: string;
    locationCode?: string;
    responseFields?: string;
}

export interface GetCarrierCredentialsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface UpdateCarrierCredentialRequest {
    carrierId: string;
    siteId?: number;
    locationGroupCode?: string;
    locationCode?: string;
    responseFields?: string;
    carrierCredential?: CarrierCredential;
}

/**
 * CarrierCredentialApi - interface
 * 
 * @export
 * @interface CarrierCredentialApiInterface
 */
export interface CarrierCredentialApiInterface {
    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * @summary Creates a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CarrierCredential} [carrierCredential] The carrier credential data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialApiInterface
     */
    createCarrierCredentialRaw(requestParameters: CreateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredential>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * Creates a Mozu
     */
    createCarrierCredential(requestParameters: CreateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredential>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @summary Deletes a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {number} [siteId] The site ID, if any.
     * @param {string} [locationGroupCode] The location group code, if any.
     * @param {string} [locationCode] The location code, if any.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialApiInterface
     */
    deleteCarrierCredentialRaw(requestParameters: DeleteCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Deletes a Mozu
     */
    deleteCarrierCredential(requestParameters: DeleteCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @summary Gets a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {number} [siteId] The site ID, if any.
     * @param {string} [locationGroupCode] The location group code, if any.
     * @param {string} [locationCode] The location code, if any.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialApiInterface
     */
    getCarrierCredentialRaw(requestParameters: GetCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredential>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Gets a Mozu
     */
    getCarrierCredential(requestParameters: GetCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredential>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\">carrier credential</see> with the specified filters and options.
     * @summary Returns a <see cref=\"T:Mozu
     * @param {number} [startIndex] The starting index.
     * @param {number} [pageSize] The page size.
     * @param {string} [sortBy] Any sorting filters.
     * @param {string} [filter] Any query filters.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialApiInterface
     */
    getCarrierCredentialsRaw(requestParameters: GetCarrierCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialCollection>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\">carrier credential</see> with the specified filters and options.
     * Returns a <see cref=\"T:Mozu
     */
    getCarrierCredentials(requestParameters: GetCarrierCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialCollection>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * @summary Updates a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {number} [siteId] The site ID, if any.
     * @param {string} [locationGroupCode] The location group code, if any.
     * @param {string} [locationCode] The location code, if any.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CarrierCredential} [carrierCredential] The carrier credential data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialApiInterface
     */
    updateCarrierCredentialRaw(requestParameters: UpdateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredential>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Updates a Mozu
     */
    updateCarrierCredential(requestParameters: UpdateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredential>;

}

/**
 * 
 */
export class CarrierCredentialApi extends runtime.BaseAPI implements CarrierCredentialApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * Creates a Mozu
     */


    async createCarrierCredentialRaw(requestParameters: CreateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredential>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling createCarrierCredential.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credentials/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.carrierCredential,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential.
     * Creates a Mozu
     */
    async createCarrierCredential(requestParameters: CreateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredential> {
        const response = await this.createCarrierCredentialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Deletes a Mozu
     */


    async deleteCarrierCredentialRaw(requestParameters: DeleteCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling deleteCarrierCredential.');
        }

        const queryParameters: any = {};

        if (requestParameters.siteId !== undefined) {
            queryParameters['siteId'] = requestParameters.siteId;
        }

        if (requestParameters.locationGroupCode !== undefined) {
            queryParameters['locationGroupCode'] = requestParameters.locationGroupCode;
        }

        if (requestParameters.locationCode !== undefined) {
            queryParameters['locationCode'] = requestParameters.locationCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credentials/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Deletes a Mozu
     */
    async deleteCarrierCredential(requestParameters: DeleteCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCarrierCredentialRaw(requestParameters, initOverrides);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Gets a Mozu
     */


    async getCarrierCredentialRaw(requestParameters: GetCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredential>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getCarrierCredential.');
        }

        const queryParameters: any = {};

        if (requestParameters.siteId !== undefined) {
            queryParameters['siteId'] = requestParameters.siteId;
        }

        if (requestParameters.locationGroupCode !== undefined) {
            queryParameters['locationGroupCode'] = requestParameters.locationGroupCode;
        }

        if (requestParameters.locationCode !== undefined) {
            queryParameters['locationCode'] = requestParameters.locationCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credentials/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Gets a Mozu
     */
    async getCarrierCredential(requestParameters: GetCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredential> {
        const response = await this.getCarrierCredentialRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\">carrier credential</see> with the specified filters and options.
     * Returns a <see cref=\"T:Mozu
     */


    async getCarrierCredentialsRaw(requestParameters: GetCarrierCredentialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credentials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredential\">carrier credential</see> with the specified filters and options.
     * Returns a <see cref=\"T:Mozu
     */
    async getCarrierCredentials(requestParameters: GetCarrierCredentialsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialCollection> {
        const response = await this.getCarrierCredentialsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Updates a Mozu
     */


    async updateCarrierCredentialRaw(requestParameters: UpdateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredential>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling updateCarrierCredential.');
        }

        const queryParameters: any = {};

        if (requestParameters.siteId !== undefined) {
            queryParameters['siteId'] = requestParameters.siteId;
        }

        if (requestParameters.locationGroupCode !== undefined) {
            queryParameters['locationGroupCode'] = requestParameters.locationGroupCode;
        }

        if (requestParameters.locationCode !== undefined) {
            queryParameters['locationCode'] = requestParameters.locationCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credentials/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.carrierCredential,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredential with the specified configuration.
     * Updates a Mozu
     */
    async updateCarrierCredential(requestParameters: UpdateCarrierCredentialRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredential> {
        const response = await this.updateCarrierCredentialRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
