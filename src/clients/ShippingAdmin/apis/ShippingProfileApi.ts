/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  HandlingFeeRule,
  HandlingFeeRuleCollection,
  HttpResponseMessage,
  ShippingInclusionRule,
  ShippingInclusionRuleCollection,
  ShippingProfileCollection,
  ShippingStates,
} from '../models';
import {
    HandlingFeeRuleFromJSON,
    HandlingFeeRuleToJSON,
    HandlingFeeRuleCollectionFromJSON,
    HandlingFeeRuleCollectionToJSON,
    HttpResponseMessageFromJSON,
    HttpResponseMessageToJSON,
    ShippingInclusionRuleFromJSON,
    ShippingInclusionRuleToJSON,
    ShippingInclusionRuleCollectionFromJSON,
    ShippingInclusionRuleCollectionToJSON,
    ShippingProfileCollectionFromJSON,
    ShippingProfileCollectionToJSON,
    ShippingStatesFromJSON,
    ShippingStatesToJSON,
} from '../models';

export interface ShippingProfileApiCreateOrderHandlingFeeRuleRequest {
    profilecode: string;
    handlingFeeRule?: HandlingFeeRule;
}

export interface ShippingProfileApiCreateProductHandlingFeeRuleRequest {
    profilecode: string;
    handlingFeeRule?: HandlingFeeRule;
}

export interface ShippingProfileApiCreateShippingInclusionRuleRequest {
    profilecode: string;
    shippingInclusionRule?: ShippingInclusionRule;
}

export interface ShippingProfileApiDeleteOrderHandlingFeeRuleRequest {
    profilecode: string;
    id: string;
}

export interface ShippingProfileApiDeleteProductHandlingFeeRuleRequest {
    profilecode: string;
    id: string;
}

export interface ShippingProfileApiDeleteShippingInclusionRuleRequest {
    profilecode: string;
    id: string;
}

export interface ShippingProfileApiGetOrderHandlingFeeRuleRequest {
    profilecode: string;
    id: string;
}

export interface ShippingProfileApiGetOrderHandlingFeeRulesRequest {
    profilecode: string;
}

export interface ShippingProfileApiGetProductHandlingFeeRuleRequest {
    profilecode: string;
    id: string;
}

export interface ShippingProfileApiGetProductHandlingFeeRulesRequest {
    profilecode: string;
}

export interface ShippingProfileApiGetShippingInclusionRuleRequest {
    profilecode: string;
    id: string;
}

export interface ShippingProfileApiGetShippingInclusionRulesRequest {
    profilecode: string;
}

export interface ShippingProfileApiGetStatesRequest {
    profileCode: string;
}

export interface ShippingProfileApiUpdateOrderHandlingFeeRuleRequest {
    profilecode: string;
    id: string;
    handlingFeeRule?: HandlingFeeRule;
}

export interface ShippingProfileApiUpdateProductHandlingFeeRuleRequest {
    profilecode: string;
    id: string;
    handlingFeeRule?: HandlingFeeRule;
}

export interface ShippingProfileApiUpdateShippingInclusionRuleRequest {
    profilecode: string;
    id: string;
    shippingInclusionRule?: ShippingInclusionRule;
}

export interface ShippingProfileApiUpdateStatesRequest {
    profilecode: string;
    shippingStates?: Array<ShippingStates>;
}

/**
 * 
 */
export class ShippingProfileApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Order Handling Fee Rule
     * Create Order Handling Fee Rule
     */


    async createOrderHandlingFeeRuleRaw(requestParameters: ShippingProfileApiCreateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling createOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlingFeeRuleToJSON(requestParameters.handlingFeeRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleFromJSON(jsonValue));
    }

    /**
     * Create Order Handling Fee Rule
     * Create Order Handling Fee Rule
     */
    async createOrderHandlingFeeRule(requestParameters: ShippingProfileApiCreateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.createOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Product Handling Fee Rule
     * Create Product Handling Fee Rule
     */


    async createProductHandlingFeeRuleRaw(requestParameters: ShippingProfileApiCreateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling createProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HandlingFeeRuleToJSON(requestParameters.handlingFeeRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleFromJSON(jsonValue));
    }

    /**
     * Create Product Handling Fee Rule
     * Create Product Handling Fee Rule
     */
    async createProductHandlingFeeRule(requestParameters: ShippingProfileApiCreateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.createProductHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Shipping Inclusion Rule
     * Create Shipping Inclusion Rule
     */


    async createShippingInclusionRuleRaw(requestParameters: ShippingProfileApiCreateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling createShippingInclusionRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingInclusionRuleToJSON(requestParameters.shippingInclusionRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingInclusionRuleFromJSON(jsonValue));
    }

    /**
     * Create Shipping Inclusion Rule
     * Create Shipping Inclusion Rule
     */
    async createShippingInclusionRule(requestParameters: ShippingProfileApiCreateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule> {
        const response = await this.createShippingInclusionRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Order Handling Fee Rule
     * Delete Order Handling Fee Rule
     */


    async deleteOrderHandlingFeeRuleRaw(requestParameters: ShippingProfileApiDeleteOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HttpResponseMessage>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling deleteOrderHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HttpResponseMessageFromJSON(jsonValue));
    }

    /**
     * Delete Order Handling Fee Rule
     * Delete Order Handling Fee Rule
     */
    async deleteOrderHandlingFeeRule(requestParameters: ShippingProfileApiDeleteOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HttpResponseMessage> {
        const response = await this.deleteOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Product Handling Fee Rule
     * Delete Product Handling Fee Rule
     */


    async deleteProductHandlingFeeRuleRaw(requestParameters: ShippingProfileApiDeleteProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling deleteProductHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Product Handling Fee Rule
     * Delete Product Handling Fee Rule
     */
    async deleteProductHandlingFeeRule(requestParameters: ShippingProfileApiDeleteProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductHandlingFeeRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipping Inclusion Rule
     * Delete Shipping Inclusion Rule
     */


    async deleteShippingInclusionRuleRaw(requestParameters: ShippingProfileApiDeleteShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling deleteShippingInclusionRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteShippingInclusionRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipping Inclusion Rule
     * Delete Shipping Inclusion Rule
     */
    async deleteShippingInclusionRule(requestParameters: ShippingProfileApiDeleteShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShippingInclusionRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Get Order Handling Fee Rule
     * Get Order Handling Fee Rule
     */


    async getOrderHandlingFeeRuleRaw(requestParameters: ShippingProfileApiGetOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getOrderHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleFromJSON(jsonValue));
    }

    /**
     * Get Order Handling Fee Rule
     * Get Order Handling Fee Rule
     */
    async getOrderHandlingFeeRule(requestParameters: ShippingProfileApiGetOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.getOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Order Handling Fee Rules
     * Get Order Handling Fee Rules
     */


    async getOrderHandlingFeeRulesRaw(requestParameters: ShippingProfileApiGetOrderHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRuleCollection>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getOrderHandlingFeeRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleCollectionFromJSON(jsonValue));
    }

    /**
     * Get Order Handling Fee Rules
     * Get Order Handling Fee Rules
     */
    async getOrderHandlingFeeRules(requestParameters: ShippingProfileApiGetOrderHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRuleCollection> {
        const response = await this.getOrderHandlingFeeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Product Handling Fee Rule
     * Get Product Handling Fee Rule
     */


    async getProductHandlingFeeRuleRaw(requestParameters: ShippingProfileApiGetProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getProductHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleFromJSON(jsonValue));
    }

    /**
     * Get Product Handling Fee Rule
     * Get Product Handling Fee Rule
     */
    async getProductHandlingFeeRule(requestParameters: ShippingProfileApiGetProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.getProductHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Product Handling Fee Rules
     * Get Product Handling Fee Rules
     */


    async getProductHandlingFeeRulesRaw(requestParameters: ShippingProfileApiGetProductHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRuleCollection>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getProductHandlingFeeRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleCollectionFromJSON(jsonValue));
    }

    /**
     * Get Product Handling Fee Rules
     * Get Product Handling Fee Rules
     */
    async getProductHandlingFeeRules(requestParameters: ShippingProfileApiGetProductHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRuleCollection> {
        const response = await this.getProductHandlingFeeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog
     * Get Shipping Profiles for the Tenant/Master Catalog
     */


    async getProfilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingProfileCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingProfileCollectionFromJSON(jsonValue));
    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog
     * Get Shipping Profiles for the Tenant/Master Catalog
     */
    async getProfiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingProfileCollection> {
        const response = await this.getProfilesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Inclusion Rule
     * Get Shipping Inclusion Rule
     */


    async getShippingInclusionRuleRaw(requestParameters: ShippingProfileApiGetShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getShippingInclusionRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getShippingInclusionRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingInclusionRuleFromJSON(jsonValue));
    }

    /**
     * Get Shipping Inclusion Rule
     * Get Shipping Inclusion Rule
     */
    async getShippingInclusionRule(requestParameters: ShippingProfileApiGetShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule> {
        const response = await this.getShippingInclusionRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Inclusion Rules
     * Get Shipping Inclusion Rules
     */


    async getShippingInclusionRulesRaw(requestParameters: ShippingProfileApiGetShippingInclusionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRuleCollection>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getShippingInclusionRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingInclusionRuleCollectionFromJSON(jsonValue));
    }

    /**
     * Get Shipping Inclusion Rules
     * Get Shipping Inclusion Rules
     */
    async getShippingInclusionRules(requestParameters: ShippingProfileApiGetShippingInclusionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRuleCollection> {
        const response = await this.getShippingInclusionRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Configured Shipping States
     */


    async getStatesRaw(requestParameters: ShippingProfileApiGetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingStates>>> {
        if (requestParameters.profileCode === null || requestParameters.profileCode === undefined) {
            throw new runtime.RequiredError('profileCode','Required parameter requestParameters.profileCode was null or undefined when calling getStates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/shippingstates`.replace(`{${"profileCode"}}`, encodeURIComponent(String(requestParameters.profileCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingStatesFromJSON));
    }

    /**
     * 
     * Get Configured Shipping States
     */
    async getStates(requestParameters: ShippingProfileApiGetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingStates>> {
        const response = await this.getStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Order Handling Fee Rule
     * Update Order Handling Fee Rule
     */


    async updateOrderHandlingFeeRuleRaw(requestParameters: ShippingProfileApiUpdateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateOrderHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlingFeeRuleToJSON(requestParameters.handlingFeeRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleFromJSON(jsonValue));
    }

    /**
     * Update Order Handling Fee Rule
     * Update Order Handling Fee Rule
     */
    async updateOrderHandlingFeeRule(requestParameters: ShippingProfileApiUpdateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.updateOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Product Handling Fee Rule
     * Update Product Handling Fee Rule
     */


    async updateProductHandlingFeeRuleRaw(requestParameters: ShippingProfileApiUpdateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateProductHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HandlingFeeRuleToJSON(requestParameters.handlingFeeRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HandlingFeeRuleFromJSON(jsonValue));
    }

    /**
     * Update Product Handling Fee Rule
     * Update Product Handling Fee Rule
     */
    async updateProductHandlingFeeRule(requestParameters: ShippingProfileApiUpdateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.updateProductHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Shipping Inclusion Rule
     * Update Shipping Inclusion Rule
     */


    async updateShippingInclusionRuleRaw(requestParameters: ShippingProfileApiUpdateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateShippingInclusionRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateShippingInclusionRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingInclusionRuleToJSON(requestParameters.shippingInclusionRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingInclusionRuleFromJSON(jsonValue));
    }

    /**
     * Update Shipping Inclusion Rule
     * Update Shipping Inclusion Rule
     */
    async updateShippingInclusionRule(requestParameters: ShippingProfileApiUpdateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule> {
        const response = await this.updateShippingInclusionRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update States
     * Update States
     */


    async updateStatesRaw(requestParameters: ShippingProfileApiUpdateStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingStates>>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateStates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/shippingstates`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shippingStates.map(ShippingStatesToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingStatesFromJSON));
    }

    /**
     * Update States
     * Update States
     */
    async updateStates(requestParameters: ShippingProfileApiUpdateStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingStates>> {
        const response = await this.updateStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
