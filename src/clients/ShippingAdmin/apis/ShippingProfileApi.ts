/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  HandlingFeeRule,
  HandlingFeeRuleCollection,
  ShippingAdminHttpResponseMessage,
  ShippingInclusionRule,
  ShippingInclusionRuleCollection,
  ShippingProfileCollection,
  ShippingStates,
} from '../models';


export namespace shippingProfileApiParams { 
    export interface CreateOrderHandlingFeeRuleRequest {
        profilecode: string;
        responseFields?: string;
        handlingFeeRule?: HandlingFeeRule;
    }
    export interface CreateProductHandlingFeeRuleRequest {
        profilecode: string;
        responseFields?: string;
        handlingFeeRule?: HandlingFeeRule;
    }
    export interface CreateShippingInclusionRuleRequest {
        profilecode: string;
        responseFields?: string;
        shippingInclusionRule?: ShippingInclusionRule;
    }
    export interface DeleteOrderHandlingFeeRuleRequest {
        profilecode: string;
        id: string;
    }
    export interface DeleteProductHandlingFeeRuleRequest {
        profilecode: string;
        id: string;
    }
    export interface DeleteShippingInclusionRuleRequest {
        profilecode: string;
        id: string;
    }
    export interface GetOrderHandlingFeeRuleRequest {
        profilecode: string;
        id: string;
        responseFields?: string;
    }
    export interface GetOrderHandlingFeeRulesRequest {
        profilecode: string;
        responseFields?: string;
    }
    export interface GetProductHandlingFeeRuleRequest {
        profilecode: string;
        id: string;
        responseFields?: string;
    }
    export interface GetProductHandlingFeeRulesRequest {
        profilecode: string;
        responseFields?: string;
    }
    export interface GetProfilesRequest {
        responseFields?: string;
    }
    export interface GetShippingInclusionRuleRequest {
        profilecode: string;
        id: string;
        responseFields?: string;
    }
    export interface GetShippingInclusionRulesRequest {
        profilecode: string;
        responseFields?: string;
    }
    export interface GetStatesRequest {
        profileCode: string;
        responseFields?: string;
    }
    export interface UpdateOrderHandlingFeeRuleRequest {
        profilecode: string;
        id: string;
        responseFields?: string;
        handlingFeeRule?: HandlingFeeRule;
    }
    export interface UpdateProductHandlingFeeRuleRequest {
        profilecode: string;
        id: string;
        responseFields?: string;
        handlingFeeRule?: HandlingFeeRule;
    }
    export interface UpdateShippingInclusionRuleRequest {
        profilecode: string;
        id: string;
        responseFields?: string;
        shippingInclusionRule?: ShippingInclusionRule;
    }
    export interface UpdateStatesRequest {
        profilecode: string;
        responseFields?: string;
        shippingStates?: Array<ShippingStates>;
    }
}
/**
* ShippingProfileApiService - interface
* 
* @export
* @interface ShippingProfileApi
*/
export interface ShippingProfileApiService {
    /**
    * Create Order Handling Fee Rule
    * @summary Create Order Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {HandlingFeeRule} [handlingFeeRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    createOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.CreateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>>;

    /**
    * Create Order Handling Fee Rule
    * Create Order Handling Fee Rule
    */
    createOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.CreateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule>;

    /**
    * Create Product Handling Fee Rule
    * @summary Create Product Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {HandlingFeeRule} [handlingFeeRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    createProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.CreateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>>;

    /**
    * Create Product Handling Fee Rule
    * Create Product Handling Fee Rule
    */
    createProductHandlingFeeRule(requestParameters: shippingProfileApiParams.CreateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule>;

    /**
    * Create Shipping Inclusion Rule
    * @summary Create Shipping Inclusion Rule
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ShippingInclusionRule} [shippingInclusionRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    createShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.CreateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>>;

    /**
    * Create Shipping Inclusion Rule
    * Create Shipping Inclusion Rule
    */
    createShippingInclusionRule(requestParameters: shippingProfileApiParams.CreateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule>;

    /**
    * Delete Order Handling Fee Rule
    * @summary Delete Order Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    deleteOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.DeleteOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingAdminHttpResponseMessage>>;

    /**
    * Delete Order Handling Fee Rule
    * Delete Order Handling Fee Rule
    */
    deleteOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.DeleteOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingAdminHttpResponseMessage>;

    /**
    * Delete Product Handling Fee Rule
    * @summary Delete Product Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    deleteProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.DeleteProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Product Handling Fee Rule
    * Delete Product Handling Fee Rule
    */
    deleteProductHandlingFeeRule(requestParameters: shippingProfileApiParams.DeleteProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Delete Shipping Inclusion Rule
    * @summary Delete Shipping Inclusion Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    deleteShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.DeleteShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Shipping Inclusion Rule
    * Delete Shipping Inclusion Rule
    */
    deleteShippingInclusionRule(requestParameters: shippingProfileApiParams.DeleteShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get Order Handling Fee Rule
    * @summary Get Order Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>>;

    /**
    * Get Order Handling Fee Rule
    * Get Order Handling Fee Rule
    */
    getOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule>;

    /**
    * Get Order Handling Fee Rules
    * @summary Get Order Handling Fee Rules
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getOrderHandlingFeeRulesRaw(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRuleCollection>>;

    /**
    * Get Order Handling Fee Rules
    * Get Order Handling Fee Rules
    */
    getOrderHandlingFeeRules(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRuleCollection>;

    /**
    * Get Product Handling Fee Rule
    * @summary Get Product Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>>;

    /**
    * Get Product Handling Fee Rule
    * Get Product Handling Fee Rule
    */
    getProductHandlingFeeRule(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule>;

    /**
    * Get Product Handling Fee Rules
    * @summary Get Product Handling Fee Rules
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getProductHandlingFeeRulesRaw(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRuleCollection>>;

    /**
    * Get Product Handling Fee Rules
    * Get Product Handling Fee Rules
    */
    getProductHandlingFeeRules(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRuleCollection>;

    /**
    * Get Shipping Profiles for the Tenant/Master Catalog
    * @summary Get Shipping Profiles for the Tenant/Master Catalog
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getProfilesRaw(requestParameters: shippingProfileApiParams.GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingProfileCollection>>;

    /**
    * Get Shipping Profiles for the Tenant/Master Catalog
    * Get Shipping Profiles for the Tenant/Master Catalog
    */
    getProfiles(requestParameters: shippingProfileApiParams.GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingProfileCollection>;

    /**
    * Get Shipping Inclusion Rule
    * @summary Get Shipping Inclusion Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.GetShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>>;

    /**
    * Get Shipping Inclusion Rule
    * Get Shipping Inclusion Rule
    */
    getShippingInclusionRule(requestParameters: shippingProfileApiParams.GetShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule>;

    /**
    * Get Shipping Inclusion Rules
    * @summary Get Shipping Inclusion Rules
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getShippingInclusionRulesRaw(requestParameters: shippingProfileApiParams.GetShippingInclusionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRuleCollection>>;

    /**
    * Get Shipping Inclusion Rules
    * Get Shipping Inclusion Rules
    */
    getShippingInclusionRules(requestParameters: shippingProfileApiParams.GetShippingInclusionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRuleCollection>;

    /**
    * 
    * @summary Get Configured Shipping States
    * @param {string} profileCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    getStatesRaw(requestParameters: shippingProfileApiParams.GetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingStates>>>;

    /**
    * 
    * Get Configured Shipping States
    */
    getStates(requestParameters: shippingProfileApiParams.GetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingStates>>;

    /**
    * Update Order Handling Fee Rule
    * @summary Update Order Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {HandlingFeeRule} [handlingFeeRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    updateOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.UpdateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>>;

    /**
    * Update Order Handling Fee Rule
    * Update Order Handling Fee Rule
    */
    updateOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.UpdateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule>;

    /**
    * Update Product Handling Fee Rule
    * @summary Update Product Handling Fee Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {HandlingFeeRule} [handlingFeeRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    updateProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.UpdateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>>;

    /**
    * Update Product Handling Fee Rule
    * Update Product Handling Fee Rule
    */
    updateProductHandlingFeeRule(requestParameters: shippingProfileApiParams.UpdateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule>;

    /**
    * Update Shipping Inclusion Rule
    * @summary Update Shipping Inclusion Rule
    * @param {string} profilecode 
    * @param {string} id 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ShippingInclusionRule} [shippingInclusionRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    updateShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.UpdateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>>;

    /**
    * Update Shipping Inclusion Rule
    * Update Shipping Inclusion Rule
    */
    updateShippingInclusionRule(requestParameters: shippingProfileApiParams.UpdateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule>;

    /**
    * Update States
    * @summary Update States
    * @param {string} profilecode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<ShippingStates>} [shippingStates] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ShippingProfileApiInterface
    */
    updateStatesRaw(requestParameters: shippingProfileApiParams.UpdateStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingStates>>>;

    /**
    * Update States
    * Update States
    */
    updateStates(requestParameters: shippingProfileApiParams.UpdateStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingStates>>;

}


/**
 * 
 */
export class ShippingProfileApi extends runtime.BaseAPI implements ShippingProfileApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Order Handling Fee Rule
     * Create Order Handling Fee Rule
     */


    async createOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.CreateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling createOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.handlingFeeRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Order Handling Fee Rule
     * Create Order Handling Fee Rule
     */
    async createOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.CreateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.createOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Product Handling Fee Rule
     * Create Product Handling Fee Rule
     */


    async createProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.CreateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling createProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.handlingFeeRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Product Handling Fee Rule
     * Create Product Handling Fee Rule
     */
    async createProductHandlingFeeRule(requestParameters: shippingProfileApiParams.CreateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.createProductHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Shipping Inclusion Rule
     * Create Shipping Inclusion Rule
     */


    async createShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.CreateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling createShippingInclusionRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shippingInclusionRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Shipping Inclusion Rule
     * Create Shipping Inclusion Rule
     */
    async createShippingInclusionRule(requestParameters: shippingProfileApiParams.CreateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule> {
        const response = await this.createShippingInclusionRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Order Handling Fee Rule
     * Delete Order Handling Fee Rule
     */


    async deleteOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.DeleteOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingAdminHttpResponseMessage>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling deleteOrderHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete Order Handling Fee Rule
     * Delete Order Handling Fee Rule
     */
    async deleteOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.DeleteOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingAdminHttpResponseMessage> {
        const response = await this.deleteOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Product Handling Fee Rule
     * Delete Product Handling Fee Rule
     */


    async deleteProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.DeleteProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling deleteProductHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Product Handling Fee Rule
     * Delete Product Handling Fee Rule
     */
    async deleteProductHandlingFeeRule(requestParameters: shippingProfileApiParams.DeleteProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductHandlingFeeRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Shipping Inclusion Rule
     * Delete Shipping Inclusion Rule
     */


    async deleteShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.DeleteShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling deleteShippingInclusionRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteShippingInclusionRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Shipping Inclusion Rule
     * Delete Shipping Inclusion Rule
     */
    async deleteShippingInclusionRule(requestParameters: shippingProfileApiParams.DeleteShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteShippingInclusionRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Get Order Handling Fee Rule
     * Get Order Handling Fee Rule
     */


    async getOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getOrderHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Order Handling Fee Rule
     * Get Order Handling Fee Rule
     */
    async getOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.getOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Order Handling Fee Rules
     * Get Order Handling Fee Rules
     */


    async getOrderHandlingFeeRulesRaw(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRuleCollection>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getOrderHandlingFeeRules.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Order Handling Fee Rules
     * Get Order Handling Fee Rules
     */
    async getOrderHandlingFeeRules(requestParameters: shippingProfileApiParams.GetOrderHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRuleCollection> {
        const response = await this.getOrderHandlingFeeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Product Handling Fee Rule
     * Get Product Handling Fee Rule
     */


    async getProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getProductHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Product Handling Fee Rule
     * Get Product Handling Fee Rule
     */
    async getProductHandlingFeeRule(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.getProductHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Product Handling Fee Rules
     * Get Product Handling Fee Rules
     */


    async getProductHandlingFeeRulesRaw(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRuleCollection>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getProductHandlingFeeRules.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Product Handling Fee Rules
     * Get Product Handling Fee Rules
     */
    async getProductHandlingFeeRules(requestParameters: shippingProfileApiParams.GetProductHandlingFeeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRuleCollection> {
        const response = await this.getProductHandlingFeeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog
     * Get Shipping Profiles for the Tenant/Master Catalog
     */


    async getProfilesRaw(requestParameters: shippingProfileApiParams.GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingProfileCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Shipping Profiles for the Tenant/Master Catalog
     * Get Shipping Profiles for the Tenant/Master Catalog
     */
    async getProfiles(requestParameters: shippingProfileApiParams.GetProfilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingProfileCollection> {
        const response = await this.getProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Inclusion Rule
     * Get Shipping Inclusion Rule
     */


    async getShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.GetShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getShippingInclusionRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getShippingInclusionRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Shipping Inclusion Rule
     * Get Shipping Inclusion Rule
     */
    async getShippingInclusionRule(requestParameters: shippingProfileApiParams.GetShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule> {
        const response = await this.getShippingInclusionRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Inclusion Rules
     * Get Shipping Inclusion Rules
     */


    async getShippingInclusionRulesRaw(requestParameters: shippingProfileApiParams.GetShippingInclusionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRuleCollection>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling getShippingInclusionRules.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Shipping Inclusion Rules
     * Get Shipping Inclusion Rules
     */
    async getShippingInclusionRules(requestParameters: shippingProfileApiParams.GetShippingInclusionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRuleCollection> {
        const response = await this.getShippingInclusionRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Configured Shipping States
     */


    async getStatesRaw(requestParameters: shippingProfileApiParams.GetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingStates>>> {
        if (requestParameters.profileCode === null || requestParameters.profileCode === undefined) {
            throw new runtime.RequiredError('profileCode','Required parameter requestParameters.profileCode was null or undefined when calling getStates.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/shippingstates`.replace(`{${"profileCode"}}`, encodeURIComponent(String(requestParameters.profileCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get Configured Shipping States
     */
    async getStates(requestParameters: shippingProfileApiParams.GetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingStates>> {
        const response = await this.getStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Order Handling Fee Rule
     * Update Order Handling Fee Rule
     */


    async updateOrderHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.UpdateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateOrderHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrderHandlingFeeRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/orderhandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.handlingFeeRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Order Handling Fee Rule
     * Update Order Handling Fee Rule
     */
    async updateOrderHandlingFeeRule(requestParameters: shippingProfileApiParams.UpdateOrderHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.updateOrderHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Product Handling Fee Rule
     * Update Product Handling Fee Rule
     */


    async updateProductHandlingFeeRuleRaw(requestParameters: shippingProfileApiParams.UpdateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HandlingFeeRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateProductHandlingFeeRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductHandlingFeeRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/producthandlingfees/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.handlingFeeRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Product Handling Fee Rule
     * Update Product Handling Fee Rule
     */
    async updateProductHandlingFeeRule(requestParameters: shippingProfileApiParams.UpdateProductHandlingFeeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HandlingFeeRule> {
        const response = await this.updateProductHandlingFeeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Shipping Inclusion Rule
     * Update Shipping Inclusion Rule
     */


    async updateShippingInclusionRuleRaw(requestParameters: shippingProfileApiParams.UpdateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingInclusionRule>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateShippingInclusionRule.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateShippingInclusionRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/rules/shippinginclusions/{id}`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shippingInclusionRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Shipping Inclusion Rule
     * Update Shipping Inclusion Rule
     */
    async updateShippingInclusionRule(requestParameters: shippingProfileApiParams.UpdateShippingInclusionRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingInclusionRule> {
        const response = await this.updateShippingInclusionRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update States
     * Update States
     */


    async updateStatesRaw(requestParameters: shippingProfileApiParams.UpdateStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShippingStates>>> {
        if (requestParameters.profilecode === null || requestParameters.profilecode === undefined) {
            throw new runtime.RequiredError('profilecode','Required parameter requestParameters.profilecode was null or undefined when calling updateStates.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/profiles/{profilecode}/shippingstates`.replace(`{${"profilecode"}}`, encodeURIComponent(String(requestParameters.profilecode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shippingStates,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update States
     * Update States
     */
    async updateStates(requestParameters: shippingProfileApiParams.UpdateStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShippingStates>> {
        const response = await this.updateStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
