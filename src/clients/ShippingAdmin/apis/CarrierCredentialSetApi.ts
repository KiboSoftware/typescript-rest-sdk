/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Shipping Admin Service
 * OpenAPI Spec for Kibo Shipping Admin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CarrierCredentialSet,
  CarrierCredentialSetCollection,
} from '../models';

export interface CreateCarrierCredentialSetRequest {
    carrierId: string;
    responseFields?: string;
    carrierCredentialSet?: CarrierCredentialSet;
}

export interface DeleteCarrierCredentialSetRequest {
    carrierId: string;
    code: string;
}

export interface GetCarrierCredentialSetRequest {
    carrierId: string;
    code: string;
    responseFields?: string;
}

export interface GetCarrierCredentialSetsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface UpdateCarrierCredentialSetRequest {
    carrierId: string;
    code: string;
    responseFields?: string;
    carrierCredentialSet?: CarrierCredentialSet;
}

/**
 * CarrierCredentialSetApi - interface
 * 
 * @export
 * @interface CarrierCredentialSetApiInterface
 */
export interface CarrierCredentialSetApiInterface {
    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet.
     * @summary Creates a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CarrierCredentialSet} [carrierCredentialSet] The carrier credential set data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialSetApiInterface
     */
    createCarrierCredentialSetRaw(requestParameters: CreateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSet>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet.
     * Creates a Mozu
     */
    createCarrierCredentialSet(requestParameters: CreateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSet>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * @summary Deletes a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {string} code The carrier credential set code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialSetApiInterface
     */
    deleteCarrierCredentialSetRaw(requestParameters: DeleteCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Deletes a Mozu
     */
    deleteCarrierCredentialSet(requestParameters: DeleteCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * @summary Returns a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {string} code The carrier credential set code.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialSetApiInterface
     */
    getCarrierCredentialSetRaw(requestParameters: GetCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSet>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Returns a Mozu
     */
    getCarrierCredentialSet(requestParameters: GetCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSet>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSetCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredentialSet\">carrier credential sets</see> with the specified filters and options.
     * @summary Returns a <see cref=\"T:Mozu
     * @param {number} [startIndex] The starting index.
     * @param {number} [pageSize] The page size.
     * @param {string} [sortBy] Any sorting filters.
     * @param {string} [filter] Any query filters.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialSetApiInterface
     */
    getCarrierCredentialSetsRaw(requestParameters: GetCarrierCredentialSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSetCollection>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSetCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredentialSet\">carrier credential sets</see> with the specified filters and options.
     * Returns a <see cref=\"T:Mozu
     */
    getCarrierCredentialSets(requestParameters: GetCarrierCredentialSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSetCollection>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * @summary Updates a Mozu
     * @param {string} carrierId The carrier ID.
     * @param {string} code The carrier credential set code.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CarrierCredentialSet} [carrierCredentialSet] The carrier credential set data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierCredentialSetApiInterface
     */
    updateCarrierCredentialSetRaw(requestParameters: UpdateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSet>>;

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Updates a Mozu
     */
    updateCarrierCredentialSet(requestParameters: UpdateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSet>;

}

/**
 * 
 */
export class CarrierCredentialSetApi extends runtime.BaseAPI implements CarrierCredentialSetApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet.
     * Creates a Mozu
     */


    async createCarrierCredentialSetRaw(requestParameters: CreateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSet>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling createCarrierCredentialSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credential-sets/{carrierId}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.carrierCredentialSet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet.
     * Creates a Mozu
     */
    async createCarrierCredentialSet(requestParameters: CreateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSet> {
        const response = await this.createCarrierCredentialSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Deletes a Mozu
     */


    async deleteCarrierCredentialSetRaw(requestParameters: DeleteCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling deleteCarrierCredentialSet.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteCarrierCredentialSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credential-sets/{carrierId}/{code}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Deletes a Mozu
     */
    async deleteCarrierCredentialSet(requestParameters: DeleteCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCarrierCredentialSetRaw(requestParameters, initOverrides);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Returns a Mozu
     */


    async getCarrierCredentialSetRaw(requestParameters: GetCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSet>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getCarrierCredentialSet.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getCarrierCredentialSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credential-sets/{carrierId}/{code}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Returns a Mozu
     */
    async getCarrierCredentialSet(requestParameters: GetCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSet> {
        const response = await this.getCarrierCredentialSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSetCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredentialSet\">carrier credential sets</see> with the specified filters and options.
     * Returns a <see cref=\"T:Mozu
     */


    async getCarrierCredentialSetsRaw(requestParameters: GetCarrierCredentialSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSetCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credential-sets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSetCollection\">collection</see> of <see cref=\"T:Mozu.ShippingAdmin.Contracts.Carriers.CarrierCredentialSet\">carrier credential sets</see> with the specified filters and options.
     * Returns a <see cref=\"T:Mozu
     */
    async getCarrierCredentialSets(requestParameters: GetCarrierCredentialSetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSetCollection> {
        const response = await this.getCarrierCredentialSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Updates a Mozu
     */


    async updateCarrierCredentialSetRaw(requestParameters: UpdateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierCredentialSet>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling updateCarrierCredentialSet.');
        }

        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateCarrierCredentialSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/shipping/admin/carriers/credential-sets/{carrierId}/{code}`.replace(`{${"carrierId"}}`, encodeURIComponent(String(requestParameters.carrierId))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.carrierCredentialSet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * hippingAdmin.Contracts.Carriers.CarrierCredentialSet with the specified carrier and code.
     * Updates a Mozu
     */
    async updateCarrierCredentialSet(requestParameters: UpdateCarrierCredentialSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierCredentialSet> {
        const response = await this.updateCarrierCredentialSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
