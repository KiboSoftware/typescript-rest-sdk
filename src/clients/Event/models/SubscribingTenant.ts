/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { SubscribingSite } from './SubscribingSite';
import {
    SubscribingSiteFromJSON,
    SubscribingSiteFromJSONTyped,
    SubscribingSiteToJSON,
} from './SubscribingSite';

/**
 * A tenant that is associated with a subscription
 * @export
 * @interface SubscribingTenant
 */
export interface SubscribingTenant {
    /**
     * Type of Subscribing Context
     * !:SubscribingContextLevelTypeConst
     * Derived from state of the subscription.  If any Subscribing Sites exist (e.g. subscription is not at the Tenant Level, then the value will be Site)
     * @type {string}
     * @memberof SubscribingTenant
     */
    subscribingContextLevelType?: string | null;
    /**
     * The tenant identifier
     * @type {number}
     * @memberof SubscribingTenant
     */
    tenantId?: number | null;
    /**
     * Is the subscription active at the tenant level?  If the subscription context is at the Tenant Level this property will be utilized over the SiteLevel
     * @type {boolean}
     * @memberof SubscribingTenant
     */
    isActive?: boolean | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof SubscribingTenant
     */
    auditInfo?: AuditInfo;
    /**
     * Subscribing Sites
     * @type {Array<SubscribingSite>}
     * @memberof SubscribingTenant
     */
    subscribingSites?: Array<SubscribingSite> | null;
}

/**
 * Check if a given object implements the SubscribingTenant interface.
 */
export function instanceOfSubscribingTenant(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubscribingTenantFromJSON(json: any): SubscribingTenant {
    return SubscribingTenantFromJSONTyped(json, false);
}

export function SubscribingTenantFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscribingTenant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subscribingContextLevelType': !exists(json, 'subscribingContextLevelType') ? undefined : json['subscribingContextLevelType'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'subscribingSites': !exists(json, 'subscribingSites') ? undefined : (json['subscribingSites'] === null ? null : (json['subscribingSites'] as Array<any>).map(SubscribingSiteFromJSON)),
    };
}

export function SubscribingTenantToJSON(value?: SubscribingTenant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subscribingContextLevelType': value.subscribingContextLevelType,
        'tenantId': value.tenantId,
        'isActive': value.isActive,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'subscribingSites': value.subscribingSites === undefined ? undefined : (value.subscribingSites === null ? null : (value.subscribingSites as Array<any>).map(SubscribingSiteToJSON)),
    };
}

