/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventDeliveryAttempt } from './EventDeliveryAttempt';
import {
    EventDeliveryAttemptFromJSON,
    EventDeliveryAttemptFromJSONTyped,
    EventDeliveryAttemptToJSON,
} from './EventDeliveryAttempt';
import type { EventSummary } from './EventSummary';
import {
    EventSummaryFromJSON,
    EventSummaryFromJSONTyped,
    EventSummaryToJSON,
} from './EventSummary';

/**
 * The external/public Event entity used specifically in PULL/POLL event scenarios
 * @export
 * @interface EventDeliverySummary
 */
export interface EventDeliverySummary {
    /**
     * The unique identifier for an event delivery summary
     * @type {number}
     * @memberof EventDeliverySummary
     */
    id?: number | null;
    /**
     * Status of the delivery process (EventDeliveryStatusType)
     * @type {string}
     * @memberof EventDeliverySummary
     */
    deliveryStatus?: string | null;
    /**
     * 
     * @type {EventSummary}
     * @memberof EventDeliverySummary
     */
    eventSummary?: EventSummary;
    /**
     * Indicates whether delivery of the event is currently being attempted at this moment in time
     * @type {boolean}
     * @memberof EventDeliverySummary
     */
    isRunning?: boolean;
    /**
     * The date that the delivery was last attempted (either successfully or not)
     * @type {Date}
     * @memberof EventDeliverySummary
     */
    lastExecutionDate?: Date;
    /**
     * The date that the delivery will next be attempted, if the event has not been successfully delivered yet and there are still retries remaining
     * @type {Date}
     * @memberof EventDeliverySummary
     */
    nextExecutionDate?: Date;
    /**
     * Number of delivery attempts remaining
     * @type {number}
     * @memberof EventDeliverySummary
     */
    retriesRemaining?: number | null;
    /**
     * Create Date
     * @type {Date}
     * @memberof EventDeliverySummary
     */
    createDate?: Date | null;
    /**
     * Update Date
     * @type {Date}
     * @memberof EventDeliverySummary
     */
    updateDate?: Date | null;
    /**
     * Details about each attempted delivery of the event to the endpoint
     * @type {Array<EventDeliveryAttempt>}
     * @memberof EventDeliverySummary
     */
    deliveryAttempts?: Array<EventDeliveryAttempt> | null;
}

/**
 * Check if a given object implements the EventDeliverySummary interface.
 */
export function instanceOfEventDeliverySummary(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventDeliverySummaryFromJSON(json: any): EventDeliverySummary {
    return EventDeliverySummaryFromJSONTyped(json, false);
}

export function EventDeliverySummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventDeliverySummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deliveryStatus': !exists(json, 'deliveryStatus') ? undefined : json['deliveryStatus'],
        'eventSummary': !exists(json, 'eventSummary') ? undefined : EventSummaryFromJSON(json['eventSummary']),
        'isRunning': !exists(json, 'isRunning') ? undefined : json['isRunning'],
        'lastExecutionDate': !exists(json, 'lastExecutionDate') ? undefined : (new Date(json['lastExecutionDate'])),
        'nextExecutionDate': !exists(json, 'nextExecutionDate') ? undefined : (new Date(json['nextExecutionDate'])),
        'retriesRemaining': !exists(json, 'retriesRemaining') ? undefined : json['retriesRemaining'],
        'createDate': !exists(json, 'createDate') ? undefined : (json['createDate'] === null ? null : new Date(json['createDate'])),
        'updateDate': !exists(json, 'updateDate') ? undefined : (json['updateDate'] === null ? null : new Date(json['updateDate'])),
        'deliveryAttempts': !exists(json, 'deliveryAttempts') ? undefined : (json['deliveryAttempts'] === null ? null : (json['deliveryAttempts'] as Array<any>).map(EventDeliveryAttemptFromJSON)),
    };
}

export function EventDeliverySummaryToJSON(value?: EventDeliverySummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'deliveryStatus': value.deliveryStatus,
        'eventSummary': EventSummaryToJSON(value.eventSummary),
        'isRunning': value.isRunning,
        'lastExecutionDate': value.lastExecutionDate === undefined ? undefined : (value.lastExecutionDate.toISOString()),
        'nextExecutionDate': value.nextExecutionDate === undefined ? undefined : (value.nextExecutionDate.toISOString()),
        'retriesRemaining': value.retriesRemaining,
        'createDate': value.createDate === undefined ? undefined : (value.createDate === null ? null : value.createDate.toISOString()),
        'updateDate': value.updateDate === undefined ? undefined : (value.updateDate === null ? null : value.updateDate.toISOString()),
        'deliveryAttempts': value.deliveryAttempts === undefined ? undefined : (value.deliveryAttempts === null ? null : (value.deliveryAttempts as Array<any>).map(EventDeliveryAttemptToJSON)),
    };
}

