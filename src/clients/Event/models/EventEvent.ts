/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdminUserAuditInfo } from './AdminUserAuditInfo';
import {
    AdminUserAuditInfoFromJSON,
    AdminUserAuditInfoFromJSONTyped,
    AdminUserAuditInfoToJSON,
} from './AdminUserAuditInfo';
import type { EventExtendedProperty } from './EventExtendedProperty';
import {
    EventExtendedPropertyFromJSON,
    EventExtendedPropertyFromJSONTyped,
    EventExtendedPropertyToJSON,
} from './EventExtendedProperty';

/**
 * The external/public Event entity used specifically in PULL/POLL event scenarios
 * @export
 * @interface EventEvent
 */
export interface EventEvent {
    /**
     * The unique identifier for an event
     * @type {string}
     * @memberof EventEvent
     */
    id?: string | null;
    /**
     * TenantId
     * @type {number}
     * @memberof EventEvent
     */
    tenantId?: number | null;
    /**
     * MasterCatalogId
     * @type {number}
     * @memberof EventEvent
     */
    masterCatalogId?: number | null;
    /**
     * CatalogId
     * @type {number}
     * @memberof EventEvent
     */
    catalogId?: number | null;
    /**
     * SiteId
     * @type {number}
     * @memberof EventEvent
     */
    siteId?: number | null;
    /**
     * The topic of the event (i.e. product.created)
     * @type {string}
     * @memberof EventEvent
     */
    topic?: string | null;
    /**
     * The identifier / ID of the entity that changed (i.e. product code)
     * @type {string}
     * @memberof EventEvent
     */
    entityId?: string | null;
    /**
     * Is this a test?
     * @type {boolean}
     * @memberof EventEvent
     */
    isTest?: boolean | null;
    /**
     * The Correlation Id of the original API request that caused this event to occur
     * @type {string}
     * @memberof EventEvent
     */
    correlationId?: string | null;
    /**
     * Extended properties. Note: This is purposefully not a CollectionBase type wrapper so consumers start to get used to not having counts returned.
     * @type {Array<EventExtendedProperty>}
     * @memberof EventEvent
     */
    extendedProperties?: Array<EventExtendedProperty> | null;
    /**
     * 
     * @type {AdminUserAuditInfo}
     * @memberof EventEvent
     */
    auditInfo?: AdminUserAuditInfo;
}

/**
 * Check if a given object implements the EventEvent interface.
 */
export function instanceOfEventEvent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventEventFromJSON(json: any): EventEvent {
    return EventEventFromJSONTyped(json, false);
}

export function EventEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'masterCatalogId': !exists(json, 'masterCatalogId') ? undefined : json['masterCatalogId'],
        'catalogId': !exists(json, 'catalogId') ? undefined : json['catalogId'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'topic': !exists(json, 'topic') ? undefined : json['topic'],
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'isTest': !exists(json, 'isTest') ? undefined : json['isTest'],
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'extendedProperties': !exists(json, 'extendedProperties') ? undefined : (json['extendedProperties'] === null ? null : (json['extendedProperties'] as Array<any>).map(EventExtendedPropertyFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AdminUserAuditInfoFromJSON(json['auditInfo']),
    };
}

export function EventEventToJSON(value?: EventEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'tenantId': value.tenantId,
        'masterCatalogId': value.masterCatalogId,
        'catalogId': value.catalogId,
        'siteId': value.siteId,
        'topic': value.topic,
        'entityId': value.entityId,
        'isTest': value.isTest,
        'correlationId': value.correlationId,
        'extendedProperties': value.extendedProperties === undefined ? undefined : (value.extendedProperties === null ? null : (value.extendedProperties as Array<any>).map(EventExtendedPropertyToJSON)),
        'auditInfo': AdminUserAuditInfoToJSON(value.auditInfo),
    };
}

