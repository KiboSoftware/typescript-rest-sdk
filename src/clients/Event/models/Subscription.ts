/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SubscribingTenant } from './SubscribingTenant';
import {
    SubscribingTenantFromJSON,
    SubscribingTenantFromJSONTyped,
    SubscribingTenantToJSON,
} from './SubscribingTenant';

/**
 * The subscription entity used specifically in PUSH event scenarios where a third-party desires to receive notification of events
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * The unique identifier for a subscription
     * @type {string}
     * @memberof Subscription
     */
    id?: string | null;
    /**
     * Application identifier for subscription
     * @type {string}
     * @memberof Subscription
     */
    appId?: string | null;
    /**
     * ApiVersion
     * @type {string}
     * @memberof Subscription
     */
    apiVersion?: string | null;
    /**
     * A list of topics that the subscription relates to
     * @type {Array<string>}
     * @memberof Subscription
     */
    topics?: Array<string> | null;
    /**
     * A list of subscribers or subscribing tenants that the subscription relates to
     * @type {Array<SubscribingTenant>}
     * @memberof Subscription
     */
    subscribingTenants?: Array<SubscribingTenant> | null;
    /**
     * Notification delivery type which is a string representation of an enumeration of values.  Example: Http (this is case insensitive, so http may also be passed in)
     * @type {string}
     * @memberof Subscription
     */
    notificationDeliveryType?: string | null;
    /**
     * Content type of the payload that will be delivered.  This is utilized in combination with the notification delivery type.  Example:  A HTTP Post (notification delivery type) is performed with a JSON representation of the event data (content type).
     * @type {string}
     * @memberof Subscription
     */
    contentType?: string | null;
    /**
     * The delivery endpoint that will receive notifications when events concerning the specified topics on the subscription occur.  The format of the endpoint may differ depending on the notification type.  For example, the endpoint may be a URL in some cases and an email address in others if multiple notification types are available.
     * @type {string}
     * @memberof Subscription
     */
    endpoint?: string | null;
    /**
     * A boolean value that indicates if the subscription endpoint has been confirmed
     * @type {boolean}
     * @memberof Subscription
     */
    confirmed?: boolean | null;
    /**
     * A boolean value that indicates if the subscription is active.  The subscription may be inactive due to repeated downtimes at the endpoint.  If they subscription is deactivated the subscription owner or application will need to reactivate it for notifications to be delivered.
     * @type {boolean}
     * @memberof Subscription
     */
    isActive?: boolean | null;
    /**
     * A boolean value that indicates if events should be delivered that resulted from an API call by the application.  If true, any events that occur as a result of a direct API call by the same application will not be delivered. This can prevent an endless loop in certain scenarios.
     * @type {boolean}
     * @memberof Subscription
     */
    noCallback?: boolean | null;
    /**
     * When the entity was created. System-supplied and read-only.
     * @type {Date}
     * @memberof Subscription
     */
    createDate?: Date | null;
    /**
     * When the entity was updated. System-supplied and read-only.
     * @type {Date}
     * @memberof Subscription
     */
    updateDate?: Date | null;
    /**
     * Identifier of the user who created the entity. System-supplied and read-only.
     * @type {string}
     * @memberof Subscription
     */
    createBy?: string | null;
    /**
     * Identifier of the user who updated the entity. System-supplied and read-only.
     * @type {string}
     * @memberof Subscription
     */
    updateBy?: string | null;
}

/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'appId': !exists(json, 'appId') ? undefined : json['appId'],
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'topics': !exists(json, 'topics') ? undefined : json['topics'],
        'subscribingTenants': !exists(json, 'subscribingTenants') ? undefined : (json['subscribingTenants'] === null ? null : (json['subscribingTenants'] as Array<any>).map(SubscribingTenantFromJSON)),
        'notificationDeliveryType': !exists(json, 'notificationDeliveryType') ? undefined : json['notificationDeliveryType'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
        'endpoint': !exists(json, 'endpoint') ? undefined : json['endpoint'],
        'confirmed': !exists(json, 'confirmed') ? undefined : json['confirmed'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'noCallback': !exists(json, 'noCallback') ? undefined : json['noCallback'],
        'createDate': !exists(json, 'createDate') ? undefined : (json['createDate'] === null ? null : new Date(json['createDate'])),
        'updateDate': !exists(json, 'updateDate') ? undefined : (json['updateDate'] === null ? null : new Date(json['updateDate'])),
        'createBy': !exists(json, 'createBy') ? undefined : json['createBy'],
        'updateBy': !exists(json, 'updateBy') ? undefined : json['updateBy'],
    };
}

export function SubscriptionToJSON(value?: Subscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'appId': value.appId,
        'apiVersion': value.apiVersion,
        'topics': value.topics,
        'subscribingTenants': value.subscribingTenants === undefined ? undefined : (value.subscribingTenants === null ? null : (value.subscribingTenants as Array<any>).map(SubscribingTenantToJSON)),
        'notificationDeliveryType': value.notificationDeliveryType,
        'contentType': value.contentType,
        'endpoint': value.endpoint,
        'confirmed': value.confirmed,
        'isActive': value.isActive,
        'noCallback': value.noCallback,
        'createDate': value.createDate === undefined ? undefined : (value.createDate === null ? null : value.createDate.toISOString()),
        'updateDate': value.updateDate === undefined ? undefined : (value.updateDate === null ? null : value.updateDate.toISOString()),
        'createBy': value.createBy,
        'updateBy': value.updateBy,
    };
}

