/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventExtendedProperty } from './EventExtendedProperty';
import {
    EventExtendedPropertyFromJSON,
    EventExtendedPropertyFromJSONTyped,
    EventExtendedPropertyToJSON,
} from './EventExtendedProperty';

/**
 * Event Summary is a trimmed version of an event that is utilized when displaying the event delivery (aka webhook, HTTP callback, HTTP POST) process history/details
 * @export
 * @interface EventSummary
 */
export interface EventSummary {
    /**
     * Note: Remember in the contract version to convert this Guid to ToString("N") so the dashes are not present
     * @type {string}
     * @memberof EventSummary
     */
    eventId?: string | null;
    /**
     * Tenant Id
     * @type {number}
     * @memberof EventSummary
     */
    tenantId?: number | null;
    /**
     * Master Catalog Id
     * @type {number}
     * @memberof EventSummary
     */
    masterCatalogId?: number | null;
    /**
     * Catalog Id
     * @type {number}
     * @memberof EventSummary
     */
    catalogId?: number | null;
    /**
     * Site Id
     * @type {number}
     * @memberof EventSummary
     */
    siteId?: number | null;
    /**
     * Entity Id
     * @type {string}
     * @memberof EventSummary
     */
    entityId?: string | null;
    /**
     * Topic
     * @type {string}
     * @memberof EventSummary
     */
    topic?: string | null;
    /**
     * Extended properties. Note: This is purposefully not a CollectionBase type wrapper so consumers start to get used to not having counts returned.
     * @type {Array<EventExtendedProperty>}
     * @memberof EventSummary
     */
    extendedProperties?: Array<EventExtendedProperty> | null;
    /**
     * Correlation Id
     * @type {string}
     * @memberof EventSummary
     */
    correlationId?: string | null;
    /**
     * Create Date
     * @type {Date}
     * @memberof EventSummary
     */
    createDate?: Date | null;
}

/**
 * Check if a given object implements the EventSummary interface.
 */
export function instanceOfEventSummary(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventSummaryFromJSON(json: any): EventSummary {
    return EventSummaryFromJSONTyped(json, false);
}

export function EventSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventId': !exists(json, 'eventId') ? undefined : json['eventId'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'masterCatalogId': !exists(json, 'masterCatalogId') ? undefined : json['masterCatalogId'],
        'catalogId': !exists(json, 'catalogId') ? undefined : json['catalogId'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'entityId': !exists(json, 'entityId') ? undefined : json['entityId'],
        'topic': !exists(json, 'topic') ? undefined : json['topic'],
        'extendedProperties': !exists(json, 'extendedProperties') ? undefined : (json['extendedProperties'] === null ? null : (json['extendedProperties'] as Array<any>).map(EventExtendedPropertyFromJSON)),
        'correlationId': !exists(json, 'correlationId') ? undefined : json['correlationId'],
        'createDate': !exists(json, 'createDate') ? undefined : (json['createDate'] === null ? null : new Date(json['createDate'])),
    };
}

export function EventSummaryToJSON(value?: EventSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventId': value.eventId,
        'tenantId': value.tenantId,
        'masterCatalogId': value.masterCatalogId,
        'catalogId': value.catalogId,
        'siteId': value.siteId,
        'entityId': value.entityId,
        'topic': value.topic,
        'extendedProperties': value.extendedProperties === undefined ? undefined : (value.extendedProperties === null ? null : (value.extendedProperties as Array<any>).map(EventExtendedPropertyToJSON)),
        'correlationId': value.correlationId,
        'createDate': value.createDate === undefined ? undefined : (value.createDate === null ? null : value.createDate.toISOString()),
    };
}

