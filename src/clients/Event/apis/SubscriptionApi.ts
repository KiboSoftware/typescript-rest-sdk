/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EventDeliverySummary,
  EventDeliverySummaryCollection,
  EventSubscriptionCollection,
} from '../models';


export namespace subscriptionApiParams { 
    export interface GetDeliveryAttemptSummariesRequest {
        subscriptionId: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface GetDeliveryAttemptSummariesAllSubscriptionsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface GetDeliveryAttemptSummaryRequest {
        subscriptionId: string;
        processId: number;
        responseFields?: string;
    }
    export interface GetSubscriptionsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseGroups?: string;
        responseFields?: string;
    }
}
/**
* SubscriptionApiService - interface
* 
* @export
* @interface SubscriptionApi
*/
export interface SubscriptionApiService {
    /**
    * Get delivery attempts for the specified subscription
    * @summary Get Delivery Attempt Summaries
    * @param {string} subscriptionId Subscription Identifier.
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getDeliveryAttemptSummariesRaw(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummaryCollection>>;

    /**
    * Get delivery attempts for the specified subscription
    * Get Delivery Attempt Summaries
    */
    getDeliveryAttemptSummaries(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummaryCollection>;

    /**
    * Get delivery attempts
    * @summary Get Delivery Attempt Summaries All Subscriptions
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getDeliveryAttemptSummariesAllSubscriptionsRaw(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesAllSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummaryCollection>>;

    /**
    * Get delivery attempts
    * Get Delivery Attempt Summaries All Subscriptions
    */
    getDeliveryAttemptSummariesAllSubscriptions(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesAllSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummaryCollection>;

    /**
    * Get delivery attempt summary
    * @summary Get Delivery Attempt Summary
    * @param {string} subscriptionId 
    * @param {number} processId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getDeliveryAttemptSummaryRaw(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummary>>;

    /**
    * Get delivery attempt summary
    * Get Delivery Attempt Summary
    */
    getDeliveryAttemptSummary(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummary>;

    /**
    * Retrieves a list of events according to any specified filter criteria and sort options.
    * @summary Get Subscriptions
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [responseGroups] Used to get more specific information from the request.  Available response groups: SubscribingSites.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SubscriptionApiInterface
    */
    getSubscriptionsRaw(requestParameters: subscriptionApiParams.GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventSubscriptionCollection>>;

    /**
    * Retrieves a list of events according to any specified filter criteria and sort options.
    * Get Subscriptions
    */
    getSubscriptions(requestParameters: subscriptionApiParams.GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventSubscriptionCollection>;

}


/**
 * 
 */
export class SubscriptionApi extends runtime.BaseAPI implements SubscriptionApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get delivery attempts for the specified subscription
     * Get Delivery Attempt Summaries
     */


    async getDeliveryAttemptSummariesRaw(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummaryCollection>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getDeliveryAttemptSummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/event/push/subscriptions/{subscriptionId}/deliveryattempts`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get delivery attempts for the specified subscription
     * Get Delivery Attempt Summaries
     */
    async getDeliveryAttemptSummaries(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummaryCollection> {
        const response = await this.getDeliveryAttemptSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get delivery attempts
     * Get Delivery Attempt Summaries All Subscriptions
     */


    async getDeliveryAttemptSummariesAllSubscriptionsRaw(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesAllSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummaryCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/event/push/subscriptions/deliveryattempts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get delivery attempts
     * Get Delivery Attempt Summaries All Subscriptions
     */
    async getDeliveryAttemptSummariesAllSubscriptions(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummariesAllSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummaryCollection> {
        const response = await this.getDeliveryAttemptSummariesAllSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get delivery attempt summary
     * Get Delivery Attempt Summary
     */


    async getDeliveryAttemptSummaryRaw(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummary>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getDeliveryAttemptSummary.');
        }

        if (requestParameters.processId === null || requestParameters.processId === undefined) {
            throw new runtime.RequiredError('processId','Required parameter requestParameters.processId was null or undefined when calling getDeliveryAttemptSummary.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/event/push/subscriptions/{subscriptionId}/deliveryattempts/{processId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"processId"}}`, encodeURIComponent(String(requestParameters.processId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get delivery attempt summary
     * Get Delivery Attempt Summary
     */
    async getDeliveryAttemptSummary(requestParameters: subscriptionApiParams.GetDeliveryAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummary> {
        const response = await this.getDeliveryAttemptSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of events according to any specified filter criteria and sort options.
     * Get Subscriptions
     */


    async getSubscriptionsRaw(requestParameters: subscriptionApiParams.GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventSubscriptionCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/event/push/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of events according to any specified filter criteria and sort options.
     * Get Subscriptions
     */
    async getSubscriptions(requestParameters: subscriptionApiParams.GetSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventSubscriptionCollection> {
        const response = await this.getSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
