/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Event Service
 * OpenAPI Spec for Kibo Event Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EventDeliverySummary,
  EventDeliverySummaryCollection,
  SubscriptionCollection,
} from '../models';
import {
    EventDeliverySummaryFromJSON,
    EventDeliverySummaryToJSON,
    EventDeliverySummaryCollectionFromJSON,
    EventDeliverySummaryCollectionToJSON,
    SubscriptionCollectionFromJSON,
    SubscriptionCollectionToJSON,
} from '../models';

export interface SubscriptionApiGetDeliveryAttemptSummariesRequest {
    subscriptionId: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface SubscriptionApiGetDeliveryAttemptSummaryRequest {
    subscriptionId: string;
    id: string;
    processId?: number;
}

export interface SubscriptionApiGetSubscriptionsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
}

/**
 * 
 */
export class SubscriptionApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get delivery attempts
     * Get Delivery Attempt Summaries
     */


    async getDeliveryAttemptSummariesRaw(requestParameters: SubscriptionApiGetDeliveryAttemptSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummaryCollection>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getDeliveryAttemptSummaries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/push/subscriptions/{subscriptionId}/deliveryattempts`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDeliverySummaryCollectionFromJSON(jsonValue));
    }

    /**
     * Get delivery attempts
     * Get Delivery Attempt Summaries
     */
    async getDeliveryAttemptSummaries(requestParameters: SubscriptionApiGetDeliveryAttemptSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummaryCollection> {
        const response = await this.getDeliveryAttemptSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get delivery attempt summary
     * Get Delivery Attempt Summary
     */


    async getDeliveryAttemptSummaryRaw(requestParameters: SubscriptionApiGetDeliveryAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDeliverySummary>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getDeliveryAttemptSummary.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeliveryAttemptSummary.');
        }

        const queryParameters: any = {};

        if (requestParameters.processId !== undefined) {
            queryParameters['processId'] = requestParameters.processId;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/push/subscriptions/{subscriptionId}/deliveryattempts/{id}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDeliverySummaryFromJSON(jsonValue));
    }

    /**
     * Get delivery attempt summary
     * Get Delivery Attempt Summary
     */
    async getDeliveryAttemptSummary(requestParameters: SubscriptionApiGetDeliveryAttemptSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDeliverySummary> {
        const response = await this.getDeliveryAttemptSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of events according to any specified filter criteria and sort options.
     * Get Subscriptions
     */


    async getSubscriptionsRaw(requestParameters: SubscriptionApiGetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/event/push/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of events according to any specified filter criteria and sort options.
     * Get Subscriptions
     */
    async getSubscriptions(requestParameters: SubscriptionApiGetSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionCollection> {
        const response = await this.getSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
