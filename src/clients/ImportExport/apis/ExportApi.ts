/* tslint:disable */
/* eslint-disable */
/**
 * Kibo MongoAdmin Service
 * OpenAPI Spec for Kibo MongoAdmin Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ExportJob,
} from '../models';

export interface ExportApiDeleteRequest {
    id: string;
}

export interface ExportApiCreateRequest {
    responseFields?: string;
    exportJob?: ExportJob;
}

export interface ExportApiGetRequest {
    id: string;
    responseFields?: string;
}

export interface ExportApiListRequest {
    startIndex?: number;
    pageSize?: number;
    filter?: string;
    responseFields?: string;
}

/**
 * ExportApi - interface
 * 
 * @export
 * @interface ExportApiInterface
 */
export interface ExportApiInterface {
    /**
     * Delete
     * @summary Delete
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    _deleteRaw(requestParameters: ExportApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete
     * Delete
     */
    _delete(requestParameters: ExportApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create
     * @summary Create
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ExportJob} [exportJob] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    createRaw(requestParameters: ExportApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportJob>>;

    /**
     * Create
     * Create
     */
    create(requestParameters: ExportApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportJob>;

    /**
     * Get
     * @summary Get
     * @param {string} id 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    getRaw(requestParameters: ExportApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportJob>>;

    /**
     * Get
     * Get
     */
    get(requestParameters: ExportApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportJob>;

    /**
     * List
     * @summary List
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApiInterface
     */
    listRaw(requestParameters: ExportApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExportJob>>>;

    /**
     * List
     * List
     */
    list(requestParameters: ExportApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExportJob>>;

}

/**
 * 
 */
export class ExportApi extends runtime.BaseAPI implements ExportApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Delete
     * Delete
     */


    async _deleteRaw(requestParameters: ExportApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/data/export/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete
     * Delete
     */
    async _delete(requestParameters: ExportApiDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._deleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create
     * Create
     */


    async createRaw(requestParameters: ExportApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportJob>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/data/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.exportJob,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create
     * Create
     */
    async create(requestParameters: ExportApiCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportJob> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get
     * Get
     */


    async getRaw(requestParameters: ExportApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportJob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/data/export/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get
     * Get
     */
    async get(requestParameters: ExportApiGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportJob> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List
     * List
     */


    async listRaw(requestParameters: ExportApiListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExportJob>>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/data/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * List
     * List
     */
    async list(requestParameters: ExportApiListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExportJob>> {
        const response = await this.listRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
