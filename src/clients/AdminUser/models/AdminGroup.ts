/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface AdminGroup
 */
export interface AdminGroup {
    /**
     * User Group Id
     * @type {string}
     * @memberof AdminGroup
     */
    groupCode?: string | null;
    /**
     * Scope Type Id
     * @type {number}
     * @memberof AdminGroup
     */
    scopeTypeId?: number;
    /**
     * Scope Id
     * @type {number}
     * @memberof AdminGroup
     */
    scopeId?: number;
    /**
     * Human-readable Name of the group
     * @type {string}
     * @memberof AdminGroup
     */
    name?: string | null;
    /**
     * Human-readable description of the group
     * @type {string}
     * @memberof AdminGroup
     */
    description?: string | null;
    /**
     * Users associate with a group
     * @type {Array<User>}
     * @memberof AdminGroup
     */
    users?: Array<User> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof AdminGroup
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the AdminGroup interface.
 */
export function instanceOfAdminGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AdminGroupFromJSON(json: any): AdminGroup {
    return AdminGroupFromJSONTyped(json, false);
}

export function AdminGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupCode': !exists(json, 'groupCode') ? undefined : json['groupCode'],
        'scopeTypeId': !exists(json, 'scopeTypeId') ? undefined : json['scopeTypeId'],
        'scopeId': !exists(json, 'scopeId') ? undefined : json['scopeId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'users': !exists(json, 'users') ? undefined : (json['users'] === null ? null : (json['users'] as Array<any>).map(UserFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function AdminGroupToJSON(value?: AdminGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groupCode': value.groupCode,
        'scopeTypeId': value.scopeTypeId,
        'scopeId': value.scopeId,
        'name': value.name,
        'description': value.description,
        'users': value.users === undefined ? undefined : (value.users === null ? null : (value.users as Array<any>).map(UserToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

