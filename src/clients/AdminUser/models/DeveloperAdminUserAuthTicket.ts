/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DeveloperAccount } from './DeveloperAccount';
import {
    DeveloperAccountFromJSON,
    DeveloperAccountFromJSONTyped,
    DeveloperAccountToJSON,
} from './DeveloperAccount';
import type { UserProfile } from './UserProfile';
import {
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
} from './UserProfile';

/**
 * 
 * @export
 * @interface DeveloperAdminUserAuthTicket
 */
export interface DeveloperAdminUserAuthTicket {
    /**
     * 
     * @type {UserProfile}
     * @memberof DeveloperAdminUserAuthTicket
     */
    user?: UserProfile;
    /**
     * 
     * @type {Date}
     * @memberof DeveloperAdminUserAuthTicket
     */
    createdOn?: Date;
    /**
     * 
     * @type {string}
     * @memberof DeveloperAdminUserAuthTicket
     */
    jwtAccessToken?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeveloperAdminUserAuthTicket
     */
    accessToken?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof DeveloperAdminUserAuthTicket
     */
    accessTokenExpiration?: Date;
    /**
     * 
     * @type {string}
     * @memberof DeveloperAdminUserAuthTicket
     */
    refreshToken?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof DeveloperAdminUserAuthTicket
     */
    refreshTokenExpiration?: Date;
    /**
     * 
     * @type {DeveloperAccount}
     * @memberof DeveloperAdminUserAuthTicket
     */
    account?: DeveloperAccount;
    /**
     * 
     * @type {Array<DeveloperAccount>}
     * @memberof DeveloperAdminUserAuthTicket
     */
    availableAccounts?: Array<DeveloperAccount> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof DeveloperAdminUserAuthTicket
     */
    grantedBehaviors?: Array<number> | null;
}

/**
 * Check if a given object implements the DeveloperAdminUserAuthTicket interface.
 */
export function instanceOfDeveloperAdminUserAuthTicket(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeveloperAdminUserAuthTicketFromJSON(json: any): DeveloperAdminUserAuthTicket {
    return DeveloperAdminUserAuthTicketFromJSONTyped(json, false);
}

export function DeveloperAdminUserAuthTicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeveloperAdminUserAuthTicket {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'user': !exists(json, 'user') ? undefined : UserProfileFromJSON(json['user']),
        'createdOn': !exists(json, 'createdOn') ? undefined : (new Date(json['createdOn'])),
        'jwtAccessToken': !exists(json, 'jwtAccessToken') ? undefined : json['jwtAccessToken'],
        'accessToken': !exists(json, 'accessToken') ? undefined : json['accessToken'],
        'accessTokenExpiration': !exists(json, 'accessTokenExpiration') ? undefined : (new Date(json['accessTokenExpiration'])),
        'refreshToken': !exists(json, 'refreshToken') ? undefined : json['refreshToken'],
        'refreshTokenExpiration': !exists(json, 'refreshTokenExpiration') ? undefined : (new Date(json['refreshTokenExpiration'])),
        'account': !exists(json, 'account') ? undefined : DeveloperAccountFromJSON(json['account']),
        'availableAccounts': !exists(json, 'availableAccounts') ? undefined : (json['availableAccounts'] === null ? null : (json['availableAccounts'] as Array<any>).map(DeveloperAccountFromJSON)),
        'grantedBehaviors': !exists(json, 'grantedBehaviors') ? undefined : json['grantedBehaviors'],
    };
}

export function DeveloperAdminUserAuthTicketToJSON(value?: DeveloperAdminUserAuthTicket | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user': UserProfileToJSON(value.user),
        'createdOn': value.createdOn === undefined ? undefined : (value.createdOn.toISOString()),
        'jwtAccessToken': value.jwtAccessToken,
        'accessToken': value.accessToken,
        'accessTokenExpiration': value.accessTokenExpiration === undefined ? undefined : (value.accessTokenExpiration.toISOString()),
        'refreshToken': value.refreshToken,
        'refreshTokenExpiration': value.refreshTokenExpiration === undefined ? undefined : (value.refreshTokenExpiration.toISOString()),
        'account': DeveloperAccountToJSON(value.account),
        'availableAccounts': value.availableAccounts === undefined ? undefined : (value.availableAccounts === null ? null : (value.availableAccounts as Array<any>).map(DeveloperAccountToJSON)),
        'grantedBehaviors': value.grantedBehaviors,
    };
}

