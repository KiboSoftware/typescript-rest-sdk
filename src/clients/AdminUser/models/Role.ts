/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { Behavior } from './Behavior';
import {
    BehaviorFromJSON,
    BehaviorFromJSONTyped,
    BehaviorToJSON,
} from './Behavior';
import type { Owner } from './Owner';
import {
    OwnerFromJSON,
    OwnerFromJSONTyped,
    OwnerToJSON,
} from './Owner';
import type { Resource } from './Resource';
import {
    ResourceFromJSON,
    ResourceFromJSONTyped,
    ResourceToJSON,
} from './Resource';
import type { UserScope } from './UserScope';
import {
    UserScopeFromJSON,
    UserScopeFromJSONTyped,
    UserScopeToJSON,
} from './UserScope';

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    name?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    isSystemRole?: boolean;
    /**
     * 
     * @type {Array<Behavior>}
     * @memberof Role
     */
    behaviors?: Array<Behavior> | null;
    /**
     * 
     * @type {Array<Resource>}
     * @memberof Role
     */
    resources?: Array<Resource> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Role
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    id?: number;
    /**
     * 
     * @type {UserScope}
     * @memberof Role
     */
    userScope?: UserScope;
    /**
     * 
     * @type {Array<Owner>}
     * @memberof Role
     */
    owners?: Array<Owner> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof Role
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'isSystemRole': !exists(json, 'isSystemRole') ? undefined : json['isSystemRole'],
        'behaviors': !exists(json, 'behaviors') ? undefined : (json['behaviors'] === null ? null : (json['behaviors'] as Array<any>).map(BehaviorFromJSON)),
        'resources': !exists(json, 'resources') ? undefined : (json['resources'] === null ? null : (json['resources'] as Array<any>).map(ResourceFromJSON)),
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'userScope': !exists(json, 'userScope') ? undefined : UserScopeFromJSON(json['userScope']),
        'owners': !exists(json, 'owners') ? undefined : (json['owners'] === null ? null : (json['owners'] as Array<any>).map(OwnerFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function RoleToJSON(value?: Role | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'isSystemRole': value.isSystemRole,
        'behaviors': value.behaviors === undefined ? undefined : (value.behaviors === null ? null : (value.behaviors as Array<any>).map(BehaviorToJSON)),
        'resources': value.resources === undefined ? undefined : (value.resources === null ? null : (value.resources as Array<any>).map(ResourceToJSON)),
        'tags': value.tags,
        'id': value.id,
        'userScope': UserScopeToJSON(value.userScope),
        'owners': value.owners === undefined ? undefined : (value.owners === null ? null : (value.owners as Array<any>).map(OwnerToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

