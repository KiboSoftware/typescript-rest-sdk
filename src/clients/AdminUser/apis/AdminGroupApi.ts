/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AdminGroup,
  AdminGroupCollection,
} from '../models';
import {
    AdminGroupFromJSON,
    AdminGroupToJSON,
    AdminGroupCollectionFromJSON,
    AdminGroupCollectionToJSON,
} from '../models';

export interface AdminGroupApiAddAdminGroupRequest {
    adminGroup?: AdminGroup;
}

export interface AdminGroupApiAddUsersRequest {
    groupCode: string;
    requestBody?: Array<string>;
}

export interface AdminGroupApiDeleteAdminGroupRequest {
    groupCode: string;
}

export interface AdminGroupApiGetAdminGroupRequest {
    groupCode: string;
}

export interface AdminGroupApiGetAdminGroupsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface AdminGroupApiRemoveUsersRequest {
    groupCode: string;
    requestBody?: Array<string>;
}

export interface AdminGroupApiUpdateAdminGroupRequest {
    groupCode: string;
    adminGroup?: AdminGroup;
}

/**
 * 
 */
export class AdminGroupApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add a admin group
     * Add a admin group
     */


    async addAdminGroupRaw(requestParameters: AdminGroupApiAddAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminGroup>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminGroupToJSON(requestParameters.adminGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminGroupFromJSON(jsonValue));
    }

    /**
     * Add a admin group
     * Add a admin group
     */
    async addAdminGroup(requestParameters: AdminGroupApiAddAdminGroupRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminGroup> {
        const response = await this.addAdminGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add users to admin group
     * Add users to admin group
     */


    async addUsersRaw(requestParameters: AdminGroupApiAddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminGroup>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling addUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups/{groupCode}/addusers`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminGroupFromJSON(jsonValue));
    }

    /**
     * Add users to admin group
     * Add users to admin group
     */
    async addUsers(requestParameters: AdminGroupApiAddUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminGroup> {
        const response = await this.addUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Admin Group
     * Deletes a Admin Group
     */


    async deleteAdminGroupRaw(requestParameters: AdminGroupApiDeleteAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling deleteAdminGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Admin Group
     * Deletes a Admin Group
     */
    async deleteAdminGroup(requestParameters: AdminGroupApiDeleteAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a Admin group by id
     * Get Admin Group
     */


    async getAdminGroupRaw(requestParameters: AdminGroupApiGetAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminGroup>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling getAdminGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminGroupFromJSON(jsonValue));
    }

    /**
     * Gets a Admin group by id
     * Get Admin Group
     */
    async getAdminGroup(requestParameters: AdminGroupApiGetAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminGroup> {
        const response = await this.getAdminGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a collection of user groups
     * Get Admin Groups
     */


    async getAdminGroupsRaw(requestParameters: AdminGroupApiGetAdminGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminGroupCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminGroupCollectionFromJSON(jsonValue));
    }

    /**
     * Gets a collection of user groups
     * Get Admin Groups
     */
    async getAdminGroups(requestParameters: AdminGroupApiGetAdminGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminGroupCollection> {
        const response = await this.getAdminGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove users from admin group
     * Remove users from admin group
     */


    async removeUsersRaw(requestParameters: AdminGroupApiRemoveUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling removeUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups/{groupCode}/removeusers`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove users from admin group
     * Remove users from admin group
     */
    async removeUsers(requestParameters: AdminGroupApiRemoveUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUsersRaw(requestParameters, initOverrides);
    }

    /**
     * Update an existing adminGroup
     * Update an existing adminGroup
     */


    async updateAdminGroupRaw(requestParameters: AdminGroupApiUpdateAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminGroup>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling updateAdminGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/groups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdminGroupToJSON(requestParameters.adminGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminGroupFromJSON(jsonValue));
    }

    /**
     * Update an existing adminGroup
     * Update an existing adminGroup
     */
    async updateAdminGroup(requestParameters: AdminGroupApiUpdateAdminGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminGroup> {
        const response = await this.updateAdminGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
