/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ChangeUserPasswordInfo,
  PasswordInfo,
  ResetPasswordInfo,
  TenantCollection,
  User,
  UserRoleCollection,
} from '../models';
import {
    ChangeUserPasswordInfoFromJSON,
    ChangeUserPasswordInfoToJSON,
    PasswordInfoFromJSON,
    PasswordInfoToJSON,
    ResetPasswordInfoFromJSON,
    ResetPasswordInfoToJSON,
    TenantCollectionFromJSON,
    TenantCollectionToJSON,
    UserFromJSON,
    UserToJSON,
    UserRoleCollectionFromJSON,
    UserRoleCollectionToJSON,
} from '../models';

export interface AdminUserApiAddUserRoleRequest {
    userId: string;
    roleId: number;
}

export interface AdminUserApiChangePasswordRequest {
    userId: string;
    passwordInfo?: PasswordInfo;
}

export interface AdminUserApiChangeUserPasswordRequest {
    userId: string;
    changeUserPasswordInfo?: ChangeUserPasswordInfo;
}

export interface AdminUserApiCreateUserRequest {
    user?: User;
}

export interface AdminUserApiDeleteUserRequest {
    userId: string;
}

export interface AdminUserApiGetTenantScopesForUserRequest {
    userId: string;
}

export interface AdminUserApiGetUserRequest {
    userId: string;
}

export interface AdminUserApiGetUserByIdRequest {
    userId: string;
    responseGroups?: string;
}

export interface AdminUserApiGetUserRolesRequest {
    userId: string;
}

export interface AdminUserApiGetUsersRequest {
    emailAddress?: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
}

export interface AdminUserApiRemoveUserRoleRequest {
    userId: string;
    roleId: number;
}

export interface AdminUserApiResetPasswordRequest {
    resetPasswordInfo?: ResetPasswordInfo;
}

export interface AdminUserApiUnlockUserRequest {
    userId: string;
}

export interface AdminUserApiUpdateUserRequest {
    userId: string;
    user?: User;
}

/**
 * 
 */
export class AdminUserApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a role to the specified user\'s Admin account.
     * Add User Role
     */


    async addUserRoleRaw(requestParameters: AdminUserApiAddUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addUserRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/roles/{roleId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a role to the specified user\'s Admin account.
     * Add User Role
     */
    async addUserRole(requestParameters: AdminUserApiAddUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserRoleRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Changes a user\'s password
     */


    async changePasswordRaw(requestParameters: AdminUserApiChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/Change-Password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordInfoToJSON(requestParameters.passwordInfo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Changes a user\'s password
     */
    async changePassword(requestParameters: AdminUserApiChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Changes a user\'s password to the provided new password
     * Change User Password
     */


    async changeUserPasswordRaw(requestParameters: AdminUserApiChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling changeUserPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/Change-User-Password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUserPasswordInfoToJSON(requestParameters.changeUserPasswordInfo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes a user\'s password to the provided new password
     * Change User Password
     */
    async changeUserPassword(requestParameters: AdminUserApiChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeUserPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new user
     * Creates a new user
     */


    async createUserRaw(requestParameters: AdminUserApiCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Creates a new user
     * Creates a new user
     */
    async createUser(requestParameters: AdminUserApiCreateUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a user account from the site.
     * Delete User
     */


    async deleteUserRaw(requestParameters: AdminUserApiDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user account from the site.
     * Delete User
     */
    async deleteUser(requestParameters: AdminUserApiDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Get tenant scope for users
     * Get tenant scope for users
     */


    async getTenantScopesForUserRaw(requestParameters: AdminUserApiGetTenantScopesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantCollection>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getTenantScopesForUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/tenants`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantCollectionFromJSON(jsonValue));
    }

    /**
     * Get tenant scope for users
     * Get tenant scope for users
     */
    async getTenantScopesForUser(requestParameters: AdminUserApiGetTenantScopesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantCollection> {
        const response = await this.getTenantScopesForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User
     */


    async getUserRaw(requestParameters: AdminUserApiGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User
     */
    async getUser(requestParameters: AdminUserApiGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User By Id
     */


    async getUserByIdRaw(requestParameters: AdminUserApiGetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserById.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/userbyid`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User By Id
     */
    async getUserById(requestParameters: AdminUserApiGetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the roles for a specified user on the specified tenant.
     * Get User Roles
     */


    async getUserRolesRaw(requestParameters: AdminUserApiGetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserRoleCollection>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/roles`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserRoleCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves all the roles for a specified user on the specified tenant.
     * Get User Roles
     */
    async getUserRoles(requestParameters: AdminUserApiGetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserRoleCollection> {
        const response = await this.getUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.
     * Get Users
     */


    async getUsersRaw(requestParameters: AdminUserApiGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.
     * Get Users
     */
    async getUsers(requestParameters: AdminUserApiGetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getUsersRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a role from the specified Admin account.
     * Remove User Role
     */


    async removeUserRoleRaw(requestParameters: AdminUserApiRemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeUserRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/roles/{roleId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a role from the specified Admin account.
     * Remove User Role
     */
    async removeUserRole(requestParameters: AdminUserApiRemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the password for a user specified by email address.
     * Reset Password
     */


    async resetPasswordRaw(requestParameters: AdminUserApiResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/Reset-Password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordInfoToJSON(requestParameters.resetPasswordInfo),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the password for a user specified by email address.
     * Reset Password
     */
    async resetPassword(requestParameters: AdminUserApiResetPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Enables the user
     */


    async unlockUserRaw(requestParameters: AdminUserApiUnlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling unlockUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/unlock`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Enables the user
     */
    async unlockUser(requestParameters: AdminUserApiUnlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlockUserRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies user information for a specified user.
     * Update User
     */


    async updateUserRaw(requestParameters: AdminUserApiUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Modifies user information for a specified user.
     * Update User
     */
    async updateUser(requestParameters: AdminUserApiUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
