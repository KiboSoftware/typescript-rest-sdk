/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AdminUserPasswordInfo,
  AdminUserResetPasswordInfo,
  AdminUserUserRoleCollection,
  ChangeUserPasswordInfo,
  TenantCollection,
  User,
} from '../models';

export interface AddUserRoleRequest {
    userId: string;
    roleId: number;
    responseFields?: string;
}

export interface ChangePasswordRequest {
    userId: string;
    responseFields?: string;
    adminUserPasswordInfo?: AdminUserPasswordInfo;
}

export interface ChangeUserPasswordRequest {
    userId: string;
    responseFields?: string;
    changeUserPasswordInfo?: ChangeUserPasswordInfo;
}

export interface CreateUserRequest {
    responseFields?: string;
    user?: User;
}

export interface DeleteUserRequest {
    userId: string;
}

export interface GetTenantScopesForUserRequest {
    userId: string;
    responseFields?: string;
}

export interface GetUserRequest {
    userId: string;
    responseFields?: string;
}

export interface GetUserByIdRequest {
    userId: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface GetUserRolesRequest {
    userId: string;
    responseFields?: string;
}

export interface GetUsersRequest {
    emailAddress?: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface RemoveUserRoleRequest {
    userId: string;
    roleId: number;
}

export interface ResetPasswordRequest {
    responseFields?: string;
    adminUserResetPasswordInfo?: AdminUserResetPasswordInfo;
}

export interface UnlockUserRequest {
    userId: string;
    responseFields?: string;
}

export interface UpdateUserRequest {
    userId: string;
    responseFields?: string;
    user?: User;
}

/**
 * AdminUserApi - interface
 * 
 * @export
 * @interface AdminUserApiInterface
 */
export interface AdminUserApiInterface {
    /**
     * Adds a role to the specified user\'s Admin account.
     * @summary Add User Role
     * @param {string} userId Unique identifier of the user who receives the role.
     * @param {number} roleId Unique identifier of the role to add.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    addUserRoleRaw(requestParameters: AddUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Adds a role to the specified user\'s Admin account.
     * Add User Role
     */
    addUserRole(requestParameters: AddUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Changes a user\'s password
     * @param {string} userId Unique identifier of the user for whom to change the password.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AdminUserPasswordInfo} [adminUserPasswordInfo] Old password and new password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Changes a user\'s password
     */
    changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Changes a user\'s password to the provided new password
     * @summary Change User Password
     * @param {string} userId Unique identifier of the user for whom to change the password.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ChangeUserPasswordInfo} [changeUserPasswordInfo] New password info for this user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Changes a user\'s password to the provided new password
     * Change User Password
     */
    changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Creates a new user
     * @summary Creates a new user
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {User} [user] The user to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Creates a new user
     * Creates a new user
     */
    createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * Removes a user account from the site.
     * @summary Delete User
     * @param {string} userId Unique identifier of the user account to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a user account from the site.
     * Delete User
     */
    deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get tenant scope for users
     * @summary Get tenant scope for users
     * @param {string} userId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    getTenantScopesForUserRaw(requestParameters: GetTenantScopesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantCollection>>;

    /**
     * Get tenant scope for users
     * Get tenant scope for users
     */
    getTenantScopesForUser(requestParameters: GetTenantScopesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantCollection>;

    /**
     * Retrieves the details of a user specified by user ID.
     * @summary Get User
     * @param {string} userId Unique identifier of the user whose details you want to view.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User
     */
    getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * Retrieves the details of a user specified by user ID.
     * @summary Get User By Id
     * @param {string} userId Unique identifier of the user whose details you want to view.
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User By Id
     */
    getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * Retrieves all the roles for a specified user on the specified tenant.
     * @summary Get User Roles
     * @param {string} userId Unique identifier of the user.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    getUserRolesRaw(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserUserRoleCollection>>;

    /**
     * Retrieves all the roles for a specified user on the specified tenant.
     * Get User Roles
     */
    getUserRoles(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserUserRoleCollection>;

    /**
     * Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.
     * @summary Get Users
     * @param {string} [emailAddress] 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.
     * Get Users
     */
    getUsers(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Removes a role from the specified Admin account.
     * @summary Remove User Role
     * @param {string} userId Unique identifier of the user with the role to delete.
     * @param {number} roleId Unique identifer of the role to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    removeUserRoleRaw(requestParameters: RemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a role from the specified Admin account.
     * Remove User Role
     */
    removeUserRole(requestParameters: RemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Resets the password for a user specified by email address.
     * @summary Reset Password
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AdminUserResetPasswordInfo} [adminUserResetPasswordInfo] Email address of the user who has requested a password reset.               Note that the site ID is passed in the request header.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Resets the password for a user specified by email address.
     * Reset Password
     */
    resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Enables the user
     * @param {string} userId The user id.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    unlockUserRaw(requestParameters: UnlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Enables the user
     */
    unlockUser(requestParameters: UnlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Modifies user information for a specified user.
     * @summary Update User
     * @param {string} userId Unique identifier of the user whose login information you want to change.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {User} [user] Details of the new user account. Required properties: EmailAddress, FirstName, LastName, and Password. Note that the site ID is passed in the request header.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApiInterface
     */
    updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * Modifies user information for a specified user.
     * Update User
     */
    updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

}

/**
 * 
 */
export class AdminUserApi extends runtime.BaseAPI implements AdminUserApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a role to the specified user\'s Admin account.
     * Add User Role
     */


    async addUserRoleRaw(requestParameters: AddUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addUserRole.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/roles/{roleId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a role to the specified user\'s Admin account.
     * Add User Role
     */
    async addUserRole(requestParameters: AddUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserRoleRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Changes a user\'s password
     */


    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/Change-Password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.adminUserPasswordInfo,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Changes a user\'s password
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Changes a user\'s password to the provided new password
     * Change User Password
     */


    async changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling changeUserPassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/Change-User-Password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.changeUserPasswordInfo,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes a user\'s password to the provided new password
     * Change User Password
     */
    async changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeUserPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new user
     * Creates a new user
     */


    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.user,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new user
     * Creates a new user
     */
    async createUser(requestParameters: CreateUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a user account from the site.
     * Delete User
     */


    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user account from the site.
     * Delete User
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Get tenant scope for users
     * Get tenant scope for users
     */


    async getTenantScopesForUserRaw(requestParameters: GetTenantScopesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantCollection>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getTenantScopesForUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/tenants`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get tenant scope for users
     * Get tenant scope for users
     */
    async getTenantScopesForUser(requestParameters: GetTenantScopesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantCollection> {
        const response = await this.getTenantScopesForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User
     */


    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User By Id
     */


    async getUserByIdRaw(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserById.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/userbyid`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a user specified by user ID.
     * Get User By Id
     */
    async getUserById(requestParameters: GetUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all the roles for a specified user on the specified tenant.
     * Get User Roles
     */


    async getUserRolesRaw(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserUserRoleCollection>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/roles`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all the roles for a specified user on the specified tenant.
     * Get User Roles
     */
    async getUserRoles(requestParameters: GetUserRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserUserRoleCollection> {
        const response = await this.getUserRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.
     * Get Users
     */


    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieves a list of Admin users for a specified site according to any specified filter criteria and sort options.
     * Get Users
     */
    async getUsers(requestParameters: GetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getUsersRaw(requestParameters, initOverrides);
    }

    /**
     * Removes a role from the specified Admin account.
     * Remove User Role
     */


    async removeUserRoleRaw(requestParameters: RemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeUserRole.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeUserRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/roles/{roleId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a role from the specified Admin account.
     * Remove User Role
     */
    async removeUserRole(requestParameters: RemoveUserRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUserRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Resets the password for a user specified by email address.
     * Reset Password
     */


    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/Reset-Password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.adminUserResetPasswordInfo,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Resets the password for a user specified by email address.
     * Reset Password
     */
    async resetPassword(requestParameters: ResetPasswordRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Enables the user
     */


    async unlockUserRaw(requestParameters: UnlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling unlockUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}/unlock`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Enables the user
     */
    async unlockUser(requestParameters: UnlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlockUserRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies user information for a specified user.
     * Update User
     */


    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/accounts/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.user,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies user information for a specified user.
     * Update User
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
