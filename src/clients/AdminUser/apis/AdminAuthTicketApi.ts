/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  TenantAdminUserAuthTicket,
  UserAuthInfo,
} from '../models';


export namespace adminAuthTicketApiParams { 
    export interface CreateUserAuthTicketRequest {
        tenantId?: number;
        responseFields?: string;
        userAuthInfo?: UserAuthInfo;
    }
    export interface CreateUserAuthTicketWithWsFedRequest {
        id: string;
        scopeid?: number;
        scopeType?: string;
        responseFields?: string;
    }
    export interface DeleteUserAuthTicketRequest {
        refreshToken?: string;
    }
    export interface GetWsFedChallengeUrlRequest {
        id: string;
        scopeid?: number;
        scopeType?: string;
        redirect?: string;
        responseFields?: string;
    }
    export interface GetWsFedSignOutUrlRequest {
        id: string;
        redirect?: string;
        responseFields?: string;
    }
    export interface RefreshAuthTicketRequest {
        tenantId?: number;
        responseFields?: string;
        tenantAdminUserAuthTicket?: TenantAdminUserAuthTicket;
    }
}
/**
* AdminAuthTicketApiService - interface
* 
* @export
* @interface AdminAuthTicketApi
*/
export interface AdminAuthTicketApiService {
    /**
    * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
    * @summary Create User Auth Ticket
    * @param {number} [tenantId] Optional tenant Id parameter
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {UserAuthInfo} [userAuthInfo] User\&#39;s email address and password.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AdminAuthTicketApiInterface
    */
    createUserAuthTicketRaw(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>>;

    /**
    * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
    * Create User Auth Ticket
    */
    createUserAuthTicket(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket>;

    /**
    * Create User Auth Ticket With Ws Fed
    * @summary Create User Auth Ticket With Ws Fed
    * @param {string} id 
    * @param {number} [scopeid] 
    * @param {string} [scopeType] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AdminAuthTicketApiInterface
    */
    createUserAuthTicketWithWsFedRaw(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketWithWsFedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>>;

    /**
    * Create User Auth Ticket With Ws Fed
    * Create User Auth Ticket With Ws Fed
    */
    createUserAuthTicketWithWsFed(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketWithWsFedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket>;

    /**
    * Logs out a user by deleting the refresh token
    * @summary Delete User Auth Ticket
    * @param {string} [refreshToken] The refresh token to delete.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AdminAuthTicketApiInterface
    */
    deleteUserAuthTicketRaw(requestParameters: adminAuthTicketApiParams.DeleteUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Logs out a user by deleting the refresh token
    * Delete User Auth Ticket
    */
    deleteUserAuthTicket(requestParameters: adminAuthTicketApiParams.DeleteUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get Ws Fed Challenge Url
    * @summary Get Ws Fed Challenge Url
    * @param {string} id 
    * @param {number} [scopeid] 
    * @param {string} [scopeType] 
    * @param {string} [redirect] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AdminAuthTicketApiInterface
    */
    getWsFedChallengeUrlRaw(requestParameters: adminAuthTicketApiParams.GetWsFedChallengeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * Get Ws Fed Challenge Url
    * Get Ws Fed Challenge Url
    */
    getWsFedChallengeUrl(requestParameters: adminAuthTicketApiParams.GetWsFedChallengeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
    * Get Ws Fed Sign Out Url
    * @summary Get Ws Fed Sign Out Url
    * @param {string} id 
    * @param {string} [redirect] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AdminAuthTicketApiInterface
    */
    getWsFedSignOutUrlRaw(requestParameters: adminAuthTicketApiParams.GetWsFedSignOutUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * Get Ws Fed Sign Out Url
    * Get Ws Fed Sign Out Url
    */
    getWsFedSignOutUrl(requestParameters: adminAuthTicketApiParams.GetWsFedSignOutUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
    * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
    * @summary Refresh Auth Ticket
    * @param {number} [tenantId] The tenant to authenticate the user in
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {TenantAdminUserAuthTicket} [tenantAdminUserAuthTicket] An existing valid auth ticket containing the refresh token.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AdminAuthTicketApiInterface
    */
    refreshAuthTicketRaw(requestParameters: adminAuthTicketApiParams.RefreshAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>>;

    /**
    * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
    * Refresh Auth Ticket
    */
    refreshAuthTicket(requestParameters: adminAuthTicketApiParams.RefreshAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket>;

}


/**
 * 
 */
export class AdminAuthTicketApi extends runtime.BaseAPI implements AdminAuthTicketApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
     * Create User Auth Ticket
     */


    async createUserAuthTicketRaw(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.tenantId !== undefined) {
            queryParameters['tenantId'] = requestParameters.tenantId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/authtickets/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.userAuthInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
     * Create User Auth Ticket
     */
    async createUserAuthTicket(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket> {
        const response = await this.createUserAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User Auth Ticket With Ws Fed
     * Create User Auth Ticket With Ws Fed
     */


    async createUserAuthTicketWithWsFedRaw(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketWithWsFedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createUserAuthTicketWithWsFed.');
        }

        const queryParameters: any = {};

        if (requestParameters.scopeid !== undefined) {
            queryParameters['scopeid'] = requestParameters.scopeid;
        }

        if (requestParameters.scopeType !== undefined) {
            queryParameters['scopeType'] = requestParameters.scopeType;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/authtickets/wsfed/auth/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create User Auth Ticket With Ws Fed
     * Create User Auth Ticket With Ws Fed
     */
    async createUserAuthTicketWithWsFed(requestParameters: adminAuthTicketApiParams.CreateUserAuthTicketWithWsFedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket> {
        const response = await this.createUserAuthTicketWithWsFedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs out a user by deleting the refresh token
     * Delete User Auth Ticket
     */


    async deleteUserAuthTicketRaw(requestParameters: adminAuthTicketApiParams.DeleteUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.refreshToken !== undefined) {
            queryParameters['refreshToken'] = requestParameters.refreshToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/authtickets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logs out a user by deleting the refresh token
     * Delete User Auth Ticket
     */
    async deleteUserAuthTicket(requestParameters: adminAuthTicketApiParams.DeleteUserAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserAuthTicketRaw(requestParameters, initOverrides);
    }

    /**
     * Get Ws Fed Challenge Url
     * Get Ws Fed Challenge Url
     */


    async getWsFedChallengeUrlRaw(requestParameters: adminAuthTicketApiParams.GetWsFedChallengeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWsFedChallengeUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.scopeid !== undefined) {
            queryParameters['scopeid'] = requestParameters.scopeid;
        }

        if (requestParameters.scopeType !== undefined) {
            queryParameters['scopeType'] = requestParameters.scopeType;
        }

        if (requestParameters.redirect !== undefined) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/authtickets/wsfed/challenge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Ws Fed Challenge Url
     * Get Ws Fed Challenge Url
     */
    async getWsFedChallengeUrl(requestParameters: adminAuthTicketApiParams.GetWsFedChallengeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getWsFedChallengeUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Ws Fed Sign Out Url
     * Get Ws Fed Sign Out Url
     */


    async getWsFedSignOutUrlRaw(requestParameters: adminAuthTicketApiParams.GetWsFedSignOutUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWsFedSignOutUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.redirect !== undefined) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/authtickets/wsfed/SignOut/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Ws Fed Sign Out Url
     * Get Ws Fed Sign Out Url
     */
    async getWsFedSignOutUrl(requestParameters: adminAuthTicketApiParams.GetWsFedSignOutUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getWsFedSignOutUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
     * Refresh Auth Ticket
     */


    async refreshAuthTicketRaw(requestParameters: adminAuthTicketApiParams.RefreshAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.tenantId !== undefined) {
            queryParameters['tenantId'] = requestParameters.tenantId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/authtickets/tenants`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.tenantAdminUserAuthTicket,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
     * Refresh Auth Ticket
     */
    async refreshAuthTicket(requestParameters: adminAuthTicketApiParams.RefreshAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket> {
        const response = await this.refreshAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
