/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  TenantAdminUserAuthTicket,
  UserAuthInfo,
} from '../models';
import {
    TenantAdminUserAuthTicketFromJSON,
    TenantAdminUserAuthTicketToJSON,
    UserAuthInfoFromJSON,
    UserAuthInfoToJSON,
} from '../models';

export interface AdminAuthTicketApiCreateUserAuthTicketRequest {
    tenantId?: number;
    userAuthInfo?: UserAuthInfo;
}

export interface AdminAuthTicketApiCreateUserAuthTicketWithWsFedRequest {
    id: string;
    scopeid?: number;
    scopeType?: string;
}

export interface AdminAuthTicketApiDeleteUserAuthTicketRequest {
    refreshToken?: string;
}

export interface AdminAuthTicketApiGetWsFedChallengeUrlRequest {
    id: string;
    scopeid?: number;
    scopeType?: string;
    redirect?: string;
}

export interface AdminAuthTicketApiGetWsFedSignOutUrlRequest {
    id: string;
    redirect?: string;
}

export interface AdminAuthTicketApiRefreshAuthTicketRequest {
    tenantId?: number;
    tenantAdminUserAuthTicket?: TenantAdminUserAuthTicket;
}

/**
 * 
 */
export class AdminAuthTicketApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
     * Create User Auth Ticket
     */


    async createUserAuthTicketRaw(requestParameters: AdminAuthTicketApiCreateUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.tenantId !== undefined) {
            queryParameters['tenantId'] = requestParameters.tenantId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/adminuser/authtickets/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAuthInfoToJSON(requestParameters.userAuthInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantAdminUserAuthTicketFromJSON(jsonValue));
    }

    /**
     * Authenticates a user for a particular tenant given a set of user credentials adn a tenantId.
     * Create User Auth Ticket
     */
    async createUserAuthTicket(requestParameters: AdminAuthTicketApiCreateUserAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket> {
        const response = await this.createUserAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User Auth Ticket With Ws Fed
     * Create User Auth Ticket With Ws Fed
     */


    async createUserAuthTicketWithWsFedRaw(requestParameters: AdminAuthTicketApiCreateUserAuthTicketWithWsFedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createUserAuthTicketWithWsFed.');
        }

        const queryParameters: any = {};

        if (requestParameters.scopeid !== undefined) {
            queryParameters['scopeid'] = requestParameters.scopeid;
        }

        if (requestParameters.scopeType !== undefined) {
            queryParameters['scopeType'] = requestParameters.scopeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/adminuser/authtickets/wsfed/auth/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantAdminUserAuthTicketFromJSON(jsonValue));
    }

    /**
     * Create User Auth Ticket With Ws Fed
     * Create User Auth Ticket With Ws Fed
     */
    async createUserAuthTicketWithWsFed(requestParameters: AdminAuthTicketApiCreateUserAuthTicketWithWsFedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket> {
        const response = await this.createUserAuthTicketWithWsFedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs out a user by deleting the refresh token
     * Delete User Auth Ticket
     */


    async deleteUserAuthTicketRaw(requestParameters: AdminAuthTicketApiDeleteUserAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.refreshToken !== undefined) {
            queryParameters['refreshToken'] = requestParameters.refreshToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/adminuser/authtickets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logs out a user by deleting the refresh token
     * Delete User Auth Ticket
     */
    async deleteUserAuthTicket(requestParameters: AdminAuthTicketApiDeleteUserAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserAuthTicketRaw(requestParameters, initOverrides);
    }

    /**
     * Get Ws Fed Challenge Url
     * Get Ws Fed Challenge Url
     */


    async getWsFedChallengeUrlRaw(requestParameters: AdminAuthTicketApiGetWsFedChallengeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWsFedChallengeUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.scopeid !== undefined) {
            queryParameters['scopeid'] = requestParameters.scopeid;
        }

        if (requestParameters.scopeType !== undefined) {
            queryParameters['scopeType'] = requestParameters.scopeType;
        }

        if (requestParameters.redirect !== undefined) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/adminuser/authtickets/wsfed/challenge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Ws Fed Challenge Url
     * Get Ws Fed Challenge Url
     */
    async getWsFedChallengeUrl(requestParameters: AdminAuthTicketApiGetWsFedChallengeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getWsFedChallengeUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Ws Fed Sign Out Url
     * Get Ws Fed Sign Out Url
     */


    async getWsFedSignOutUrlRaw(requestParameters: AdminAuthTicketApiGetWsFedSignOutUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWsFedSignOutUrl.');
        }

        const queryParameters: any = {};

        if (requestParameters.redirect !== undefined) {
            queryParameters['redirect'] = requestParameters.redirect;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/adminuser/authtickets/wsfed/SignOut/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Ws Fed Sign Out Url
     * Get Ws Fed Sign Out Url
     */
    async getWsFedSignOutUrl(requestParameters: AdminAuthTicketApiGetWsFedSignOutUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getWsFedSignOutUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
     * Refresh Auth Ticket
     */


    async refreshAuthTicketRaw(requestParameters: AdminAuthTicketApiRefreshAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantAdminUserAuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.tenantId !== undefined) {
            queryParameters['tenantId'] = requestParameters.tenantId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/adminuser/authtickets/tenants`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantAdminUserAuthTicketToJSON(requestParameters.tenantAdminUserAuthTicket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantAdminUserAuthTicketFromJSON(jsonValue));
    }

    /**
     * Reauthenticates the current user for a different tenant. If the user does not have access to the tenant, the operation fails.
     * Refresh Auth Ticket
     */
    async refreshAuthTicket(requestParameters: AdminAuthTicketApiRefreshAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantAdminUserAuthTicket> {
        const response = await this.refreshAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
