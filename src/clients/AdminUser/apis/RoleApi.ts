/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Admin User Service
 * OpenAPI Spec for Kibo Admin User Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  RoleCollection,
} from '../models';


export namespace roleApiParams { 
    export interface GetRolesRequest {
        startIndex?: number;
        pageSize?: number;
        filter?: string;
        responseFields?: string;
    }
}
/**
* RoleApiService - interface
* 
* @export
* @interface RoleApi
*/
export interface RoleApiService {
    /**
    * Retrieves a list of all roles defined for this tenant.
    * @summary Get Roles
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [filter] Optional filter param to filter the roles
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof RoleApiInterface
    */
    getRolesRaw(requestParameters: roleApiParams.GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleCollection>>;

    /**
    * Retrieves a list of all roles defined for this tenant.
    * Get Roles
    */
    getRoles(requestParameters: roleApiParams.GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleCollection>;

}


/**
 * 
 */
export class RoleApi extends runtime.BaseAPI implements RoleApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves a list of all roles defined for this tenant.
     * Get Roles
     */


    async getRolesRaw(requestParameters: roleApiParams.GetRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/adminuser/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of all roles defined for this tenant.
     * Get Roles
     */
    async getRoles(requestParameters: roleApiParams.GetRolesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleCollection> {
        const response = await this.getRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
