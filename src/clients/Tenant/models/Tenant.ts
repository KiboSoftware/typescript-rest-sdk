/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Tenant Service
 * OpenAPI Spec for Kibo Tenant Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MasterCatalog } from './MasterCatalog';
import {
    MasterCatalogFromJSON,
    MasterCatalogFromJSONTyped,
    MasterCatalogToJSON,
} from './MasterCatalog';
import type { Site } from './Site';
import {
    SiteFromJSON,
    SiteFromJSONTyped,
    SiteToJSON,
} from './Site';
import type { TenantAttribute } from './TenantAttribute';
import {
    TenantAttributeFromJSON,
    TenantAttributeFromJSONTyped,
    TenantAttributeToJSON,
} from './TenantAttribute';

/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {boolean}
     * @memberof Tenant
     */
    isDevTenant?: boolean;
    /**
     * 
     * @type {Array<Site>}
     * @memberof Tenant
     */
    sites?: Array<Site> | null;
    /**
     * 
     * @type {Array<MasterCatalog>}
     * @memberof Tenant
     */
    masterCatalogs?: Array<MasterCatalog> | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    domain?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Tenant
     */
    omsMerchantId?: number | null;
    /**
     * 
     * @type {Array<TenantAttribute>}
     * @memberof Tenant
     */
    attributes?: Array<TenantAttribute> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Tenant
     */
    isUnified?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Tenant
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    name?: string | null;
}

/**
 * Check if a given object implements the Tenant interface.
 */
export function instanceOfTenant(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TenantFromJSON(json: any): Tenant {
    return TenantFromJSONTyped(json, false);
}

export function TenantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Tenant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isDevTenant': !exists(json, 'isDevTenant') ? undefined : json['isDevTenant'],
        'sites': !exists(json, 'sites') ? undefined : (json['sites'] === null ? null : (json['sites'] as Array<any>).map(SiteFromJSON)),
        'masterCatalogs': !exists(json, 'masterCatalogs') ? undefined : (json['masterCatalogs'] === null ? null : (json['masterCatalogs'] as Array<any>).map(MasterCatalogFromJSON)),
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'omsMerchantId': !exists(json, 'omsMerchantId') ? undefined : json['omsMerchantId'],
        'attributes': !exists(json, 'attributes') ? undefined : (json['attributes'] === null ? null : (json['attributes'] as Array<any>).map(TenantAttributeFromJSON)),
        'isUnified': !exists(json, 'isUnified') ? undefined : json['isUnified'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function TenantToJSON(value?: Tenant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isDevTenant': value.isDevTenant,
        'sites': value.sites === undefined ? undefined : (value.sites === null ? null : (value.sites as Array<any>).map(SiteToJSON)),
        'masterCatalogs': value.masterCatalogs === undefined ? undefined : (value.masterCatalogs === null ? null : (value.masterCatalogs as Array<any>).map(MasterCatalogToJSON)),
        'domain': value.domain,
        'omsMerchantId': value.omsMerchantId,
        'attributes': value.attributes === undefined ? undefined : (value.attributes === null ? null : (value.attributes as Array<any>).map(TenantAttributeToJSON)),
        'isUnified': value.isUnified,
        'id': value.id,
        'name': value.name,
    };
}

