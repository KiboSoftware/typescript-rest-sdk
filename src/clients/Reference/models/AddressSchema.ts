/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Reference Service
 * OpenAPI Spec for Kibo Reference Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Field } from './Field';
import {
    FieldFromJSON,
    FieldFromJSONTyped,
    FieldToJSON,
} from './Field';

/**
 * 
 * @export
 * @interface AddressSchema
 */
export interface AddressSchema {
    /**
     * 
     * @type {string}
     * @memberof AddressSchema
     */
    countryCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AddressSchema
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressSchema
     */
    countryLabel?: string | null;
    /**
     * 
     * @type {Array<Field>}
     * @memberof AddressSchema
     */
    fields?: Array<Field> | null;
}

/**
 * Check if a given object implements the AddressSchema interface.
 */
export function instanceOfAddressSchema(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AddressSchemaFromJSON(json: any): AddressSchema {
    return AddressSchemaFromJSONTyped(json, false);
}

export function AddressSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'countryLabel': !exists(json, 'countryLabel') ? undefined : json['countryLabel'],
        'fields': !exists(json, 'fields') ? undefined : (json['fields'] === null ? null : (json['fields'] as Array<any>).map(FieldFromJSON)),
    };
}

export function AddressSchemaToJSON(value?: AddressSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'countryCode': value.countryCode,
        'id': value.id,
        'countryLabel': value.countryLabel,
        'fields': value.fields === undefined ? undefined : (value.fields === null ? null : (value.fields as Array<any>).map(FieldToJSON)),
    };
}

