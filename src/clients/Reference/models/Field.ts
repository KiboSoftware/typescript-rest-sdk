/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Reference Service
 * OpenAPI Spec for Kibo Reference Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldData } from './FieldData';
import {
    FieldDataFromJSON,
    FieldDataFromJSONTyped,
    FieldDataToJSON,
} from './FieldData';

/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    label?: string | null;
    /**
     * 
     * @type {Array<FieldData>}
     * @memberof Field
     */
    data?: Array<FieldData> | null;
    /**
     * 
     * @type {number}
     * @memberof Field
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Field
     */
    order?: number;
}

/**
 * Check if a given object implements the Field interface.
 */
export function instanceOfField(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FieldFromJSON(json: any): Field {
    return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): Field {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'data': !exists(json, 'data') ? undefined : (json['data'] === null ? null : (json['data'] as Array<any>).map(FieldDataFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'order': !exists(json, 'order') ? undefined : json['order'],
    };
}

export function FieldToJSON(value?: Field | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'label': value.label,
        'data': value.data === undefined ? undefined : (value.data === null ? null : (value.data as Array<any>).map(FieldDataToJSON)),
        'id': value.id,
        'order': value.order,
    };
}

