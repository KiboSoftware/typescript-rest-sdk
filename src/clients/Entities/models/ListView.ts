/* tslint:disable */
/* eslint-disable */
/**
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ListViewField } from './ListViewField';
import {
    ListViewFieldFromJSON,
    ListViewFieldFromJSONTyped,
    ListViewFieldToJSON,
} from './ListViewField';

/**
 * 
 * @export
 * @interface ListView
 */
export interface ListView {
    /**
     * The name of the ListView. This must be unique for the EntityList.
     * @type {string}
     * @memberof ListView
     */
    name?: string | null;
    /**
     * Usages are arbitratry sting values used to provide instructions for other applications as to the intended areas where the view should be used. Mozu uses the "admin" usage valued to indicate that a ListView should appear in the EntityManager in the Admin UI.  The values are open ended and applications may provide any value for a usage. This field can be used in queries to the EntityList.
     * @type {Array<string>}
     * @memberof ListView
     */
    usages?: Array<string> | null;
    /**
     * An arbitrary json property to be used by external applications for any purpose. MZDB will persist and retrieve the metadata without any restrictions.
     * @type {any}
     * @memberof ListView
     */
    metaData?: any | null;
    /**
     * less restrictive than collection/list security. public | admin | owner
     * @type {string}
     * @memberof ListView
     */
    security?: string | null;
    /**
     * Indicates a implicitly applied filter to the EntityList for to which the ListView is associated. All queries to the ListView will have this filter applied implicitly.
     * @type {string}
     * @memberof ListView
     */
    filter?: string | null;
    /**
     * Indicates a default sort to be applied to the ListView.
     * @type {string}
     * @memberof ListView
     */
    defaultSort?: string | null;
    /**
     * The list of ViewFields for this view. ViewFields can be used to filter or transform the underlying Entity to provide an optimized format for applications which query the ListView.  If no ViewFields are specified, entities will be returned for the View with no transform applied.
     * @type {Array<ListViewField>}
     * @memberof ListView
     */
    fields?: Array<ListViewField> | null;
}

/**
 * Check if a given object implements the ListView interface.
 */
export function instanceOfListView(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ListViewFromJSON(json: any): ListView {
    return ListViewFromJSONTyped(json, false);
}

export function ListViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListView {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'usages': !exists(json, 'usages') ? undefined : json['usages'],
        'metaData': !exists(json, 'metaData') ? undefined : json['metaData'],
        'security': !exists(json, 'security') ? undefined : json['security'],
        'filter': !exists(json, 'filter') ? undefined : json['filter'],
        'defaultSort': !exists(json, 'defaultSort') ? undefined : json['defaultSort'],
        'fields': !exists(json, 'fields') ? undefined : (json['fields'] === null ? null : (json['fields'] as Array<any>).map(ListViewFieldFromJSON)),
    };
}

export function ListViewToJSON(value?: ListView | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'usages': value.usages,
        'metaData': value.metaData,
        'security': value.security,
        'filter': value.filter,
        'defaultSort': value.defaultSort,
        'fields': value.fields === undefined ? undefined : (value.fields === null ? null : (value.fields as Array<any>).map(ListViewFieldToJSON)),
    };
}

