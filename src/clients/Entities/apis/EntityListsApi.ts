/* tslint:disable */
/* eslint-disable */
/**
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  EntityList,
  EntityListCollection,
} from '../models';

export interface CreateEntityListRequest {
    responseFields?: string;
    entityList?: EntityList;
}

export interface DeleteEntityListRequest {
    entityListFullName: string;
}

export interface GetEntityListRequest {
    entityListFullName: string;
    responseFields?: string;
}

export interface GetEntityListsRequest {
    pageSize?: number;
    startIndex?: number;
    filter?: string;
    sortBy?: string;
    responseFields?: string;
}

export interface UpdateEntityListRequest {
    entityListFullName: string;
    responseFields?: string;
    entityList?: EntityList;
}

/**
 * EntityListsApi - interface
 * 
 * @export
 * @interface EntityListsApiInterface
 */
export interface EntityListsApiInterface {
    /**
     * Create a new EntityList for a specific tenant.
     * @summary Add EntityList
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {EntityList} [entityList] The EntityList definition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityListsApiInterface
     */
    createEntityListRaw(requestParameters: CreateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityList>>;

    /**
     * Create a new EntityList for a specific tenant.
     * Add EntityList
     */
    createEntityList(requestParameters: CreateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityList>;

    /**
     * Delete an existing EntityList for a specific tenant. This will also delete all Entities in all instances of this EntityList for the tenant.
     * @summary Delete EntityList
     * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityListsApiInterface
     */
    deleteEntityListRaw(requestParameters: DeleteEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an existing EntityList for a specific tenant. This will also delete all Entities in all instances of this EntityList for the tenant.
     * Delete EntityList
     */
    deleteEntityList(requestParameters: DeleteEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get an existing EntityList definition for a specific tenant
     * @summary Get EntityList
     * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityListsApiInterface
     */
    getEntityListRaw(requestParameters: GetEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityList>>;

    /**
     * Get an existing EntityList definition for a specific tenant
     * Get EntityList
     */
    getEntityList(requestParameters: GetEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityList>;

    /**
     * Get a filtered list of EntityLists for a specific tenant.
     * @summary Get EntityLists
     * @param {number} [pageSize] 
     * @param {number} [startIndex] 
     * @param {string} [filter] 
     * @param {string} [sortBy] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityListsApiInterface
     */
    getEntityListsRaw(requestParameters: GetEntityListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityListCollection>>;

    /**
     * Get a filtered list of EntityLists for a specific tenant.
     * Get EntityLists
     */
    getEntityLists(requestParameters: GetEntityListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityListCollection>;

    /**
     * Update an existing Entitylist for a specific tenant.
     * @summary Update Entitylist
     * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {EntityList} [entityList] The EntityList definition
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntityListsApiInterface
     */
    updateEntityListRaw(requestParameters: UpdateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityList>>;

    /**
     * Update an existing Entitylist for a specific tenant.
     * Update Entitylist
     */
    updateEntityList(requestParameters: UpdateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityList>;

}

/**
 * 
 */
export class EntityListsApi extends runtime.BaseAPI implements EntityListsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create a new EntityList for a specific tenant.
     * Add EntityList
     */


    async createEntityListRaw(requestParameters: CreateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityList>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.entityList,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new EntityList for a specific tenant.
     * Add EntityList
     */
    async createEntityList(requestParameters: CreateEntityListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityList> {
        const response = await this.createEntityListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing EntityList for a specific tenant. This will also delete all Entities in all instances of this EntityList for the tenant.
     * Delete EntityList
     */


    async deleteEntityListRaw(requestParameters: DeleteEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling deleteEntityList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing EntityList for a specific tenant. This will also delete all Entities in all instances of this EntityList for the tenant.
     * Delete EntityList
     */
    async deleteEntityList(requestParameters: DeleteEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntityListRaw(requestParameters, initOverrides);
    }

    /**
     * Get an existing EntityList definition for a specific tenant
     * Get EntityList
     */


    async getEntityListRaw(requestParameters: GetEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityList>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling getEntityList.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get an existing EntityList definition for a specific tenant
     * Get EntityList
     */
    async getEntityList(requestParameters: GetEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityList> {
        const response = await this.getEntityListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a filtered list of EntityLists for a specific tenant.
     * Get EntityLists
     */


    async getEntityListsRaw(requestParameters: GetEntityListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityListCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a filtered list of EntityLists for a specific tenant.
     * Get EntityLists
     */
    async getEntityLists(requestParameters: GetEntityListsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityListCollection> {
        const response = await this.getEntityListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Entitylist for a specific tenant.
     * Update Entitylist
     */


    async updateEntityListRaw(requestParameters: UpdateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityList>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling updateEntityList.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.entityList,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update an existing Entitylist for a specific tenant.
     * Update Entitylist
     */
    async updateEntityList(requestParameters: UpdateEntityListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityList> {
        const response = await this.updateEntityListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
