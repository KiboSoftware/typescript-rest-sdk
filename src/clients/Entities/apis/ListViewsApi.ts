/* tslint:disable */
/* eslint-disable */
/**
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ListView,
  ListViewCollection,
} from '../models';
import {
    ListViewFromJSON,
    ListViewToJSON,
    ListViewCollectionFromJSON,
    ListViewCollectionToJSON,
} from '../models';

export interface ListViewsApiCreateEntityListViewRequest {
    entityListFullName: string;
    listView?: ListView;
}

export interface ListViewsApiDeleteEntityListViewRequest {
    entityListFullName: string;
    viewName: string;
}

export interface ListViewsApiGetEntityListViewRequest {
    entityListFullName: string;
    viewName: string;
}

export interface ListViewsApiGetEntityListViewsRequest {
    entityListFullName: string;
}

export interface ListViewsApiUpdateEntityListViewRequest {
    entityListFullName: string;
    viewName: string;
    listView?: ListView;
}

/**
 * 
 */
export class ListViewsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create a new ListView definition for a specific EntityList for a specific tenant
     * Add ListView
     */


    async createEntityListViewRaw(requestParameters: ListViewsApiCreateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling createEntityListView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListViewToJSON(requestParameters.listView),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListViewFromJSON(jsonValue));
    }

    /**
     * Create a new ListView definition for a specific EntityList for a specific tenant
     * Add ListView
     */
    async createEntityListView(requestParameters: ListViewsApiCreateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView> {
        const response = await this.createEntityListViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing ListView definition for a specific EntityList for a specific tenant
     * Delete ListView
     */


    async deleteEntityListViewRaw(requestParameters: ListViewsApiDeleteEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling deleteEntityListView.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling deleteEntityListView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views/{viewName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing ListView definition for a specific EntityList for a specific tenant
     * Delete ListView
     */
    async deleteEntityListView(requestParameters: ListViewsApiDeleteEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntityListViewRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific ListView definition for a specific EntityList for a specific tenant
     * Get ListView
     */


    async getEntityListViewRaw(requestParameters: ListViewsApiGetEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling getEntityListView.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling getEntityListView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views/{viewName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListViewFromJSON(jsonValue));
    }

    /**
     * Returns a specific ListView definition for a specific EntityList for a specific tenant
     * Get ListView
     */
    async getEntityListView(requestParameters: ListViewsApiGetEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView> {
        const response = await this.getEntityListViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all of the defined ListViews for a specific EntityList for a specific tenant
     * Get  ListViews
     */


    async getEntityListViewsRaw(requestParameters: ListViewsApiGetEntityListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListViewCollection>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling getEntityListViews.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListViewCollectionFromJSON(jsonValue));
    }

    /**
     * Get all of the defined ListViews for a specific EntityList for a specific tenant
     * Get  ListViews
     */
    async getEntityListViews(requestParameters: ListViewsApiGetEntityListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListViewCollection> {
        const response = await this.getEntityListViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing ListView definition for a specific EntityList for a specific tenant
     * Update ListView
     */


    async updateEntityListViewRaw(requestParameters: ListViewsApiUpdateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling updateEntityListView.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling updateEntityListView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views/{viewName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListViewToJSON(requestParameters.listView),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListViewFromJSON(jsonValue));
    }

    /**
     * Update an existing ListView definition for a specific EntityList for a specific tenant
     * Update ListView
     */
    async updateEntityListView(requestParameters: ListViewsApiUpdateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView> {
        const response = await this.updateEntityListViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
