/* tslint:disable */
/* eslint-disable */
/**
 * Kibo MZDB Service
 * OpenAPI Spec for Kibo MZDB Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ListView,
  ListViewCollection,
} from '../models';


export namespace listViewsApiParams { 
    export interface CreateEntityListViewRequest {
        entityListFullName: string;
        responseFields?: string;
        listView?: ListView;
    }
    export interface DeleteEntityListViewRequest {
        entityListFullName: string;
        viewName: string;
    }
    export interface GetEntityListViewRequest {
        entityListFullName: string;
        viewName: string;
        responseFields?: string;
    }
    export interface GetEntityListViewsRequest {
        entityListFullName: string;
        responseFields?: string;
    }
    export interface UpdateEntityListViewRequest {
        entityListFullName: string;
        viewName: string;
        responseFields?: string;
        listView?: ListView;
    }
}
/**
* ListViewsApiService - interface
* 
* @export
* @interface ListViewsApi
*/
export interface ListViewsApiService {
    /**
    * Create a new ListView definition for a specific EntityList for a specific tenant
    * @summary Add ListView
    * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ListView} [listView] The new ListView definition
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ListViewsApiInterface
    */
    createEntityListViewRaw(requestParameters: listViewsApiParams.CreateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>>;

    /**
    * Create a new ListView definition for a specific EntityList for a specific tenant
    * Add ListView
    */
    createEntityListView(requestParameters: listViewsApiParams.CreateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView>;

    /**
    * Delete an existing ListView definition for a specific EntityList for a specific tenant
    * @summary Delete ListView
    * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
    * @param {string} viewName The name of the ListView to delete
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ListViewsApiInterface
    */
    deleteEntityListViewRaw(requestParameters: listViewsApiParams.DeleteEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete an existing ListView definition for a specific EntityList for a specific tenant
    * Delete ListView
    */
    deleteEntityListView(requestParameters: listViewsApiParams.DeleteEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Returns a specific ListView definition for a specific EntityList for a specific tenant
    * @summary Get ListView
    * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
    * @param {string} viewName The name of the ListView
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ListViewsApiInterface
    */
    getEntityListViewRaw(requestParameters: listViewsApiParams.GetEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>>;

    /**
    * Returns a specific ListView definition for a specific EntityList for a specific tenant
    * Get ListView
    */
    getEntityListView(requestParameters: listViewsApiParams.GetEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView>;

    /**
    * Get all of the defined ListViews for a specific EntityList for a specific tenant
    * @summary Get  ListViews
    * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ListViewsApiInterface
    */
    getEntityListViewsRaw(requestParameters: listViewsApiParams.GetEntityListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListViewCollection>>;

    /**
    * Get all of the defined ListViews for a specific EntityList for a specific tenant
    * Get  ListViews
    */
    getEntityListViews(requestParameters: listViewsApiParams.GetEntityListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListViewCollection>;

    /**
    * Update an existing ListView definition for a specific EntityList for a specific tenant
    * @summary Update ListView
    * @param {string} entityListFullName The full name of the EntityList including namespace in name@nameSpace format
    * @param {string} viewName The name of the ListView
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ListView} [listView] The udpated ListView definition
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ListViewsApiInterface
    */
    updateEntityListViewRaw(requestParameters: listViewsApiParams.UpdateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>>;

    /**
    * Update an existing ListView definition for a specific EntityList for a specific tenant
    * Update ListView
    */
    updateEntityListView(requestParameters: listViewsApiParams.UpdateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView>;

}


/**
 * 
 */
export class ListViewsApi extends runtime.BaseAPI implements ListViewsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create a new ListView definition for a specific EntityList for a specific tenant
     * Add ListView
     */


    async createEntityListViewRaw(requestParameters: listViewsApiParams.CreateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling createEntityListView.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.listView,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new ListView definition for a specific EntityList for a specific tenant
     * Add ListView
     */
    async createEntityListView(requestParameters: listViewsApiParams.CreateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView> {
        const response = await this.createEntityListViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing ListView definition for a specific EntityList for a specific tenant
     * Delete ListView
     */


    async deleteEntityListViewRaw(requestParameters: listViewsApiParams.DeleteEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling deleteEntityListView.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling deleteEntityListView.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views/{viewName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing ListView definition for a specific EntityList for a specific tenant
     * Delete ListView
     */
    async deleteEntityListView(requestParameters: listViewsApiParams.DeleteEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEntityListViewRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific ListView definition for a specific EntityList for a specific tenant
     * Get ListView
     */


    async getEntityListViewRaw(requestParameters: listViewsApiParams.GetEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling getEntityListView.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling getEntityListView.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views/{viewName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific ListView definition for a specific EntityList for a specific tenant
     * Get ListView
     */
    async getEntityListView(requestParameters: listViewsApiParams.GetEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView> {
        const response = await this.getEntityListViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all of the defined ListViews for a specific EntityList for a specific tenant
     * Get  ListViews
     */


    async getEntityListViewsRaw(requestParameters: listViewsApiParams.GetEntityListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListViewCollection>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling getEntityListViews.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get all of the defined ListViews for a specific EntityList for a specific tenant
     * Get  ListViews
     */
    async getEntityListViews(requestParameters: listViewsApiParams.GetEntityListViewsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListViewCollection> {
        const response = await this.getEntityListViewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing ListView definition for a specific EntityList for a specific tenant
     * Update ListView
     */


    async updateEntityListViewRaw(requestParameters: listViewsApiParams.UpdateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListView>> {
        if (requestParameters.entityListFullName === null || requestParameters.entityListFullName === undefined) {
            throw new runtime.RequiredError('entityListFullName','Required parameter requestParameters.entityListFullName was null or undefined when calling updateEntityListView.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling updateEntityListView.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/entitylists/{entityListFullName}/views/{viewName}`.replace(`{${"entityListFullName"}}`, encodeURIComponent(String(requestParameters.entityListFullName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.listView,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update an existing ListView definition for a specific EntityList for a specific tenant
     * Update ListView
     */
    async updateEntityListView(requestParameters: listViewsApiParams.UpdateEntityListViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListView> {
        const response = await this.updateEntityListViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
