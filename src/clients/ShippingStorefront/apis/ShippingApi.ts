/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CarrierResponse,
  LabelRequest,
  LabelResponse,
  RateRequest,
  RateRequestGroup,
  RatesResponse,
  RatesResponseGroup,
  ShipmentRequest,
  ShippingRuntimeShipmentResponse,
} from '../models';

export interface GetCarriersRequest {
    responseFields?: string;
}

export interface GetLabelsRequest {
    responseFields?: string;
    shipmentRequest?: ShipmentRequest;
}

export interface GetLabelsByTrackingNumberRequest {
    responseFields?: string;
    labelRequest?: LabelRequest;
}

export interface GetMultiRatesRequest {
    includeRawResponse?: boolean;
    responseFields?: string;
    rateRequestGroup?: Array<RateRequestGroup>;
}

export interface GetRatesRequest {
    includeRawResponse?: boolean;
    responseFields?: string;
    rateRequest?: RateRequest;
}

/**
 * ShippingApi - interface
 * 
 * @export
 * @interface ShippingApiInterface
 */
export interface ShippingApiInterface {
    /**
     * Get a list of supported carriers.
     * @summary Get Carriers
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApiInterface
     */
    getCarriersRaw(requestParameters: GetCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierResponse>>;

    /**
     * Get a list of supported carriers.
     * Get Carriers
     */
    getCarriers(requestParameters: GetCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierResponse>;

    /**
     * Get Shipping Label for the Service Type Requested
     * @summary Get Labels
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ShipmentRequest} [shipmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApiInterface
     */
    getLabelsRaw(requestParameters: GetLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingRuntimeShipmentResponse>>;

    /**
     * Get Shipping Label for the Service Type Requested
     * Get Labels
     */
    getLabels(requestParameters: GetLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingRuntimeShipmentResponse>;

    /**
     * Get shipping labels by tracking number.
     * @summary Get Labels By Tracking Number
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {LabelRequest} [labelRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApiInterface
     */
    getLabelsByTrackingNumberRaw(requestParameters: GetLabelsByTrackingNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelResponse>>;

    /**
     * Get shipping labels by tracking number.
     * Get Labels By Tracking Number
     */
    getLabelsByTrackingNumber(requestParameters: GetLabelsByTrackingNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelResponse>;

    /**
     * Get List of Rate Responses for a List of Rate Requests
     * @summary Get Multi Rates
     * @param {boolean} [includeRawResponse] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<RateRequestGroup>} [rateRequestGroup] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApiInterface
     */
    getMultiRatesRaw(requestParameters: GetMultiRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatesResponseGroup>>>;

    /**
     * Get List of Rate Responses for a List of Rate Requests
     * Get Multi Rates
     */
    getMultiRates(requestParameters: GetMultiRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatesResponseGroup>>;

    /**
     * Get Rate Responses for a Rate Request
     * @summary Get Rates
     * @param {boolean} [includeRawResponse] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {RateRequest} [rateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApiInterface
     */
    getRatesRaw(requestParameters: GetRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatesResponse>>;

    /**
     * Get Rate Responses for a Rate Request
     * Get Rates
     */
    getRates(requestParameters: GetRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatesResponse>;

}

/**
 * 
 */
export class ShippingApi extends runtime.BaseAPI implements ShippingApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get a list of supported carriers.
     * Get Carriers
     */


    async getCarriersRaw(requestParameters: GetCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarrierResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/carriers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a list of supported carriers.
     * Get Carriers
     */
    async getCarriers(requestParameters: GetCarriersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarrierResponse> {
        const response = await this.getCarriersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shipping Label for the Service Type Requested
     * Get Labels
     */


    async getLabelsRaw(requestParameters: GetLabelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingRuntimeShipmentResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/request-labels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.shipmentRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Shipping Label for the Service Type Requested
     * Get Labels
     */
    async getLabels(requestParameters: GetLabelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingRuntimeShipmentResponse> {
        const response = await this.getLabelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get shipping labels by tracking number.
     * Get Labels By Tracking Number
     */


    async getLabelsByTrackingNumberRaw(requestParameters: GetLabelsByTrackingNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LabelResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/get-labels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.labelRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get shipping labels by tracking number.
     * Get Labels By Tracking Number
     */
    async getLabelsByTrackingNumber(requestParameters: GetLabelsByTrackingNumberRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LabelResponse> {
        const response = await this.getLabelsByTrackingNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get List of Rate Responses for a List of Rate Requests
     * Get Multi Rates
     */


    async getMultiRatesRaw(requestParameters: GetMultiRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatesResponseGroup>>> {
        const queryParameters: any = {};

        if (requestParameters.includeRawResponse !== undefined) {
            queryParameters['includeRawResponse'] = requestParameters.includeRawResponse;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/request-multi-rates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rateRequestGroup,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get List of Rate Responses for a List of Rate Requests
     * Get Multi Rates
     */
    async getMultiRates(requestParameters: GetMultiRatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatesResponseGroup>> {
        const response = await this.getMultiRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Rate Responses for a Rate Request
     * Get Rates
     */


    async getRatesRaw(requestParameters: GetRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includeRawResponse !== undefined) {
            queryParameters['includeRawResponse'] = requestParameters.includeRawResponse;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/request-rates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rateRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Rate Responses for a Rate Request
     * Get Rates
     */
    async getRates(requestParameters: GetRatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatesResponse> {
        const response = await this.getRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
