/* tslint:disable */
/* eslint-disable */
/**
 * Kibo ShippingRuntime Service
 * OpenAPI Spec for Kibo ShippingRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  RateRequest,
  RateRequestGroup,
  RatesResponse,
  RatesResponseGroup,
} from '../models';
import {
    RateRequestFromJSON,
    RateRequestToJSON,
    RateRequestGroupFromJSON,
    RateRequestGroupToJSON,
    RatesResponseFromJSON,
    RatesResponseToJSON,
    RatesResponseGroupFromJSON,
    RatesResponseGroupToJSON,
} from '../models';

export interface ShippingApiGetMultiRatesRequest {
    includeRawResponse?: boolean;
    rateRequestGroup?: Array<RateRequestGroup>;
}

export interface ShippingApiGetRatesRequest {
    includeRawResponse?: boolean;
    rateRequest?: RateRequest;
}

/**
 * 
 */
export class ShippingApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get List of Rate Responses for a List of Rate Requests
     * Get Multi Rates
     */


    async getMultiRatesRaw(requestParameters: ShippingApiGetMultiRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RatesResponseGroup>>> {
        const queryParameters: any = {};

        if (requestParameters.includeRawResponse !== undefined) {
            queryParameters['includeRawResponse'] = requestParameters.includeRawResponse;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/request-multi-rates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.rateRequestGroup.map(RateRequestGroupToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatesResponseGroupFromJSON));
    }

    /**
     * Get List of Rate Responses for a List of Rate Requests
     * Get Multi Rates
     */
    async getMultiRates(requestParameters: ShippingApiGetMultiRatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RatesResponseGroup>> {
        const response = await this.getMultiRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Rate Responses for a Rate Request
     * Get Rates
     */


    async getRatesRaw(requestParameters: ShippingApiGetRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.includeRawResponse !== undefined) {
            queryParameters['includeRawResponse'] = requestParameters.includeRawResponse;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/storefront/shipping/request-rates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateRequestToJSON(requestParameters.rateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatesResponseFromJSON(jsonValue));
    }

    /**
     * Get Rate Responses for a Rate Request
     * Get Rates
     */
    async getRates(requestParameters: ShippingApiGetRatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatesResponse> {
        const response = await this.getRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
