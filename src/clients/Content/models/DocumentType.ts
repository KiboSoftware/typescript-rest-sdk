/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Property } from './Property';
import {
    PropertyFromJSON,
    PropertyFromJSONTyped,
    PropertyToJSON,
} from './Property';

/**
 * The schema a document must implement and associated metadata. A documentType is created at a tenant scope and is therefore shared amongst all child contexts (masterCatalog, catalog, site).
 * @export
 * @interface DocumentType
 */
export interface DocumentType {
    /**
     * The name component of the documentType, name@namespace. The name must be unique within the namespace component and cannot be updated.
     * @type {string}
     * @memberof DocumentType
     */
    name?: string | null;
    /**
     * The namespace component of the documentType, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.
     * @type {string}
     * @memberof DocumentType
     */
    namespace?: string | null;
    /**
     * The unique identifier of the documentType, represented by name@namespace. The documentTypeFQN must be provided when creating the documentType, or the name and namespace fields must be provided.
     * @type {string}
     * @memberof DocumentType
     */
    documentTypeFQN?: string | null;
    /**
     * The administrative name of the documentType.
     * @type {string}
     * @memberof DocumentType
     */
    adminName?: string | null;
    /**
     * Optionally, a documentType can be defined in an installationPackage and then installed into a tenant. Installed documentTypes can only be updated via installation upgrades. 
     * Currently only internal Mozu platform components can create installations. This field is system-supplied and read-only.
     * @type {string}
     * @memberof DocumentType
     */
    installationPackage?: string | null;
    /**
     * The version of the installationPackge installed. This field is read-only.
     * @type {string}
     * @memberof DocumentType
     */
    version?: string | null;
    /**
     * Allows arbitrary data to be stored on the documentType.
     * @type {any}
     * @memberof DocumentType
     */
    metadata?: any | null;
    /**
     * An array of the schema elements that a document implementing this documentType will have.
     * @type {Array<Property>}
     * @memberof DocumentType
     */
    properties?: Array<Property> | null;
}

/**
 * Check if a given object implements the DocumentType interface.
 */
export function instanceOfDocumentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DocumentTypeFromJSON(json: any): DocumentType {
    return DocumentTypeFromJSONTyped(json, false);
}

export function DocumentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'documentTypeFQN': !exists(json, 'documentTypeFQN') ? undefined : json['documentTypeFQN'],
        'adminName': !exists(json, 'adminName') ? undefined : json['adminName'],
        'installationPackage': !exists(json, 'installationPackage') ? undefined : json['installationPackage'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'properties': !exists(json, 'properties') ? undefined : (json['properties'] === null ? null : (json['properties'] as Array<any>).map(PropertyFromJSON)),
    };
}

export function DocumentTypeToJSON(value?: DocumentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'namespace': value.namespace,
        'documentTypeFQN': value.documentTypeFQN,
        'adminName': value.adminName,
        'installationPackage': value.installationPackage,
        'version': value.version,
        'metadata': value.metadata,
        'properties': value.properties === undefined ? undefined : (value.properties === null ? null : (value.properties as Array<any>).map(PropertyToJSON)),
    };
}

