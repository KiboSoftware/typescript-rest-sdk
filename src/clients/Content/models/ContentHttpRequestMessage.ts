/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContentHttpContent } from './ContentHttpContent';
import {
    ContentHttpContentFromJSON,
    ContentHttpContentFromJSONTyped,
    ContentHttpContentToJSON,
} from './ContentHttpContent';
import type { HttpMethod } from './HttpMethod';
import {
    HttpMethodFromJSON,
    HttpMethodFromJSONTyped,
    HttpMethodToJSON,
} from './HttpMethod';
import type { HttpVersionPolicy } from './HttpVersionPolicy';
import {
    HttpVersionPolicyFromJSON,
    HttpVersionPolicyFromJSONTyped,
    HttpVersionPolicyToJSON,
} from './HttpVersionPolicy';
import type { KeyValuePair2 } from './KeyValuePair2';
import {
    KeyValuePair2FromJSON,
    KeyValuePair2FromJSONTyped,
    KeyValuePair2ToJSON,
} from './KeyValuePair2';

/**
 * 
 * @export
 * @interface ContentHttpRequestMessage
 */
export interface ContentHttpRequestMessage {
    /**
     * 
     * @type {string}
     * @memberof ContentHttpRequestMessage
     */
    version?: string | null;
    /**
     * 
     * @type {HttpVersionPolicy}
     * @memberof ContentHttpRequestMessage
     */
    versionPolicy?: HttpVersionPolicy;
    /**
     * 
     * @type {ContentHttpContent}
     * @memberof ContentHttpRequestMessage
     */
    content?: ContentHttpContent;
    /**
     * 
     * @type {HttpMethod}
     * @memberof ContentHttpRequestMessage
     */
    method?: HttpMethod;
    /**
     * 
     * @type {string}
     * @memberof ContentHttpRequestMessage
     */
    requestUri?: string | null;
    /**
     * 
     * @type {Array<KeyValuePair2>}
     * @memberof ContentHttpRequestMessage
     */
    readonly headers?: Array<KeyValuePair2> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ContentHttpRequestMessage
     * @deprecated
     */
    readonly properties?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ContentHttpRequestMessage
     */
    readonly options?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the ContentHttpRequestMessage interface.
 */
export function instanceOfContentHttpRequestMessage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContentHttpRequestMessageFromJSON(json: any): ContentHttpRequestMessage {
    return ContentHttpRequestMessageFromJSONTyped(json, false);
}

export function ContentHttpRequestMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentHttpRequestMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': !exists(json, 'version') ? undefined : json['version'],
        'versionPolicy': !exists(json, 'versionPolicy') ? undefined : HttpVersionPolicyFromJSON(json['versionPolicy']),
        'content': !exists(json, 'content') ? undefined : ContentHttpContentFromJSON(json['content']),
        'method': !exists(json, 'method') ? undefined : HttpMethodFromJSON(json['method']),
        'requestUri': !exists(json, 'requestUri') ? undefined : json['requestUri'],
        'headers': !exists(json, 'headers') ? undefined : (json['headers'] === null ? null : (json['headers'] as Array<any>).map(KeyValuePair2FromJSON)),
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'options': !exists(json, 'options') ? undefined : json['options'],
    };
}

export function ContentHttpRequestMessageToJSON(value?: ContentHttpRequestMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'versionPolicy': HttpVersionPolicyToJSON(value.versionPolicy),
        'content': ContentHttpContentToJSON(value.content),
        'method': HttpMethodToJSON(value.method),
        'requestUri': value.requestUri,
    };
}

