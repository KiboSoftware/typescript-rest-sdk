/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ViewField } from './ViewField';
import {
    ViewFieldFromJSON,
    ViewFieldFromJSONTyped,
    ViewFieldToJSON,
} from './ViewField';

/**
 * A view provides GET access to documents within the documentList the view belongs to. The view can designate which document fields are returned (projection) and
 * a security model for providing GET access independent of the documentList's security model.
 * @export
 * @interface View
 */
export interface View {
    /**
     * A view is addressed via its name, which is unique within the documentList or documentListType in which it is defined.
     * @type {string}
     * @memberof View
     */
    name?: string | null;
    /**
     * tbd
     * @type {Array<string>}
     * @memberof View
     */
    usages?: Array<string> | null;
    /**
     * The metadata field allows arbitrary data to be stored on the view.
     * @type {any}
     * @memberof View
     */
    metadata?: any | null;
    /**
     * The isVisibleInStorefront field indicates whether documents in the view can be accessed from the Mozu storefront application. If true, the storefront application and storefront client application (javascript tier) 
     * can GET documents from the view.
     * @type {boolean}
     * @memberof View
     */
    isVisibleInStorefront?: boolean | null;
    /**
     * Filter criteria to apply automatically when documents from this view are accessed, using the standard Mozu filter syntax. Only documents matching the filter criteria will be returned. 
     * Any filter provided by an operation is combined with the view filter.
     * @type {string}
     * @memberof View
     */
    filter?: string | null;
    /**
     * If view documents are requested with includeInactive=true, then this controls which documents return. If includeInactive is not provided or set to false, then only active documents return.
     * If not set, or set to "all", then all documents return.
     * If set to "active", then only documents within the active date range and documents with no active date range are returned.
     * If set to "scheduled", then only documents with an active date range in the future are returned.
     * If set to "activeOrScheduled", then only documents that are active or documents with an active date range in the future are returned.
     * If set to "ended", then only documents with an active date range in the past are returned.
     * @type {string}
     * @memberof View
     */
    includeInactiveMode?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof View
     */
    isAdminDefault?: boolean | null;
    /**
     * Designation of which document fields are returned (projection) when GETing documents from the view.
     * @type {Array<ViewField>}
     * @memberof View
     */
    fields?: Array<ViewField> | null;
}

/**
 * Check if a given object implements the View interface.
 */
export function instanceOfView(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ViewFromJSON(json: any): View {
    return ViewFromJSONTyped(json, false);
}

export function ViewFromJSONTyped(json: any, ignoreDiscriminator: boolean): View {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'usages': !exists(json, 'usages') ? undefined : json['usages'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'isVisibleInStorefront': !exists(json, 'isVisibleInStorefront') ? undefined : json['isVisibleInStorefront'],
        'filter': !exists(json, 'filter') ? undefined : json['filter'],
        'includeInactiveMode': !exists(json, 'includeInactiveMode') ? undefined : json['includeInactiveMode'],
        'isAdminDefault': !exists(json, 'isAdminDefault') ? undefined : json['isAdminDefault'],
        'fields': !exists(json, 'fields') ? undefined : (json['fields'] === null ? null : (json['fields'] as Array<any>).map(ViewFieldFromJSON)),
    };
}

export function ViewToJSON(value?: View | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'usages': value.usages,
        'metadata': value.metadata,
        'isVisibleInStorefront': value.isVisibleInStorefront,
        'filter': value.filter,
        'includeInactiveMode': value.includeInactiveMode,
        'isAdminDefault': value.isAdminDefault,
        'fields': value.fields === undefined ? undefined : (value.fields === null ? null : (value.fields as Array<any>).map(ViewFieldToJSON)),
    };
}

