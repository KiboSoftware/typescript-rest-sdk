/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PropertyType } from './PropertyType';
import {
    PropertyTypeFromJSON,
    PropertyTypeFromJSONTyped,
    PropertyTypeToJSON,
} from './PropertyType';

/**
 * A schema element describing a name/value pair that can be stored on a document's properties field, where the name is directly defined by the propertyName and the value is constrained by the propertyType.
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * The name portion of the name/value pair stored on a document's properties field. The property name value must be unique within the properties defined on the documentType.
     * This value cannot be updated after property creation.
     * @type {string}
     * @memberof Property
     */
    name?: string | null;
    /**
     * True if the property must be present on the document. This value is false by default.
     * @type {boolean}
     * @memberof Property
     */
    isRequired?: boolean;
    /**
     * True if the property value is an array, where each array value must conform to the propertyType. When false, the property value must directly conform to the propertyType. This value is false by default.
     * @type {boolean}
     * @memberof Property
     */
    isMultiValued?: boolean;
    /**
     * 
     * @type {PropertyType}
     * @memberof Property
     */
    propertyType?: PropertyType;
}

/**
 * Check if a given object implements the Property interface.
 */
export function instanceOfProperty(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PropertyFromJSON(json: any): Property {
    return PropertyFromJSONTyped(json, false);
}

export function PropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Property {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'isRequired': !exists(json, 'isRequired') ? undefined : json['isRequired'],
        'isMultiValued': !exists(json, 'isMultiValued') ? undefined : json['isMultiValued'],
        'propertyType': !exists(json, 'propertyType') ? undefined : PropertyTypeFromJSON(json['propertyType']),
    };
}

export function PropertyToJSON(value?: Property | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'isRequired': value.isRequired,
        'isMultiValued': value.isMultiValued,
        'propertyType': PropertyTypeToJSON(value.propertyType),
    };
}

