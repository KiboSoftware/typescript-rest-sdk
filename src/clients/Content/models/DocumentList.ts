/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { View } from './View';
import {
    ViewFromJSON,
    ViewFromJSONTyped,
    ViewToJSON,
} from './View';

/**
 * A container for documents and related settings, such as supported documentTypes and publishing. 
 * A documentList belongs to a Mozu context, denoted by the documentList scopyeType and scopeId fields. 
 * Example: documentList A belongs to catalog 123, denoted by the documentList scopeType value of catalog and scopeId value of 123.
 * A documentList can only be accessed if the API context is inclusive of the documentList's scope.
 * Example: documentList A belongs to catalog 123. An API call with an API context of catalog 123 will be able to address documentList A.
 * Example: site 456 uses catalog 123. An API call with an API context of site 456 will be able to address documentList A.
 * Example: masterCatalog 789 is the parent of catalog 123. An API call with an API context of masterCatalog 789 will NOT be able to address documentList A.
 * Documents can be created, queried, managed and published from within a documentList. A documentList may be directly created, or indirectly created from a documentListType.
 * @export
 * @interface DocumentList
 */
export interface DocumentList {
    /**
     * The name component of the listFQN, name@namespace. The name must be unique within the namespace component and cannot be updated.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType.
     * @type {string}
     * @memberof DocumentList
     */
    name?: string | null;
    /**
     * The namespace component of the listFQN, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType.
     * @type {string}
     * @memberof DocumentList
     */
    namespace?: string | null;
    /**
     * The unique identifier of the documentList, represented by name@namespace. The listFQN must be provided when creating the documentList, or the name and namespace fields must be provided.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType.
     * @type {string}
     * @memberof DocumentList
     */
    listFQN?: string | null;
    /**
     * An array of the full names (name@namespace) of the documentTypes supported by the documentList. A document in the documentList must belong to one of these documentTypes.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType. DocumentTypes can be added/removed to the documentList, even when
     * based on a documentListType. Existing documents that belong to a documentType removed from the documentList will not be removed.
     * @type {Array<string>}
     * @memberof DocumentList
     */
    documentTypes?: Array<string> | null;
    /**
     * Determines if the documentList will support drafting and publishing documents. 
     * This field defaults to false and cannot be updated.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType.
     * @type {boolean}
     * @memberof DocumentList
     */
    supportsPublishing?: boolean | null;
    /**
     * Determines if the documentList has publishing turned on or off. If the documentList has a supportsPublishing value of true, then the enablePublishing value will be honored.
     * If enablePublishing is true, then a document draft will be created for a document create or update operation. A document must then be published to become "active".
     * If enablePublish is false, then all document changes are immediately "active".
     * If enablePublish is true, then updating it to false will immediately publish all draft changes.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.
     * @type {boolean}
     * @memberof DocumentList
     */
    enablePublishing?: boolean | null;
    /**
     * Determines if the documentList will support ranges of dates that documents are considered 'active'. 
     * This field defaults to false and cannot be updated.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType.
     * @type {boolean}
     * @memberof DocumentList
     */
    supportsActiveDateRanges?: boolean | null;
    /**
     * Determines if the documentList has ActiveDateRanges turned on or off. If the documentList has a supportsActiveDateRanges value of true, then the enableActiveDateRanges value will be honored.
     * If enableActiveDateRanges is true, then a document will only be returned if the request is made within the time frame the document has been set to be 'active'.
     * If enableActiveDateRanges is false, then the properties can be set but will not be honored.
     * If enableActiveDateRanges is true, then updating it to false will immediately start honoring the previously-set date range.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.
     * @type {boolean}
     * @memberof DocumentList
     */
    enableActiveDateRanges?: boolean | null;
    /**
     * An array of one or more views, which each allow GET access to a projection of fields from the documents in the given documentList. 
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType. Views can be added/removed to the documentList, even when
     * the documentList derives from a documentListType.
     * @type {Array<View>}
     * @memberof DocumentList
     */
    views?: Array<View> | null;
    /**
     * An array of strings that describes to the Mozu platform the manner(s) in which a documentList can be used. The following values are valid:
     * entitymanager -- the documentList should be visible in the Admin Content/Entities UI, which allows admin users to create, manage and publish documents within the documentList.
     * sitebuilder -- the documentList should be visible in Site Builder. A documentList will display in the Site Builder Navigation Content List node, which supports document creation, management and web cms integration.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType. Usages can be added or removed from the documentList, even when the documentList derives from a
     * documentListType.
     * @type {Array<string>}
     * @memberof DocumentList
     */
    usages?: Array<string> | null;
    /**
     * tbd
     * @type {string}
     * @memberof DocumentList
     */
    security?: string | null;
    /**
     * Used in conjunction with the scopeType field to determine the exact context within which the documentList resides.
     * Example: A documentList with a scopeId of 5 and scopeType of masterCatalog belongs to masterCatalog 5.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType. This value is read-only after the documentList is created.
     * @type {number}
     * @memberof DocumentList
     */
    scopeId?: number | null;
    /**
     * The context level the documentList resides in. Valid values are "tenant", "masterCatalog", "catalog" and "site". This field is used in conjunction with the scopeId field
     * to determine the exact context within which this documentList resides. This field is read-only after insert.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType. This value is read-only after the documentList is created.
     * @type {string}
     * @memberof DocumentList
     */
    scopeType?: string | null;
    /**
     * The full name of the documentListType (name@namespace) that underlies the documentList. This value is only populated when the Mozu platform creates a documentList from a documentListType.
     * A documentList that is directly created cannot specify a documentListType. This field is therefore read-only.
     * @type {string}
     * @memberof DocumentList
     */
    documentListType?: string | null;
    /**
     * Allows arbitrary data to be stored on the documentList.
     * If the documentList is based on a documentListType, then this value will be derived from the documentListType, but can be overridden on update.
     * @type {any}
     * @memberof DocumentList
     */
    metadata?: any | null;
}

/**
 * Check if a given object implements the DocumentList interface.
 */
export function instanceOfDocumentList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DocumentListFromJSON(json: any): DocumentList {
    return DocumentListFromJSONTyped(json, false);
}

export function DocumentListFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'listFQN': !exists(json, 'listFQN') ? undefined : json['listFQN'],
        'documentTypes': !exists(json, 'documentTypes') ? undefined : json['documentTypes'],
        'supportsPublishing': !exists(json, 'supportsPublishing') ? undefined : json['supportsPublishing'],
        'enablePublishing': !exists(json, 'enablePublishing') ? undefined : json['enablePublishing'],
        'supportsActiveDateRanges': !exists(json, 'supportsActiveDateRanges') ? undefined : json['supportsActiveDateRanges'],
        'enableActiveDateRanges': !exists(json, 'enableActiveDateRanges') ? undefined : json['enableActiveDateRanges'],
        'views': !exists(json, 'views') ? undefined : (json['views'] === null ? null : (json['views'] as Array<any>).map(ViewFromJSON)),
        'usages': !exists(json, 'usages') ? undefined : json['usages'],
        'security': !exists(json, 'security') ? undefined : json['security'],
        'scopeId': !exists(json, 'scopeId') ? undefined : json['scopeId'],
        'scopeType': !exists(json, 'scopeType') ? undefined : json['scopeType'],
        'documentListType': !exists(json, 'documentListType') ? undefined : json['documentListType'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function DocumentListToJSON(value?: DocumentList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'namespace': value.namespace,
        'listFQN': value.listFQN,
        'documentTypes': value.documentTypes,
        'supportsPublishing': value.supportsPublishing,
        'enablePublishing': value.enablePublishing,
        'supportsActiveDateRanges': value.supportsActiveDateRanges,
        'enableActiveDateRanges': value.enableActiveDateRanges,
        'views': value.views === undefined ? undefined : (value.views === null ? null : (value.views as Array<any>).map(ViewToJSON)),
        'usages': value.usages,
        'security': value.security,
        'scopeId': value.scopeId,
        'scopeType': value.scopeType,
        'documentListType': value.documentListType,
        'metadata': value.metadata,
    };
}

