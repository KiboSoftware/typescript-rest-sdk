/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentInstallation } from './DocumentInstallation';
import {
    DocumentInstallationFromJSON,
    DocumentInstallationFromJSONTyped,
    DocumentInstallationToJSON,
} from './DocumentInstallation';
import type { View } from './View';
import {
    ViewFromJSON,
    ViewFromJSONTyped,
    ViewToJSON,
} from './View';

/**
 * A documentListType instructs the Mozu platform to automatically create documentLists within a scopeType. Example: Creating a documentListType in tenant X with a 
 * scopeType of site tells the Mozu platform to immediately create a documentList in each site tenant X has. The Mozu platform will also automatically create a new 
 * documentList for every site subsequently provisioned in tenant X. Any defaultDocuments defined on the documentListType will be created within 
 * each documentList. Each documentList will be addressable via the documenetListType's fully qualified name and will, by default, use the documentListType's views, 
 * usages and metadata. Therefore the documentListType can be used to centrally manage each associated documentList.
 * @export
 * @interface DocumentListType
 */
export interface DocumentListType {
    /**
     * The name component of the documentListTypeFQN, name@namespace. The name must be unique within the namespace component and cannot be updated.
     * Each documentList created from the documentListType will use this value.
     * @type {string}
     * @memberof DocumentListType
     */
    name?: string | null;
    /**
     * The namespace component of the documentListTypeFQN, name@namespace. The issued dev account namespace must be used unless elevated privileges allow a blank namespace to be used. The namespace cannot be updated.
     * Each documentList created from the documentListType will use this value.
     * @type {string}
     * @memberof DocumentListType
     */
    namespace?: string | null;
    /**
     * The unique identifier of the documentListType, represented by name@namespace. The documentListTypeFQN must be provided when creating the documentListType, or the name and namespace fields must be provided.
     * This field cannot be updated and each documentList created from the documentListType will use this value.
     * @type {string}
     * @memberof DocumentListType
     */
    documentListTypeFQN?: string | null;
    /**
     * The context level at which this documentListType will create documentLists. Valid values are "tenant", "masterCatalog", "catalog" and "site". This field is read-only after insert.
     * @type {string}
     * @memberof DocumentListType
     */
    scopeType?: string | null;
    /**
     * Optionally, a documentListType can be defined in an installationPackage and then installed into a tenant. Installed documentListsTypes can only be updated via installation upgrades. 
     * Currently only internal Mozu platform components can create installations. This field is system-supplied and read-only.
     * @type {string}
     * @memberof DocumentListType
     */
    installationPackage?: string | null;
    /**
     * The version of the installationPackge installed. This field is read-only.
     * @type {string}
     * @memberof DocumentListType
     */
    version?: string | null;
    /**
     * The definition of any documents to create when a documentList is created.
     * @type {Array<DocumentInstallation>}
     * @memberof DocumentListType
     */
    defaultDocuments?: Array<DocumentInstallation> | null;
    /**
     * The full names (name@namespace) of the types of documents that can be created within the documentLists belonging to this documentListType. 
     * Each documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.
     * @type {Array<string>}
     * @memberof DocumentListType
     */
    documentTypeFQNs?: Array<string> | null;
    /**
     * Determines if documentLists belonging to this documentListType will support drafting and publishing documents. 
     * This field defaults to false and cannot be updated. Each documentList created from the documentListType will use this value.
     * @type {boolean}
     * @memberof DocumentListType
     */
    supportsPublishing?: boolean;
    /**
     * Determines if documentLists belonging to this documentListType have publishing turned on or off. 
     * Each documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.
     * @type {boolean}
     * @memberof DocumentListType
     */
    enablePublishing?: boolean | null;
    /**
     * Determines if documentLists belonging to this documentListType will support drafting and ActiveDateRanges documents. 
     * This field defaults to false and cannot be updated. Each documentList created from the documentListType will use this value.
     * @type {boolean}
     * @memberof DocumentListType
     */
    supportsActiveDateRanges?: boolean;
    /**
     * Determines if documentLists belonging to this documentListType have ActiveDateRanges turned on or off. 
     * Each documentList created from the documentListType will use this value, but it can be overridden in an individual documentList.
     * @type {boolean}
     * @memberof DocumentListType
     */
    enableActiveDateRanges?: boolean | null;
    /**
     * An array of one or more views, which each allow GET access to a projection of fields from the documents in the given documentList. 
     * Each documentList created from this documentListType will use this value, but it can be overridden in an individual documentList.
     * @type {Array<View>}
     * @memberof DocumentListType
     */
    views?: Array<View> | null;
    /**
     * An array of strings that describes to the Mozu platform the manner(s) in which a documentList can be used. The following values are valid:
     * entitymanager -- the documentList should be visible in the Admin Content/Entities screen, which allows admin users to create, manage and publish documents within the documentList.
     * sitebuilder -- the documentList should be visible in Sitebuilder. A documentList will display in the Sitebuilder Navigation Content List node, which supports document creation, management and web cms integration.
     * Each documentList created from this documentListType will use this value, but it can be overridden in an individual documentList.
     * @type {Array<string>}
     * @memberof DocumentListType
     */
    usages?: Array<string> | null;
    /**
     * Allows arbitrary data to be stored on the documentListType. Each documentList created from this documentListType will use this value, 
     * but it can be overridden in an individual documentList.
     * @type {any}
     * @memberof DocumentListType
     */
    metadata?: any | null;
}

/**
 * Check if a given object implements the DocumentListType interface.
 */
export function instanceOfDocumentListType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DocumentListTypeFromJSON(json: any): DocumentListType {
    return DocumentListTypeFromJSONTyped(json, false);
}

export function DocumentListTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentListType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'documentListTypeFQN': !exists(json, 'documentListTypeFQN') ? undefined : json['documentListTypeFQN'],
        'scopeType': !exists(json, 'scopeType') ? undefined : json['scopeType'],
        'installationPackage': !exists(json, 'installationPackage') ? undefined : json['installationPackage'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'defaultDocuments': !exists(json, 'defaultDocuments') ? undefined : (json['defaultDocuments'] === null ? null : (json['defaultDocuments'] as Array<any>).map(DocumentInstallationFromJSON)),
        'documentTypeFQNs': !exists(json, 'documentTypeFQNs') ? undefined : json['documentTypeFQNs'],
        'supportsPublishing': !exists(json, 'supportsPublishing') ? undefined : json['supportsPublishing'],
        'enablePublishing': !exists(json, 'enablePublishing') ? undefined : json['enablePublishing'],
        'supportsActiveDateRanges': !exists(json, 'supportsActiveDateRanges') ? undefined : json['supportsActiveDateRanges'],
        'enableActiveDateRanges': !exists(json, 'enableActiveDateRanges') ? undefined : json['enableActiveDateRanges'],
        'views': !exists(json, 'views') ? undefined : (json['views'] === null ? null : (json['views'] as Array<any>).map(ViewFromJSON)),
        'usages': !exists(json, 'usages') ? undefined : json['usages'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function DocumentListTypeToJSON(value?: DocumentListType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'namespace': value.namespace,
        'documentListTypeFQN': value.documentListTypeFQN,
        'scopeType': value.scopeType,
        'installationPackage': value.installationPackage,
        'version': value.version,
        'defaultDocuments': value.defaultDocuments === undefined ? undefined : (value.defaultDocuments === null ? null : (value.defaultDocuments as Array<any>).map(DocumentInstallationToJSON)),
        'documentTypeFQNs': value.documentTypeFQNs,
        'supportsPublishing': value.supportsPublishing,
        'enablePublishing': value.enablePublishing,
        'supportsActiveDateRanges': value.supportsActiveDateRanges,
        'enableActiveDateRanges': value.enableActiveDateRanges,
        'views': value.views === undefined ? undefined : (value.views === null ? null : (value.views as Array<any>).map(ViewToJSON)),
        'usages': value.usages,
        'metadata': value.metadata,
    };
}

