/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The projection of an individual field in a view.
 * @export
 * @interface ViewField
 */
export interface ViewField {
    /**
     * The name of the field projected into the view document, meaning the name given to the target field after it is projected.
     * The name must be unique within the list of viewFields provided in the view.
     * @type {string}
     * @memberof ViewField
     */
    name?: string | null;
    /**
     * Specifies the document field to project. First-class fields will be returned on the document, but can be projected into the view properties. 
     * Valid first-class fields include name, id, documentTypeFqn, listFqn and publishState. Dynamic fields within the properties field can be projected by prefixing the target string with "properties."
     * Example: "properties.property1". If a property is an object, then dot notation can be used to walk to particular subelements. Example: "properties.property1.subProperty1"
     * Individual array elements can be selected as well. Example: "properties.property1.subProperty1.subSubArray[2].propertyOnArrayItem"
     * Any target miss will result in a null value returning for the projected field.
     * @type {string}
     * @memberof ViewField
     */
    target?: string | null;
}

/**
 * Check if a given object implements the ViewField interface.
 */
export function instanceOfViewField(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ViewFieldFromJSON(json: any): ViewField {
    return ViewFieldFromJSONTyped(json, false);
}

export function ViewFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): ViewField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'target': !exists(json, 'target') ? undefined : json['target'],
    };
}

export function ViewFieldToJSON(value?: ViewField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'target': value.target,
    };
}

