/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The definition of a document to create when a documentList is created.
 * @export
 * @interface DocumentInstallation
 */
export interface DocumentInstallation {
    /**
     * The name of the document to create.
     * @type {string}
     * @memberof DocumentInstallation
     */
    name?: string | null;
    /**
     * The full name of the documentType that underlies this document.
     * @type {string}
     * @memberof DocumentInstallation
     */
    documentTypeFQN?: string | null;
    /**
     * The properties of this document.
     * @type {any}
     * @memberof DocumentInstallation
     */
    properties?: any | null;
    /**
     * tbd
     * @type {string}
     * @memberof DocumentInstallation
     */
    locale?: string | null;
}

/**
 * Check if a given object implements the DocumentInstallation interface.
 */
export function instanceOfDocumentInstallation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DocumentInstallationFromJSON(json: any): DocumentInstallation {
    return DocumentInstallationFromJSONTyped(json, false);
}

export function DocumentInstallationFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentInstallation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'documentTypeFQN': !exists(json, 'documentTypeFQN') ? undefined : json['documentTypeFQN'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
    };
}

export function DocumentInstallationToJSON(value?: DocumentInstallation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'documentTypeFQN': value.documentTypeFQN,
        'properties': value.properties,
        'locale': value.locale,
    };
}

