/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  DocumentList,
  DocumentListCollection,
} from '../models';
import {
    DocumentListFromJSON,
    DocumentListToJSON,
    DocumentListCollectionFromJSON,
    DocumentListCollectionToJSON,
} from '../models';

export interface DocumentListApiCreateDocumentListRequest {
    documentList?: DocumentList;
}

export interface DocumentListApiDeleteDocumentListRequest {
    documentListName: string;
}

export interface DocumentListApiGetDocumentListRequest {
    documentListName: string;
}

export interface DocumentListApiGetDocumentListsRequest {
    pageSize?: number;
    startIndex?: number;
}

export interface DocumentListApiUpdateDocumentListRequest {
    documentListName: string;
    documentList?: DocumentList;
}

/**
 * 
 */
export class DocumentListApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create DocumentList
     * Create DocumentList
     */


    async createDocumentListRaw(requestParameters: DocumentListApiCreateDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/content/documentlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentListToJSON(requestParameters.documentList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     * Create DocumentList
     * Create DocumentList
     */
    async createDocumentList(requestParameters: DocumentListApiCreateDocumentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.createDocumentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Document List
     * Delete Document List
     */


    async deleteDocumentListRaw(requestParameters: DocumentListApiDeleteDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling deleteDocumentList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/content/documentlists/{documentListName}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document List
     * Delete Document List
     */
    async deleteDocumentList(requestParameters: DocumentListApiDeleteDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentListRaw(requestParameters, initOverrides);
    }

    /**
     * Get Document List
     * Get Document List
     */


    async getDocumentListRaw(requestParameters: DocumentListApiGetDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getDocumentList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/content/documentlists/{documentListName}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     * Get Document List
     * Get Document List
     */
    async getDocumentList(requestParameters: DocumentListApiGetDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.getDocumentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a paged documentListName of all document lists
     * Get Document Lists
     */


    async getDocumentListsRaw(requestParameters: DocumentListApiGetDocumentListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/content/documentlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieve a paged documentListName of all document lists
     * Get Document Lists
     */
    async getDocumentLists(requestParameters: DocumentListApiGetDocumentListsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListCollection> {
        const response = await this.getDocumentListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Document List
     * Update Document List
     */


    async updateDocumentListRaw(requestParameters: DocumentListApiUpdateDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentList>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling updateDocumentList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/content/documentlists/{documentListName}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentListToJSON(requestParameters.documentList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListFromJSON(jsonValue));
    }

    /**
     * Update Document List
     * Update Document List
     */
    async updateDocumentList(requestParameters: DocumentListApiUpdateDocumentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentList> {
        const response = await this.updateDocumentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
