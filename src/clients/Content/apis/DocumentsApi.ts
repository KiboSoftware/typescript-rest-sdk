/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ContentHttpRequestMessage,
  Document,
  DocumentCollection,
  DocumentCopyRequest,
  DocumentCopyResponse,
  DocumentMoveSummary,
} from '../models';

export interface DocumentsApiCopyDocumentsRequest {
    documentListName: string;
    responseFields?: string;
    documentCopyRequest?: DocumentCopyRequest;
}

export interface DocumentsApiCreateDocumentRequest {
    documentListName: string;
    responseFields?: string;
    document?: Document;
}

export interface DocumentsApiDeleteByPathRequest {
    documentListName: string;
    path?: string;
}

export interface DocumentsApiDeleteDocumentRequest {
    documentListName: string;
    documentId: string;
}

export interface DocumentsApiDeleteDocumentContentRequest {
    documentListName: string;
    documentId: string;
}

export interface DocumentsApiDeleteTreeDocumentContentRequest {
    documentListName: string;
    documentName: string;
    contentHttpRequestMessage?: ContentHttpRequestMessage;
}

export interface DocumentsApiGetDocumentRequest {
    documentListName: string;
    documentId: string;
    includeInactive?: boolean;
    responseFields?: string;
}

export interface DocumentsApiGetDocumentContentRequest {
    documentListName: string;
    documentId: string;
    responseFields?: string;
}

export interface DocumentsApiGetDocumentContentHeadRequest {
    documentListName: string;
    documentId: string;
    includeInactive?: string;
    responseFields?: string;
}

export interface DocumentsApiGetDocumentsRequest {
    documentListName: string;
    filter?: string;
    sortBy?: string;
    pageSize?: number;
    startIndex?: number;
    includeInactive?: boolean;
    path?: string;
    includeSubPaths?: boolean;
    queryScope?: string;
    responseFields?: string;
}

export interface DocumentsApiGetTreeDocumentRequest {
    documentListName: string;
    documentName: string;
    includeInactive?: boolean;
    responseFields?: string;
}

export interface DocumentsApiGetTreeDocumentContentRequest {
    documentListName: string;
    documentName: string;
    responseFields?: string;
}

export interface DocumentsApiGetTreeDocumentContentHeadRequest {
    documentListName: string;
    documentName: string;
    responseFields?: string;
}

export interface DocumentsApiMoveByPathRequest {
    documentListName: string;
    sourcePath?: string;
    destPath?: string;
    renameDuplicates?: boolean;
    previewMode?: boolean;
    responseFields?: string;
}

export interface DocumentsApiPatchDocumentRequest {
    documentListName: string;
    documentId: string;
    responseFields?: string;
    document?: Document;
}

export interface DocumentsApiTransformDocumentContentRequest {
    documentListName: string;
    documentId: string;
    width?: number;
    height?: number;
    max?: number;
    maxWidth?: number;
    maxHeight?: number;
    crop?: string;
    quality?: number;
    responseFields?: string;
}

export interface DocumentsApiTransformTreeDocumentContentRequest {
    documentListName: string;
    documentName: string;
    width?: number;
    height?: number;
    max?: number;
    maxWidth?: number;
    maxHeight?: number;
    crop?: string;
    quality?: number;
    responseFields?: string;
}

export interface DocumentsApiUpdateDocumentRequest {
    documentListName: string;
    documentId: string;
    responseFields?: string;
    document?: Document;
}

export interface DocumentsApiUpdateDocumentContentRequest {
    documentListName: string;
    documentId: string;
    responseFields?: string;
    contentHttpRequestMessage?: ContentHttpRequestMessage;
}

export interface DocumentsApiUpdateTreeDocumentContentRequest {
    documentListName: string;
    documentName: string;
    responseFields?: string;
    contentHttpRequestMessage?: ContentHttpRequestMessage;
}

/**
 * DocumentsApi - interface
 * 
 * @export
 * @interface DocumentsApiInterface
 */
export interface DocumentsApiInterface {
    /**
     * Copy Document
     * @summary Copy Document
     * @param {string} documentListName DocumentListName name where the documents reside
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {DocumentCopyRequest} [documentCopyRequest] Request containing Document Ids to copy and the destination path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    copyDocumentsRaw(requestParameters: DocumentsApiCopyDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCopyResponse>>;

    /**
     * Copy Document
     * Copy Document
     */
    copyDocuments(requestParameters: DocumentsApiCopyDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCopyResponse>;

    /**
     * Create Document
     * @summary Create Document
     * @param {string} documentListName 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Document} [document] The Mozu.Content.Contracts.Document to Add to the Mozu.Content.Contracts.DocumentList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    createDocumentRaw(requestParameters: DocumentsApiCreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>>;

    /**
     * Create Document
     * Create Document
     */
    createDocument(requestParameters: DocumentsApiCreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document>;

    /**
     * Delete Document
     * @summary Delete Document
     * @param {string} documentListName 
     * @param {string} [path] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    deleteByPathRaw(requestParameters: DocumentsApiDeleteByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Document
     * Delete Document
     */
    deleteByPath(requestParameters: DocumentsApiDeleteByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete Document
     * @summary Delete Document
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    deleteDocumentRaw(requestParameters: DocumentsApiDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Document
     * Delete Document
     */
    deleteDocument(requestParameters: DocumentsApiDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete Document Content
     * @summary Delete Document Content
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    deleteDocumentContentRaw(requestParameters: DocumentsApiDeleteDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Document Content
     * Delete Document Content
     */
    deleteDocumentContent(requestParameters: DocumentsApiDeleteDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete Document Content by Path
     * @summary Delete Document Content by Path
     * @param {string} documentListName 
     * @param {string} documentName 
     * @param {ContentHttpRequestMessage} [contentHttpRequestMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    deleteTreeDocumentContentRaw(requestParameters: DocumentsApiDeleteTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Document Content by Path
     * Delete Document Content by Path
     */
    deleteTreeDocumentContent(requestParameters: DocumentsApiDeleteTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Document
     * @summary Get Document
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {boolean} [includeInactive] if this call should include a adocument that isn\&#39;t active in the given preview date
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentRaw(requestParameters: DocumentsApiGetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>>;

    /**
     * Get Document
     * Get Document
     */
    getDocument(requestParameters: DocumentsApiGetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document>;

    /**
     * Get Document Content
     * @summary Get Document Content
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentContentRaw(requestParameters: DocumentsApiGetDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get Document Content
     * Get Document Content
     */
    getDocumentContent(requestParameters: DocumentsApiGetDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Document Content Headers
     * @summary Get Document Content Headers
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {string} [includeInactive] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentContentHeadRaw(requestParameters: DocumentsApiGetDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get Document Content Headers
     * Get Document Content Headers
     */
    getDocumentContentHead(requestParameters: DocumentsApiGetDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Documents
     * @summary Get Documents
     * @param {string} documentListName 
     * @param {string} [filter] Mozu.Content.Contracts.PropertyType filter expression to match against document properties. &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.FilterParser\&quot; /&gt;
     * @param {string} [sortBy] Sort expression.  &lt;seealso cref&#x3D;\&quot;T:Mozu.Core.FilterParsing.SortParser\&quot; /&gt;
     * @param {number} [pageSize] Page size
     * @param {number} [startIndex] First item in the page to return from the total result set
     * @param {boolean} [includeInactive] if this call should include a adocument that isn\&#39;t active in the given preview date
     * @param {string} [path] path from which to return documents
     * @param {boolean} [includeSubPaths] if true this call will populate Subpaths
     * @param {string} [queryScope] Determines if the path parameter is used to scope the query to the specified path or ignored for a global scope.              Defaults to specified path only. Valid values are: SpecifiedPathOnly, Global
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentsRaw(requestParameters: DocumentsApiGetDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCollection>>;

    /**
     * Get Documents
     * Get Documents
     */
    getDocuments(requestParameters: DocumentsApiGetDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCollection>;

    /**
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * @summary Get Document by Path
     * @param {string} documentListName 
     * @param {string} documentName 
     * @param {boolean} [includeInactive] if this call should include a document that isn\&#39;t active in the given preview date
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getTreeDocumentRaw(requestParameters: DocumentsApiGetTreeDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>>;

    /**
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * Get Document by Path
     */
    getTreeDocument(requestParameters: DocumentsApiGetTreeDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document>;

    /**
     * Returns transformations on a document. For example, resizing an image.
     * @summary Get Document Content by Path
     * @param {string} documentListName 
     * @param {string} documentName 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getTreeDocumentContentRaw(requestParameters: DocumentsApiGetTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns transformations on a document. For example, resizing an image.
     * Get Document Content by Path
     */
    getTreeDocumentContent(requestParameters: DocumentsApiGetTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Document Content Headers by Path
     * @summary Get Document Content Headers by Path
     * @param {string} documentListName 
     * @param {string} documentName 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getTreeDocumentContentHeadRaw(requestParameters: DocumentsApiGetTreeDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Get Document Content Headers by Path
     * Get Document Content Headers by Path
     */
    getTreeDocumentContentHead(requestParameters: DocumentsApiGetTreeDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Move Document
     * @summary Move Document
     * @param {string} documentListName DocumentListName name where the document resides
     * @param {string} [sourcePath] Source path
     * @param {string} [destPath] Destination path
     * @param {boolean} [renameDuplicates] Flag to rename file if duplicate filename exists in destination (defaults to true)
     * @param {boolean} [previewMode] Flag to denote whether to preview move operation or actually perform (defaults to false)
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    moveByPathRaw(requestParameters: DocumentsApiMoveByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentMoveSummary>>;

    /**
     * Move Document
     * Move Document
     */
    moveByPath(requestParameters: DocumentsApiMoveByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentMoveSummary>;

    /**
     * Patch Document
     * @summary Patch Document
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Document} [document] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    patchDocumentRaw(requestParameters: DocumentsApiPatchDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>>;

    /**
     * Patch Document
     * Patch Document
     */
    patchDocument(requestParameters: DocumentsApiPatchDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document>;

    /**
     * Returns transformations on a document. For example, resizing an image.
     * @summary Get Resized Image
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {number} [max] 
     * @param {number} [maxWidth] 
     * @param {number} [maxHeight] 
     * @param {string} [crop] 
     * @param {number} [quality] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    transformDocumentContentRaw(requestParameters: DocumentsApiTransformDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns transformations on a document. For example, resizing an image.
     * Get Resized Image
     */
    transformDocumentContent(requestParameters: DocumentsApiTransformDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns transformations on a document. For example, resizing an image. By Path
     * @summary Get Resized Image by Path
     * @param {string} documentListName 
     * @param {string} documentName 
     * @param {number} [width] 
     * @param {number} [height] 
     * @param {number} [max] 
     * @param {number} [maxWidth] 
     * @param {number} [maxHeight] 
     * @param {string} [crop] 
     * @param {number} [quality] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    transformTreeDocumentContentRaw(requestParameters: DocumentsApiTransformTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Returns transformations on a document. For example, resizing an image. By Path
     * Get Resized Image by Path
     */
    transformTreeDocumentContent(requestParameters: DocumentsApiTransformTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Update Document
     * @summary Update Document
     * @param {string} documentListName DocumentListName name where the document resides
     * @param {string} documentId Id of the document to update
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Document} [document] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    updateDocumentRaw(requestParameters: DocumentsApiUpdateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>>;

    /**
     * Update Document
     * Update Document
     */
    updateDocument(requestParameters: DocumentsApiUpdateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document>;

    /**
     * Update Document Content
     * @summary Update Document Content
     * @param {string} documentListName 
     * @param {string} documentId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ContentHttpRequestMessage} [contentHttpRequestMessage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    updateDocumentContentRaw(requestParameters: DocumentsApiUpdateDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update Document Content
     * Update Document Content
     */
    updateDocumentContent(requestParameters: DocumentsApiUpdateDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Update Document Content by Path
     * @summary Update Document Content by Path
     * @param {string} documentListName The Mozu.Content.Contracts.DocumentList in which the document resides
     * @param {string} documentName 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ContentHttpRequestMessage} [contentHttpRequestMessage] Binary document content to store must be less than 16M
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    updateTreeDocumentContentRaw(requestParameters: DocumentsApiUpdateTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update Document Content by Path
     * Update Document Content by Path
     */
    updateTreeDocumentContent(requestParameters: DocumentsApiUpdateTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI implements DocumentsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Copy Document
     * Copy Document
     */


    async copyDocumentsRaw(requestParameters: DocumentsApiCopyDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCopyResponse>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling copyDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/copy`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.documentCopyRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Copy Document
     * Copy Document
     */
    async copyDocuments(requestParameters: DocumentsApiCopyDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCopyResponse> {
        const response = await this.copyDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Document
     * Create Document
     */


    async createDocumentRaw(requestParameters: DocumentsApiCreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling createDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.document,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Document
     * Create Document
     */
    async createDocument(requestParameters: DocumentsApiCreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.createDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Document
     * Delete Document
     */


    async deleteByPathRaw(requestParameters: DocumentsApiDeleteByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling deleteByPath.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document
     * Delete Document
     */
    async deleteByPath(requestParameters: DocumentsApiDeleteByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteByPathRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Document
     * Delete Document
     */


    async deleteDocumentRaw(requestParameters: DocumentsApiDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling deleteDocument.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling deleteDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document
     * Delete Document
     */
    async deleteDocument(requestParameters: DocumentsApiDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Document Content
     * Delete Document Content
     */


    async deleteDocumentContentRaw(requestParameters: DocumentsApiDeleteDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling deleteDocumentContent.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling deleteDocumentContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document Content
     * Delete Document Content
     */
    async deleteDocumentContent(requestParameters: DocumentsApiDeleteDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Document Content by Path
     * Delete Document Content by Path
     */


    async deleteTreeDocumentContentRaw(requestParameters: DocumentsApiDeleteTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling deleteTreeDocumentContent.');
        }

        if (requestParameters.documentName === null || requestParameters.documentName === undefined) {
            throw new runtime.RequiredError('documentName','Required parameter requestParameters.documentName was null or undefined when calling deleteTreeDocumentContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documentTree/{documentName}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters.documentName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentHttpRequestMessage,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Document Content by Path
     * Delete Document Content by Path
     */
    async deleteTreeDocumentContent(requestParameters: DocumentsApiDeleteTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTreeDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Get Document
     * Get Document
     */


    async getDocumentRaw(requestParameters: DocumentsApiGetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getDocument.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling getDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Document
     * Get Document
     */
    async getDocument(requestParameters: DocumentsApiGetDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.getDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document Content
     * Get Document Content
     */


    async getDocumentContentRaw(requestParameters: DocumentsApiGetDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getDocumentContent.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling getDocumentContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Document Content
     * Get Document Content
     */
    async getDocumentContent(requestParameters: DocumentsApiGetDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Get Document Content Headers
     * Get Document Content Headers
     */


    async getDocumentContentHeadRaw(requestParameters: DocumentsApiGetDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getDocumentContentHead.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling getDocumentContentHead.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Document Content Headers
     * Get Document Content Headers
     */
    async getDocumentContentHead(requestParameters: DocumentsApiGetDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getDocumentContentHeadRaw(requestParameters, initOverrides);
    }

    /**
     * Get Documents
     * Get Documents
     */


    async getDocumentsRaw(requestParameters: DocumentsApiGetDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCollection>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.includeSubPaths !== undefined) {
            queryParameters['includeSubPaths'] = requestParameters.includeSubPaths;
        }

        if (requestParameters.queryScope !== undefined) {
            queryParameters['queryScope'] = requestParameters.queryScope;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Documents
     * Get Documents
     */
    async getDocuments(requestParameters: DocumentsApiGetDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCollection> {
        const response = await this.getDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * Get Document by Path
     */


    async getTreeDocumentRaw(requestParameters: DocumentsApiGetTreeDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getTreeDocument.');
        }

        if (requestParameters.documentName === null || requestParameters.documentName === undefined) {
            throw new runtime.RequiredError('documentName','Required parameter requestParameters.documentName was null or undefined when calling getTreeDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documentTree/{documentName}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters.documentName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a specific Document within the specified ContentCollection using the specified document name, unique within a specific folder with the specified documentId, version, and status.
     * Get Document by Path
     */
    async getTreeDocument(requestParameters: DocumentsApiGetTreeDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.getTreeDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns transformations on a document. For example, resizing an image.
     * Get Document Content by Path
     */


    async getTreeDocumentContentRaw(requestParameters: DocumentsApiGetTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getTreeDocumentContent.');
        }

        if (requestParameters.documentName === null || requestParameters.documentName === undefined) {
            throw new runtime.RequiredError('documentName','Required parameter requestParameters.documentName was null or undefined when calling getTreeDocumentContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documentTree/{documentName}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters.documentName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns transformations on a document. For example, resizing an image.
     * Get Document Content by Path
     */
    async getTreeDocumentContent(requestParameters: DocumentsApiGetTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getTreeDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Get Document Content Headers by Path
     * Get Document Content Headers by Path
     */


    async getTreeDocumentContentHeadRaw(requestParameters: DocumentsApiGetTreeDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getTreeDocumentContentHead.');
        }

        if (requestParameters.documentName === null || requestParameters.documentName === undefined) {
            throw new runtime.RequiredError('documentName','Required parameter requestParameters.documentName was null or undefined when calling getTreeDocumentContentHead.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documentTree/{documentName}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters.documentName))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Document Content Headers by Path
     * Get Document Content Headers by Path
     */
    async getTreeDocumentContentHead(requestParameters: DocumentsApiGetTreeDocumentContentHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getTreeDocumentContentHeadRaw(requestParameters, initOverrides);
    }

    /**
     * Move Document
     * Move Document
     */


    async moveByPathRaw(requestParameters: DocumentsApiMoveByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentMoveSummary>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling moveByPath.');
        }

        const queryParameters: any = {};

        if (requestParameters.sourcePath !== undefined) {
            queryParameters['sourcePath'] = requestParameters.sourcePath;
        }

        if (requestParameters.destPath !== undefined) {
            queryParameters['destPath'] = requestParameters.destPath;
        }

        if (requestParameters.renameDuplicates !== undefined) {
            queryParameters['renameDuplicates'] = requestParameters.renameDuplicates;
        }

        if (requestParameters.previewMode !== undefined) {
            queryParameters['previewMode'] = requestParameters.previewMode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/move`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Move Document
     * Move Document
     */
    async moveByPath(requestParameters: DocumentsApiMoveByPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentMoveSummary> {
        const response = await this.moveByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch Document
     * Patch Document
     */


    async patchDocumentRaw(requestParameters: DocumentsApiPatchDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling patchDocument.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling patchDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.document,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Patch Document
     * Patch Document
     */
    async patchDocument(requestParameters: DocumentsApiPatchDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.patchDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns transformations on a document. For example, resizing an image.
     * Get Resized Image
     */


    async transformDocumentContentRaw(requestParameters: DocumentsApiTransformDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling transformDocumentContent.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling transformDocumentContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.crop !== undefined) {
            queryParameters['crop'] = requestParameters.crop;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}/transform`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns transformations on a document. For example, resizing an image.
     * Get Resized Image
     */
    async transformDocumentContent(requestParameters: DocumentsApiTransformDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transformDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Returns transformations on a document. For example, resizing an image. By Path
     * Get Resized Image by Path
     */


    async transformTreeDocumentContentRaw(requestParameters: DocumentsApiTransformTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling transformTreeDocumentContent.');
        }

        if (requestParameters.documentName === null || requestParameters.documentName === undefined) {
            throw new runtime.RequiredError('documentName','Required parameter requestParameters.documentName was null or undefined when calling transformTreeDocumentContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.width !== undefined) {
            queryParameters['width'] = requestParameters.width;
        }

        if (requestParameters.height !== undefined) {
            queryParameters['height'] = requestParameters.height;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        if (requestParameters.maxWidth !== undefined) {
            queryParameters['maxWidth'] = requestParameters.maxWidth;
        }

        if (requestParameters.maxHeight !== undefined) {
            queryParameters['maxHeight'] = requestParameters.maxHeight;
        }

        if (requestParameters.crop !== undefined) {
            queryParameters['crop'] = requestParameters.crop;
        }

        if (requestParameters.quality !== undefined) {
            queryParameters['quality'] = requestParameters.quality;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documentTree/{documentName}/transform`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters.documentName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns transformations on a document. For example, resizing an image. By Path
     * Get Resized Image by Path
     */
    async transformTreeDocumentContent(requestParameters: DocumentsApiTransformTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.transformTreeDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Update Document
     * Update Document
     */


    async updateDocumentRaw(requestParameters: DocumentsApiUpdateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling updateDocument.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling updateDocument.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.document,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Document
     * Update Document
     */
    async updateDocument(requestParameters: DocumentsApiUpdateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.updateDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Document Content
     * Update Document Content
     */


    async updateDocumentContentRaw(requestParameters: DocumentsApiUpdateDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling updateDocumentContent.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling updateDocumentContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documents/{documentId}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentHttpRequestMessage,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Document Content
     * Update Document Content
     */
    async updateDocumentContent(requestParameters: DocumentsApiUpdateDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateDocumentContentRaw(requestParameters, initOverrides);
    }

    /**
     * Update Document Content by Path
     * Update Document Content by Path
     */


    async updateTreeDocumentContentRaw(requestParameters: DocumentsApiUpdateTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling updateTreeDocumentContent.');
        }

        if (requestParameters.documentName === null || requestParameters.documentName === undefined) {
            throw new runtime.RequiredError('documentName','Required parameter requestParameters.documentName was null or undefined when calling updateTreeDocumentContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/documentTree/{documentName}/content`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"documentName"}}`, encodeURIComponent(String(requestParameters.documentName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.contentHttpRequestMessage,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Document Content by Path
     * Update Document Content by Path
     */
    async updateTreeDocumentContent(requestParameters: DocumentsApiUpdateTreeDocumentContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTreeDocumentContentRaw(requestParameters, initOverrides);
    }

}
