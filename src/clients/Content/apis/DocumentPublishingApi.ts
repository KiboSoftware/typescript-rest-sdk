/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  DocumentDraftSummaryPagedCollection,
} from '../models';


export namespace documentPublishingApiParams { 
    export interface DeleteDocumentDraftsRequest {
        documentLists?: string;
        responseFields?: string;
        requestBody?: Array<string>;
    }
    export interface ListDocumentDraftSummariesRequest {
        pageSize?: number;
        startIndex?: number;
        documentLists?: string;
        responseFields?: string;
    }
    export interface PublishDocumentsRequest {
        documentLists?: string;
        responseFields?: string;
        requestBody?: Array<string>;
    }
}
/**
* DocumentPublishingApiService - interface
* 
* @export
* @interface DocumentPublishingApi
*/
export interface DocumentPublishingApiService {
    /**
    * Remove draft of each Document associated with te id in documentIds. Send empty body to remove all drafts
    * @summary Delete Document Drafts
    * @param {string} [documentLists] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<string>} [requestBody] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPublishingApiInterface
    */
    deleteDocumentDraftsRaw(requestParameters: documentPublishingApiParams.DeleteDocumentDraftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Remove draft of each Document associated with te id in documentIds. Send empty body to remove all drafts
    * Delete Document Drafts
    */
    deleteDocumentDrafts(requestParameters: documentPublishingApiParams.DeleteDocumentDraftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get Document Draft Summaries
    * @summary Get Document Draft Summaries
    * @param {number} [pageSize] maximum number of items to return
    * @param {number} [startIndex] 
    * @param {string} [documentLists] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPublishingApiInterface
    */
    listDocumentDraftSummariesRaw(requestParameters: documentPublishingApiParams.ListDocumentDraftSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentDraftSummaryPagedCollection>>;

    /**
    * Get Document Draft Summaries
    * Get Document Draft Summaries
    */
    listDocumentDraftSummaries(requestParameters: documentPublishingApiParams.ListDocumentDraftSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentDraftSummaryPagedCollection>;

    /**
    * Publishes draft of each Document associated with the id in documentIds. Send empty body to publish all drafts
    * @summary Publish Documents
    * @param {string} [documentLists] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<string>} [requestBody] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPublishingApiInterface
    */
    publishDocumentsRaw(requestParameters: documentPublishingApiParams.PublishDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Publishes draft of each Document associated with the id in documentIds. Send empty body to publish all drafts
    * Publish Documents
    */
    publishDocuments(requestParameters: documentPublishingApiParams.PublishDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}


/**
 * 
 */
export class DocumentPublishingApi extends runtime.BaseAPI implements DocumentPublishingApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Remove draft of each Document associated with te id in documentIds. Send empty body to remove all drafts
     * Delete Document Drafts
     */


    async deleteDocumentDraftsRaw(requestParameters: documentPublishingApiParams.DeleteDocumentDraftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.documentLists !== undefined) {
            queryParameters['documentLists'] = requestParameters.documentLists;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentpublishing/draft`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove draft of each Document associated with te id in documentIds. Send empty body to remove all drafts
     * Delete Document Drafts
     */
    async deleteDocumentDrafts(requestParameters: documentPublishingApiParams.DeleteDocumentDraftsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDocumentDraftsRaw(requestParameters, initOverrides);
    }

    /**
     * Get Document Draft Summaries
     * Get Document Draft Summaries
     */


    async listDocumentDraftSummariesRaw(requestParameters: documentPublishingApiParams.ListDocumentDraftSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentDraftSummaryPagedCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.documentLists !== undefined) {
            queryParameters['documentLists'] = requestParameters.documentLists;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentpublishing/draft`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Document Draft Summaries
     * Get Document Draft Summaries
     */
    async listDocumentDraftSummaries(requestParameters: documentPublishingApiParams.ListDocumentDraftSummariesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentDraftSummaryPagedCollection> {
        const response = await this.listDocumentDraftSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes draft of each Document associated with the id in documentIds. Send empty body to publish all drafts
     * Publish Documents
     */


    async publishDocumentsRaw(requestParameters: documentPublishingApiParams.PublishDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.documentLists !== undefined) {
            queryParameters['documentLists'] = requestParameters.documentLists;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentpublishing/active`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publishes draft of each Document associated with the id in documentIds. Send empty body to publish all drafts
     * Publish Documents
     */
    async publishDocuments(requestParameters: documentPublishingApiParams.PublishDocumentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publishDocumentsRaw(requestParameters, initOverrides);
    }

}
