/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  DocumentCollection,
} from '../models';


export namespace viewsApiParams { 
    export interface GetViewDocumentsRequest {
        documentListName: string;
        viewName: string;
        filter?: string;
        sortBy?: string;
        pageSize?: number;
        startIndex?: number;
        includeInactive?: boolean;
        responseFields?: string;
    }
}
/**
* ViewsApiService - interface
* 
* @export
* @interface ViewsApi
*/
export interface ViewsApiService {
    /**
    * Get View Documents
    * @summary Get View Documents
    * @param {string} documentListName 
    * @param {string} viewName 
    * @param {string} [filter] 
    * @param {string} [sortBy] 
    * @param {number} [pageSize] 
    * @param {number} [startIndex] 
    * @param {boolean} [includeInactive] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ViewsApiInterface
    */
    getViewDocumentsRaw(requestParameters: viewsApiParams.GetViewDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCollection>>;

    /**
    * Get View Documents
    * Get View Documents
    */
    getViewDocuments(requestParameters: viewsApiParams.GetViewDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCollection>;

}


/**
 * 
 */
export class ViewsApi extends runtime.BaseAPI implements ViewsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get View Documents
     * Get View Documents
     */


    async getViewDocumentsRaw(requestParameters: viewsApiParams.GetViewDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentCollection>> {
        if (requestParameters.documentListName === null || requestParameters.documentListName === undefined) {
            throw new runtime.RequiredError('documentListName','Required parameter requestParameters.documentListName was null or undefined when calling getViewDocuments.');
        }

        if (requestParameters.viewName === null || requestParameters.viewName === undefined) {
            throw new runtime.RequiredError('viewName','Required parameter requestParameters.viewName was null or undefined when calling getViewDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlists/{documentListName}/views/{viewName}/documents`.replace(`{${"documentListName"}}`, encodeURIComponent(String(requestParameters.documentListName))).replace(`{${"viewName"}}`, encodeURIComponent(String(requestParameters.viewName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get View Documents
     * Get View Documents
     */
    async getViewDocuments(requestParameters: viewsApiParams.GetViewDocumentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentCollection> {
        const response = await this.getViewDocumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
