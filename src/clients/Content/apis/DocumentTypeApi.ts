/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  DocumentType,
  DocumentTypeCollection,
} from '../models';


export namespace documentTypeApiParams { 
    export interface CreateDocumentTypeRequest {
        responseFields?: string;
        documentType?: DocumentType;
    }
    export interface GetDocumentTypeRequest {
        documentTypeName: string;
        responseFields?: string;
    }
    export interface GetDocumentTypesRequest {
        pageSize?: number;
        startIndex?: number;
        responseFields?: string;
    }
    export interface UpdateDocumentTypeRequest {
        documentTypeName: string;
        responseFields?: string;
        documentType?: DocumentType;
    }
}
/**
* DocumentTypeApiService - interface
* 
* @export
* @interface DocumentTypeApi
*/
export interface DocumentTypeApiService {
    /**
    * Create Document Type
    * @summary Create Document Type
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DocumentType} [documentType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentTypeApiInterface
    */
    createDocumentTypeRaw(requestParameters: documentTypeApiParams.CreateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentType>>;

    /**
    * Create Document Type
    * Create Document Type
    */
    createDocumentType(requestParameters: documentTypeApiParams.CreateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentType>;

    /**
    * Get Document Type
    * @summary Get Document Type
    * @param {string} documentTypeName 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentTypeApiInterface
    */
    getDocumentTypeRaw(requestParameters: documentTypeApiParams.GetDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentType>>;

    /**
    * Get Document Type
    * Get Document Type
    */
    getDocumentType(requestParameters: documentTypeApiParams.GetDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentType>;

    /**
    * Get Document Types
    * @summary Get Document Types
    * @param {number} [pageSize] 
    * @param {number} [startIndex] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentTypeApiInterface
    */
    getDocumentTypesRaw(requestParameters: documentTypeApiParams.GetDocumentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypeCollection>>;

    /**
    * Get Document Types
    * Get Document Types
    */
    getDocumentTypes(requestParameters: documentTypeApiParams.GetDocumentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypeCollection>;

    /**
    * Update Document Type
    * @summary Update Document Type
    * @param {string} documentTypeName 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DocumentType} [documentType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentTypeApiInterface
    */
    updateDocumentTypeRaw(requestParameters: documentTypeApiParams.UpdateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentType>>;

    /**
    * Update Document Type
    * Update Document Type
    */
    updateDocumentType(requestParameters: documentTypeApiParams.UpdateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentType>;

}


/**
 * 
 */
export class DocumentTypeApi extends runtime.BaseAPI implements DocumentTypeApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Document Type
     * Create Document Type
     */


    async createDocumentTypeRaw(requestParameters: documentTypeApiParams.CreateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentType>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documenttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.documentType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Document Type
     * Create Document Type
     */
    async createDocumentType(requestParameters: documentTypeApiParams.CreateDocumentTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentType> {
        const response = await this.createDocumentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document Type
     * Get Document Type
     */


    async getDocumentTypeRaw(requestParameters: documentTypeApiParams.GetDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentType>> {
        if (requestParameters.documentTypeName === null || requestParameters.documentTypeName === undefined) {
            throw new runtime.RequiredError('documentTypeName','Required parameter requestParameters.documentTypeName was null or undefined when calling getDocumentType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documenttypes/{documentTypeName}`.replace(`{${"documentTypeName"}}`, encodeURIComponent(String(requestParameters.documentTypeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Document Type
     * Get Document Type
     */
    async getDocumentType(requestParameters: documentTypeApiParams.GetDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentType> {
        const response = await this.getDocumentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document Types
     * Get Document Types
     */


    async getDocumentTypesRaw(requestParameters: documentTypeApiParams.GetDocumentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documenttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Document Types
     * Get Document Types
     */
    async getDocumentTypes(requestParameters: documentTypeApiParams.GetDocumentTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentTypeCollection> {
        const response = await this.getDocumentTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Document Type
     * Update Document Type
     */


    async updateDocumentTypeRaw(requestParameters: documentTypeApiParams.UpdateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentType>> {
        if (requestParameters.documentTypeName === null || requestParameters.documentTypeName === undefined) {
            throw new runtime.RequiredError('documentTypeName','Required parameter requestParameters.documentTypeName was null or undefined when calling updateDocumentType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documenttypes/{documentTypeName}`.replace(`{${"documentTypeName"}}`, encodeURIComponent(String(requestParameters.documentTypeName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.documentType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Document Type
     * Update Document Type
     */
    async updateDocumentType(requestParameters: documentTypeApiParams.UpdateDocumentTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentType> {
        const response = await this.updateDocumentTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
