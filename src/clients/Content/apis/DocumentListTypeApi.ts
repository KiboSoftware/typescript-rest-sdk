/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  DocumentListType,
  DocumentListTypeCollection,
} from '../models';


export namespace documentListTypeApiParams { 
    export interface CreateDocumentListTypeRequest {
        responseFields?: string;
        documentListType?: DocumentListType;
    }
    export interface GetDocumentListTypeRequest {
        documentListTypeFQN: string;
        responseFields?: string;
    }
    export interface GetDocumentListTypesRequest {
        pageSize?: number;
        startIndex?: number;
        responseFields?: string;
    }
    export interface UpdateDocumentListTypeRequest {
        documentListTypeFQN: string;
        responseFields?: string;
        documentListType?: DocumentListType;
    }
}
/**
* DocumentListTypeApiService - interface
* 
* @export
* @interface DocumentListTypeApi
*/
export interface DocumentListTypeApiService {
    /**
    * Create Document List Type
    * @summary Create Document List Type
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DocumentListType} [documentListType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentListTypeApiInterface
    */
    createDocumentListTypeRaw(requestParameters: documentListTypeApiParams.CreateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>>;

    /**
    * Create Document List Type
    * Create Document List Type
    */
    createDocumentListType(requestParameters: documentListTypeApiParams.CreateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType>;

    /**
    * Get Document List Type
    * @summary Get Document List Type
    * @param {string} documentListTypeFQN 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentListTypeApiInterface
    */
    getDocumentListTypeRaw(requestParameters: documentListTypeApiParams.GetDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>>;

    /**
    * Get Document List Type
    * Get Document List Type
    */
    getDocumentListType(requestParameters: documentListTypeApiParams.GetDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType>;

    /**
    * Get Document List Types
    * @summary Get Document List Types
    * @param {number} [pageSize] 
    * @param {number} [startIndex] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentListTypeApiInterface
    */
    getDocumentListTypesRaw(requestParameters: documentListTypeApiParams.GetDocumentListTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListTypeCollection>>;

    /**
    * Get Document List Types
    * Get Document List Types
    */
    getDocumentListTypes(requestParameters: documentListTypeApiParams.GetDocumentListTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListTypeCollection>;

    /**
    * Update Document List Type
    * @summary Update Document List Type
    * @param {string} documentListTypeFQN The name of the document documentListName to update
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DocumentListType} [documentListType] Content Collection values to apply
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentListTypeApiInterface
    */
    updateDocumentListTypeRaw(requestParameters: documentListTypeApiParams.UpdateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>>;

    /**
    * Update Document List Type
    * Update Document List Type
    */
    updateDocumentListType(requestParameters: documentListTypeApiParams.UpdateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType>;

}


/**
 * 
 */
export class DocumentListTypeApi extends runtime.BaseAPI implements DocumentListTypeApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Document List Type
     * Create Document List Type
     */


    async createDocumentListTypeRaw(requestParameters: documentListTypeApiParams.CreateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.documentListType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Document List Type
     * Create Document List Type
     */
    async createDocumentListType(requestParameters: documentListTypeApiParams.CreateDocumentListTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType> {
        const response = await this.createDocumentListTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document List Type
     * Get Document List Type
     */


    async getDocumentListTypeRaw(requestParameters: documentListTypeApiParams.GetDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>> {
        if (requestParameters.documentListTypeFQN === null || requestParameters.documentListTypeFQN === undefined) {
            throw new runtime.RequiredError('documentListTypeFQN','Required parameter requestParameters.documentListTypeFQN was null or undefined when calling getDocumentListType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes/{documentListTypeFQN}`.replace(`{${"documentListTypeFQN"}}`, encodeURIComponent(String(requestParameters.documentListTypeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Document List Type
     * Get Document List Type
     */
    async getDocumentListType(requestParameters: documentListTypeApiParams.GetDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType> {
        const response = await this.getDocumentListTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document List Types
     * Get Document List Types
     */


    async getDocumentListTypesRaw(requestParameters: documentListTypeApiParams.GetDocumentListTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Document List Types
     * Get Document List Types
     */
    async getDocumentListTypes(requestParameters: documentListTypeApiParams.GetDocumentListTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListTypeCollection> {
        const response = await this.getDocumentListTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Document List Type
     * Update Document List Type
     */


    async updateDocumentListTypeRaw(requestParameters: documentListTypeApiParams.UpdateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>> {
        if (requestParameters.documentListTypeFQN === null || requestParameters.documentListTypeFQN === undefined) {
            throw new runtime.RequiredError('documentListTypeFQN','Required parameter requestParameters.documentListTypeFQN was null or undefined when calling updateDocumentListType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes/{documentListTypeFQN}`.replace(`{${"documentListTypeFQN"}}`, encodeURIComponent(String(requestParameters.documentListTypeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.documentListType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Document List Type
     * Update Document List Type
     */
    async updateDocumentListType(requestParameters: documentListTypeApiParams.UpdateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType> {
        const response = await this.updateDocumentListTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
