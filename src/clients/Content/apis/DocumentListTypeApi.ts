/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  DocumentListType,
  DocumentListTypeCollection,
} from '../models';
import {
    DocumentListTypeFromJSON,
    DocumentListTypeToJSON,
    DocumentListTypeCollectionFromJSON,
    DocumentListTypeCollectionToJSON,
} from '../models';

export interface DocumentListTypeApiCreateDocumentListTypeRequest {
    documentListType?: DocumentListType;
}

export interface DocumentListTypeApiGetDocumentListTypeRequest {
    documentListTypeFQN: string;
}

export interface DocumentListTypeApiGetDocumentListTypesRequest {
    pageSize?: number;
    startIndex?: number;
}

export interface DocumentListTypeApiUpdateDocumentListTypeRequest {
    documentListTypeFQN: string;
    documentListType?: DocumentListType;
}

/**
 * 
 */
export class DocumentListTypeApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Document List Type
     * Create Document List Type
     */


    async createDocumentListTypeRaw(requestParameters: DocumentListTypeApiCreateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentListTypeToJSON(requestParameters.documentListType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListTypeFromJSON(jsonValue));
    }

    /**
     * Create Document List Type
     * Create Document List Type
     */
    async createDocumentListType(requestParameters: DocumentListTypeApiCreateDocumentListTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType> {
        const response = await this.createDocumentListTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document List Type
     * Get Document List Type
     */


    async getDocumentListTypeRaw(requestParameters: DocumentListTypeApiGetDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>> {
        if (requestParameters.documentListTypeFQN === null || requestParameters.documentListTypeFQN === undefined) {
            throw new runtime.RequiredError('documentListTypeFQN','Required parameter requestParameters.documentListTypeFQN was null or undefined when calling getDocumentListType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes/{documentListTypeFQN}`.replace(`{${"documentListTypeFQN"}}`, encodeURIComponent(String(requestParameters.documentListTypeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListTypeFromJSON(jsonValue));
    }

    /**
     * Get Document List Type
     * Get Document List Type
     */
    async getDocumentListType(requestParameters: DocumentListTypeApiGetDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType> {
        const response = await this.getDocumentListTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Document List Types
     * Get Document List Types
     */


    async getDocumentListTypesRaw(requestParameters: DocumentListTypeApiGetDocumentListTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListTypeCollectionFromJSON(jsonValue));
    }

    /**
     * Get Document List Types
     * Get Document List Types
     */
    async getDocumentListTypes(requestParameters: DocumentListTypeApiGetDocumentListTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListTypeCollection> {
        const response = await this.getDocumentListTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Document List Type
     * Update Document List Type
     */


    async updateDocumentListTypeRaw(requestParameters: DocumentListTypeApiUpdateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentListType>> {
        if (requestParameters.documentListTypeFQN === null || requestParameters.documentListTypeFQN === undefined) {
            throw new runtime.RequiredError('documentListTypeFQN','Required parameter requestParameters.documentListTypeFQN was null or undefined when calling updateDocumentListType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'text/plain';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/documentlistTypes/{documentListTypeFQN}`.replace(`{${"documentListTypeFQN"}}`, encodeURIComponent(String(requestParameters.documentListTypeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentListTypeToJSON(requestParameters.documentListType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentListTypeFromJSON(jsonValue));
    }

    /**
     * Update Document List Type
     * Update Document List Type
     */
    async updateDocumentListType(requestParameters: DocumentListTypeApiUpdateDocumentListTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentListType> {
        const response = await this.updateDocumentListTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
