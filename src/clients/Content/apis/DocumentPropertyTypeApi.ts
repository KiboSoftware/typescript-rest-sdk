/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Content Service
 * OpenAPI Spec for Kibo Content Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  PropertyType,
  PropertyTypeCollection,
} from '../models';


export namespace documentPropertyTypeApiParams { 
    export interface CreatePropertyTypeRequest {
        responseFields?: string;
        propertyType?: PropertyType;
    }
    export interface DeletePropertyTypeRequest {
        propertyTypeName: string;
    }
    export interface GetPropertyTypeRequest {
        propertyTypeName: string;
        responseFields?: string;
    }
    export interface GetPropertyTypesRequest {
        pageSize?: number;
        startIndex?: number;
        responseFields?: string;
    }
    export interface UpdatePropertyTypeRequest {
        propertyTypeName: string;
        responseFields?: string;
        propertyType?: PropertyType;
    }
}
/**
* DocumentPropertyTypeApiService - interface
* 
* @export
* @interface DocumentPropertyTypeApi
*/
export interface DocumentPropertyTypeApiService {
    /**
    * Create Property Type
    * @summary Create Property Type
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {PropertyType} [propertyType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPropertyTypeApiInterface
    */
    createPropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.CreatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyType>>;

    /**
    * Create Property Type
    * Create Property Type
    */
    createPropertyType(requestParameters: documentPropertyTypeApiParams.CreatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyType>;

    /**
    * Delete Property Type
    * @summary Delete Property Type
    * @param {string} propertyTypeName 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPropertyTypeApiInterface
    */
    deletePropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.DeletePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete Property Type
    * Delete Property Type
    */
    deletePropertyType(requestParameters: documentPropertyTypeApiParams.DeletePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get Property Type
    * @summary Get Property Type
    * @param {string} propertyTypeName 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPropertyTypeApiInterface
    */
    getPropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.GetPropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyType>>;

    /**
    * Get Property Type
    * Get Property Type
    */
    getPropertyType(requestParameters: documentPropertyTypeApiParams.GetPropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyType>;

    /**
    * Retrieves a PagedCollection of PropertyTypes
    * @summary Get Property Types
    * @param {number} [pageSize] 
    * @param {number} [startIndex] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPropertyTypeApiInterface
    */
    getPropertyTypesRaw(requestParameters: documentPropertyTypeApiParams.GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyTypeCollection>>;

    /**
    * Retrieves a PagedCollection of PropertyTypes
    * Get Property Types
    */
    getPropertyTypes(requestParameters: documentPropertyTypeApiParams.GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyTypeCollection>;

    /**
    * Update Property Type
    * @summary Update Property Type
    * @param {string} propertyTypeName 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {PropertyType} [propertyType] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DocumentPropertyTypeApiInterface
    */
    updatePropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.UpdatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyType>>;

    /**
    * Update Property Type
    * Update Property Type
    */
    updatePropertyType(requestParameters: documentPropertyTypeApiParams.UpdatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyType>;

}


/**
 * 
 */
export class DocumentPropertyTypeApi extends runtime.BaseAPI implements DocumentPropertyTypeApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Property Type
     * Create Property Type
     */


    async createPropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.CreatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyType>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/propertytypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.propertyType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Property Type
     * Create Property Type
     */
    async createPropertyType(requestParameters: documentPropertyTypeApiParams.CreatePropertyTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyType> {
        const response = await this.createPropertyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Property Type
     * Delete Property Type
     */


    async deletePropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.DeletePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.propertyTypeName === null || requestParameters.propertyTypeName === undefined) {
            throw new runtime.RequiredError('propertyTypeName','Required parameter requestParameters.propertyTypeName was null or undefined when calling deletePropertyType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/propertytypes/{propertyTypeName}`.replace(`{${"propertyTypeName"}}`, encodeURIComponent(String(requestParameters.propertyTypeName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Property Type
     * Delete Property Type
     */
    async deletePropertyType(requestParameters: documentPropertyTypeApiParams.DeletePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Get Property Type
     * Get Property Type
     */


    async getPropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.GetPropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyType>> {
        if (requestParameters.propertyTypeName === null || requestParameters.propertyTypeName === undefined) {
            throw new runtime.RequiredError('propertyTypeName','Required parameter requestParameters.propertyTypeName was null or undefined when calling getPropertyType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/propertytypes/{propertyTypeName}`.replace(`{${"propertyTypeName"}}`, encodeURIComponent(String(requestParameters.propertyTypeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Property Type
     * Get Property Type
     */
    async getPropertyType(requestParameters: documentPropertyTypeApiParams.GetPropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyType> {
        const response = await this.getPropertyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a PagedCollection of PropertyTypes
     * Get Property Types
     */


    async getPropertyTypesRaw(requestParameters: documentPropertyTypeApiParams.GetPropertyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/propertytypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a PagedCollection of PropertyTypes
     * Get Property Types
     */
    async getPropertyTypes(requestParameters: documentPropertyTypeApiParams.GetPropertyTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyTypeCollection> {
        const response = await this.getPropertyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Property Type
     * Update Property Type
     */


    async updatePropertyTypeRaw(requestParameters: documentPropertyTypeApiParams.UpdatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyType>> {
        if (requestParameters.propertyTypeName === null || requestParameters.propertyTypeName === undefined) {
            throw new runtime.RequiredError('propertyTypeName','Required parameter requestParameters.propertyTypeName was null or undefined when calling updatePropertyType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/content/propertytypes/{propertyTypeName}`.replace(`{${"propertyTypeName"}}`, encodeURIComponent(String(requestParameters.propertyTypeName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.propertyType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Property Type
     * Update Property Type
     */
    async updatePropertyType(requestParameters: documentPropertyTypeApiParams.UpdatePropertyTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyType> {
        const response = await this.updatePropertyTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
