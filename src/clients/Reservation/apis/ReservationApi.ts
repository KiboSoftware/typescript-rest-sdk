/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Reservation Web API
 * OpenAPI Spec for Kibo Reservation Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  OrderReservati,
  Reservati,
  ReservationCollecti,
  ReservationItem,
  ReservationWebAPIOrderAttribute,
} from '../models';

export interface ActivateReservationRequest {
    reservationId: string;
    responseFields?: string;
}

export interface AddItemRequest {
    reservationId: string;
    zipCode?: string;
    responseFields?: string;
    reservationItem?: ReservationItem;
}

export interface CloseReservationRequest {
    reservationId: string;
    responseFields?: string;
}

export interface ConvertToOrderReservationRequest {
    reservationId: string;
    responseFields?: string;
    orderReservati?: OrderReservati;
}

export interface CreateReservationRequest {
    responseFields?: string;
    reservati?: Reservati;
}

export interface DeleteReservationRequest {
    reservationId: string;
}

export interface GetAllocationStatusRequest {
    reservationId: string;
    responseFields?: string;
}

export interface GetReservationByIdRequest {
    reservationId: string;
    responseFields?: string;
}

export interface GetReservationsRequest {
    responseFields?: string;
}

export interface GetReservationsByCartIdRequest {
    cartId: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
    responseFields?: string;
}

export interface RemoveItemRequest {
    reservationId: string;
    reservationItemId: string;
}

export interface UpdateItemQuantityRequest {
    reservationId: string;
    reservationItemId: string;
    quantity: number;
    responseFields?: string;
}

export interface UpdateReservationRequest {
    reservationId: string;
    responseFields?: string;
    reservati?: Reservati;
}

export interface UpdateReservationItemRequest {
    reservationId: string;
    reservationItemId: string;
    zipCode?: string;
    responseFields?: string;
    reservationItem?: ReservationItem;
}

export interface UpdateTimerRequest {
    reservationId: string;
    responseFields?: string;
}

export interface UpdateZipCodeRequest {
    reservationId: string;
    zipCode: string;
    responseFields?: string;
    reservationWebAPIOrderAttribute?: Array<ReservationWebAPIOrderAttribute>;
}

/**
 * ReservationApi - interface
 * 
 * @export
 * @interface ReservationApiInterface
 */
export interface ReservationApiInterface {
    /**
     * Activate Reservation
     * @summary Activate Reservation
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    activateReservationRaw(requestParameters: ActivateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Activate Reservation
     * Activate Reservation
     */
    activateReservation(requestParameters: ActivateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Add Item
     * @summary Add Item
     * @param {string} reservationId 
     * @param {string} [zipCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReservationItem} [reservationItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    addItemRaw(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Add Item
     * Add Item
     */
    addItem(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Close Reservation
     * @summary Close Reservation
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    closeReservationRaw(requestParameters: CloseReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Close Reservation
     * Close Reservation
     */
    closeReservation(requestParameters: CloseReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Convert To Order Reservation
     * @summary Convert To Order Reservation
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OrderReservati} [orderReservati] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    convertToOrderReservationRaw(requestParameters: ConvertToOrderReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Convert To Order Reservation
     * Convert To Order Reservation
     */
    convertToOrderReservation(requestParameters: ConvertToOrderReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Create Reservation
     * @summary Create Reservation
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Reservati} [reservati] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    createReservationRaw(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Create Reservation
     * Create Reservation
     */
    createReservation(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Delete Reservation
     * @summary Delete Reservation
     * @param {string} reservationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    deleteReservationRaw(requestParameters: DeleteReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Reservation
     * Delete Reservation
     */
    deleteReservation(requestParameters: DeleteReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get Allocation Status
     * @summary Get Allocation Status
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    getAllocationStatusRaw(requestParameters: GetAllocationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>>;

    /**
     * Get Allocation Status
     * Get Allocation Status
     */
    getAllocationStatus(requestParameters: GetAllocationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }>;

    /**
     * Get Reservation By Id
     * @summary Get Reservation By Id
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    getReservationByIdRaw(requestParameters: GetReservationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Get Reservation By Id
     * Get Reservation By Id
     */
    getReservationById(requestParameters: GetReservationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Get Reservations
     * @summary Get Reservations
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    getReservationsRaw(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Get Reservations
     * Get Reservations
     */
    getReservations(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Get Reservations By Cart Id
     * @summary Get Reservations By Cart Id
     * @param {string} cartId 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [q] 
     * @param {number} [qLimit] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    getReservationsByCartIdRaw(requestParameters: GetReservationsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationCollecti>>;

    /**
     * Get Reservations By Cart Id
     * Get Reservations By Cart Id
     */
    getReservationsByCartId(requestParameters: GetReservationsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationCollecti>;

    /**
     * Remove Item
     * @summary Remove Item
     * @param {string} reservationId 
     * @param {string} reservationItemId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    removeItemRaw(requestParameters: RemoveItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Remove Item
     * Remove Item
     */
    removeItem(requestParameters: RemoveItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Update Item Quantity
     * @summary Update Item Quantity
     * @param {string} reservationId 
     * @param {string} reservationItemId 
     * @param {number} quantity 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    updateItemQuantityRaw(requestParameters: UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Update Item Quantity
     * Update Item Quantity
     */
    updateItemQuantity(requestParameters: UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Update Reservation
     * @summary Update Reservation
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Reservati} [reservati] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    updateReservationRaw(requestParameters: UpdateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Update Reservation
     * Update Reservation
     */
    updateReservation(requestParameters: UpdateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Update Reservation Item
     * @summary Update Reservation Item
     * @param {string} reservationId 
     * @param {string} reservationItemId 
     * @param {string} [zipCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ReservationItem} [reservationItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    updateReservationItemRaw(requestParameters: UpdateReservationItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Update Reservation Item
     * Update Reservation Item
     */
    updateReservationItem(requestParameters: UpdateReservationItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Update Timer
     * @summary Update Timer
     * @param {string} reservationId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    updateTimerRaw(requestParameters: UpdateTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Update Timer
     * Update Timer
     */
    updateTimer(requestParameters: UpdateTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

    /**
     * Update Zip Code
     * @summary Update Zip Code
     * @param {string} reservationId 
     * @param {string} zipCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ReservationWebAPIOrderAttribute>} [reservationWebAPIOrderAttribute] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApiInterface
     */
    updateZipCodeRaw(requestParameters: UpdateZipCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>>;

    /**
     * Update Zip Code
     * Update Zip Code
     */
    updateZipCode(requestParameters: UpdateZipCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati>;

}

/**
 * 
 */
export class ReservationApi extends runtime.BaseAPI implements ReservationApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Activate Reservation
     * Activate Reservation
     */


    async activateReservationRaw(requestParameters: ActivateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling activateReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/activate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Activate Reservation
     * Activate Reservation
     */
    async activateReservation(requestParameters: ActivateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.activateReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Item
     * Add Item
     */


    async addItemRaw(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling addItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/items`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reservationItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add Item
     * Add Item
     */
    async addItem(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.addItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Close Reservation
     * Close Reservation
     */


    async closeReservationRaw(requestParameters: CloseReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling closeReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/close`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Close Reservation
     * Close Reservation
     */
    async closeReservation(requestParameters: CloseReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.closeReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Convert To Order Reservation
     * Convert To Order Reservation
     */


    async convertToOrderReservationRaw(requestParameters: ConvertToOrderReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling convertToOrderReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/converttoorderreservation`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderReservati,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Convert To Order Reservation
     * Convert To Order Reservation
     */
    async convertToOrderReservation(requestParameters: ConvertToOrderReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.convertToOrderReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Reservation
     * Create Reservation
     */


    async createReservationRaw(requestParameters: CreateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reservati,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Reservation
     * Create Reservation
     */
    async createReservation(requestParameters: CreateReservationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.createReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Reservation
     * Delete Reservation
     */


    async deleteReservationRaw(requestParameters: DeleteReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Reservation
     * Delete Reservation
     */
    async deleteReservation(requestParameters: DeleteReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReservationRaw(requestParameters, initOverrides);
    }

    /**
     * Get Allocation Status
     * Get Allocation Status
     */


    async getAllocationStatusRaw(requestParameters: GetAllocationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getAllocationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/getallocationstatus`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Allocation Status
     * Get Allocation Status
     */
    async getAllocationStatus(requestParameters: GetAllocationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.getAllocationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservation By Id
     * Get Reservation By Id
     */


    async getReservationByIdRaw(requestParameters: GetReservationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationById.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Reservation By Id
     * Get Reservation By Id
     */
    async getReservationById(requestParameters: GetReservationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.getReservationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservations
     * Get Reservations
     */


    async getReservationsRaw(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Reservations
     * Get Reservations
     */
    async getReservations(requestParameters: GetReservationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.getReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservations By Cart Id
     * Get Reservations By Cart Id
     */


    async getReservationsByCartIdRaw(requestParameters: GetReservationsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationCollecti>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getReservationsByCartId.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/cart/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Reservations By Cart Id
     * Get Reservations By Cart Id
     */
    async getReservationsByCartId(requestParameters: GetReservationsByCartIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationCollecti> {
        const response = await this.getReservationsByCartIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Item
     * Remove Item
     */


    async removeItemRaw(requestParameters: RemoveItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling removeItem.');
        }

        if (requestParameters.reservationItemId === null || requestParameters.reservationItemId === undefined) {
            throw new runtime.RequiredError('reservationItemId','Required parameter requestParameters.reservationItemId was null or undefined when calling removeItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/items/{reservationItemId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"reservationItemId"}}`, encodeURIComponent(String(requestParameters.reservationItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Remove Item
     * Remove Item
     */
    async removeItem(requestParameters: RemoveItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.removeItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Item Quantity
     * Update Item Quantity
     */


    async updateItemQuantityRaw(requestParameters: UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.reservationItemId === null || requestParameters.reservationItemId === undefined) {
            throw new runtime.RequiredError('reservationItemId','Required parameter requestParameters.reservationItemId was null or undefined when calling updateItemQuantity.');
        }

        if (requestParameters.quantity === null || requestParameters.quantity === undefined) {
            throw new runtime.RequiredError('quantity','Required parameter requestParameters.quantity was null or undefined when calling updateItemQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/items/{reservationItemId}/quantity/{quantity}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"reservationItemId"}}`, encodeURIComponent(String(requestParameters.reservationItemId))).replace(`{${"quantity"}}`, encodeURIComponent(String(requestParameters.quantity))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Item Quantity
     * Update Item Quantity
     */
    async updateItemQuantity(requestParameters: UpdateItemQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.updateItemQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Reservation
     * Update Reservation
     */


    async updateReservationRaw(requestParameters: UpdateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling updateReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reservati,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Reservation
     * Update Reservation
     */
    async updateReservation(requestParameters: UpdateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.updateReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Reservation Item
     * Update Reservation Item
     */


    async updateReservationItemRaw(requestParameters: UpdateReservationItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling updateReservationItem.');
        }

        if (requestParameters.reservationItemId === null || requestParameters.reservationItemId === undefined) {
            throw new runtime.RequiredError('reservationItemId','Required parameter requestParameters.reservationItemId was null or undefined when calling updateReservationItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.zipCode !== undefined) {
            queryParameters['zipCode'] = requestParameters.zipCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/items/{reservationItemId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"reservationItemId"}}`, encodeURIComponent(String(requestParameters.reservationItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reservationItem,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Reservation Item
     * Update Reservation Item
     */
    async updateReservationItem(requestParameters: UpdateReservationItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.updateReservationItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Timer
     * Update Timer
     */


    async updateTimerRaw(requestParameters: UpdateTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling updateTimer.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/updatetimer`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Timer
     * Update Timer
     */
    async updateTimer(requestParameters: UpdateTimerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.updateTimerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Zip Code
     * Update Zip Code
     */


    async updateZipCodeRaw(requestParameters: UpdateZipCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservati>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling updateZipCode.');
        }

        if (requestParameters.zipCode === null || requestParameters.zipCode === undefined) {
            throw new runtime.RequiredError('zipCode','Required parameter requestParameters.zipCode was null or undefined when calling updateZipCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/reservation/{reservationId}/zipcode/{zipCode}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"zipCode"}}`, encodeURIComponent(String(requestParameters.zipCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.reservationWebAPIOrderAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Zip Code
     * Update Zip Code
     */
    async updateZipCode(requestParameters: UpdateZipCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservati> {
        const response = await this.updateZipCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
