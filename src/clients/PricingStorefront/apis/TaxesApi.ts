/* tslint:disable */
/* eslint-disable */
/**
 * Kibo PricingRuntime Service
 * OpenAPI Spec for Kibo PricingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  OrderTaxContext,
  TaxableOrder,
} from '../models';


export namespace taxesApiParams { 
    export interface StorefrontEstimateTaxesRequest {
        responseFields?: string;
        taxableOrder?: TaxableOrder;
    }
}
/**
* TaxesApiService - interface
* 
* @export
* @interface TaxesApi
*/
export interface TaxesApiService {
    /**
    * Retrieves a tax context for the order
    * @summary Get a tax for the given order payload
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {TaxableOrder} [taxableOrder] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TaxesApiInterface
    */
    storefrontEstimateTaxesRaw(requestParameters: taxesApiParams.StorefrontEstimateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTaxContext>>;

    /**
    * Retrieves a tax context for the order
    * Get a tax for the given order payload
    */
    storefrontEstimateTaxes(requestParameters: taxesApiParams.StorefrontEstimateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTaxContext>;

}


/**
 * 
 */
export class TaxesApi extends runtime.BaseAPI implements TaxesApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves a tax context for the order
     * Get a tax for the given order payload
     */


    async storefrontEstimateTaxesRaw(requestParameters: taxesApiParams.StorefrontEstimateTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderTaxContext>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/tax/estimate-order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.taxableOrder,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a tax context for the order
     * Get a tax for the given order payload
     */
    async storefrontEstimateTaxes(requestParameters: taxesApiParams.StorefrontEstimateTaxesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderTaxContext> {
        const response = await this.storefrontEstimateTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
