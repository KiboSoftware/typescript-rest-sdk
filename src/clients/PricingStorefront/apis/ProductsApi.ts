/* tslint:disable */
/* eslint-disable */
/**
 * Kibo PricingRuntime Service
 * OpenAPI Spec for Kibo PricingRuntime Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  FindDiscountsResponse,
  FindItemDiscountsRequest,
  FindOrderDiscountsRequest,
} from '../models';


export namespace productsApiParams { 
    export interface StorefrontSecureFindItemDiscountsRequest {
        nonPublicOnly?: boolean;
        responseFields?: string;
        findItemDiscountsRequest?: FindItemDiscountsRequest;
    }
    export interface StorefrontSecureFindOrderDiscountsRequest {
        nonPublicOnly?: boolean;
        responseFields?: string;
        findOrderDiscountsRequest?: FindOrderDiscountsRequest;
    }
    export interface StorefrontSecureGetItemDiscountsRequest {
        productCode: string;
        nonPublicOnly?: boolean;
        responseFields?: string;
    }
}
/**
* ProductsApiService - interface
* 
* @export
* @interface ProductsApi
*/
export interface ProductsApiService {
    /**
    * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
    * @summary Get a list of item level discounts for the supplied products
    * @param {boolean} [nonPublicOnly] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {FindItemDiscountsRequest} [findItemDiscountsRequest] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontSecureFindItemDiscountsRaw(requestParameters: productsApiParams.StorefrontSecureFindItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FindDiscountsResponse>>>;

    /**
    * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
    * Get a list of item level discounts for the supplied products
    */
    storefrontSecureFindItemDiscounts(requestParameters: productsApiParams.StorefrontSecureFindItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FindDiscountsResponse>>;

    /**
    * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
    * @summary Get a list of order level discounts
    * @param {boolean} [nonPublicOnly] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {FindOrderDiscountsRequest} [findOrderDiscountsRequest] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontSecureFindOrderDiscountsRaw(requestParameters: productsApiParams.StorefrontSecureFindOrderDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FindDiscountsResponse>>>;

    /**
    * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
    * Get a list of order level discounts
    */
    storefrontSecureFindOrderDiscounts(requestParameters: productsApiParams.StorefrontSecureFindOrderDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FindDiscountsResponse>>;

    /**
    * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
    * @summary Get a list of item level discounts for the supplied products
    * @param {string} productCode 
    * @param {boolean} [nonPublicOnly] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof ProductsApiInterface
    */
    storefrontSecureGetItemDiscountsRaw(requestParameters: productsApiParams.StorefrontSecureGetItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindDiscountsResponse>>;

    /**
    * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
    * Get a list of item level discounts for the supplied products
    */
    storefrontSecureGetItemDiscounts(requestParameters: productsApiParams.StorefrontSecureGetItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindDiscountsResponse>;

}


/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI implements ProductsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
     * Get a list of item level discounts for the supplied products
     */


    async storefrontSecureFindItemDiscountsRaw(requestParameters: productsApiParams.StorefrontSecureFindItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FindDiscountsResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.nonPublicOnly !== undefined) {
            queryParameters['nonPublicOnly'] = requestParameters.nonPublicOnly;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/discounts/secure/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.findItemDiscountsRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
     * Get a list of item level discounts for the supplied products
     */
    async storefrontSecureFindItemDiscounts(requestParameters: productsApiParams.StorefrontSecureFindItemDiscountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FindDiscountsResponse>> {
        const response = await this.storefrontSecureFindItemDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
     * Get a list of order level discounts
     */


    async storefrontSecureFindOrderDiscountsRaw(requestParameters: productsApiParams.StorefrontSecureFindOrderDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FindDiscountsResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.nonPublicOnly !== undefined) {
            queryParameters['nonPublicOnly'] = requestParameters.nonPublicOnly;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/discounts/secure/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.findOrderDiscountsRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
     * Get a list of order level discounts
     */
    async storefrontSecureFindOrderDiscounts(requestParameters: productsApiParams.StorefrontSecureFindOrderDiscountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FindDiscountsResponse>> {
        const response = await this.storefrontSecureFindOrderDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
     * Get a list of item level discounts for the supplied products
     */


    async storefrontSecureGetItemDiscountsRaw(requestParameters: productsApiParams.StorefrontSecureGetItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindDiscountsResponse>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling storefrontSecureGetItemDiscounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.nonPublicOnly !== undefined) {
            queryParameters['nonPublicOnly'] = requestParameters.nonPublicOnly;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/storefront/discounts/secure/products/{productCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of discounts that appear on the storefront according to specified filter criteria.
     * Get a list of item level discounts for the supplied products
     */
    async storefrontSecureGetItemDiscounts(requestParameters: productsApiParams.StorefrontSecureGetItemDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindDiscountsResponse> {
        const response = await this.storefrontSecureGetItemDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
