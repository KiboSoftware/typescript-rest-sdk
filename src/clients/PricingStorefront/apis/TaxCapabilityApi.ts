/* tslint:disable */
/* eslint-disable */
/**
 * Kibo PricingRuntime Service
 * OpenAPI Spec for Kibo PricingRuntime Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ThrirdPartyOrderTaxContext,
  ThrirdPartyTaxableOrder,
} from '../models';
import {
    ThrirdPartyOrderTaxContextFromJSON,
    ThrirdPartyOrderTaxContextToJSON,
    ThrirdPartyTaxableOrderFromJSON,
    ThrirdPartyTaxableOrderToJSON,
} from '../models';

export interface TaxCapabilityApiGetTaxRequest {
    thrirdPartyTaxableOrder?: ThrirdPartyTaxableOrder;
}

/**
 * 
 */
export class TaxCapabilityApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get Tax
     * Get Tax
     */


    async getTaxRaw(requestParameters: TaxCapabilityApiGetTaxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThrirdPartyOrderTaxContext>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tax`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThrirdPartyTaxableOrderToJSON(requestParameters.thrirdPartyTaxableOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThrirdPartyOrderTaxContextFromJSON(jsonValue));
    }

    /**
     * Get Tax
     * Get Tax
     */
    async getTax(requestParameters: TaxCapabilityApiGetTaxRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThrirdPartyOrderTaxContext> {
        const response = await this.getTaxRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
