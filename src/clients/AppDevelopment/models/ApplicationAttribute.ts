/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Attribute } from './Attribute';
import {
    AttributeFromJSON,
    AttributeFromJSONTyped,
    AttributeToJSON,
} from './Attribute';

/**
 * Holds attribute definitions for AppVersion
 * @export
 * @interface ApplicationAttribute
 */
export interface ApplicationAttribute {
    /**
     * Customer, Order, or Product
     * @type {string}
     * @memberof ApplicationAttribute
     */
    subsystem?: string | null;
    /**
     * json representation of attribute definitions
     * @type {string}
     * @memberof ApplicationAttribute
     */
    attributeJson?: string | null;
    /**
     * Will contain ProductTypeCollection if Product, else AttributeSet
     * @type {string}
     * @memberof ApplicationAttribute
     */
    productTypeJson?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationAttribute
     */
    isAppliedToBase?: boolean;
    /**
     * Source Tenant Id
     * @type {number}
     * @memberof ApplicationAttribute
     */
    sourceTenantId?: number;
    /**
     * Source Tenant Name
     * @type {string}
     * @memberof ApplicationAttribute
     */
    sourceTenantName?: string | null;
    /**
     * Comma delimited list of attribute codes.
     * @type {string}
     * @memberof ApplicationAttribute
     */
    attributeCodes?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApplicationAttribute
     */
    packageId?: number;
    /**
     * 
     * @type {Array<Attribute>}
     * @memberof ApplicationAttribute
     */
    attributes?: Array<Attribute> | null;
}

/**
 * Check if a given object implements the ApplicationAttribute interface.
 */
export function instanceOfApplicationAttribute(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationAttributeFromJSON(json: any): ApplicationAttribute {
    return ApplicationAttributeFromJSONTyped(json, false);
}

export function ApplicationAttributeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationAttribute {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subsystem': !exists(json, 'subsystem') ? undefined : json['subsystem'],
        'attributeJson': !exists(json, 'attributeJson') ? undefined : json['attributeJson'],
        'productTypeJson': !exists(json, 'productTypeJson') ? undefined : json['productTypeJson'],
        'isAppliedToBase': !exists(json, 'isAppliedToBase') ? undefined : json['isAppliedToBase'],
        'sourceTenantId': !exists(json, 'sourceTenantId') ? undefined : json['sourceTenantId'],
        'sourceTenantName': !exists(json, 'sourceTenantName') ? undefined : json['sourceTenantName'],
        'attributeCodes': !exists(json, 'attributeCodes') ? undefined : json['attributeCodes'],
        'packageId': !exists(json, 'packageId') ? undefined : json['packageId'],
        'attributes': !exists(json, 'attributes') ? undefined : (json['attributes'] === null ? null : (json['attributes'] as Array<any>).map(AttributeFromJSON)),
    };
}

export function ApplicationAttributeToJSON(value?: ApplicationAttribute | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subsystem': value.subsystem,
        'attributeJson': value.attributeJson,
        'productTypeJson': value.productTypeJson,
        'isAppliedToBase': value.isAppliedToBase,
        'sourceTenantId': value.sourceTenantId,
        'sourceTenantName': value.sourceTenantName,
        'attributeCodes': value.attributeCodes,
        'packageId': value.packageId,
        'attributes': value.attributes === undefined ? undefined : (value.attributes === null ? null : (value.attributes as Array<any>).map(AttributeToJSON)),
    };
}

