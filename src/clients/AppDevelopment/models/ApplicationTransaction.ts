/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApplicationTransaction
 */
export interface ApplicationTransaction {
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    applicationTransactionId?: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    applicationId?: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    applicationEntitlementId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    tenantId?: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    siteId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    localeCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTransaction
     */
    isoCurrencyCode?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationTransaction
     */
    transactionDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    transactionPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    transactionTax?: number;
    /**
     * 
     * @type {number}
     * @memberof ApplicationTransaction
     */
    transactionTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof ApplicationTransaction
     */
    orderNumber?: string | null;
}

/**
 * Check if a given object implements the ApplicationTransaction interface.
 */
export function instanceOfApplicationTransaction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationTransactionFromJSON(json: any): ApplicationTransaction {
    return ApplicationTransactionFromJSONTyped(json, false);
}

export function ApplicationTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'applicationTransactionId': !exists(json, 'applicationTransactionId') ? undefined : json['applicationTransactionId'],
        'applicationId': !exists(json, 'applicationId') ? undefined : json['applicationId'],
        'applicationEntitlementId': !exists(json, 'applicationEntitlementId') ? undefined : json['applicationEntitlementId'],
        'tenantId': !exists(json, 'tenantId') ? undefined : json['tenantId'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'localeCode': !exists(json, 'localeCode') ? undefined : json['localeCode'],
        'isoCurrencyCode': !exists(json, 'isoCurrencyCode') ? undefined : json['isoCurrencyCode'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'transactionPrice': !exists(json, 'transactionPrice') ? undefined : json['transactionPrice'],
        'transactionTax': !exists(json, 'transactionTax') ? undefined : json['transactionTax'],
        'transactionTotal': !exists(json, 'transactionTotal') ? undefined : json['transactionTotal'],
        'orderNumber': !exists(json, 'orderNumber') ? undefined : json['orderNumber'],
    };
}

export function ApplicationTransactionToJSON(value?: ApplicationTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'applicationTransactionId': value.applicationTransactionId,
        'applicationId': value.applicationId,
        'applicationEntitlementId': value.applicationEntitlementId,
        'tenantId': value.tenantId,
        'siteId': value.siteId,
        'localeCode': value.localeCode,
        'isoCurrencyCode': value.isoCurrencyCode,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString()),
        'transactionPrice': value.transactionPrice,
        'transactionTax': value.transactionTax,
        'transactionTotal': value.transactionTotal,
        'orderNumber': value.orderNumber,
    };
}

