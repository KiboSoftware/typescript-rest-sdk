/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ApplicationVersionsCollection,
  FileMetadata,
  FolderMetadata,
  PackageNamesCollection,
  RenameInfo,
} from '../models';
import {
    ApplicationVersionsCollectionFromJSON,
    ApplicationVersionsCollectionToJSON,
    FileMetadataFromJSON,
    FileMetadataToJSON,
    FolderMetadataFromJSON,
    FolderMetadataToJSON,
    PackageNamesCollectionFromJSON,
    PackageNamesCollectionToJSON,
    RenameInfoFromJSON,
    RenameInfoToJSON,
} from '../models';

export interface PublicApplicationApiDeletePackageFileRequest {
    applicationKey: string;
    filepath: string;
}

export interface PublicApplicationApiGetAppPackageNamesRequest {
    applicationKey: string;
}

export interface PublicApplicationApiGetAppVersionsRequest {
    nsAndAppId: string;
}

export interface PublicApplicationApiGetPackageFileMetadataRequest {
    applicationKey: string;
    filepath: string;
}

export interface PublicApplicationApiGetPackageMetadataRequest {
    applicationKey: string;
}

export interface PublicApplicationApiRenamePackageFileRequest {
    applicationKey: string;
    renameInfo?: RenameInfo;
}

export interface PublicApplicationApiUpsertPackageFileRequest {
    applicationKey: string;
    filepath: string;
    lastModifiedTime?: string;
}

/**
 * 
 */
export class PublicApplicationApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Delete Package File
     */


    async deletePackageFileRaw(requestParameters: PublicApplicationApiDeletePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling deletePackageFile.');
        }

        if (requestParameters.filepath === null || requestParameters.filepath === undefined) {
            throw new runtime.RequiredError('filepath','Required parameter requestParameters.filepath was null or undefined when calling deletePackageFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/files/{filepath}`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))).replace(`{${"filepath"}}`, encodeURIComponent(String(requestParameters.filepath))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete Package File
     */
    async deletePackageFile(requestParameters: PublicApplicationApiDeletePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageFileRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get App Package Names
     */


    async getAppPackageNamesRaw(requestParameters: PublicApplicationApiGetAppPackageNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageNamesCollection>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling getAppPackageNames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/applications/{applicationKey}/packagenames`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageNamesCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Get App Package Names
     */
    async getAppPackageNames(requestParameters: PublicApplicationApiGetAppPackageNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageNamesCollection> {
        const response = await this.getAppPackageNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get App Versions
     */


    async getAppVersionsRaw(requestParameters: PublicApplicationApiGetAppVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationVersionsCollection>> {
        if (requestParameters.nsAndAppId === null || requestParameters.nsAndAppId === undefined) {
            throw new runtime.RequiredError('nsAndAppId','Required parameter requestParameters.nsAndAppId was null or undefined when calling getAppVersions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/applications/versions/{nsAndAppId}`.replace(`{${"nsAndAppId"}}`, encodeURIComponent(String(requestParameters.nsAndAppId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationVersionsCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Get App Versions
     */
    async getAppVersions(requestParameters: PublicApplicationApiGetAppVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationVersionsCollection> {
        const response = await this.getAppVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Package File Metadata
     */


    async getPackageFileMetadataRaw(requestParameters: PublicApplicationApiGetPackageFileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling getPackageFileMetadata.');
        }

        if (requestParameters.filepath === null || requestParameters.filepath === undefined) {
            throw new runtime.RequiredError('filepath','Required parameter requestParameters.filepath was null or undefined when calling getPackageFileMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/filemetadata/{filepath}`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))).replace(`{${"filepath"}}`, encodeURIComponent(String(requestParameters.filepath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetadataFromJSON(jsonValue));
    }

    /**
     * 
     * Get Package File Metadata
     */
    async getPackageFileMetadata(requestParameters: PublicApplicationApiGetPackageFileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata> {
        const response = await this.getPackageFileMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Package Metadata
     */


    async getPackageMetadataRaw(requestParameters: PublicApplicationApiGetPackageMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling getPackageMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/metadata`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderMetadataFromJSON(jsonValue));
    }

    /**
     * 
     * Get Package Metadata
     */
    async getPackageMetadata(requestParameters: PublicApplicationApiGetPackageMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderMetadata> {
        const response = await this.getPackageMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Rename Package File
     */


    async renamePackageFileRaw(requestParameters: PublicApplicationApiRenamePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling renamePackageFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/files_rename`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RenameInfoToJSON(requestParameters.renameInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetadataFromJSON(jsonValue));
    }

    /**
     * 
     * Rename Package File
     */
    async renamePackageFile(requestParameters: PublicApplicationApiRenamePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata> {
        const response = await this.renamePackageFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Upsert Package File
     */


    async upsertPackageFileRaw(requestParameters: PublicApplicationApiUpsertPackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling upsertPackageFile.');
        }

        if (requestParameters.filepath === null || requestParameters.filepath === undefined) {
            throw new runtime.RequiredError('filepath','Required parameter requestParameters.filepath was null or undefined when calling upsertPackageFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastModifiedTime !== undefined) {
            queryParameters['lastModifiedTime'] = requestParameters.lastModifiedTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/files/{filepath}`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))).replace(`{${"filepath"}}`, encodeURIComponent(String(requestParameters.filepath))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileMetadataFromJSON(jsonValue));
    }

    /**
     * 
     * Upsert Package File
     */
    async upsertPackageFile(requestParameters: PublicApplicationApiUpsertPackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata> {
        const response = await this.upsertPackageFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
