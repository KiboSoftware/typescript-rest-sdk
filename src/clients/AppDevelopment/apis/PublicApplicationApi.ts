/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ApplicationVersionsCollection,
  FileMetadata,
  FolderMetadata,
  PackageNamesCollection,
  RenameInfo,
} from '../models';


export namespace publicApplicationApiParams { 
    export interface DeletePackageFileRequest {
        applicationKey: string;
        filepath: string;
    }
    export interface GetAppPackageNamesRequest {
        applicationKey: string;
        responseFields?: string;
    }
    export interface GetAppVersionsRequest {
        nsAndAppId: string;
        responseFields?: string;
    }
    export interface GetPackageFileMetadataRequest {
        applicationKey: string;
        filepath: string;
        responseFields?: string;
    }
    export interface GetPackageMetadataRequest {
        applicationKey: string;
        responseFields?: string;
    }
    export interface RenamePackageFileRequest {
        applicationKey: string;
        responseFields?: string;
        renameInfo?: RenameInfo;
    }
    export interface UpsertPackageFileRequest {
        applicationKey: string;
        filepath: string;
        lastModifiedTime?: string;
        responseFields?: string;
    }
}
/**
* PublicApplicationApiService - interface
* 
* @export
* @interface PublicApplicationApi
*/
export interface PublicApplicationApiService {
    /**
    * 
    * @summary Delete Package File
    * @param {string} applicationKey 
    * @param {string} filepath 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    deletePackageFileRaw(requestParameters: publicApplicationApiParams.DeletePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Delete Package File
    */
    deletePackageFile(requestParameters: publicApplicationApiParams.DeletePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Get App Package Names
    * @param {string} applicationKey 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    getAppPackageNamesRaw(requestParameters: publicApplicationApiParams.GetAppPackageNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageNamesCollection>>;

    /**
    * 
    * Get App Package Names
    */
    getAppPackageNames(requestParameters: publicApplicationApiParams.GetAppPackageNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageNamesCollection>;

    /**
    * 
    * @summary Get App Versions
    * @param {string} nsAndAppId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    getAppVersionsRaw(requestParameters: publicApplicationApiParams.GetAppVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationVersionsCollection>>;

    /**
    * 
    * Get App Versions
    */
    getAppVersions(requestParameters: publicApplicationApiParams.GetAppVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationVersionsCollection>;

    /**
    * 
    * @summary Get Package File Metadata
    * @param {string} applicationKey 
    * @param {string} filepath 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    getPackageFileMetadataRaw(requestParameters: publicApplicationApiParams.GetPackageFileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>>;

    /**
    * 
    * Get Package File Metadata
    */
    getPackageFileMetadata(requestParameters: publicApplicationApiParams.GetPackageFileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata>;

    /**
    * 
    * @summary Get Package Metadata
    * @param {string} applicationKey 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    getPackageMetadataRaw(requestParameters: publicApplicationApiParams.GetPackageMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderMetadata>>;

    /**
    * 
    * Get Package Metadata
    */
    getPackageMetadata(requestParameters: publicApplicationApiParams.GetPackageMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderMetadata>;

    /**
    * 
    * @summary Rename Package File
    * @param {string} applicationKey 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {RenameInfo} [renameInfo] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    renamePackageFileRaw(requestParameters: publicApplicationApiParams.RenamePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>>;

    /**
    * 
    * Rename Package File
    */
    renamePackageFile(requestParameters: publicApplicationApiParams.RenamePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata>;

    /**
    * 
    * @summary Upsert Package File
    * @param {string} applicationKey 
    * @param {string} filepath 
    * @param {string} [lastModifiedTime] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PublicApplicationApiInterface
    */
    upsertPackageFileRaw(requestParameters: publicApplicationApiParams.UpsertPackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>>;

    /**
    * 
    * Upsert Package File
    */
    upsertPackageFile(requestParameters: publicApplicationApiParams.UpsertPackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata>;

}


/**
 * 
 */
export class PublicApplicationApi extends runtime.BaseAPI implements PublicApplicationApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Delete Package File
     */


    async deletePackageFileRaw(requestParameters: publicApplicationApiParams.DeletePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling deletePackageFile.');
        }

        if (requestParameters.filepath === null || requestParameters.filepath === undefined) {
            throw new runtime.RequiredError('filepath','Required parameter requestParameters.filepath was null or undefined when calling deletePackageFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/files/{filepath}`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))).replace(`{${"filepath"}}`, encodeURIComponent(String(requestParameters.filepath))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete Package File
     */
    async deletePackageFile(requestParameters: publicApplicationApiParams.DeletePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePackageFileRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get App Package Names
     */


    async getAppPackageNamesRaw(requestParameters: publicApplicationApiParams.GetAppPackageNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageNamesCollection>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling getAppPackageNames.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/applications/{applicationKey}/packagenames`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get App Package Names
     */
    async getAppPackageNames(requestParameters: publicApplicationApiParams.GetAppPackageNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageNamesCollection> {
        const response = await this.getAppPackageNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get App Versions
     */


    async getAppVersionsRaw(requestParameters: publicApplicationApiParams.GetAppVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationVersionsCollection>> {
        if (requestParameters.nsAndAppId === null || requestParameters.nsAndAppId === undefined) {
            throw new runtime.RequiredError('nsAndAppId','Required parameter requestParameters.nsAndAppId was null or undefined when calling getAppVersions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/applications/versions/{nsAndAppId}`.replace(`{${"nsAndAppId"}}`, encodeURIComponent(String(requestParameters.nsAndAppId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get App Versions
     */
    async getAppVersions(requestParameters: publicApplicationApiParams.GetAppVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationVersionsCollection> {
        const response = await this.getAppVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Package File Metadata
     */


    async getPackageFileMetadataRaw(requestParameters: publicApplicationApiParams.GetPackageFileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling getPackageFileMetadata.');
        }

        if (requestParameters.filepath === null || requestParameters.filepath === undefined) {
            throw new runtime.RequiredError('filepath','Required parameter requestParameters.filepath was null or undefined when calling getPackageFileMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/filemetadata/{filepath}`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))).replace(`{${"filepath"}}`, encodeURIComponent(String(requestParameters.filepath))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get Package File Metadata
     */
    async getPackageFileMetadata(requestParameters: publicApplicationApiParams.GetPackageFileMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata> {
        const response = await this.getPackageFileMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get Package Metadata
     */


    async getPackageMetadataRaw(requestParameters: publicApplicationApiParams.GetPackageMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling getPackageMetadata.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/metadata`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get Package Metadata
     */
    async getPackageMetadata(requestParameters: publicApplicationApiParams.GetPackageMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderMetadata> {
        const response = await this.getPackageMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Rename Package File
     */


    async renamePackageFileRaw(requestParameters: publicApplicationApiParams.RenamePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling renamePackageFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/files_rename`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.renameInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Rename Package File
     */
    async renamePackageFile(requestParameters: publicApplicationApiParams.RenamePackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata> {
        const response = await this.renamePackageFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Upsert Package File
     */


    async upsertPackageFileRaw(requestParameters: publicApplicationApiParams.UpsertPackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileMetadata>> {
        if (requestParameters.applicationKey === null || requestParameters.applicationKey === undefined) {
            throw new runtime.RequiredError('applicationKey','Required parameter requestParameters.applicationKey was null or undefined when calling upsertPackageFile.');
        }

        if (requestParameters.filepath === null || requestParameters.filepath === undefined) {
            throw new runtime.RequiredError('filepath','Required parameter requestParameters.filepath was null or undefined when calling upsertPackageFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastModifiedTime !== undefined) {
            queryParameters['lastModifiedTime'] = requestParameters.lastModifiedTime;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/developer/packages/{applicationKey}/files/{filepath}`.replace(`{${"applicationKey"}}`, encodeURIComponent(String(requestParameters.applicationKey))).replace(`{${"filepath"}}`, encodeURIComponent(String(requestParameters.filepath))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Upsert Package File
     */
    async upsertPackageFile(requestParameters: publicApplicationApiParams.UpsertPackageFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileMetadata> {
        const response = await this.upsertPackageFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
