/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AppAuthInfo,
  AuthTicket,
  AuthTicketRequest,
  OAuthAccessTokenResponse,
  OauthAuthRequest,
} from '../models';

export interface AuthenticateAppRequest {
    responseFields?: string;
    appAuthInfo?: AppAuthInfo;
}

export interface DeleteAppAuthTicketRequest {
    refreshToken: string;
}

export interface OauthAuthenticateAppRequest {
    responseFields?: string;
    oauthAuthRequest?: OauthAuthRequest;
}

export interface RefreshAppAuthTicketRequest {
    responseFields?: string;
    authTicketRequest?: AuthTicketRequest;
}

/**
 * AppAuthTicketsApi - interface
 * 
 * @export
 * @interface AppAuthTicketsApiInterface
 */
export interface AppAuthTicketsApiInterface {
    /**
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * @summary App Authenticate
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AppAuthInfo} [appAuthInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppAuthTicketsApiInterface
     */
    authenticateAppRaw(requestParameters: AuthenticateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTicket>>;

    /**
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * App Authenticate
     */
    authenticateApp(requestParameters: AuthenticateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTicket>;

    /**
     * This method is used to expire an application\'s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * @summary Delete App Auth Ticket
     * @param {string} refreshToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppAuthTicketsApiInterface
     */
    deleteAppAuthTicketRaw(requestParameters: DeleteAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * This method is used to expire an application\'s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * Delete App Auth Ticket
     */
    deleteAppAuthTicket(requestParameters: DeleteAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Oauth Authenticate App
     * @summary Oauth Authenticate App
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {OauthAuthRequest} [oauthAuthRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppAuthTicketsApiInterface
     */
    oauthAuthenticateAppRaw(requestParameters: OauthAuthenticateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthAccessTokenResponse>>;

    /**
     * Oauth Authenticate App
     * Oauth Authenticate App
     */
    oauthAuthenticateApp(requestParameters: OauthAuthenticateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthAccessTokenResponse>;

    /**
     * Returns the AppAuthTicket with a refreshed AccessToken
     * @summary Refresh App Auth Ticket
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AuthTicketRequest} [authTicketRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppAuthTicketsApiInterface
     */
    refreshAppAuthTicketRaw(requestParameters: RefreshAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTicket>>;

    /**
     * Returns the AppAuthTicket with a refreshed AccessToken
     * Refresh App Auth Ticket
     */
    refreshAppAuthTicket(requestParameters: RefreshAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTicket>;

}

/**
 * 
 */
export class AppAuthTicketsApi extends runtime.BaseAPI implements AppAuthTicketsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * App Authenticate
     */


    async authenticateAppRaw(requestParameters: AuthenticateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/applications/authtickets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.appAuthInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Authenticates an application using shared secret and application id. The method returns a set of authentication tokens used to manage application authentication.
     * App Authenticate
     */
    async authenticateApp(requestParameters: AuthenticateAppRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTicket> {
        const response = await this.authenticateAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This method is used to expire an application\'s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * Delete App Auth Ticket
     */


    async deleteAppAuthTicketRaw(requestParameters: DeleteAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling deleteAppAuthTicket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/applications/authtickets/{refreshToken}`.replace(`{${"refreshToken"}}`, encodeURIComponent(String(requestParameters.refreshToken))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This method is used to expire an application\'s current refresh token which   will force the application to reauthenticate once the current access token expires.
     * Delete App Auth Ticket
     */
    async deleteAppAuthTicket(requestParameters: DeleteAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAppAuthTicketRaw(requestParameters, initOverrides);
    }

    /**
     * Oauth Authenticate App
     * Oauth Authenticate App
     */


    async oauthAuthenticateAppRaw(requestParameters: OauthAuthenticateAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthAccessTokenResponse>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/applications/authtickets/oauth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.oauthAuthRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Oauth Authenticate App
     * Oauth Authenticate App
     */
    async oauthAuthenticateApp(requestParameters: OauthAuthenticateAppRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthAccessTokenResponse> {
        const response = await this.oauthAuthenticateAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the AppAuthTicket with a refreshed AccessToken
     * Refresh App Auth Ticket
     */


    async refreshAppAuthTicketRaw(requestParameters: RefreshAppAuthTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTicket>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/applications/authtickets/refresh-ticket`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.authTicketRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the AppAuthTicket with a refreshed AccessToken
     * Refresh App Auth Ticket
     */
    async refreshAppAuthTicket(requestParameters: RefreshAppAuthTicketRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTicket> {
        const response = await this.refreshAppAuthTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
