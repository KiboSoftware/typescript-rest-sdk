/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ApplicationSubscription,
} from '../models';


export namespace appEventApiParams { 
    export interface CreateApplicationSubscriptionRequest {
        responseFields?: string;
        applicationSubscription?: ApplicationSubscription;
    }
    export interface DeleteApplicationSubscriptionRequest {
        applicationSubscriptionId: number;
    }
    export interface GetApplicationSubscriptionRequest {
        subscriptionId: number;
        responseFields?: string;
    }
    export interface UpdateApplicationSubscriptionRequest {
        responseFields?: string;
        applicationSubscription?: ApplicationSubscription;
    }
}
/**
* AppEventApiService - interface
* 
* @export
* @interface AppEventApi
*/
export interface AppEventApiService {
    /**
    * 
    * @summary Create Application Subscription
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ApplicationSubscription} [applicationSubscription] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AppEventApiInterface
    */
    createApplicationSubscriptionRaw(requestParameters: appEventApiParams.CreateApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSubscription>>;

    /**
    * 
    * Create Application Subscription
    */
    createApplicationSubscription(requestParameters: appEventApiParams.CreateApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSubscription>;

    /**
    * 
    * @summary Delete Application Subscription
    * @param {number} applicationSubscriptionId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AppEventApiInterface
    */
    deleteApplicationSubscriptionRaw(requestParameters: appEventApiParams.DeleteApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Delete Application Subscription
    */
    deleteApplicationSubscription(requestParameters: appEventApiParams.DeleteApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Get Application Subscription
    * @param {number} subscriptionId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AppEventApiInterface
    */
    getApplicationSubscriptionRaw(requestParameters: appEventApiParams.GetApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSubscription>>;

    /**
    * 
    * Get Application Subscription
    */
    getApplicationSubscription(requestParameters: appEventApiParams.GetApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSubscription>;

    /**
    * 
    * @summary Update Application Subscription
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ApplicationSubscription} [applicationSubscription] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof AppEventApiInterface
    */
    updateApplicationSubscriptionRaw(requestParameters: appEventApiParams.UpdateApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSubscription>>;

    /**
    * 
    * Update Application Subscription
    */
    updateApplicationSubscription(requestParameters: appEventApiParams.UpdateApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSubscription>;

}


/**
 * 
 */
export class AppEventApi extends runtime.BaseAPI implements AppEventApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Create Application Subscription
     */


    async createApplicationSubscriptionRaw(requestParameters: appEventApiParams.CreateApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSubscription>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/appsubscriptions/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.applicationSubscription,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Create Application Subscription
     */
    async createApplicationSubscription(requestParameters: appEventApiParams.CreateApplicationSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSubscription> {
        const response = await this.createApplicationSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete Application Subscription
     */


    async deleteApplicationSubscriptionRaw(requestParameters: appEventApiParams.DeleteApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationSubscriptionId === null || requestParameters.applicationSubscriptionId === undefined) {
            throw new runtime.RequiredError('applicationSubscriptionId','Required parameter requestParameters.applicationSubscriptionId was null or undefined when calling deleteApplicationSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/appsubscriptions/events/{applicationSubscriptionId}`.replace(`{${"applicationSubscriptionId"}}`, encodeURIComponent(String(requestParameters.applicationSubscriptionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete Application Subscription
     */
    async deleteApplicationSubscription(requestParameters: appEventApiParams.DeleteApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApplicationSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get Application Subscription
     */


    async getApplicationSubscriptionRaw(requestParameters: appEventApiParams.GetApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSubscription>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling getApplicationSubscription.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/appsubscriptions/{subscriptionId}`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get Application Subscription
     */
    async getApplicationSubscription(requestParameters: appEventApiParams.GetApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSubscription> {
        const response = await this.getApplicationSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update Application Subscription
     */


    async updateApplicationSubscriptionRaw(requestParameters: appEventApiParams.UpdateApplicationSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSubscription>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/appsubscriptions/events`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.applicationSubscription,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update Application Subscription
     */
    async updateApplicationSubscription(requestParameters: appEventApiParams.UpdateApplicationSubscriptionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSubscription> {
        const response = await this.updateApplicationSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
