/* tslint:disable */
/* eslint-disable */
/**
 * Kibo AppDev Service
 * OpenAPI Spec for Kibo AppDev Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  HeadlessAppBuildJobResponse,
  HeadlessAppBuildLog,
  HeadlessAppRuntimeLogResponse,
} from '../models';


export namespace headlessAppApiParams { 
    export interface GetApplicationBuildJobsRequest {
        branchName: string;
        maxResults?: number;
        nextToken?: string;
        responseFields?: string;
    }
    export interface GetApplicationBuildLogRequest {
        branchName: string;
        jobId: string;
        responseFields?: string;
    }
    export interface GetRuntimeLogsRequest {
        prefix?: string;
        maxResults?: number;
        nextToken?: string;
        responseFields?: string;
    }
}
/**
* HeadlessAppApiService - interface
* 
* @export
* @interface HeadlessAppApi
*/
export interface HeadlessAppApiService {
    /**
    * Get the builds of a specifc code branch for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
    * @summary Get Application Build Jobs
    * @param {string} branchName The name of the branch to use for the request
    * @param {number} [maxResults] The maximum number of records to list in a single response. defaults to 20, maximum is 100
    * @param {string} [nextToken] A pagination token
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof HeadlessAppApiInterface
    */
    getApplicationBuildJobsRaw(requestParameters: headlessAppApiParams.GetApplicationBuildJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HeadlessAppBuildJobResponse>>;

    /**
    * Get the builds of a specifc code branch for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
    * Get Application Build Jobs
    */
    getApplicationBuildJobs(requestParameters: headlessAppApiParams.GetApplicationBuildJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HeadlessAppBuildJobResponse>;

    /**
    * Get the build logs of a specifc code branch and build for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
    * @summary Get Application Build Log
    * @param {string} branchName The name of the branch to use for the request
    * @param {string} jobId The Identifier of the build to retrieve logs for
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof HeadlessAppApiInterface
    */
    getApplicationBuildLogRaw(requestParameters: headlessAppApiParams.GetApplicationBuildLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HeadlessAppBuildLog>>;

    /**
    * Get the build logs of a specifc code branch and build for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
    * Get Application Build Log
    */
    getApplicationBuildLog(requestParameters: headlessAppApiParams.GetApplicationBuildLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HeadlessAppBuildLog>;

    /**
    * Get the runtime logs, as s3 objects, for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
    * @summary Get Runtime Logs
    * @param {string} [prefix] The optional date filter, in the format \&quot;yyyy-mm-dd-hh\&quot;.              example usage:                  for year 2024, datePrefix&#x3D;2024                  for first month of 2024, datePrefix&#x3D;2024-01                  for first day, first month of 2024, datePrefix&#x3D;2024-01-01
    * @param {number} [maxResults] The maximum number of records to list in a single response. defaults to 20, maximum is 100
    * @param {string} [nextToken] A pagination token
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof HeadlessAppApiInterface
    */
    getRuntimeLogsRaw(requestParameters: headlessAppApiParams.GetRuntimeLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HeadlessAppRuntimeLogResponse>>;

    /**
    * Get the runtime logs, as s3 objects, for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
    * Get Runtime Logs
    */
    getRuntimeLogs(requestParameters: headlessAppApiParams.GetRuntimeLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HeadlessAppRuntimeLogResponse>;

}


/**
 * 
 */
export class HeadlessAppApi extends runtime.BaseAPI implements HeadlessAppApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get the builds of a specifc code branch for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
     * Get Application Build Jobs
     */


    async getApplicationBuildJobsRaw(requestParameters: headlessAppApiParams.GetApplicationBuildJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HeadlessAppBuildJobResponse>> {
        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling getApplicationBuildJobs.');
        }

        const queryParameters: any = {};

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/headless-app/builds/{branchName}`.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the builds of a specifc code branch for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
     * Get Application Build Jobs
     */
    async getApplicationBuildJobs(requestParameters: headlessAppApiParams.GetApplicationBuildJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HeadlessAppBuildJobResponse> {
        const response = await this.getApplicationBuildJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the build logs of a specifc code branch and build for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
     * Get Application Build Log
     */


    async getApplicationBuildLogRaw(requestParameters: headlessAppApiParams.GetApplicationBuildLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HeadlessAppBuildLog>> {
        if (requestParameters.branchName === null || requestParameters.branchName === undefined) {
            throw new runtime.RequiredError('branchName','Required parameter requestParameters.branchName was null or undefined when calling getApplicationBuildLog.');
        }

        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getApplicationBuildLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/headless-app/builds/{branchName}/logs/{jobId}`.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters.branchName))).replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the build logs of a specifc code branch and build for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
     * Get Application Build Log
     */
    async getApplicationBuildLog(requestParameters: headlessAppApiParams.GetApplicationBuildLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HeadlessAppBuildLog> {
        const response = await this.getApplicationBuildLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the runtime logs, as s3 objects, for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
     * Get Runtime Logs
     */


    async getRuntimeLogsRaw(requestParameters: headlessAppApiParams.GetRuntimeLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HeadlessAppRuntimeLogResponse>> {
        const queryParameters: any = {};

        if (requestParameters.prefix !== undefined) {
            queryParameters['prefix'] = requestParameters.prefix;
        }

        if (requestParameters.maxResults !== undefined) {
            queryParameters['maxResults'] = requestParameters.maxResults;
        }

        if (requestParameters.nextToken !== undefined) {
            queryParameters['nextToken'] = requestParameters.nextToken;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/platform/appdev/headless-app/logs/runtime`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the runtime logs, as s3 objects, for a Kibo Hosted Headless application.  A Kibo site must be first linked to a headless hosted application before using this API.
     * Get Runtime Logs
     */
    async getRuntimeLogs(requestParameters: headlessAppApiParams.GetRuntimeLogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HeadlessAppRuntimeLogResponse> {
        const response = await this.getRuntimeLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
