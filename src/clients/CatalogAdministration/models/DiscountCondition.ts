/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryDiscountCondition } from './CategoryDiscountCondition';
import {
    CategoryDiscountConditionFromJSON,
    CategoryDiscountConditionFromJSONTyped,
    CategoryDiscountConditionToJSON,
} from './CategoryDiscountCondition';
import type { CustomerSegment } from './CustomerSegment';
import {
    CustomerSegmentFromJSON,
    CustomerSegmentFromJSONTyped,
    CustomerSegmentToJSON,
} from './CustomerSegment';
import type { ProductDiscountCondition } from './ProductDiscountCondition';
import {
    ProductDiscountConditionFromJSON,
    ProductDiscountConditionFromJSONTyped,
    ProductDiscountConditionToJSON,
} from './ProductDiscountCondition';

/**
 * Specifies constraints that must be satified for a discount to be applied to a target.
 * Constraints are Anded together
 * @export
 * @interface DiscountCondition
 */
export interface DiscountCondition {
    /**
     * Maximum number of times that the discount can be redeemed. Default is null (no limit to discount redemptions).
     * @type {number}
     * @memberof DiscountCondition
     */
    maxRedemptionCount?: number | null;
    /**
     * If true, the shopper needs to enter a coupon code to redeem the discount.
     * @type {boolean}
     * @memberof DiscountCondition
     */
    requiresCoupon?: boolean;
    /**
     * Code of the coupon associated with the discount (if a coupon code is required). The merchant can supply the code or the system can generate it.
     * @type {string}
     * @memberof DiscountCondition
     */
    couponCode?: string | null;
    /**
     * Determines is this discount can be used by an anonymous user 
     * Defaults to false to allow discounts for anonymous users.
     * @type {boolean}
     * @memberof DiscountCondition
     */
    requiresAuthenticatedUser?: boolean;
    /**
     * List of payment types that trigger this discount to be valid.
     * @type {Array<string>}
     * @memberof DiscountCondition
     */
    includedPaymentWorkflows?: Array<string> | null;
    /**
     * List of categories that must be purchased in order for the discount to be valid.
     * @type {Array<CategoryDiscountCondition>}
     * @memberof DiscountCondition
     */
    includedCategories?: Array<CategoryDiscountCondition> | null;
    /**
     * List of categories to discount. When a discount applies to a category, all products in the category are discounted.
     * @type {Array<CategoryDiscountCondition>}
     * @memberof DiscountCondition
     */
    excludedCategories?: Array<CategoryDiscountCondition> | null;
    /**
     * List of products that are eligible for the discount.
     * @type {Array<ProductDiscountCondition>}
     * @memberof DiscountCondition
     */
    includedProducts?: Array<ProductDiscountCondition> | null;
    /**
     * List of products that are eligible for the discount.
     * @type {Array<ProductDiscountCondition>}
     * @memberof DiscountCondition
     */
    excludedProducts?: Array<ProductDiscountCondition> | null;
    /**
     * List of customer groups for which the discount applies
     * @type {Array<CustomerSegment>}
     * @memberof DiscountCondition
     */
    customerSegments?: Array<CustomerSegment> | null;
    /**
     * Minimum quantity of products in the specified IncludedProducts that must be purchased to
     * qualify for the associated discount.
     * Defaults to 1 if  null and IncludedProducts has values.
     * @type {number}
     * @memberof DiscountCondition
     */
    minimumQuantityRequiredProducts?: number | null;
    /**
     * Minimum quantity of products in the categories specified in IncludedCategories that must be purchased to
     * qualify for the associated discount.
     * Defaults to 1 if  null and IncludedCategories has values
     * @type {number}
     * @memberof DiscountCondition
     */
    minimumQuantityProductsRequiredInCategories?: number | null;
    /**
     * Only applies to order.
     * Minimum order subtotal after discounts in order for the associated discount to be applied
     * @type {number}
     * @memberof DiscountCondition
     */
    minimumOrderAmount?: number | null;
    /**
     * Only applies to order.
     * Maximum order subtotal after discounts in order for the associated discount to be applied
     * @type {number}
     * @memberof DiscountCondition
     */
    maximumOrderAmount?: number | null;
    /**
     * List of categories to discount. When a discount applies to a category, all products in the category are discounted.
     * @type {Array<CategoryDiscountCondition>}
     * @memberof DiscountCondition
     */
    categoriesToExcludeFromMinOrderTotal?: Array<CategoryDiscountCondition> | null;
    /**
     * List of products that are eligible for the discount.
     * @type {Array<ProductDiscountCondition>}
     * @memberof DiscountCondition
     */
    productsToExcludeFromMinOrderTotal?: Array<ProductDiscountCondition> | null;
    /**
     * Minimum lifetime value amount required for this discount to apply
     * @type {number}
     * @memberof DiscountCondition
     */
    minimumLifetimeValueAmount?: number | null;
    /**
     * Date when the discount can goes into effect, in the format yyyy-mm-dd.
     * @type {Date}
     * @memberof DiscountCondition
     */
    startDate?: Date | null;
    /**
     * Date when the discount expires. Default is null (no expiration date).
     * @type {Date}
     * @memberof DiscountCondition
     */
    expirationDate?: Date | null;
    /**
     * Minimum amount that must be purchased in the combined categories defined in 
     * IncludedCategories.  Amount is calculated before discounting.
     * Not used if IncludedCategories is empty.
     * @type {number}
     * @memberof DiscountCondition
     */
    minimumCategorySubtotalBeforeDiscounts?: number | null;
    /**
     * Defines a minimum quantity that is required for a target only discount
     * @type {number}
     * @memberof DiscountCondition
     */
    minimumRequiredQuantityPerRedemption?: number | null;
    /**
     * List of subscription frequencies to which the discount will apply.
     * @type {Array<string>}
     * @memberof DiscountCondition
     */
    validSubscriptionFrequencies?: Array<string> | null;
    /**
     * Ordinals at which a continuity order should receive the discount.
     * @type {Array<number>}
     * @memberof DiscountCondition
     */
    validSubscriptionContinuityOrdinals?: Array<number> | null;
    /**
     * The minimum number of distinct products on the order
     * Not a quantity calculation.
     * @type {number}
     * @memberof DiscountCondition
     */
    minDistinctProductsRequired?: number | null;
    /**
     * The order must contain at least this total quantity of items for the discount to apply.
     * You must buy a combined quantity of at least x amount.
     * @type {number}
     * @memberof DiscountCondition
     */
    minTotalOrderQuantity?: number | null;
}

/**
 * Check if a given object implements the DiscountCondition interface.
 */
export function instanceOfDiscountCondition(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DiscountConditionFromJSON(json: any): DiscountCondition {
    return DiscountConditionFromJSONTyped(json, false);
}

export function DiscountConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): DiscountCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'maxRedemptionCount': !exists(json, 'maxRedemptionCount') ? undefined : json['maxRedemptionCount'],
        'requiresCoupon': !exists(json, 'requiresCoupon') ? undefined : json['requiresCoupon'],
        'couponCode': !exists(json, 'couponCode') ? undefined : json['couponCode'],
        'requiresAuthenticatedUser': !exists(json, 'requiresAuthenticatedUser') ? undefined : json['requiresAuthenticatedUser'],
        'includedPaymentWorkflows': !exists(json, 'includedPaymentWorkflows') ? undefined : json['includedPaymentWorkflows'],
        'includedCategories': !exists(json, 'includedCategories') ? undefined : (json['includedCategories'] === null ? null : (json['includedCategories'] as Array<any>).map(CategoryDiscountConditionFromJSON)),
        'excludedCategories': !exists(json, 'excludedCategories') ? undefined : (json['excludedCategories'] === null ? null : (json['excludedCategories'] as Array<any>).map(CategoryDiscountConditionFromJSON)),
        'includedProducts': !exists(json, 'includedProducts') ? undefined : (json['includedProducts'] === null ? null : (json['includedProducts'] as Array<any>).map(ProductDiscountConditionFromJSON)),
        'excludedProducts': !exists(json, 'excludedProducts') ? undefined : (json['excludedProducts'] === null ? null : (json['excludedProducts'] as Array<any>).map(ProductDiscountConditionFromJSON)),
        'customerSegments': !exists(json, 'customerSegments') ? undefined : (json['customerSegments'] === null ? null : (json['customerSegments'] as Array<any>).map(CustomerSegmentFromJSON)),
        'minimumQuantityRequiredProducts': !exists(json, 'minimumQuantityRequiredProducts') ? undefined : json['minimumQuantityRequiredProducts'],
        'minimumQuantityProductsRequiredInCategories': !exists(json, 'minimumQuantityProductsRequiredInCategories') ? undefined : json['minimumQuantityProductsRequiredInCategories'],
        'minimumOrderAmount': !exists(json, 'minimumOrderAmount') ? undefined : json['minimumOrderAmount'],
        'maximumOrderAmount': !exists(json, 'maximumOrderAmount') ? undefined : json['maximumOrderAmount'],
        'categoriesToExcludeFromMinOrderTotal': !exists(json, 'categoriesToExcludeFromMinOrderTotal') ? undefined : (json['categoriesToExcludeFromMinOrderTotal'] === null ? null : (json['categoriesToExcludeFromMinOrderTotal'] as Array<any>).map(CategoryDiscountConditionFromJSON)),
        'productsToExcludeFromMinOrderTotal': !exists(json, 'productsToExcludeFromMinOrderTotal') ? undefined : (json['productsToExcludeFromMinOrderTotal'] === null ? null : (json['productsToExcludeFromMinOrderTotal'] as Array<any>).map(ProductDiscountConditionFromJSON)),
        'minimumLifetimeValueAmount': !exists(json, 'minimumLifetimeValueAmount') ? undefined : json['minimumLifetimeValueAmount'],
        'startDate': !exists(json, 'startDate') ? undefined : (json['startDate'] === null ? null : new Date(json['startDate'])),
        'expirationDate': !exists(json, 'expirationDate') ? undefined : (json['expirationDate'] === null ? null : new Date(json['expirationDate'])),
        'minimumCategorySubtotalBeforeDiscounts': !exists(json, 'minimumCategorySubtotalBeforeDiscounts') ? undefined : json['minimumCategorySubtotalBeforeDiscounts'],
        'minimumRequiredQuantityPerRedemption': !exists(json, 'minimumRequiredQuantityPerRedemption') ? undefined : json['minimumRequiredQuantityPerRedemption'],
        'validSubscriptionFrequencies': !exists(json, 'validSubscriptionFrequencies') ? undefined : json['validSubscriptionFrequencies'],
        'validSubscriptionContinuityOrdinals': !exists(json, 'validSubscriptionContinuityOrdinals') ? undefined : json['validSubscriptionContinuityOrdinals'],
        'minDistinctProductsRequired': !exists(json, 'minDistinctProductsRequired') ? undefined : json['minDistinctProductsRequired'],
        'minTotalOrderQuantity': !exists(json, 'minTotalOrderQuantity') ? undefined : json['minTotalOrderQuantity'],
    };
}

export function DiscountConditionToJSON(value?: DiscountCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'maxRedemptionCount': value.maxRedemptionCount,
        'requiresCoupon': value.requiresCoupon,
        'couponCode': value.couponCode,
        'requiresAuthenticatedUser': value.requiresAuthenticatedUser,
        'includedPaymentWorkflows': value.includedPaymentWorkflows,
        'includedCategories': value.includedCategories === undefined ? undefined : (value.includedCategories === null ? null : (value.includedCategories as Array<any>).map(CategoryDiscountConditionToJSON)),
        'excludedCategories': value.excludedCategories === undefined ? undefined : (value.excludedCategories === null ? null : (value.excludedCategories as Array<any>).map(CategoryDiscountConditionToJSON)),
        'includedProducts': value.includedProducts === undefined ? undefined : (value.includedProducts === null ? null : (value.includedProducts as Array<any>).map(ProductDiscountConditionToJSON)),
        'excludedProducts': value.excludedProducts === undefined ? undefined : (value.excludedProducts === null ? null : (value.excludedProducts as Array<any>).map(ProductDiscountConditionToJSON)),
        'customerSegments': value.customerSegments === undefined ? undefined : (value.customerSegments === null ? null : (value.customerSegments as Array<any>).map(CustomerSegmentToJSON)),
        'minimumQuantityRequiredProducts': value.minimumQuantityRequiredProducts,
        'minimumQuantityProductsRequiredInCategories': value.minimumQuantityProductsRequiredInCategories,
        'minimumOrderAmount': value.minimumOrderAmount,
        'maximumOrderAmount': value.maximumOrderAmount,
        'categoriesToExcludeFromMinOrderTotal': value.categoriesToExcludeFromMinOrderTotal === undefined ? undefined : (value.categoriesToExcludeFromMinOrderTotal === null ? null : (value.categoriesToExcludeFromMinOrderTotal as Array<any>).map(CategoryDiscountConditionToJSON)),
        'productsToExcludeFromMinOrderTotal': value.productsToExcludeFromMinOrderTotal === undefined ? undefined : (value.productsToExcludeFromMinOrderTotal === null ? null : (value.productsToExcludeFromMinOrderTotal as Array<any>).map(ProductDiscountConditionToJSON)),
        'minimumLifetimeValueAmount': value.minimumLifetimeValueAmount,
        'startDate': value.startDate === undefined ? undefined : (value.startDate === null ? null : value.startDate.toISOString()),
        'expirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate === null ? null : value.expirationDate.toISOString()),
        'minimumCategorySubtotalBeforeDiscounts': value.minimumCategorySubtotalBeforeDiscounts,
        'minimumRequiredQuantityPerRedemption': value.minimumRequiredQuantityPerRedemption,
        'validSubscriptionFrequencies': value.validSubscriptionFrequencies,
        'validSubscriptionContinuityOrdinals': value.validSubscriptionContinuityOrdinals,
        'minDistinctProductsRequired': value.minDistinctProductsRequired,
        'minTotalOrderQuantity': value.minTotalOrderQuantity,
    };
}

