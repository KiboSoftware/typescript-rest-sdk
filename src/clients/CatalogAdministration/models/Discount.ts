/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { DiscountCondition } from './DiscountCondition';
import {
    DiscountConditionFromJSON,
    DiscountConditionFromJSONTyped,
    DiscountConditionToJSON,
} from './DiscountCondition';
import type { DiscountLocalizedContent } from './DiscountLocalizedContent';
import {
    DiscountLocalizedContentFromJSON,
    DiscountLocalizedContentFromJSONTyped,
    DiscountLocalizedContentToJSON,
} from './DiscountLocalizedContent';
import type { DiscountTarget } from './DiscountTarget';
import {
    DiscountTargetFromJSON,
    DiscountTargetFromJSONTyped,
    DiscountTargetToJSON,
} from './DiscountTarget';
import type { ThresholdMessage } from './ThresholdMessage';
import {
    ThresholdMessageFromJSON,
    ThresholdMessageFromJSONTyped,
    ThresholdMessageToJSON,
} from './ThresholdMessage';

/**
 * Allows you to define and manage discounts to apply to your products, product categories, or orders. The discounts can be a specified monetary amount off the price, percentage off the price, or for free shipping.
 * You can create a coupon code that applies to the discount.
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     * Unique identifier of the discount. System-supplied and read-only.
     * @type {number}
     * @memberof Discount
     */
    id?: number | null;
    /**
     * 
     * @type {DiscountLocalizedContent}
     * @memberof Discount
     */
    content: DiscountLocalizedContent;
    /**
     * Scope to which the discount applies, valid values are: Order, LineItem
     * @type {string}
     * @memberof Discount
     */
    scope: string;
    /**
     * 
     * @type {DiscountCondition}
     * @memberof Discount
     */
    conditions?: DiscountCondition;
    /**
     * 
     * @type {DiscountTarget}
     * @memberof Discount
     */
    target: DiscountTarget;
    /**
     * How many times this discount has been redeemed. System-supplied and read-only.
     * @type {number}
     * @memberof Discount
     */
    currentRedemptionCount?: number | null;
    /**
     *     Amount of the discount, as a percentage or monetary amount, for example 15% or $15.
     * Must be either null or greater than zero.
     * @type {number}
     * @memberof Discount
     */
    amount?: number | null;
    /**
     * Type of discount, which can be either a percentage off the price, 
     * a specific monetary amount, or free. 
     * Possible values: 
     * 	Percentage 
     * 	Amount 
     * 	Free
     * 	FixedPrice
     * @type {string}
     * @memberof Discount
     */
    amountType: string;
    /**
     * Discount status which can be "Active," "Scheduled," or "Expired." System-supplied and read-only.
     * @type {string}
     * @memberof Discount
     */
    status?: string | null;
    /**
     * Signifies that the discount is not referenced and can be hard deleted
     * @type {boolean}
     * @memberof Discount
     */
    canBeDeleted?: boolean;
    /**
     * Determines if the discount should apply to sale price or regular price only.
     * Discounts will apply to sale prices by default.
     * Only applies to LineItem product discounts.
     * @type {boolean}
     * @memberof Discount
     */
    doesNotApplyToSalePrice?: boolean | null;
    /**
     * Determines whether or not a discount applies to a items with a sale price.  Applicable 
     * on order and line item discounts.  For line items, when this is true, the discount will 
     * be disqualified.  For order level discounts, when true, the discount will not be applied 
     * to those items have a sale price.
     * @type {boolean}
     * @memberof Discount
     */
    doesNotApplyToProductsWithSalePrice?: boolean | null;
    /**
     * Maximum number of times a user can redeem this discount.
     *  Must be either null or greater than zero.
     * @type {number}
     * @memberof Discount
     */
    maximumUsesPerUser?: number | null;
    /**
     * Maximum impact this discount can apply on a single order.
     *  Must be either null or greater than zero.
     * @type {number}
     * @memberof Discount
     */
    maximumDiscountImpactPerOrder?: number | null;
    /**
     * Maximum impact this discount can apply on a single line item.
     *  Must be either null or greater than zero.
     * @type {number}
     * @memberof Discount
     */
    maximumDiscountImpactPerRedemption?: number | null;
    /**
     * Maximum number of redemptions allowed per order.
     * If null, defaults to unlimited.
     * @type {number}
     * @memberof Discount
     */
    maximumRedemptionsPerOrder?: number | null;
    /**
     * Products receiving a price from a price list specified here or a child of a specified 
     * price list can be discounted.
     * @type {Array<string>}
     * @memberof Discount
     */
    includedPriceLists?: Array<string> | null;
    /**
     * Flag to allow or prevent application to multi-ship-to orders,
     * Only applicable to shipping discounts.
     * @type {boolean}
     * @memberof Discount
     */
    doesNotApplyToMultiShipToOrders?: boolean | null;
    /**
     * Readonly property indicating that the condition required purchase is the 
     * same as the target items.  Used in BxGx and BoGo type discounts.
     * @type {boolean}
     * @memberof Discount
     */
    isBxGx?: boolean | null;
    /**
     * Indicates whether or not stacking is enabled for this discount
     * @type {boolean}
     * @memberof Discount
     */
    canBeStackedUpon?: boolean | null;
    /**
     * Indicates which stacking layer this discount is a part of
     * @type {number}
     * @memberof Discount
     */
    stackingLayer?: number | null;
    /**
     * 
     * @type {ThresholdMessage}
     * @memberof Discount
     */
    thresholdMessage?: ThresholdMessage;
    /**
     * Prevents Line Item Shipping discounts from being applied when a Line Item Product  
     * discount has been applied
     * @type {boolean}
     * @memberof Discount
     */
    preventLineItemShippingDiscounts?: boolean | null;
    /**
     * Prevents Order Product discounts from being applied when a Line Item Product  
     * or Shipping discount has been applied
     * @type {boolean}
     * @memberof Discount
     */
    preventOrderProductDiscounts?: boolean | null;
    /**
     * Prevents Order Shipping discounts from being applied when a Line Item Product/Shipping  
     * or Order Product discount has been applied
     * @type {boolean}
     * @memberof Discount
     */
    preventOrderShippingDiscounts?: boolean | null;
    /**
     * Indicates if this discount has purchase conditions that must be met before 
     * the discount is applied
     * @type {boolean}
     * @memberof Discount
     */
    hasPurchaseConditions?: boolean;
    /**
     * The type of purchase requirement for this discount, either purchase conditions and targets which   
     * Supports BoGo, and BxGx scenarios. Or Target only that only have a target and no purchase conditions
     * @type {string}
     * @memberof Discount
     */
    purchaseRequirementType?: string | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof Discount
     */
    auditInfo?: AuditInfo;
    /**
     * System-supplied and read-only.
     * @type {Array<string>}
     * @memberof Discount
     */
    tagCodes?: Array<string> | null;
    /**
     * Determines how discounts will be evaluated for subscription items and during continuity orders.
     * @type {boolean}
     * @memberof Discount
     */
    isSubscriptionDiscount?: boolean | null;
}

/**
 * Check if a given object implements the Discount interface.
 */
export function instanceOfDiscount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "scope" in value;
    isInstance = isInstance && "target" in value;
    isInstance = isInstance && "amountType" in value;

    return isInstance;
}

export function DiscountFromJSON(json: any): Discount {
    return DiscountFromJSONTyped(json, false);
}

export function DiscountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Discount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'content': DiscountLocalizedContentFromJSON(json['content']),
        'scope': json['scope'],
        'conditions': !exists(json, 'conditions') ? undefined : DiscountConditionFromJSON(json['conditions']),
        'target': DiscountTargetFromJSON(json['target']),
        'currentRedemptionCount': !exists(json, 'currentRedemptionCount') ? undefined : json['currentRedemptionCount'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'amountType': json['amountType'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'canBeDeleted': !exists(json, 'canBeDeleted') ? undefined : json['canBeDeleted'],
        'doesNotApplyToSalePrice': !exists(json, 'doesNotApplyToSalePrice') ? undefined : json['doesNotApplyToSalePrice'],
        'doesNotApplyToProductsWithSalePrice': !exists(json, 'doesNotApplyToProductsWithSalePrice') ? undefined : json['doesNotApplyToProductsWithSalePrice'],
        'maximumUsesPerUser': !exists(json, 'maximumUsesPerUser') ? undefined : json['maximumUsesPerUser'],
        'maximumDiscountImpactPerOrder': !exists(json, 'maximumDiscountImpactPerOrder') ? undefined : json['maximumDiscountImpactPerOrder'],
        'maximumDiscountImpactPerRedemption': !exists(json, 'maximumDiscountImpactPerRedemption') ? undefined : json['maximumDiscountImpactPerRedemption'],
        'maximumRedemptionsPerOrder': !exists(json, 'maximumRedemptionsPerOrder') ? undefined : json['maximumRedemptionsPerOrder'],
        'includedPriceLists': !exists(json, 'includedPriceLists') ? undefined : json['includedPriceLists'],
        'doesNotApplyToMultiShipToOrders': !exists(json, 'doesNotApplyToMultiShipToOrders') ? undefined : json['doesNotApplyToMultiShipToOrders'],
        'isBxGx': !exists(json, 'isBxGx') ? undefined : json['isBxGx'],
        'canBeStackedUpon': !exists(json, 'canBeStackedUpon') ? undefined : json['canBeStackedUpon'],
        'stackingLayer': !exists(json, 'stackingLayer') ? undefined : json['stackingLayer'],
        'thresholdMessage': !exists(json, 'thresholdMessage') ? undefined : ThresholdMessageFromJSON(json['thresholdMessage']),
        'preventLineItemShippingDiscounts': !exists(json, 'preventLineItemShippingDiscounts') ? undefined : json['preventLineItemShippingDiscounts'],
        'preventOrderProductDiscounts': !exists(json, 'preventOrderProductDiscounts') ? undefined : json['preventOrderProductDiscounts'],
        'preventOrderShippingDiscounts': !exists(json, 'preventOrderShippingDiscounts') ? undefined : json['preventOrderShippingDiscounts'],
        'hasPurchaseConditions': !exists(json, 'hasPurchaseConditions') ? undefined : json['hasPurchaseConditions'],
        'purchaseRequirementType': !exists(json, 'purchaseRequirementType') ? undefined : json['purchaseRequirementType'],
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'tagCodes': !exists(json, 'tagCodes') ? undefined : json['tagCodes'],
        'isSubscriptionDiscount': !exists(json, 'isSubscriptionDiscount') ? undefined : json['isSubscriptionDiscount'],
    };
}

export function DiscountToJSON(value?: Discount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'content': DiscountLocalizedContentToJSON(value.content),
        'scope': value.scope,
        'conditions': DiscountConditionToJSON(value.conditions),
        'target': DiscountTargetToJSON(value.target),
        'currentRedemptionCount': value.currentRedemptionCount,
        'amount': value.amount,
        'amountType': value.amountType,
        'status': value.status,
        'canBeDeleted': value.canBeDeleted,
        'doesNotApplyToSalePrice': value.doesNotApplyToSalePrice,
        'doesNotApplyToProductsWithSalePrice': value.doesNotApplyToProductsWithSalePrice,
        'maximumUsesPerUser': value.maximumUsesPerUser,
        'maximumDiscountImpactPerOrder': value.maximumDiscountImpactPerOrder,
        'maximumDiscountImpactPerRedemption': value.maximumDiscountImpactPerRedemption,
        'maximumRedemptionsPerOrder': value.maximumRedemptionsPerOrder,
        'includedPriceLists': value.includedPriceLists,
        'doesNotApplyToMultiShipToOrders': value.doesNotApplyToMultiShipToOrders,
        'isBxGx': value.isBxGx,
        'canBeStackedUpon': value.canBeStackedUpon,
        'stackingLayer': value.stackingLayer,
        'thresholdMessage': ThresholdMessageToJSON(value.thresholdMessage),
        'preventLineItemShippingDiscounts': value.preventLineItemShippingDiscounts,
        'preventOrderProductDiscounts': value.preventOrderProductDiscounts,
        'preventOrderShippingDiscounts': value.preventOrderShippingDiscounts,
        'hasPurchaseConditions': value.hasPurchaseConditions,
        'purchaseRequirementType': value.purchaseRequirementType,
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'tagCodes': value.tagCodes,
        'isSubscriptionDiscount': value.isSubscriptionDiscount,
    };
}

