/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductPropertyPatchDocument } from './ProductPropertyPatchDocument';
import {
    ProductPropertyPatchDocumentFromJSON,
    ProductPropertyPatchDocumentFromJSONTyped,
    ProductPropertyPatchDocumentToJSON,
} from './ProductPropertyPatchDocument';

/**
 * List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.ProductProperty
 * @export
 * @interface ProductPropertyPatchAction
 */
export interface ProductPropertyPatchAction {
    /**
     * Product code of the target product
     * @type {string}
     * @memberof ProductPropertyPatchAction
     */
    productCode?: string | null;
    /**
     * AttributeFQN
     * @type {string}
     * @memberof ProductPropertyPatchAction
     */
    attributeFqn?: string | null;
    /**
     * 
     * @type {ProductPropertyPatchDocument}
     * @memberof ProductPropertyPatchAction
     */
    patches?: ProductPropertyPatchDocument;
    /**
     * If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise
     * changes are saved to the live product.
     * @type {boolean}
     * @memberof ProductPropertyPatchAction
     */
    saveAndPublish?: boolean;
}

/**
 * Check if a given object implements the ProductPropertyPatchAction interface.
 */
export function instanceOfProductPropertyPatchAction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductPropertyPatchActionFromJSON(json: any): ProductPropertyPatchAction {
    return ProductPropertyPatchActionFromJSONTyped(json, false);
}

export function ProductPropertyPatchActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductPropertyPatchAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'attributeFqn': !exists(json, 'attributeFqn') ? undefined : json['attributeFqn'],
        'patches': !exists(json, 'patches') ? undefined : ProductPropertyPatchDocumentFromJSON(json['patches']),
        'saveAndPublish': !exists(json, 'saveAndPublish') ? undefined : json['saveAndPublish'],
    };
}

export function ProductPropertyPatchActionToJSON(value?: ProductPropertyPatchAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productCode': value.productCode,
        'attributeFqn': value.attributeFqn,
        'patches': ProductPropertyPatchDocumentToJSON(value.patches),
        'saveAndPublish': value.saveAndPublish,
    };
}

