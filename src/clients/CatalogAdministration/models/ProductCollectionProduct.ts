/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductCollectionMemberKey } from './ProductCollectionMemberKey';
import {
    ProductCollectionMemberKeyFromJSON,
    ProductCollectionMemberKeyFromJSONTyped,
    ProductCollectionMemberKeyToJSON,
} from './ProductCollectionMemberKey';
import type { ProductLocalizedContent } from './ProductLocalizedContent';
import {
    ProductLocalizedContentFromJSON,
    ProductLocalizedContentFromJSONTyped,
    ProductLocalizedContentToJSON,
} from './ProductLocalizedContent';
import type { ProductPrice } from './ProductPrice';
import {
    ProductPriceFromJSON,
    ProductPriceFromJSONTyped,
    ProductPriceToJSON,
} from './ProductPrice';

/**
 * List of products that belong to a product collection product.
 * @export
 * @interface ProductCollectionProduct
 */
export interface ProductCollectionProduct {
    /**
     * 
     * @type {ProductCollectionMemberKey}
     * @memberof ProductCollectionProduct
     */
    memberKey?: ProductCollectionMemberKey;
    /**
     * ReadOnly Indicates the usage type of this product. Must be one of the values in ProductUsageConst.
     * @type {string}
     * @memberof ProductCollectionProduct
     */
    productUsage?: string | null;
    /**
     * 
     * @type {ProductLocalizedContent}
     * @memberof ProductCollectionProduct
     */
    content?: ProductLocalizedContent;
    /**
     * 
     * @type {ProductPrice}
     * @memberof ProductCollectionProduct
     */
    price?: ProductPrice;
}

/**
 * Check if a given object implements the ProductCollectionProduct interface.
 */
export function instanceOfProductCollectionProduct(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductCollectionProductFromJSON(json: any): ProductCollectionProduct {
    return ProductCollectionProductFromJSONTyped(json, false);
}

export function ProductCollectionProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductCollectionProduct {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'memberKey': !exists(json, 'memberKey') ? undefined : ProductCollectionMemberKeyFromJSON(json['memberKey']),
        'productUsage': !exists(json, 'productUsage') ? undefined : json['productUsage'],
        'content': !exists(json, 'content') ? undefined : ProductLocalizedContentFromJSON(json['content']),
        'price': !exists(json, 'price') ? undefined : ProductPriceFromJSON(json['price']),
    };
}

export function ProductCollectionProductToJSON(value?: ProductCollectionProduct | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'memberKey': ProductCollectionMemberKeyToJSON(value.memberKey),
        'productUsage': value.productUsage,
        'content': ProductLocalizedContentToJSON(value.content),
        'price': ProductPriceToJSON(value.price),
    };
}

