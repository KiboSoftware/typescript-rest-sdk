/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { ExtensibleAttributeLocalizedContent } from './ExtensibleAttributeLocalizedContent';
import {
    ExtensibleAttributeLocalizedContentFromJSON,
    ExtensibleAttributeLocalizedContentFromJSONTyped,
    ExtensibleAttributeLocalizedContentToJSON,
} from './ExtensibleAttributeLocalizedContent';
import type { ExtensibleAttributeMetadataItem } from './ExtensibleAttributeMetadataItem';
import {
    ExtensibleAttributeMetadataItemFromJSON,
    ExtensibleAttributeMetadataItemFromJSONTyped,
    ExtensibleAttributeMetadataItemToJSON,
} from './ExtensibleAttributeMetadataItem';
import type { ExtensibleAttributeValidation } from './ExtensibleAttributeValidation';
import {
    ExtensibleAttributeValidationFromJSON,
    ExtensibleAttributeValidationFromJSONTyped,
    ExtensibleAttributeValidationToJSON,
} from './ExtensibleAttributeValidation';
import type { ExtensibleAttributeVocabularyValue } from './ExtensibleAttributeVocabularyValue';
import {
    ExtensibleAttributeVocabularyValueFromJSON,
    ExtensibleAttributeVocabularyValueFromJSONTyped,
    ExtensibleAttributeVocabularyValueToJSON,
} from './ExtensibleAttributeVocabularyValue';

/**
 * 
 * @export
 * @interface ExtensibleAttribute
 */
export interface ExtensibleAttribute {
    /**
     * 
     * @type {number}
     * @memberof ExtensibleAttribute
     */
    id?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    adminName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    namespace?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    attributeCode: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    inputType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    valueType: string;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    dataType?: string | null;
    /**
     * 
     * @type {Array<ExtensibleAttributeMetadataItem>}
     * @memberof ExtensibleAttribute
     */
    attributeMetadata?: Array<ExtensibleAttributeMetadataItem> | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    attributeFQN?: string | null;
    /**
     * 
     * @type {ExtensibleAttributeLocalizedContent}
     * @memberof ExtensibleAttribute
     */
    content?: ExtensibleAttributeLocalizedContent;
    /**
     * 
     * @type {ExtensibleAttributeValidation}
     * @memberof ExtensibleAttribute
     */
    validation?: ExtensibleAttributeValidation;
    /**
     * 
     * @type {Array<ExtensibleAttributeVocabularyValue>}
     * @memberof ExtensibleAttribute
     */
    vocabularyValues?: Array<ExtensibleAttributeVocabularyValue> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof ExtensibleAttribute
     */
    auditInfo?: AuditInfo;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensibleAttribute
     */
    isActive?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensibleAttribute
     */
    isRequired?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensibleAttribute
     */
    isReadOnly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensibleAttribute
     */
    isMultiValued?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensibleAttribute
     */
    isVisible?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ExtensibleAttribute
     */
    order?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ExtensibleAttribute
     */
    displayGroup: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExtensibleAttribute
     */
    availableForOrderRouting?: boolean;
}

/**
 * Check if a given object implements the ExtensibleAttribute interface.
 */
export function instanceOfExtensibleAttribute(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "attributeCode" in value;
    isInstance = isInstance && "valueType" in value;
    isInstance = isInstance && "displayGroup" in value;

    return isInstance;
}

export function ExtensibleAttributeFromJSON(json: any): ExtensibleAttribute {
    return ExtensibleAttributeFromJSONTyped(json, false);
}

export function ExtensibleAttributeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtensibleAttribute {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'adminName': !exists(json, 'adminName') ? undefined : json['adminName'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'attributeCode': json['attributeCode'],
        'inputType': !exists(json, 'inputType') ? undefined : json['inputType'],
        'valueType': json['valueType'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'attributeMetadata': !exists(json, 'attributeMetadata') ? undefined : (json['attributeMetadata'] === null ? null : (json['attributeMetadata'] as Array<any>).map(ExtensibleAttributeMetadataItemFromJSON)),
        'attributeFQN': !exists(json, 'attributeFQN') ? undefined : json['attributeFQN'],
        'content': !exists(json, 'content') ? undefined : ExtensibleAttributeLocalizedContentFromJSON(json['content']),
        'validation': !exists(json, 'validation') ? undefined : ExtensibleAttributeValidationFromJSON(json['validation']),
        'vocabularyValues': !exists(json, 'vocabularyValues') ? undefined : (json['vocabularyValues'] === null ? null : (json['vocabularyValues'] as Array<any>).map(ExtensibleAttributeVocabularyValueFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'isRequired': !exists(json, 'isRequired') ? undefined : json['isRequired'],
        'isReadOnly': !exists(json, 'isReadOnly') ? undefined : json['isReadOnly'],
        'isMultiValued': !exists(json, 'isMultiValued') ? undefined : json['isMultiValued'],
        'isVisible': !exists(json, 'isVisible') ? undefined : json['isVisible'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'displayGroup': json['displayGroup'],
        'availableForOrderRouting': !exists(json, 'availableForOrderRouting') ? undefined : json['availableForOrderRouting'],
    };
}

export function ExtensibleAttributeToJSON(value?: ExtensibleAttribute | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'adminName': value.adminName,
        'namespace': value.namespace,
        'attributeCode': value.attributeCode,
        'inputType': value.inputType,
        'valueType': value.valueType,
        'dataType': value.dataType,
        'attributeMetadata': value.attributeMetadata === undefined ? undefined : (value.attributeMetadata === null ? null : (value.attributeMetadata as Array<any>).map(ExtensibleAttributeMetadataItemToJSON)),
        'attributeFQN': value.attributeFQN,
        'content': ExtensibleAttributeLocalizedContentToJSON(value.content),
        'validation': ExtensibleAttributeValidationToJSON(value.validation),
        'vocabularyValues': value.vocabularyValues === undefined ? undefined : (value.vocabularyValues === null ? null : (value.vocabularyValues as Array<any>).map(ExtensibleAttributeVocabularyValueToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'isActive': value.isActive,
        'isRequired': value.isRequired,
        'isReadOnly': value.isReadOnly,
        'isMultiValued': value.isMultiValued,
        'isVisible': value.isVisible,
        'order': value.order,
        'displayGroup': value.displayGroup,
        'availableForOrderRouting': value.availableForOrderRouting,
    };
}

