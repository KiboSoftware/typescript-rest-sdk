/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductSupplierInfo } from './ProductSupplierInfo';
import {
    ProductSupplierInfoFromJSON,
    ProductSupplierInfoFromJSONTyped,
    ProductSupplierInfoToJSON,
} from './ProductSupplierInfo';
import type { ProductVariationDeltaPrice } from './ProductVariationDeltaPrice';
import {
    ProductVariationDeltaPriceFromJSON,
    ProductVariationDeltaPriceFromJSONTyped,
    ProductVariationDeltaPriceToJSON,
} from './ProductVariationDeltaPrice';
import type { ProductVariationFixedPrice } from './ProductVariationFixedPrice';
import {
    ProductVariationFixedPriceFromJSON,
    ProductVariationFixedPriceFromJSONTyped,
    ProductVariationFixedPriceToJSON,
} from './ProductVariationFixedPrice';
import type { ProductVariationOption } from './ProductVariationOption';
import {
    ProductVariationOptionFromJSON,
    ProductVariationOptionFromJSONTyped,
    ProductVariationOptionToJSON,
} from './ProductVariationOption';
import type { ProductVariationProperty } from './ProductVariationProperty';
import {
    ProductVariationPropertyFromJSON,
    ProductVariationPropertyFromJSONTyped,
    ProductVariationPropertyToJSON,
} from './ProductVariationProperty';

/**
 * The ProductVariation resource helps merchants manage their products with configurable options. Using this resource, the system creates a matrix of all possible combinations of the product options and the merchant confirms which variations match products for sale. For example, a T-shirt with three color and three size options has nine possible product variations. The system keeps track of inventory for each variation.
 * @export
 * @interface ProductVariation
 */
export interface ProductVariation {
    /**
     * If true, the merchant accepts the variation generated from the configurable options as a product offering. If IsActive is false then the product variation is not for sale--either because it was never a product offering or it was permanently dropped. IsActive is not intended for temporary unavailability. Default is false.
     * @type {boolean}
     * @memberof ProductVariation
     */
    isActive?: boolean | null;
    /**
     * If true, the variation is no longer possible. The system sets IsOrphan to true when the merchant has changed something to make this variation impossible. For example, if the merchant stopped selling all "small" shirts, all product variations with the "small" option are set to IsOrphan. System-supplied and read-only.
     * @type {boolean}
     * @memberof ProductVariation
     */
    isOrphan?: boolean | null;
    /**
     * If true, the product variation exists. When the merchant sets IsActive to true, the system sets VariationExists to true and creates a Variation Key as a unique identifier for this variation. System-supplied and read-only.
     * @type {boolean}
     * @memberof ProductVariation
     */
    variationExists?: boolean | null;
    /**
     * Unique identifier for a single variation ("small" + "red" + "short-sleeved"). System-supplied and read-only.
     * @type {string}
     * @memberof ProductVariation
     */
    variationkey?: string | null;
    /**
     * Descriptive code to refer to a single variation. Typically this is a sequence appended to the base ProduceCode. A merchant can create this code to easily recognize a product variation. By default, the system creates this code by appending a number to the base product. After the merchant supplies this code, it becomes read-only.
     * @type {string}
     * @memberof ProductVariation
     */
    variationProductCode?: string | null;
    /**
     * 
     * @type {ProductVariationDeltaPrice}
     * @memberof ProductVariation
     */
    deltaPrice?: ProductVariationDeltaPrice;
    /**
     * How much more the variation costs above the cost of the base product. If the price of the base product changes, this price is adjusted accordingly.
     * This collection allows for multiple currencies.
     * @type {Array<ProductVariationDeltaPrice>}
     * @memberof ProductVariation
     */
    localizedDeltaPrice?: Array<ProductVariationDeltaPrice> | null;
    /**
     * 
     * @type {ProductVariationFixedPrice}
     * @memberof ProductVariation
     */
    fixedPrice?: ProductVariationFixedPrice;
    /**
     * Price of the variation using fixed per currency
     * This collection allows for multiple currencies.
     * @type {Array<ProductVariationFixedPrice>}
     * @memberof ProductVariation
     */
    localizedFixedPrice?: Array<ProductVariationFixedPrice> | null;
    /**
     * Weight of the product with this variation.
     * @type {number}
     * @memberof ProductVariation
     */
    deltaWeight?: number | null;
    /**
     * Fixed weight of the product with this variation.
     * @type {number}
     * @memberof ProductVariation
     */
    fixedWeight?: number | null;
    /**
     * List of values for this product variation: such as "small, "red.. these are read only here as the variationKey defines the values "
     * @type {Array<ProductVariationOption>}
     * @memberof ProductVariation
     */
    options?: Array<ProductVariationOption> | null;
    /**
     * List of properties specific to this variation
     * @type {Array<ProductVariationProperty>}
     * @memberof ProductVariation
     */
    properties?: Array<ProductVariationProperty> | null;
    /**
     * Price Lookup Unit code for the product
     * @type {string}
     * @memberof ProductVariation
     */
    upc?: string | null;
    /**
     * Indicates the fulfillment types the product supports.
     * @type {Array<string>}
     * @memberof ProductVariation
     */
    fulfillmentTypesSupported?: Array<string> | null;
    /**
     * 
     * @type {ProductSupplierInfo}
     * @memberof ProductVariation
     */
    supplierInfo?: ProductSupplierInfo;
}

/**
 * Check if a given object implements the ProductVariation interface.
 */
export function instanceOfProductVariation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductVariationFromJSON(json: any): ProductVariation {
    return ProductVariationFromJSONTyped(json, false);
}

export function ProductVariationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductVariation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'isOrphan': !exists(json, 'isOrphan') ? undefined : json['isOrphan'],
        'variationExists': !exists(json, 'variationExists') ? undefined : json['variationExists'],
        'variationkey': !exists(json, 'variationkey') ? undefined : json['variationkey'],
        'variationProductCode': !exists(json, 'variationProductCode') ? undefined : json['variationProductCode'],
        'deltaPrice': !exists(json, 'deltaPrice') ? undefined : ProductVariationDeltaPriceFromJSON(json['deltaPrice']),
        'localizedDeltaPrice': !exists(json, 'localizedDeltaPrice') ? undefined : (json['localizedDeltaPrice'] === null ? null : (json['localizedDeltaPrice'] as Array<any>).map(ProductVariationDeltaPriceFromJSON)),
        'fixedPrice': !exists(json, 'fixedPrice') ? undefined : ProductVariationFixedPriceFromJSON(json['fixedPrice']),
        'localizedFixedPrice': !exists(json, 'localizedFixedPrice') ? undefined : (json['localizedFixedPrice'] === null ? null : (json['localizedFixedPrice'] as Array<any>).map(ProductVariationFixedPriceFromJSON)),
        'deltaWeight': !exists(json, 'deltaWeight') ? undefined : json['deltaWeight'],
        'fixedWeight': !exists(json, 'fixedWeight') ? undefined : json['fixedWeight'],
        'options': !exists(json, 'options') ? undefined : (json['options'] === null ? null : (json['options'] as Array<any>).map(ProductVariationOptionFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : (json['properties'] === null ? null : (json['properties'] as Array<any>).map(ProductVariationPropertyFromJSON)),
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'fulfillmentTypesSupported': !exists(json, 'fulfillmentTypesSupported') ? undefined : json['fulfillmentTypesSupported'],
        'supplierInfo': !exists(json, 'supplierInfo') ? undefined : ProductSupplierInfoFromJSON(json['supplierInfo']),
    };
}

export function ProductVariationToJSON(value?: ProductVariation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isActive': value.isActive,
        'isOrphan': value.isOrphan,
        'variationExists': value.variationExists,
        'variationkey': value.variationkey,
        'variationProductCode': value.variationProductCode,
        'deltaPrice': ProductVariationDeltaPriceToJSON(value.deltaPrice),
        'localizedDeltaPrice': value.localizedDeltaPrice === undefined ? undefined : (value.localizedDeltaPrice === null ? null : (value.localizedDeltaPrice as Array<any>).map(ProductVariationDeltaPriceToJSON)),
        'fixedPrice': ProductVariationFixedPriceToJSON(value.fixedPrice),
        'localizedFixedPrice': value.localizedFixedPrice === undefined ? undefined : (value.localizedFixedPrice === null ? null : (value.localizedFixedPrice as Array<any>).map(ProductVariationFixedPriceToJSON)),
        'deltaWeight': value.deltaWeight,
        'fixedWeight': value.fixedWeight,
        'options': value.options === undefined ? undefined : (value.options === null ? null : (value.options as Array<any>).map(ProductVariationOptionToJSON)),
        'properties': value.properties === undefined ? undefined : (value.properties === null ? null : (value.properties as Array<any>).map(ProductVariationPropertyToJSON)),
        'upc': value.upc,
        'fulfillmentTypesSupported': value.fulfillmentTypesSupported,
        'supplierInfo': ProductSupplierInfoToJSON(value.supplierInfo),
    };
}

