/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Measurement } from './Measurement';
import {
    MeasurementFromJSON,
    MeasurementFromJSONTyped,
    MeasurementToJSON,
} from './Measurement';
import type { ProductPrice } from './ProductPrice';
import {
    ProductPriceFromJSON,
    ProductPriceFromJSONTyped,
    ProductPriceToJSON,
} from './ProductPrice';

/**
 * Price of the product and currency used.
 * @export
 * @interface BundledProduct
 */
export interface BundledProduct {
    /**
     * Product Code
     * @type {string}
     * @memberof BundledProduct
     */
    productCode?: string | null;
    /**
     * Qty of the bundled PRoduct
     * @type {number}
     * @memberof BundledProduct
     */
    quantity?: number;
    /**
     * 
     * @type {ProductPrice}
     * @memberof BundledProduct
     */
    price?: ProductPrice;
    /**
     * Read only Name of the BundledProduct
     * @type {string}
     * @memberof BundledProduct
     */
    productName?: string | null;
    /**
     * 
     * @type {Measurement}
     * @memberof BundledProduct
     */
    packageHeight?: Measurement;
    /**
     * 
     * @type {Measurement}
     * @memberof BundledProduct
     */
    packageWidth?: Measurement;
    /**
     * 
     * @type {Measurement}
     * @memberof BundledProduct
     */
    packageLength?: Measurement;
    /**
     * 
     * @type {Measurement}
     * @memberof BundledProduct
     */
    packageWeight?: Measurement;
    /**
     * Indicates the fulfillment types the product supports.
     * @type {Array<string>}
     * @memberof BundledProduct
     */
    fulfillmentTypesSupported?: Array<string> | null;
}

/**
 * Check if a given object implements the BundledProduct interface.
 */
export function instanceOfBundledProduct(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BundledProductFromJSON(json: any): BundledProduct {
    return BundledProductFromJSONTyped(json, false);
}

export function BundledProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): BundledProduct {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'price': !exists(json, 'price') ? undefined : ProductPriceFromJSON(json['price']),
        'productName': !exists(json, 'productName') ? undefined : json['productName'],
        'packageHeight': !exists(json, 'packageHeight') ? undefined : MeasurementFromJSON(json['packageHeight']),
        'packageWidth': !exists(json, 'packageWidth') ? undefined : MeasurementFromJSON(json['packageWidth']),
        'packageLength': !exists(json, 'packageLength') ? undefined : MeasurementFromJSON(json['packageLength']),
        'packageWeight': !exists(json, 'packageWeight') ? undefined : MeasurementFromJSON(json['packageWeight']),
        'fulfillmentTypesSupported': !exists(json, 'fulfillmentTypesSupported') ? undefined : json['fulfillmentTypesSupported'],
    };
}

export function BundledProductToJSON(value?: BundledProduct | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productCode': value.productCode,
        'quantity': value.quantity,
        'price': ProductPriceToJSON(value.price),
        'productName': value.productName,
        'packageHeight': MeasurementToJSON(value.packageHeight),
        'packageWidth': MeasurementToJSON(value.packageWidth),
        'packageLength': MeasurementToJSON(value.packageLength),
        'packageWeight': MeasurementToJSON(value.packageWeight),
        'fulfillmentTypesSupported': value.fulfillmentTypesSupported,
    };
}

