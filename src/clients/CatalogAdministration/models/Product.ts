/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { BundledProduct } from './BundledProduct';
import {
    BundledProductFromJSON,
    BundledProductFromJSONTyped,
    BundledProductToJSON,
} from './BundledProduct';
import type { Discount } from './Discount';
import {
    DiscountFromJSON,
    DiscountFromJSONTyped,
    DiscountToJSON,
} from './Discount';
import type { Measurement } from './Measurement';
import {
    MeasurementFromJSON,
    MeasurementFromJSONTyped,
    MeasurementToJSON,
} from './Measurement';
import type { ProductCollectionInfo } from './ProductCollectionInfo';
import {
    ProductCollectionInfoFromJSON,
    ProductCollectionInfoFromJSONTyped,
    ProductCollectionInfoToJSON,
} from './ProductCollectionInfo';
import type { ProductCollectionProduct } from './ProductCollectionProduct';
import {
    ProductCollectionProductFromJSON,
    ProductCollectionProductFromJSONTyped,
    ProductCollectionProductToJSON,
} from './ProductCollectionProduct';
import type { ProductExtra } from './ProductExtra';
import {
    ProductExtraFromJSON,
    ProductExtraFromJSONTyped,
    ProductExtraToJSON,
} from './ProductExtra';
import type { ProductImageGroup } from './ProductImageGroup';
import {
    ProductImageGroupFromJSON,
    ProductImageGroupFromJSONTyped,
    ProductImageGroupToJSON,
} from './ProductImageGroup';
import type { ProductInCatalogInfo } from './ProductInCatalogInfo';
import {
    ProductInCatalogInfoFromJSON,
    ProductInCatalogInfoFromJSONTyped,
    ProductInCatalogInfoToJSON,
} from './ProductInCatalogInfo';
import type { ProductInventoryInfo } from './ProductInventoryInfo';
import {
    ProductInventoryInfoFromJSON,
    ProductInventoryInfoFromJSONTyped,
    ProductInventoryInfoToJSON,
} from './ProductInventoryInfo';
import type { ProductLocalizedContent } from './ProductLocalizedContent';
import {
    ProductLocalizedContentFromJSON,
    ProductLocalizedContentFromJSONTyped,
    ProductLocalizedContentToJSON,
} from './ProductLocalizedContent';
import type { ProductLocalizedSEOContent } from './ProductLocalizedSEOContent';
import {
    ProductLocalizedSEOContentFromJSON,
    ProductLocalizedSEOContentFromJSONTyped,
    ProductLocalizedSEOContentToJSON,
} from './ProductLocalizedSEOContent';
import type { ProductOption } from './ProductOption';
import {
    ProductOptionFromJSON,
    ProductOptionFromJSONTyped,
    ProductOptionToJSON,
} from './ProductOption';
import type { ProductPrice } from './ProductPrice';
import {
    ProductPriceFromJSON,
    ProductPriceFromJSONTyped,
    ProductPriceToJSON,
} from './ProductPrice';
import type { ProductPricingBehaviorInfo } from './ProductPricingBehaviorInfo';
import {
    ProductPricingBehaviorInfoFromJSON,
    ProductPricingBehaviorInfoFromJSONTyped,
    ProductPricingBehaviorInfoToJSON,
} from './ProductPricingBehaviorInfo';
import type { ProductProperty } from './ProductProperty';
import {
    ProductPropertyFromJSON,
    ProductPropertyFromJSONTyped,
    ProductPropertyToJSON,
} from './ProductProperty';
import type { ProductPublishingInfo } from './ProductPublishingInfo';
import {
    ProductPublishingInfoFromJSON,
    ProductPublishingInfoFromJSONTyped,
    ProductPublishingInfoToJSON,
} from './ProductPublishingInfo';
import type { ProductSupplierInfo } from './ProductSupplierInfo';
import {
    ProductSupplierInfoFromJSON,
    ProductSupplierInfoFromJSONTyped,
    ProductSupplierInfoToJSON,
} from './ProductSupplierInfo';
import type { ProductVariationOption } from './ProductVariationOption';
import {
    ProductVariationOptionFromJSON,
    ProductVariationOptionFromJSONTyped,
    ProductVariationOptionToJSON,
} from './ProductVariationOption';
import type { SlicingSettings } from './SlicingSettings';
import {
    SlicingSettingsFromJSON,
    SlicingSettingsFromJSONTyped,
    SlicingSettingsToJSON,
} from './SlicingSettings';

/**
 * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * Merchant-created code identifier associated with the product, for example, a SKU or product item number.
     * @type {string}
     * @memberof Product
     */
    productCode?: string | null;
    /**
     * Indicates the usage type of this product. Must be one of the values in ProductUsageConst.
     * @type {string}
     * @memberof Product
     */
    productUsage?: string | null;
    /**
     * Indicates the fulfillment types the product supports.
     * @type {Array<string>}
     * @memberof Product
     */
    fulfillmentTypesSupported?: Array<string> | null;
    /**
     * Identifier of the Master Catalog that this product is a member of. System-supplied and read-only
     * @type {number}
     * @memberof Product
     */
    masterCatalogId?: number | null;
    /**
     * System generated monotonically increasing sequence
     * @type {number}
     * @memberof Product
     */
    productSequence?: number | null;
    /**
     * Unique identifier of the productType of the product. Refers to a valid ProductType that was previously created with the ProductType resource.
     * @type {number}
     * @memberof Product
     */
    productTypeId?: number | null;
    /**
     * Read only flag that indicates if the product meets the product type constraints (All adminRequired attributes have a valid value)
     * @type {boolean}
     * @memberof Product
     */
    isValidForProductType?: boolean | null;
    /**
     * This is the base product ProductCode of a product that is a variation. It is read-only and only populated for products that are variations of a configurable base product.
     * @type {string}
     * @memberof Product
     */
    baseProductCode?: string | null;
    /**
     * Catalog specific info for each catalog a product is valid in. There should always be one or more entries here.
     * @type {Array<ProductInCatalogInfo>}
     * @memberof Product
     */
    productInCatalogs?: Array<ProductInCatalogInfo> | null;
    /**
     * 
     * @type {ProductLocalizedContent}
     * @memberof Product
     */
    content?: ProductLocalizedContent;
    /**
     * 
     * @type {ProductPrice}
     * @memberof Product
     */
    price?: ProductPrice;
    /**
     * 
     * @type {ProductPricingBehaviorInfo}
     * @memberof Product
     */
    pricingBehavior?: ProductPricingBehaviorInfo;
    /**
     * 
     * @type {ProductLocalizedSEOContent}
     * @memberof Product
     */
    seoContent?: ProductLocalizedSEOContent;
    /**
     * The Options defined in the product Type that are currently assigned to this product
     * @type {Array<ProductOption>}
     * @memberof Product
     */
    options?: Array<ProductOption> | null;
    /**
     * The Extras defined in the product Type that are currently assigned to this product
     * @type {Array<ProductExtra>}
     * @memberof Product
     */
    extras?: Array<ProductExtra> | null;
    /**
     * The Properties defined in the product Type that are currently assigned to this product
     * @type {Array<ProductProperty>}
     * @memberof Product
     */
    properties?: Array<ProductProperty> | null;
    /**
     * If true, the product is subject to tax.
     * @type {boolean}
     * @memberof Product
     */
    isTaxable?: boolean | null;
    /**
     * 
     * @type {ProductInventoryInfo}
     * @memberof Product
     */
    inventoryInfo?: ProductInventoryInfo;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    shippingClassId?: number | null;
    /**
     * If true, the product can be purchased or fulfilled at regular intervals, for example, monthly billing or a subscription.
     * @type {boolean}
     * @memberof Product
     */
    isRecurring?: boolean | null;
    /**
     * UPC code of the product.
     * @type {string}
     * @memberof Product
     */
    upc?: string | null;
    /**
     * 
     * @type {ProductSupplierInfo}
     * @memberof Product
     */
    supplierInfo?: ProductSupplierInfo;
    /**
     * Does this product need to be packaged on its own
     * @type {boolean}
     * @memberof Product
     */
    isPackagedStandAlone?: boolean | null;
    /**
     * When packaged alone this is the package type
     * @type {string}
     * @memberof Product
     */
    standAlonePackageType?: string | null;
    /**
     * 
     * @type {Measurement}
     * @memberof Product
     */
    packageHeight?: Measurement;
    /**
     * 
     * @type {Measurement}
     * @memberof Product
     */
    packageWidth?: Measurement;
    /**
     * 
     * @type {Measurement}
     * @memberof Product
     */
    packageLength?: Measurement;
    /**
     * 
     * @type {Measurement}
     * @memberof Product
     */
    packageWeight?: Measurement;
    /**
     * Read only. List of discounts that are available for a product.
     * @type {Array<Discount>}
     * @memberof Product
     */
    applicableDiscounts?: Array<Discount> | null;
    /**
     * Read only. If true, this is a product variation of a product with configurable options. System-supplied and read-only.
     * @type {boolean}
     * @memberof Product
     */
    isVariation?: boolean;
    /**
     * Read only. If IsVariation true, thish provides a unique key to manage the variation of the base product.
     * @type {string}
     * @memberof Product
     */
    variationKey?: string | null;
    /**
     * Read only. If true, this product has configurable options. The product is not purchasable until the shopper selects options that resolve to a product variation. System-supplied and read-only.
     * @type {boolean}
     * @memberof Product
     */
    hasConfigurableOptions?: boolean;
    /**
     * Read only. If true, the product has stand-alone options that a shopper may select. System-supplied and read-only.
     * @type {boolean}
     * @memberof Product
     */
    hasStandAloneOptions?: boolean;
    /**
     * Read only List of variations that exist for a product. This is only populated when IsVariation is true. To get the list of options, the GET request must include the VariationOptions response group.
     * @type {Array<ProductVariationOption>}
     * @memberof Product
     */
    variationOptions?: Array<ProductVariationOption> | null;
    /**
     * 
     * @type {ProductPublishingInfo}
     * @memberof Product
     */
    publishingInfo?: ProductPublishingInfo;
    /**
     * list of other products that are included in a BundleProduct
     * This requires that the ProductUsage be set to Bundle
     * @type {Array<BundledProduct>}
     * @memberof Product
     */
    bundledProducts?: Array<BundledProduct> | null;
    /**
     * list of other products that are members of a ProductCollection
     * This requires that the ProductUsage be set to Collection
     * @type {Array<ProductCollectionProduct>}
     * @memberof Product
     */
    productCollectionProducts?: Array<ProductCollectionProduct> | null;
    /**
     * List of Mozu.ProductAdmin.Contracts.ProductCollectionInfo that this product belongs to
     * @type {Array<ProductCollectionInfo>}
     * @memberof Product
     */
    productCollections?: Array<ProductCollectionInfo> | null;
    /**
     * List of the image groups this product uses.
     * Image groups are used to map different images to different product options.
     * If the product doesn't have options then all images will be in the default
     * image group.
     * @type {Array<ProductImageGroup>}
     * @memberof Product
     */
    productImageGroups?: Array<ProductImageGroup> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof Product
     */
    auditInfo?: AuditInfo;
    /**
     * 
     * @type {SlicingSettings}
     * @memberof Product
     */
    slicingSettings?: SlicingSettings;
    /**
     * When this product belongs to a product collection this is the product id for the primary collection.
     * @type {string}
     * @memberof Product
     */
    primaryProductCollectionCode?: string | null;
}

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductFromJSON(json: any): Product {
    return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(json: any, ignoreDiscriminator: boolean): Product {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'productUsage': !exists(json, 'productUsage') ? undefined : json['productUsage'],
        'fulfillmentTypesSupported': !exists(json, 'fulfillmentTypesSupported') ? undefined : json['fulfillmentTypesSupported'],
        'masterCatalogId': !exists(json, 'masterCatalogId') ? undefined : json['masterCatalogId'],
        'productSequence': !exists(json, 'productSequence') ? undefined : json['productSequence'],
        'productTypeId': !exists(json, 'productTypeId') ? undefined : json['productTypeId'],
        'isValidForProductType': !exists(json, 'isValidForProductType') ? undefined : json['isValidForProductType'],
        'baseProductCode': !exists(json, 'baseProductCode') ? undefined : json['baseProductCode'],
        'productInCatalogs': !exists(json, 'productInCatalogs') ? undefined : (json['productInCatalogs'] === null ? null : (json['productInCatalogs'] as Array<any>).map(ProductInCatalogInfoFromJSON)),
        'content': !exists(json, 'content') ? undefined : ProductLocalizedContentFromJSON(json['content']),
        'price': !exists(json, 'price') ? undefined : ProductPriceFromJSON(json['price']),
        'pricingBehavior': !exists(json, 'pricingBehavior') ? undefined : ProductPricingBehaviorInfoFromJSON(json['pricingBehavior']),
        'seoContent': !exists(json, 'seoContent') ? undefined : ProductLocalizedSEOContentFromJSON(json['seoContent']),
        'options': !exists(json, 'options') ? undefined : (json['options'] === null ? null : (json['options'] as Array<any>).map(ProductOptionFromJSON)),
        'extras': !exists(json, 'extras') ? undefined : (json['extras'] === null ? null : (json['extras'] as Array<any>).map(ProductExtraFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : (json['properties'] === null ? null : (json['properties'] as Array<any>).map(ProductPropertyFromJSON)),
        'isTaxable': !exists(json, 'isTaxable') ? undefined : json['isTaxable'],
        'inventoryInfo': !exists(json, 'inventoryInfo') ? undefined : ProductInventoryInfoFromJSON(json['inventoryInfo']),
        'shippingClassId': !exists(json, 'shippingClassId') ? undefined : json['shippingClassId'],
        'isRecurring': !exists(json, 'isRecurring') ? undefined : json['isRecurring'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'supplierInfo': !exists(json, 'supplierInfo') ? undefined : ProductSupplierInfoFromJSON(json['supplierInfo']),
        'isPackagedStandAlone': !exists(json, 'isPackagedStandAlone') ? undefined : json['isPackagedStandAlone'],
        'standAlonePackageType': !exists(json, 'standAlonePackageType') ? undefined : json['standAlonePackageType'],
        'packageHeight': !exists(json, 'packageHeight') ? undefined : MeasurementFromJSON(json['packageHeight']),
        'packageWidth': !exists(json, 'packageWidth') ? undefined : MeasurementFromJSON(json['packageWidth']),
        'packageLength': !exists(json, 'packageLength') ? undefined : MeasurementFromJSON(json['packageLength']),
        'packageWeight': !exists(json, 'packageWeight') ? undefined : MeasurementFromJSON(json['packageWeight']),
        'applicableDiscounts': !exists(json, 'applicableDiscounts') ? undefined : (json['applicableDiscounts'] === null ? null : (json['applicableDiscounts'] as Array<any>).map(DiscountFromJSON)),
        'isVariation': !exists(json, 'isVariation') ? undefined : json['isVariation'],
        'variationKey': !exists(json, 'variationKey') ? undefined : json['variationKey'],
        'hasConfigurableOptions': !exists(json, 'hasConfigurableOptions') ? undefined : json['hasConfigurableOptions'],
        'hasStandAloneOptions': !exists(json, 'hasStandAloneOptions') ? undefined : json['hasStandAloneOptions'],
        'variationOptions': !exists(json, 'variationOptions') ? undefined : (json['variationOptions'] === null ? null : (json['variationOptions'] as Array<any>).map(ProductVariationOptionFromJSON)),
        'publishingInfo': !exists(json, 'publishingInfo') ? undefined : ProductPublishingInfoFromJSON(json['publishingInfo']),
        'bundledProducts': !exists(json, 'bundledProducts') ? undefined : (json['bundledProducts'] === null ? null : (json['bundledProducts'] as Array<any>).map(BundledProductFromJSON)),
        'productCollectionProducts': !exists(json, 'productCollectionProducts') ? undefined : (json['productCollectionProducts'] === null ? null : (json['productCollectionProducts'] as Array<any>).map(ProductCollectionProductFromJSON)),
        'productCollections': !exists(json, 'productCollections') ? undefined : (json['productCollections'] === null ? null : (json['productCollections'] as Array<any>).map(ProductCollectionInfoFromJSON)),
        'productImageGroups': !exists(json, 'productImageGroups') ? undefined : (json['productImageGroups'] === null ? null : (json['productImageGroups'] as Array<any>).map(ProductImageGroupFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'slicingSettings': !exists(json, 'slicingSettings') ? undefined : SlicingSettingsFromJSON(json['slicingSettings']),
        'primaryProductCollectionCode': !exists(json, 'primaryProductCollectionCode') ? undefined : json['primaryProductCollectionCode'],
    };
}

export function ProductToJSON(value?: Product | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productCode': value.productCode,
        'productUsage': value.productUsage,
        'fulfillmentTypesSupported': value.fulfillmentTypesSupported,
        'masterCatalogId': value.masterCatalogId,
        'productSequence': value.productSequence,
        'productTypeId': value.productTypeId,
        'isValidForProductType': value.isValidForProductType,
        'baseProductCode': value.baseProductCode,
        'productInCatalogs': value.productInCatalogs === undefined ? undefined : (value.productInCatalogs === null ? null : (value.productInCatalogs as Array<any>).map(ProductInCatalogInfoToJSON)),
        'content': ProductLocalizedContentToJSON(value.content),
        'price': ProductPriceToJSON(value.price),
        'pricingBehavior': ProductPricingBehaviorInfoToJSON(value.pricingBehavior),
        'seoContent': ProductLocalizedSEOContentToJSON(value.seoContent),
        'options': value.options === undefined ? undefined : (value.options === null ? null : (value.options as Array<any>).map(ProductOptionToJSON)),
        'extras': value.extras === undefined ? undefined : (value.extras === null ? null : (value.extras as Array<any>).map(ProductExtraToJSON)),
        'properties': value.properties === undefined ? undefined : (value.properties === null ? null : (value.properties as Array<any>).map(ProductPropertyToJSON)),
        'isTaxable': value.isTaxable,
        'inventoryInfo': ProductInventoryInfoToJSON(value.inventoryInfo),
        'shippingClassId': value.shippingClassId,
        'isRecurring': value.isRecurring,
        'upc': value.upc,
        'supplierInfo': ProductSupplierInfoToJSON(value.supplierInfo),
        'isPackagedStandAlone': value.isPackagedStandAlone,
        'standAlonePackageType': value.standAlonePackageType,
        'packageHeight': MeasurementToJSON(value.packageHeight),
        'packageWidth': MeasurementToJSON(value.packageWidth),
        'packageLength': MeasurementToJSON(value.packageLength),
        'packageWeight': MeasurementToJSON(value.packageWeight),
        'applicableDiscounts': value.applicableDiscounts === undefined ? undefined : (value.applicableDiscounts === null ? null : (value.applicableDiscounts as Array<any>).map(DiscountToJSON)),
        'isVariation': value.isVariation,
        'variationKey': value.variationKey,
        'hasConfigurableOptions': value.hasConfigurableOptions,
        'hasStandAloneOptions': value.hasStandAloneOptions,
        'variationOptions': value.variationOptions === undefined ? undefined : (value.variationOptions === null ? null : (value.variationOptions as Array<any>).map(ProductVariationOptionToJSON)),
        'publishingInfo': ProductPublishingInfoToJSON(value.publishingInfo),
        'bundledProducts': value.bundledProducts === undefined ? undefined : (value.bundledProducts === null ? null : (value.bundledProducts as Array<any>).map(BundledProductToJSON)),
        'productCollectionProducts': value.productCollectionProducts === undefined ? undefined : (value.productCollectionProducts === null ? null : (value.productCollectionProducts as Array<any>).map(ProductCollectionProductToJSON)),
        'productCollections': value.productCollections === undefined ? undefined : (value.productCollections === null ? null : (value.productCollections as Array<any>).map(ProductCollectionInfoToJSON)),
        'productImageGroups': value.productImageGroups === undefined ? undefined : (value.productImageGroups === null ? null : (value.productImageGroups as Array<any>).map(ProductImageGroupToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'slicingSettings': SlicingSettingsToJSON(value.slicingSettings),
        'primaryProductCollectionCode': value.primaryProductCollectionCode,
    };
}

