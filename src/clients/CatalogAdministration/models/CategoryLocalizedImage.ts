/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Contains the image label and alternate text for a category image or video in the language specified by LocalCode.
 * @export
 * @interface CategoryLocalizedImage
 */
export interface CategoryLocalizedImage {
    /**
     * Unique identifier of the image. System-supplied and read-only.
     * @type {number}
     * @memberof CategoryLocalizedImage
     */
    id?: number | null;
    /**
     * Language used for the image content.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    localeCode?: string | null;
    /**
     * Image title that appears on the storefront.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    imageLabel?: string | null;
    /**
     * Descriptive text associated with the image or video that appears on the storefront.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    altText?: string | null;
    /**
     * URL of the image.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    imageUrl?: string | null;
    /**
     * Id of the image in the CMS.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    cmsId?: string | null;
    /**
     * URL of a video associated with the category.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    videoUrl?: string | null;
    /**
     * Type of media. Used by the client to determine how to render the image or video or what have you.
     * @type {string}
     * @memberof CategoryLocalizedImage
     */
    mediaType?: string | null;
    /**
     * For categories with multiple images, the order in which this image appears on the storefront.
     * @type {number}
     * @memberof CategoryLocalizedImage
     */
    sequence?: number | null;
}

/**
 * Check if a given object implements the CategoryLocalizedImage interface.
 */
export function instanceOfCategoryLocalizedImage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CategoryLocalizedImageFromJSON(json: any): CategoryLocalizedImage {
    return CategoryLocalizedImageFromJSONTyped(json, false);
}

export function CategoryLocalizedImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryLocalizedImage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'localeCode': !exists(json, 'localeCode') ? undefined : json['localeCode'],
        'imageLabel': !exists(json, 'imageLabel') ? undefined : json['imageLabel'],
        'altText': !exists(json, 'altText') ? undefined : json['altText'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'cmsId': !exists(json, 'cmsId') ? undefined : json['cmsId'],
        'videoUrl': !exists(json, 'videoUrl') ? undefined : json['videoUrl'],
        'mediaType': !exists(json, 'mediaType') ? undefined : json['mediaType'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function CategoryLocalizedImageToJSON(value?: CategoryLocalizedImage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'localeCode': value.localeCode,
        'imageLabel': value.imageLabel,
        'altText': value.altText,
        'imageUrl': value.imageUrl,
        'cmsId': value.cmsId,
        'videoUrl': value.videoUrl,
        'mediaType': value.mediaType,
        'sequence': value.sequence,
    };
}

