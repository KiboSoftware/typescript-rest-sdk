/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Used to validate attributes.
 * @export
 * @interface CatalogAdminsAttributeValidation
 */
export interface CatalogAdminsAttributeValidation {
    /**
     * Regular expression to run against the attribute value. This should follow JavaScript/EMCA's Regular Expression syntax.
     * @type {string}
     * @memberof CatalogAdminsAttributeValidation
     */
    regularExpression?: string | null;
    /**
     * For validating strings, minimum length allowed for a string.
     * @type {number}
     * @memberof CatalogAdminsAttributeValidation
     */
    minStringLength?: number | null;
    /**
     * For validating strings, maximum length allowed for a string.
     * @type {number}
     * @memberof CatalogAdminsAttributeValidation
     */
    maxStringLength?: number | null;
    /**
     * For validating Number attribute value, minimum number allowed.
     * @type {number}
     * @memberof CatalogAdminsAttributeValidation
     */
    minNumericValue?: number | null;
    /**
     * For validating Number attribute value, maximum number allowed.
     * @type {number}
     * @memberof CatalogAdminsAttributeValidation
     */
    maxNumericValue?: number | null;
    /**
     * For validating a DateTime attribute value, minimum datetime allowed.
     * @type {Date}
     * @memberof CatalogAdminsAttributeValidation
     */
    minDateValue?: Date | null;
    /**
     * For validating a DateTime attribute value, maximum datetime allowed.
     * @type {Date}
     * @memberof CatalogAdminsAttributeValidation
     */
    maxDateValue?: Date | null;
}

/**
 * Check if a given object implements the CatalogAdminsAttributeValidation interface.
 */
export function instanceOfCatalogAdminsAttributeValidation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CatalogAdminsAttributeValidationFromJSON(json: any): CatalogAdminsAttributeValidation {
    return CatalogAdminsAttributeValidationFromJSONTyped(json, false);
}

export function CatalogAdminsAttributeValidationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogAdminsAttributeValidation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'regularExpression': !exists(json, 'regularExpression') ? undefined : json['regularExpression'],
        'minStringLength': !exists(json, 'minStringLength') ? undefined : json['minStringLength'],
        'maxStringLength': !exists(json, 'maxStringLength') ? undefined : json['maxStringLength'],
        'minNumericValue': !exists(json, 'minNumericValue') ? undefined : json['minNumericValue'],
        'maxNumericValue': !exists(json, 'maxNumericValue') ? undefined : json['maxNumericValue'],
        'minDateValue': !exists(json, 'minDateValue') ? undefined : (json['minDateValue'] === null ? null : new Date(json['minDateValue'])),
        'maxDateValue': !exists(json, 'maxDateValue') ? undefined : (json['maxDateValue'] === null ? null : new Date(json['maxDateValue'])),
    };
}

export function CatalogAdminsAttributeValidationToJSON(value?: CatalogAdminsAttributeValidation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'regularExpression': value.regularExpression,
        'minStringLength': value.minStringLength,
        'maxStringLength': value.maxStringLength,
        'minNumericValue': value.minNumericValue,
        'maxNumericValue': value.maxNumericValue,
        'minDateValue': value.minDateValue === undefined ? undefined : (value.minDateValue === null ? null : value.minDateValue.toISOString()),
        'maxDateValue': value.maxDateValue === undefined ? undefined : (value.maxDateValue === null ? null : value.maxDateValue.toISOString()),
    };
}

