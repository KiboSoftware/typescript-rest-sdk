/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Attribute } from './Attribute';
import {
    AttributeFromJSON,
    AttributeFromJSONTyped,
    AttributeToJSON,
} from './Attribute';
import type { AttributeInProductTypeDisplayInfo } from './AttributeInProductTypeDisplayInfo';
import {
    AttributeInProductTypeDisplayInfoFromJSON,
    AttributeInProductTypeDisplayInfoFromJSONTyped,
    AttributeInProductTypeDisplayInfoToJSON,
} from './AttributeInProductTypeDisplayInfo';
import type { AttributeVocabularyValueInProductType } from './AttributeVocabularyValueInProductType';
import {
    AttributeVocabularyValueInProductTypeFromJSON,
    AttributeVocabularyValueInProductTypeFromJSONTyped,
    AttributeVocabularyValueInProductTypeToJSON,
} from './AttributeVocabularyValueInProductType';

/**
 * 
 * @export
 * @interface AttributeInProductType
 */
export interface AttributeInProductType {
    /**
     * Unique identifier of the Attribute. Must be an attribute fully qualilfied name that already exists. If no namespace is specified Tenant is assumed
     * @type {string}
     * @memberof AttributeInProductType
     */
    attributeFQN?: string | null;
    /**
     * If True, the attribute is part of the base product type and can only have order modified.
     * @type {boolean}
     * @memberof AttributeInProductType
     */
    isInheritedFromBaseType?: boolean | null;
    /**
     * Used to order the display of the attributes within a section
     * @type {number}
     * @memberof AttributeInProductType
     */
    order?: number | null;
    /**
     * If True, the admin must include this attribute in products of this productType
     * @type {boolean}
     * @memberof AttributeInProductType
     */
    isRequiredByAdmin?: boolean | null;
    /**
     * If True, the property is hidden in the storefront. This field only applies to properties.
     * @type {boolean}
     * @memberof AttributeInProductType
     */
    isHiddenProperty?: boolean | null;
    /**
     * If true, this property is not available on the storefront. If false, this property will be available on storefront. The IsHiddenProperty hides the property from the customer, but is still available from the API.
     * @type {boolean}
     * @memberof AttributeInProductType
     */
    isAdminOnlyProperty?: boolean | null;
    /**
     * If True this property will not be returned  storefront product listings (Search,GetProduct) it will still be returned on GetProduct, ValidateProduct...)
     * @type {boolean}
     * @memberof AttributeInProductType
     */
    isProductDetailsOnlyProperty?: boolean | null;
    /**
     * If True, the property can have multiple values selected on the product. Only applies to PredefinedVocabulary properties.
     * @type {boolean}
     * @memberof AttributeInProductType
     */
    isMultiValueProperty?: boolean | null;
    /**
     * 
     * @type {AttributeInProductTypeDisplayInfo}
     * @memberof AttributeInProductType
     */
    displayInfo?: AttributeInProductTypeDisplayInfo;
    /**
     * The collection of vocabulary values included in this product type.
     * @type {Array<AttributeVocabularyValueInProductType>}
     * @memberof AttributeInProductType
     */
    vocabularyValues?: Array<AttributeVocabularyValueInProductType> | null;
    /**
     * 
     * @type {Attribute}
     * @memberof AttributeInProductType
     */
    attributeDetail?: Attribute;
}

/**
 * Check if a given object implements the AttributeInProductType interface.
 */
export function instanceOfAttributeInProductType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AttributeInProductTypeFromJSON(json: any): AttributeInProductType {
    return AttributeInProductTypeFromJSONTyped(json, false);
}

export function AttributeInProductTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttributeInProductType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeFQN': !exists(json, 'attributeFQN') ? undefined : json['attributeFQN'],
        'isInheritedFromBaseType': !exists(json, 'isInheritedFromBaseType') ? undefined : json['isInheritedFromBaseType'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'isRequiredByAdmin': !exists(json, 'isRequiredByAdmin') ? undefined : json['isRequiredByAdmin'],
        'isHiddenProperty': !exists(json, 'isHiddenProperty') ? undefined : json['isHiddenProperty'],
        'isAdminOnlyProperty': !exists(json, 'isAdminOnlyProperty') ? undefined : json['isAdminOnlyProperty'],
        'isProductDetailsOnlyProperty': !exists(json, 'isProductDetailsOnlyProperty') ? undefined : json['isProductDetailsOnlyProperty'],
        'isMultiValueProperty': !exists(json, 'isMultiValueProperty') ? undefined : json['isMultiValueProperty'],
        'displayInfo': !exists(json, 'displayInfo') ? undefined : AttributeInProductTypeDisplayInfoFromJSON(json['displayInfo']),
        'vocabularyValues': !exists(json, 'vocabularyValues') ? undefined : (json['vocabularyValues'] === null ? null : (json['vocabularyValues'] as Array<any>).map(AttributeVocabularyValueInProductTypeFromJSON)),
        'attributeDetail': !exists(json, 'attributeDetail') ? undefined : AttributeFromJSON(json['attributeDetail']),
    };
}

export function AttributeInProductTypeToJSON(value?: AttributeInProductType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributeFQN': value.attributeFQN,
        'isInheritedFromBaseType': value.isInheritedFromBaseType,
        'order': value.order,
        'isRequiredByAdmin': value.isRequiredByAdmin,
        'isHiddenProperty': value.isHiddenProperty,
        'isAdminOnlyProperty': value.isAdminOnlyProperty,
        'isProductDetailsOnlyProperty': value.isProductDetailsOnlyProperty,
        'isMultiValueProperty': value.isMultiValueProperty,
        'displayInfo': AttributeInProductTypeDisplayInfoToJSON(value.displayInfo),
        'vocabularyValues': value.vocabularyValues === undefined ? undefined : (value.vocabularyValues === null ? null : (value.vocabularyValues as Array<any>).map(AttributeVocabularyValueInProductTypeToJSON)),
        'attributeDetail': AttributeToJSON(value.attributeDetail),
    };
}

