/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductInCatalogInfoPatchDocument } from './ProductInCatalogInfoPatchDocument';
import {
    ProductInCatalogInfoPatchDocumentFromJSON,
    ProductInCatalogInfoPatchDocumentFromJSONTyped,
    ProductInCatalogInfoPatchDocumentToJSON,
} from './ProductInCatalogInfoPatchDocument';

/**
 * List of JsonPatch operations to be applied to a Mozu.ProductAdmin.Contracts.ProductInCatalogInfo
 * @export
 * @interface ProductInCatalogPatchAction
 */
export interface ProductInCatalogPatchAction {
    /**
     * Product code of the target product
     * @type {string}
     * @memberof ProductInCatalogPatchAction
     */
    productCode?: string | null;
    /**
     * CatalogId
     * @type {number}
     * @memberof ProductInCatalogPatchAction
     */
    catalogId?: number;
    /**
     * 
     * @type {ProductInCatalogInfoPatchDocument}
     * @memberof ProductInCatalogPatchAction
     */
    patches?: ProductInCatalogInfoPatchDocument;
    /**
     * If true and publishing is enabled, actions are applied to a draft version of the product and then the draft is published otherwise
     * changes are saved to the live product.
     * @type {boolean}
     * @memberof ProductInCatalogPatchAction
     */
    saveAndPublish?: boolean;
}

/**
 * Check if a given object implements the ProductInCatalogPatchAction interface.
 */
export function instanceOfProductInCatalogPatchAction(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductInCatalogPatchActionFromJSON(json: any): ProductInCatalogPatchAction {
    return ProductInCatalogPatchActionFromJSONTyped(json, false);
}

export function ProductInCatalogPatchActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductInCatalogPatchAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'catalogId': !exists(json, 'catalogId') ? undefined : json['catalogId'],
        'patches': !exists(json, 'patches') ? undefined : ProductInCatalogInfoPatchDocumentFromJSON(json['patches']),
        'saveAndPublish': !exists(json, 'saveAndPublish') ? undefined : json['saveAndPublish'],
    };
}

export function ProductInCatalogPatchActionToJSON(value?: ProductInCatalogPatchAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productCode': value.productCode,
        'catalogId': value.catalogId,
        'patches': ProductInCatalogInfoPatchDocumentToJSON(value.patches),
        'saveAndPublish': value.saveAndPublish,
    };
}

