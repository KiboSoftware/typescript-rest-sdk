/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdminUserAuditInfo } from './AdminUserAuditInfo';
import {
    AdminUserAuditInfoFromJSON,
    AdminUserAuditInfoFromJSONTyped,
    AdminUserAuditInfoToJSON,
} from './AdminUserAuditInfo';
import type { ThresholdMessageLocalizedContent } from './ThresholdMessageLocalizedContent';
import {
    ThresholdMessageLocalizedContentFromJSON,
    ThresholdMessageLocalizedContentFromJSONTyped,
    ThresholdMessageLocalizedContentToJSON,
} from './ThresholdMessageLocalizedContent';

/**
 * 
 * @export
 * @interface CatalogAdminsThresholdMessage
 */
export interface CatalogAdminsThresholdMessage {
    /**
     * Unique identifier of the discount. System-supplied and read-only.
     * @type {number}
     * @memberof CatalogAdminsThresholdMessage
     */
    discountId: number;
    /**
     * The cart total amount that must be met before the threshold message is displayed
     * @type {number}
     * @memberof CatalogAdminsThresholdMessage
     */
    thresholdValue: number;
    /**
     * Indicates if threshold messages are active for this discount
     * @type {boolean}
     * @memberof CatalogAdminsThresholdMessage
     */
    isActive?: boolean;
    /**
     * Indicates if the threshold message will display in the cart
     * @type {boolean}
     * @memberof CatalogAdminsThresholdMessage
     */
    showInCart?: boolean;
    /**
     * Indicates if the threshold message will display on the checkout page
     * @type {boolean}
     * @memberof CatalogAdminsThresholdMessage
     */
    showOnCheckout?: boolean;
    /**
     * Indicates if the threshold message will display when a promo code is evaluated
     * @type {boolean}
     * @memberof CatalogAdminsThresholdMessage
     */
    requiresCouponCode?: boolean;
    /**
     * 
     * @type {ThresholdMessageLocalizedContent}
     * @memberof CatalogAdminsThresholdMessage
     */
    content: ThresholdMessageLocalizedContent;
    /**
     * 
     * @type {AdminUserAuditInfo}
     * @memberof CatalogAdminsThresholdMessage
     */
    auditInfo?: AdminUserAuditInfo;
}

/**
 * Check if a given object implements the CatalogAdminsThresholdMessage interface.
 */
export function instanceOfCatalogAdminsThresholdMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "discountId" in value;
    isInstance = isInstance && "thresholdValue" in value;
    isInstance = isInstance && "content" in value;

    return isInstance;
}

export function CatalogAdminsThresholdMessageFromJSON(json: any): CatalogAdminsThresholdMessage {
    return CatalogAdminsThresholdMessageFromJSONTyped(json, false);
}

export function CatalogAdminsThresholdMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogAdminsThresholdMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'discountId': json['discountId'],
        'thresholdValue': json['thresholdValue'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'showInCart': !exists(json, 'showInCart') ? undefined : json['showInCart'],
        'showOnCheckout': !exists(json, 'showOnCheckout') ? undefined : json['showOnCheckout'],
        'requiresCouponCode': !exists(json, 'requiresCouponCode') ? undefined : json['requiresCouponCode'],
        'content': ThresholdMessageLocalizedContentFromJSON(json['content']),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AdminUserAuditInfoFromJSON(json['auditInfo']),
    };
}

export function CatalogAdminsThresholdMessageToJSON(value?: CatalogAdminsThresholdMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'discountId': value.discountId,
        'thresholdValue': value.thresholdValue,
        'isActive': value.isActive,
        'showInCart': value.showInCart,
        'showOnCheckout': value.showOnCheckout,
        'requiresCouponCode': value.requiresCouponCode,
        'content': ThresholdMessageLocalizedContentToJSON(value.content),
        'auditInfo': AdminUserAuditInfoToJSON(value.auditInfo),
    };
}

