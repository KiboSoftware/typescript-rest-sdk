/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdminUserAuditInfo } from './AdminUserAuditInfo';
import {
    AdminUserAuditInfoFromJSON,
    AdminUserAuditInfoFromJSONTyped,
    AdminUserAuditInfoToJSON,
} from './AdminUserAuditInfo';
import type { AttributeSearchSettings } from './AttributeSearchSettings';
import {
    AttributeSearchSettingsFromJSON,
    AttributeSearchSettingsFromJSONTyped,
    AttributeSearchSettingsToJSON,
} from './AttributeSearchSettings';
import type { CatalogAdminsAttributeLocalizedContent } from './CatalogAdminsAttributeLocalizedContent';
import {
    CatalogAdminsAttributeLocalizedContentFromJSON,
    CatalogAdminsAttributeLocalizedContentFromJSONTyped,
    CatalogAdminsAttributeLocalizedContentToJSON,
} from './CatalogAdminsAttributeLocalizedContent';
import type { CatalogAdminsAttributeMetadataItem } from './CatalogAdminsAttributeMetadataItem';
import {
    CatalogAdminsAttributeMetadataItemFromJSON,
    CatalogAdminsAttributeMetadataItemFromJSONTyped,
    CatalogAdminsAttributeMetadataItemToJSON,
} from './CatalogAdminsAttributeMetadataItem';
import type { CatalogAdminsAttributeValidation } from './CatalogAdminsAttributeValidation';
import {
    CatalogAdminsAttributeValidationFromJSON,
    CatalogAdminsAttributeValidationFromJSONTyped,
    CatalogAdminsAttributeValidationToJSON,
} from './CatalogAdminsAttributeValidation';
import type { CatalogAdminsAttributeVocabularyValue } from './CatalogAdminsAttributeVocabularyValue';
import {
    CatalogAdminsAttributeVocabularyValueFromJSON,
    CatalogAdminsAttributeVocabularyValueFromJSONTyped,
    CatalogAdminsAttributeVocabularyValueToJSON,
} from './CatalogAdminsAttributeVocabularyValue';

/**
 * Attribute
 * @export
 * @interface CatalogAdminsAttribute
 */
export interface CatalogAdminsAttribute {
    /**
     * Name of the product displayed in the admin, This field does not need to be unqiue, but is required. It can include spaces...and is limited to a length of 50.
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    adminName?: string | null;
    /**
     * NameSpace, each application creating attributes will have a uniqe namespace to avoid name (Code) collisions. The namespace provided must be a valid registered
     * namespace. If no namespace is specified it is assumed to be the namespace of the Tenant.
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    namespace?: string | null;
    /**
     * Unique identifier of the Attribute. Must be unique within a namespace and cannot be changed once the attribute is created. This value will be generated and match the attribute
     * sequence if not provided on create.
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    attributeCode?: string | null;
    /**
     * Attribute fully qualified name, Read only value that combines namespace and attribute code as NameSpace~AttributeCode
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    attributeFQN?: string | null;
    /**
     * Specifies if this attribute can can be used to generalize values of another attribute
     * @type {boolean}
     * @memberof CatalogAdminsAttribute
     */
    isValueMappingAttribute?: boolean | null;
    /**
     * Attribute fully qualified name of a corresponding value mapping atribuite
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    valueMappingAttributeFQN?: string | null;
    /**
     * Read only System generated monotonically increasing unique sequence for each attribute created.
     * @type {number}
     * @memberof CatalogAdminsAttribute
     */
    attributeSequence?: number | null;
    /**
     * Read only System generated monotonically increasing unique sequence for each attribute,DataType created (this is used to optimize indexed field names in search).
     * @type {number}
     * @memberof CatalogAdminsAttribute
     */
    attributeDataTypeSequence?: number | null;
    /**
     * Indentifier of the master that this attribute is a member of. System-supplied and read-only. Attributes will be created in the MasterCatalog of the supplied context.
     * @type {number}
     * @memberof CatalogAdminsAttribute
     */
    masterCatalogId?: number | null;
    /**
     * The InputType type of the attribute. Must be a valid value for InputType defined in InputTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. 
     * This value cannot be changed after create
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    inputType?: string | null;
    /**
     * The ValueType of the attribute.  Must be a valid value for ValueType defined in ValueTypeTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. 
     * This value cannot be changed after create
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    valueType?: string | null;
    /**
     * The DataType of the attribute.  Must be a valid value for DataType defined in DataTypeTypeConst and the combination of types set must match an entry in the AttributeTypeRules resource. 
     * This value cannot be changed after create
     * @type {string}
     * @memberof CatalogAdminsAttribute
     */
    dataType?: string | null;
    /**
     * Specifies if this attribute can have a usage type of Option in a ProductType. This value can only be true when when it matches an AttributeTypeRule in the AttributeTypeRules resource.
     * @type {boolean}
     * @memberof CatalogAdminsAttribute
     */
    isOption?: boolean | null;
    /**
     * Specifies if this attribute can have a usage type of Extra in a ProductType. This value can only be true when when it matches an AttributeTypeRule in the AttributeTypeRules resource.
     * @type {boolean}
     * @memberof CatalogAdminsAttribute
     */
    isExtra?: boolean | null;
    /**
     * Specifies if this attribute can have a usage type of Property in a ProductType. This value can only be true when when it matches an AttributeTypeRule in the AttributeTypeRules resource.
     * @type {boolean}
     * @memberof CatalogAdminsAttribute
     */
    isProperty?: boolean | null;
    /**
     * Attribute Metadata. This list can contain opaque data (key value pairs) that can be used as a property bag for UI concerns.
     * @type {Array<CatalogAdminsAttributeMetadataItem>}
     * @memberof CatalogAdminsAttribute
     */
    attributeMetadata?: Array<CatalogAdminsAttributeMetadataItem> | null;
    /**
     * 
     * @type {CatalogAdminsAttributeLocalizedContent}
     * @memberof CatalogAdminsAttribute
     */
    content?: CatalogAdminsAttributeLocalizedContent;
    /**
     * The Content of an attribute. This content is always in the default language of the MasterCatalog.
     * @type {Array<CatalogAdminsAttributeLocalizedContent>}
     * @memberof CatalogAdminsAttribute
     */
    localizedContent?: Array<CatalogAdminsAttributeLocalizedContent> | null;
    /**
     * 
     * @type {CatalogAdminsAttributeValidation}
     * @memberof CatalogAdminsAttribute
     */
    validation?: CatalogAdminsAttributeValidation;
    /**
     * The list of Values for this attribute. Only available for ValueType:PredefinedVocabulary
     * @type {Array<CatalogAdminsAttributeVocabularyValue>}
     * @memberof CatalogAdminsAttribute
     */
    vocabularyValues?: Array<CatalogAdminsAttributeVocabularyValue> | null;
    /**
     * 
     * @type {AttributeSearchSettings}
     * @memberof CatalogAdminsAttribute
     */
    searchSettings?: AttributeSearchSettings;
    /**
     * 
     * @type {AdminUserAuditInfo}
     * @memberof CatalogAdminsAttribute
     */
    auditInfo?: AdminUserAuditInfo;
}

/**
 * Check if a given object implements the CatalogAdminsAttribute interface.
 */
export function instanceOfCatalogAdminsAttribute(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CatalogAdminsAttributeFromJSON(json: any): CatalogAdminsAttribute {
    return CatalogAdminsAttributeFromJSONTyped(json, false);
}

export function CatalogAdminsAttributeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogAdminsAttribute {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adminName': !exists(json, 'adminName') ? undefined : json['adminName'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'attributeCode': !exists(json, 'attributeCode') ? undefined : json['attributeCode'],
        'attributeFQN': !exists(json, 'attributeFQN') ? undefined : json['attributeFQN'],
        'isValueMappingAttribute': !exists(json, 'isValueMappingAttribute') ? undefined : json['isValueMappingAttribute'],
        'valueMappingAttributeFQN': !exists(json, 'valueMappingAttributeFQN') ? undefined : json['valueMappingAttributeFQN'],
        'attributeSequence': !exists(json, 'attributeSequence') ? undefined : json['attributeSequence'],
        'attributeDataTypeSequence': !exists(json, 'attributeDataTypeSequence') ? undefined : json['attributeDataTypeSequence'],
        'masterCatalogId': !exists(json, 'masterCatalogId') ? undefined : json['masterCatalogId'],
        'inputType': !exists(json, 'inputType') ? undefined : json['inputType'],
        'valueType': !exists(json, 'valueType') ? undefined : json['valueType'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'isOption': !exists(json, 'isOption') ? undefined : json['isOption'],
        'isExtra': !exists(json, 'isExtra') ? undefined : json['isExtra'],
        'isProperty': !exists(json, 'isProperty') ? undefined : json['isProperty'],
        'attributeMetadata': !exists(json, 'attributeMetadata') ? undefined : (json['attributeMetadata'] === null ? null : (json['attributeMetadata'] as Array<any>).map(CatalogAdminsAttributeMetadataItemFromJSON)),
        'content': !exists(json, 'content') ? undefined : CatalogAdminsAttributeLocalizedContentFromJSON(json['content']),
        'localizedContent': !exists(json, 'localizedContent') ? undefined : (json['localizedContent'] === null ? null : (json['localizedContent'] as Array<any>).map(CatalogAdminsAttributeLocalizedContentFromJSON)),
        'validation': !exists(json, 'validation') ? undefined : CatalogAdminsAttributeValidationFromJSON(json['validation']),
        'vocabularyValues': !exists(json, 'vocabularyValues') ? undefined : (json['vocabularyValues'] === null ? null : (json['vocabularyValues'] as Array<any>).map(CatalogAdminsAttributeVocabularyValueFromJSON)),
        'searchSettings': !exists(json, 'searchSettings') ? undefined : AttributeSearchSettingsFromJSON(json['searchSettings']),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AdminUserAuditInfoFromJSON(json['auditInfo']),
    };
}

export function CatalogAdminsAttributeToJSON(value?: CatalogAdminsAttribute | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adminName': value.adminName,
        'namespace': value.namespace,
        'attributeCode': value.attributeCode,
        'attributeFQN': value.attributeFQN,
        'isValueMappingAttribute': value.isValueMappingAttribute,
        'valueMappingAttributeFQN': value.valueMappingAttributeFQN,
        'attributeSequence': value.attributeSequence,
        'attributeDataTypeSequence': value.attributeDataTypeSequence,
        'masterCatalogId': value.masterCatalogId,
        'inputType': value.inputType,
        'valueType': value.valueType,
        'dataType': value.dataType,
        'isOption': value.isOption,
        'isExtra': value.isExtra,
        'isProperty': value.isProperty,
        'attributeMetadata': value.attributeMetadata === undefined ? undefined : (value.attributeMetadata === null ? null : (value.attributeMetadata as Array<any>).map(CatalogAdminsAttributeMetadataItemToJSON)),
        'content': CatalogAdminsAttributeLocalizedContentToJSON(value.content),
        'localizedContent': value.localizedContent === undefined ? undefined : (value.localizedContent === null ? null : (value.localizedContent as Array<any>).map(CatalogAdminsAttributeLocalizedContentToJSON)),
        'validation': CatalogAdminsAttributeValidationToJSON(value.validation),
        'vocabularyValues': value.vocabularyValues === undefined ? undefined : (value.vocabularyValues === null ? null : (value.vocabularyValues as Array<any>).map(CatalogAdminsAttributeVocabularyValueToJSON)),
        'searchSettings': AttributeSearchSettingsToJSON(value.searchSettings),
        'auditInfo': AdminUserAuditInfoToJSON(value.auditInfo),
    };
}

