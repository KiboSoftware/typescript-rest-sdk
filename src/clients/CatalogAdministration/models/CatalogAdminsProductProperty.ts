/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CatalogAdminsProductPropertyValue } from './CatalogAdminsProductPropertyValue';
import {
    CatalogAdminsProductPropertyValueFromJSON,
    CatalogAdminsProductPropertyValueFromJSONTyped,
    CatalogAdminsProductPropertyValueToJSON,
} from './CatalogAdminsProductPropertyValue';

/**
 * Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, 
 * the color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram.
 * @export
 * @interface CatalogAdminsProductProperty
 */
export interface CatalogAdminsProductProperty {
    /**
     * Unique identifier of the Attribute.
     * @type {string}
     * @memberof CatalogAdminsProductProperty
     */
    attributeFQN?: string | null;
    /**
     * 
     * @type {Array<CatalogAdminsProductPropertyValue>}
     * @memberof CatalogAdminsProductProperty
     */
    values?: Array<CatalogAdminsProductPropertyValue> | null;
}

/**
 * Check if a given object implements the CatalogAdminsProductProperty interface.
 */
export function instanceOfCatalogAdminsProductProperty(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CatalogAdminsProductPropertyFromJSON(json: any): CatalogAdminsProductProperty {
    return CatalogAdminsProductPropertyFromJSONTyped(json, false);
}

export function CatalogAdminsProductPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogAdminsProductProperty {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeFQN': !exists(json, 'attributeFQN') ? undefined : json['attributeFQN'],
        'values': !exists(json, 'values') ? undefined : (json['values'] === null ? null : (json['values'] as Array<any>).map(CatalogAdminsProductPropertyValueFromJSON)),
    };
}

export function CatalogAdminsProductPropertyToJSON(value?: CatalogAdminsProductProperty | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributeFQN': value.attributeFQN,
        'values': value.values === undefined ? undefined : (value.values === null ? null : (value.values as Array<any>).map(CatalogAdminsProductPropertyValueToJSON)),
    };
}

