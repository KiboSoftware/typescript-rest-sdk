/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';

/**
 * Represents a claimable item that allows a user to use one or more discounts.
 * @export
 * @interface CouponSet
 */
export interface CouponSet {
    /**
     * Internal unique identifier of the couponset. System-supplied and read-only.
     * @type {number}
     * @memberof CouponSet
     */
    id?: number | null;
    /**
     * Unique tenant supplied identifier.
     * Used as the prefix for generated sets.
     * Required
     * System generated if left null.
     * @type {string}
     * @memberof CouponSet
     */
    couponSetCode?: string | null;
    /**
     * CouponSet Name
     * @type {string}
     * @memberof CouponSet
     */
    name: string;
    /**
     * Determines if the coupon is a persisted list of codes (static) or a list based on generated specification
     * (dynamic).
     * @type {string}
     * @memberof CouponSet
     */
    couponCodeType?: string | null;
    /**
     * CouponSet status which can be: Active, Expired,  Inactive
     * System-supplied and read-only.
     * @type {string}
     * @memberof CouponSet
     */
    status?: string | null;
    /**
     * Signifies that the coupon has not been exported and can be updated
     * ReadOnly
     * @type {boolean}
     * @memberof CouponSet
     */
    canBeDeleted?: boolean;
    /**
     * Maximum number of times any single user can redeem any code.
     * Must be null, >=1 or -1.
     * Defaults to 1 on creation if null.
     * -1 indicates unlimited.
     * @type {number}
     * @memberof CouponSet
     */
    maxRedemptionsPerUser?: number | null;
    /**
     * Maximum number of times any code can de used.
     * Must be null, >=1 or -1.
     * Defaults to 1 on creation if null.
     * -1 indicates unlimited.
     * @type {number}
     * @memberof CouponSet
     */
    maxRedemptionsPerCouponCode?: number | null;
    /**
     * Date and time that the coupon codes becomes expired
     * @type {Date}
     * @memberof CouponSet
     */
    endDate?: Date | null;
    /**
     * Date and time that the coupon codes becomes active
     * @type {Date}
     * @memberof CouponSet
     */
    startDate?: Date | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof CouponSet
     */
    auditInfo?: AuditInfo;
    /**
     * Sets the number of codes to generate for dynamic coupons
     * Required when CouponCodeType is "Dynamic"
     * @type {number}
     * @memberof CouponSet
     */
    setSize?: number | null;
    /**
     * Count of associated couponCodes.
     * Must use "counts" response group to get this value
     * ReadOnly
     * @type {number}
     * @memberof CouponSet
     */
    couponCodeCount?: number | null;
    /**
     * ReadOnly count of all redemptions for this coupon set.
     * @type {number}
     * @memberof CouponSet
     */
    redemptionCount?: number | null;
    /**
     * ReadOnly sum of all redemptions for this coupon.
     * Use "counts" response group.
     * @type {number}
     * @memberof CouponSet
     */
    assignedDiscountCount?: number | null;
}

/**
 * Check if a given object implements the CouponSet interface.
 */
export function instanceOfCouponSet(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function CouponSetFromJSON(json: any): CouponSet {
    return CouponSetFromJSONTyped(json, false);
}

export function CouponSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): CouponSet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'couponSetCode': !exists(json, 'couponSetCode') ? undefined : json['couponSetCode'],
        'name': json['name'],
        'couponCodeType': !exists(json, 'couponCodeType') ? undefined : json['couponCodeType'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'canBeDeleted': !exists(json, 'canBeDeleted') ? undefined : json['canBeDeleted'],
        'maxRedemptionsPerUser': !exists(json, 'maxRedemptionsPerUser') ? undefined : json['maxRedemptionsPerUser'],
        'maxRedemptionsPerCouponCode': !exists(json, 'maxRedemptionsPerCouponCode') ? undefined : json['maxRedemptionsPerCouponCode'],
        'endDate': !exists(json, 'endDate') ? undefined : (json['endDate'] === null ? null : new Date(json['endDate'])),
        'startDate': !exists(json, 'startDate') ? undefined : (json['startDate'] === null ? null : new Date(json['startDate'])),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
        'setSize': !exists(json, 'setSize') ? undefined : json['setSize'],
        'couponCodeCount': !exists(json, 'couponCodeCount') ? undefined : json['couponCodeCount'],
        'redemptionCount': !exists(json, 'redemptionCount') ? undefined : json['redemptionCount'],
        'assignedDiscountCount': !exists(json, 'assignedDiscountCount') ? undefined : json['assignedDiscountCount'],
    };
}

export function CouponSetToJSON(value?: CouponSet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'couponSetCode': value.couponSetCode,
        'name': value.name,
        'couponCodeType': value.couponCodeType,
        'status': value.status,
        'canBeDeleted': value.canBeDeleted,
        'maxRedemptionsPerUser': value.maxRedemptionsPerUser,
        'maxRedemptionsPerCouponCode': value.maxRedemptionsPerCouponCode,
        'endDate': value.endDate === undefined ? undefined : (value.endDate === null ? null : value.endDate.toISOString()),
        'startDate': value.startDate === undefined ? undefined : (value.startDate === null ? null : value.startDate.toISOString()),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
        'setSize': value.setSize,
        'couponCodeCount': value.couponCodeCount,
        'redemptionCount': value.redemptionCount,
        'assignedDiscountCount': value.assignedDiscountCount,
    };
}

