/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Price of the product and currency used.
 * @export
 * @interface ProductPrice
 */
export interface ProductPrice {
    /**
     * Currency code.
     * @type {string}
     * @memberof ProductPrice
     */
    isoCurrencyCode?: string | null;
    /**
     * Price of the product. This is the price the merchant intends to sell the product if no sale price is present.
     * @type {number}
     * @memberof ProductPrice
     */
    price?: number | null;
    /**
     * Current sale price of the product. Sale price is a numeric (monetary) amount, not a percentage off.
     * @type {number}
     * @memberof ProductPrice
     */
    salePrice?: number | null;
    /**
     * Manufacturer Suggested Retail Price. +
     * @type {number}
     * @memberof ProductPrice
     */
    msrp?: number | null;
    /**
     * Minimum Advertised Price
     * @type {number}
     * @memberof ProductPrice
     */
    map?: number | null;
    /**
     * Minimum Advertised Price effective start date (null = begining of time)
     * @type {Date}
     * @memberof ProductPrice
     */
    mapStartDate?: Date | null;
    /**
     * Minimum Advertised Price effectivity end date (null = forever)
     * @type {Date}
     * @memberof ProductPrice
     */
    mapEndDate?: Date | null;
    /**
     * Credit amt of the product
     * @type {number}
     * @memberof ProductPrice
     */
    creditValue?: number | null;
}

/**
 * Check if a given object implements the ProductPrice interface.
 */
export function instanceOfProductPrice(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductPriceFromJSON(json: any): ProductPrice {
    return ProductPriceFromJSONTyped(json, false);
}

export function ProductPriceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductPrice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isoCurrencyCode': !exists(json, 'isoCurrencyCode') ? undefined : json['isoCurrencyCode'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'salePrice': !exists(json, 'salePrice') ? undefined : json['salePrice'],
        'msrp': !exists(json, 'msrp') ? undefined : json['msrp'],
        'map': !exists(json, 'map') ? undefined : json['map'],
        'mapStartDate': !exists(json, 'mapStartDate') ? undefined : (json['mapStartDate'] === null ? null : new Date(json['mapStartDate'])),
        'mapEndDate': !exists(json, 'mapEndDate') ? undefined : (json['mapEndDate'] === null ? null : new Date(json['mapEndDate'])),
        'creditValue': !exists(json, 'creditValue') ? undefined : json['creditValue'],
    };
}

export function ProductPriceToJSON(value?: ProductPrice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isoCurrencyCode': value.isoCurrencyCode,
        'price': value.price,
        'salePrice': value.salePrice,
        'msrp': value.msrp,
        'map': value.map,
        'mapStartDate': value.mapStartDate === undefined ? undefined : (value.mapStartDate === null ? null : value.mapStartDate.toISOString()),
        'mapEndDate': value.mapEndDate === undefined ? undefined : (value.mapEndDate === null ? null : value.mapEndDate.toISOString()),
        'creditValue': value.creditValue,
    };
}

