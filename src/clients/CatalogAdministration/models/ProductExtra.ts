/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductExtraValue } from './ProductExtraValue';
import {
    ProductExtraValueFromJSON,
    ProductExtraValueFromJSONTyped,
    ProductExtraValueToJSON,
} from './ProductExtraValue';

/**
 * Product options for configurable or stand-alone products. A configurable option is one that the shopper chooses when ordering, for example, 
 * the color of a T-shirt. A stand-alone option is independent of the product and can be added to the product order. For example, a monogram.
 * @export
 * @interface ProductExtra
 */
export interface ProductExtra {
    /**
     * Unique identifier of the Attribute.
     * @type {string}
     * @memberof ProductExtra
     */
    attributeFQN?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductExtra
     */
    isRequired?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductExtra
     */
    isMultiSelect?: boolean | null;
    /**
     * 
     * @type {Array<ProductExtraValue>}
     * @memberof ProductExtra
     */
    values?: Array<ProductExtraValue> | null;
}

/**
 * Check if a given object implements the ProductExtra interface.
 */
export function instanceOfProductExtra(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductExtraFromJSON(json: any): ProductExtra {
    return ProductExtraFromJSONTyped(json, false);
}

export function ProductExtraFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductExtra {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeFQN': !exists(json, 'attributeFQN') ? undefined : json['attributeFQN'],
        'isRequired': !exists(json, 'isRequired') ? undefined : json['isRequired'],
        'isMultiSelect': !exists(json, 'isMultiSelect') ? undefined : json['isMultiSelect'],
        'values': !exists(json, 'values') ? undefined : (json['values'] === null ? null : (json['values'] as Array<any>).map(ProductExtraValueFromJSON)),
    };
}

export function ProductExtraToJSON(value?: ProductExtra | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributeFQN': value.attributeFQN,
        'isRequired': value.isRequired,
        'isMultiSelect': value.isMultiSelect,
        'values': value.values === undefined ? undefined : (value.values === null ? null : (value.values as Array<any>).map(ProductExtraValueToJSON)),
    };
}

