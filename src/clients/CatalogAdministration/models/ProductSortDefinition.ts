/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuditInfo } from './AuditInfo';
import {
    AuditInfoFromJSON,
    AuditInfoFromJSONTyped,
    AuditInfoToJSON,
} from './AuditInfo';
import type { ProductSortExpression } from './ProductSortExpression';
import {
    ProductSortExpressionFromJSON,
    ProductSortExpressionFromJSONTyped,
    ProductSortExpressionToJSON,
} from './ProductSortExpression';
import type { ProductSortOverride } from './ProductSortOverride';
import {
    ProductSortOverrideFromJSON,
    ProductSortOverrideFromJSONTyped,
    ProductSortOverrideToJSON,
} from './ProductSortOverride';

/**
 * Defines a default sort for a list of products and allows some products to be
 * boosted to the top or pinned ot a specific position, or buried at the bottom of the
 * list.  Only 10 items can be boosted or pinned and up to
 * @export
 * @interface ProductSortDefinition
 */
export interface ProductSortDefinition {
    /**
     * System or user provided ID for the ProductSortDefinition
     * @type {number}
     * @memberof ProductSortDefinition
     */
    productSortDefinitionId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductSortDefinition
     */
    categoryId?: number | null;
    /**
     * Short Name for the sort definition. Required.
     * @type {string}
     * @memberof ProductSortDefinition
     */
    name: string;
    /**
     * The Start Date when the sort definition becomes active
     * @type {Date}
     * @memberof ProductSortDefinition
     */
    startDate: Date;
    /**
     * Optional end date for a product sort definition
     * @type {Date}
     * @memberof ProductSortDefinition
     */
    endDate?: Date | null;
    /**
     * Sort expression to apply
     * Max two expressions
     * @type {Array<ProductSortExpression>}
     * @memberof ProductSortDefinition
     */
    sortExpressions: Array<ProductSortExpression>;
    /**
     * List of products being positioned
     * @type {Array<ProductSortOverride>}
     * @memberof ProductSortDefinition
     */
    boosted?: Array<ProductSortOverride> | null;
    /**
     * List of products being positioned
     * @type {Array<ProductSortOverride>}
     * @memberof ProductSortDefinition
     */
    buried?: Array<ProductSortOverride> | null;
    /**
     * 
     * @type {AuditInfo}
     * @memberof ProductSortDefinition
     */
    auditInfo?: AuditInfo;
}

/**
 * Check if a given object implements the ProductSortDefinition interface.
 */
export function instanceOfProductSortDefinition(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "startDate" in value;
    isInstance = isInstance && "sortExpressions" in value;

    return isInstance;
}

export function ProductSortDefinitionFromJSON(json: any): ProductSortDefinition {
    return ProductSortDefinitionFromJSONTyped(json, false);
}

export function ProductSortDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductSortDefinition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productSortDefinitionId': !exists(json, 'productSortDefinitionId') ? undefined : json['productSortDefinitionId'],
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'name': json['name'],
        'startDate': (new Date(json['startDate'])),
        'endDate': !exists(json, 'endDate') ? undefined : (json['endDate'] === null ? null : new Date(json['endDate'])),
        'sortExpressions': ((json['sortExpressions'] as Array<any>).map(ProductSortExpressionFromJSON)),
        'boosted': !exists(json, 'boosted') ? undefined : (json['boosted'] === null ? null : (json['boosted'] as Array<any>).map(ProductSortOverrideFromJSON)),
        'buried': !exists(json, 'buried') ? undefined : (json['buried'] === null ? null : (json['buried'] as Array<any>).map(ProductSortOverrideFromJSON)),
        'auditInfo': !exists(json, 'auditInfo') ? undefined : AuditInfoFromJSON(json['auditInfo']),
    };
}

export function ProductSortDefinitionToJSON(value?: ProductSortDefinition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'productSortDefinitionId': value.productSortDefinitionId,
        'categoryId': value.categoryId,
        'name': value.name,
        'startDate': (value.startDate.toISOString()),
        'endDate': value.endDate === undefined ? undefined : (value.endDate === null ? null : value.endDate.toISOString()),
        'sortExpressions': ((value.sortExpressions as Array<any>).map(ProductSortExpressionToJSON)),
        'boosted': value.boosted === undefined ? undefined : (value.boosted === null ? null : (value.boosted as Array<any>).map(ProductSortOverrideToJSON)),
        'buried': value.buried === undefined ? undefined : (value.buried === null ? null : (value.buried as Array<any>).map(ProductSortOverrideToJSON)),
        'auditInfo': AuditInfoToJSON(value.auditInfo),
    };
}

