/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProductLocalizedImage } from './ProductLocalizedImage';
import {
    ProductLocalizedImageFromJSON,
    ProductLocalizedImageFromJSONTyped,
    ProductLocalizedImageToJSON,
} from './ProductLocalizedImage';

/**
 * Container for language-specific content to display on the storefront. You'll have a container for each supported language (LocaleCode). This enables you to display a product in multiple languages yet manage it as a single product internally.
 * @export
 * @interface ProductLocalizedContent
 */
export interface ProductLocalizedContent {
    /**
     * Lanugage used for product content. Currently, only en_US is supported.
     * @type {string}
     * @memberof ProductLocalizedContent
     */
    localeCode?: string | null;
    /**
     * Name of the product.
     * @type {string}
     * @memberof ProductLocalizedContent
     */
    productName?: string | null;
    /**
     * Long description of the product typically used for a product details page.
     * @type {string}
     * @memberof ProductLocalizedContent
     */
    productFullDescription?: string | null;
    /**
     * Brief description of the product typically used when the product is displayed in a list or search results.
     * @type {string}
     * @memberof ProductLocalizedContent
     */
    productShortDescription?: string | null;
    /**
     * List of images associated with the product.
     * @type {Array<ProductLocalizedImage>}
     * @memberof ProductLocalizedContent
     */
    productImages?: Array<ProductLocalizedImage> | null;
}

/**
 * Check if a given object implements the ProductLocalizedContent interface.
 */
export function instanceOfProductLocalizedContent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductLocalizedContentFromJSON(json: any): ProductLocalizedContent {
    return ProductLocalizedContentFromJSONTyped(json, false);
}

export function ProductLocalizedContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductLocalizedContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'localeCode': !exists(json, 'localeCode') ? undefined : json['localeCode'],
        'productName': !exists(json, 'productName') ? undefined : json['productName'],
        'productFullDescription': !exists(json, 'productFullDescription') ? undefined : json['productFullDescription'],
        'productShortDescription': !exists(json, 'productShortDescription') ? undefined : json['productShortDescription'],
        'productImages': !exists(json, 'productImages') ? undefined : (json['productImages'] === null ? null : (json['productImages'] as Array<any>).map(ProductLocalizedImageFromJSON)),
    };
}

export function ProductLocalizedContentToJSON(value?: ProductLocalizedContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'localeCode': value.localeCode,
        'productName': value.productName,
        'productFullDescription': value.productFullDescription,
        'productShortDescription': value.productShortDescription,
        'productImages': value.productImages === undefined ? undefined : (value.productImages === null ? null : (value.productImages as Array<any>).map(ProductLocalizedImageToJSON)),
    };
}

