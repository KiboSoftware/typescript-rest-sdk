/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldValueBoost } from './FieldValueBoost';
import {
    FieldValueBoostFromJSON,
    FieldValueBoostFromJSONTyped,
    FieldValueBoostToJSON,
} from './FieldValueBoost';
import type { SiteSearchFieldWeight } from './SiteSearchFieldWeight';
import {
    SiteSearchFieldWeightFromJSON,
    SiteSearchFieldWeightFromJSONTyped,
    SiteSearchFieldWeightToJSON,
} from './SiteSearchFieldWeight';
import type { Spellcheck } from './Spellcheck';
import {
    SpellcheckFromJSON,
    SpellcheckFromJSONTyped,
    SpellcheckToJSON,
} from './Spellcheck';
import type { TypoTolerance } from './TypoTolerance';
import {
    TypoToleranceFromJSON,
    TypoToleranceFromJSONTyped,
    TypoToleranceToJSON,
} from './TypoTolerance';

/**
 * 
 * @export
 * @interface SiteSearchSettings
 */
export interface SiteSearchSettings {
    /**
     * controls sowBehavior (Never=0, Always=1, WhenNoMultiTermSyn=2)
     * never sow=false, always sow=true,  WhenNoMultiTermSyn = (depends on existance of multitermsynonym match in query)
     * @type {number}
     * @memberof SiteSearchSettings
     */
    sowBehavior?: number | null;
    /**
     * 
     * @type {Array<SiteSearchFieldWeight>}
     * @memberof SiteSearchSettings
     */
    fieldWeights?: Array<SiteSearchFieldWeight> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SiteSearchSettings
     */
    customBoosts?: Array<string> | null;
    /**
     * 
     * @type {FieldValueBoost}
     * @memberof SiteSearchSettings
     */
    fieldValueBoost?: FieldValueBoost;
    /**
     * if values present is used for mm when sowBehavior.WhenNoMultiTermSyn and multi term sym match found in query
     * if no values are present or null fallback to MinMatchPercents
     * @type {Array<number>}
     * @memberof SiteSearchSettings
     */
    multiTermSynMinimumMatchPercents?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof SiteSearchSettings
     */
    minimumMatchPercents?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof SiteSearchSettings
     */
    phraseSlop?: number;
    /**
     * if true, 2 word shingles used for phrase boosting based on fields with phrase weights greater than 0
     * if false, only full phrase mathing used for phrase boosting
     * @type {boolean}
     * @memberof SiteSearchSettings
     */
    twoWordPhraseBoost?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof SiteSearchSettings
     */
    personalizationExperience?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SiteSearchSettings
     */
    personalizationFactor?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof SiteSearchSettings
     */
    searchChildProductsByDefault?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SiteSearchSettings
     */
    crossFieldAdditiveScoreFactor?: number;
    /**
     * 
     * @type {TypoTolerance}
     * @memberof SiteSearchSettings
     */
    typoTolerance?: TypoTolerance;
    /**
     * 
     * @type {Spellcheck}
     * @memberof SiteSearchSettings
     */
    spellcheck?: Spellcheck;
}

/**
 * Check if a given object implements the SiteSearchSettings interface.
 */
export function instanceOfSiteSearchSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SiteSearchSettingsFromJSON(json: any): SiteSearchSettings {
    return SiteSearchSettingsFromJSONTyped(json, false);
}

export function SiteSearchSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteSearchSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sowBehavior': !exists(json, 'sowBehavior') ? undefined : json['sowBehavior'],
        'fieldWeights': !exists(json, 'fieldWeights') ? undefined : (json['fieldWeights'] === null ? null : (json['fieldWeights'] as Array<any>).map(SiteSearchFieldWeightFromJSON)),
        'customBoosts': !exists(json, 'customBoosts') ? undefined : json['customBoosts'],
        'fieldValueBoost': !exists(json, 'fieldValueBoost') ? undefined : FieldValueBoostFromJSON(json['fieldValueBoost']),
        'multiTermSynMinimumMatchPercents': !exists(json, 'multiTermSynMinimumMatchPercents') ? undefined : json['multiTermSynMinimumMatchPercents'],
        'minimumMatchPercents': !exists(json, 'minimumMatchPercents') ? undefined : json['minimumMatchPercents'],
        'phraseSlop': !exists(json, 'phraseSlop') ? undefined : json['phraseSlop'],
        'twoWordPhraseBoost': !exists(json, 'twoWordPhraseBoost') ? undefined : json['twoWordPhraseBoost'],
        'personalizationExperience': !exists(json, 'personalizationExperience') ? undefined : json['personalizationExperience'],
        'personalizationFactor': !exists(json, 'personalizationFactor') ? undefined : json['personalizationFactor'],
        'searchChildProductsByDefault': !exists(json, 'searchChildProductsByDefault') ? undefined : json['searchChildProductsByDefault'],
        'crossFieldAdditiveScoreFactor': !exists(json, 'crossFieldAdditiveScoreFactor') ? undefined : json['crossFieldAdditiveScoreFactor'],
        'typoTolerance': !exists(json, 'typoTolerance') ? undefined : TypoToleranceFromJSON(json['typoTolerance']),
        'spellcheck': !exists(json, 'spellcheck') ? undefined : SpellcheckFromJSON(json['spellcheck']),
    };
}

export function SiteSearchSettingsToJSON(value?: SiteSearchSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sowBehavior': value.sowBehavior,
        'fieldWeights': value.fieldWeights === undefined ? undefined : (value.fieldWeights === null ? null : (value.fieldWeights as Array<any>).map(SiteSearchFieldWeightToJSON)),
        'customBoosts': value.customBoosts,
        'fieldValueBoost': FieldValueBoostToJSON(value.fieldValueBoost),
        'multiTermSynMinimumMatchPercents': value.multiTermSynMinimumMatchPercents,
        'minimumMatchPercents': value.minimumMatchPercents,
        'phraseSlop': value.phraseSlop,
        'twoWordPhraseBoost': value.twoWordPhraseBoost,
        'personalizationExperience': value.personalizationExperience,
        'personalizationFactor': value.personalizationFactor,
        'searchChildProductsByDefault': value.searchChildProductsByDefault,
        'crossFieldAdditiveScoreFactor': value.crossFieldAdditiveScoreFactor,
        'typoTolerance': TypoToleranceToJSON(value.typoTolerance),
        'spellcheck': SpellcheckToJSON(value.spellcheck),
    };
}

