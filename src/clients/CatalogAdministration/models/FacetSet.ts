/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Facet } from './Facet';
import {
    FacetFromJSON,
    FacetFromJSONTyped,
    FacetToJSON,
} from './Facet';
import type { FacetSource } from './FacetSource';
import {
    FacetSourceFromJSON,
    FacetSourceFromJSONTyped,
    FacetSourceToJSON,
} from './FacetSource';

/**
 * 
 * @export
 * @interface FacetSet
 */
export interface FacetSet {
    /**
     * Facets that are configured
     * @type {Array<Facet>}
     * @memberof FacetSet
     */
    configured?: Array<Facet> | null;
    /**
     * Facets that are not configured, but COULD BE!
     * @type {Array<FacetSource>}
     * @memberof FacetSet
     */
    available?: Array<FacetSource> | null;
}

/**
 * Check if a given object implements the FacetSet interface.
 */
export function instanceOfFacetSet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacetSetFromJSON(json: any): FacetSet {
    return FacetSetFromJSONTyped(json, false);
}

export function FacetSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacetSet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configured': !exists(json, 'configured') ? undefined : (json['configured'] === null ? null : (json['configured'] as Array<any>).map(FacetFromJSON)),
        'available': !exists(json, 'available') ? undefined : (json['available'] === null ? null : (json['available'] as Array<any>).map(FacetSourceFromJSON)),
    };
}

export function FacetSetToJSON(value?: FacetSet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configured': value.configured === undefined ? undefined : (value.configured === null ? null : (value.configured as Array<any>).map(FacetToJSON)),
        'available': value.available === undefined ? undefined : (value.available === null ? null : (value.available as Array<any>).map(FacetSourceToJSON)),
    };
}

