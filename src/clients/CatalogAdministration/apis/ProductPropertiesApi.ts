/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ProductProperty,
  ProductPropertyValueLocalizedContent,
} from '../models';
import {
    ProductPropertyFromJSON,
    ProductPropertyToJSON,
    ProductPropertyValueLocalizedContentFromJSON,
    ProductPropertyValueLocalizedContentToJSON,
} from '../models';

export interface ProductPropertiesApiAddPropertyRequest {
    productCode: string;
    productProperty?: ProductProperty;
}

export interface ProductPropertiesApiAddPropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    productPropertyValueLocalizedContent?: ProductPropertyValueLocalizedContent;
}

export interface ProductPropertiesApiDeletePropertyRequest {
    productCode: string;
    attributeFQN: string;
}

export interface ProductPropertiesApiDeletePropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    localeCode: string;
}

export interface ProductPropertiesApiGetPropertiesRequest {
    productCode: string;
}

export interface ProductPropertiesApiGetPropertyRequest {
    productCode: string;
    attributeFQN: string;
}

export interface ProductPropertiesApiGetPropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    localeCode: string;
}

export interface ProductPropertiesApiGetPropertyValueLocalizedContentsRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
}

export interface ProductPropertiesApiUpdatePropertyRequest {
    productCode: string;
    attributeFQN: string;
    productProperty?: ProductProperty;
}

export interface ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    localeCode: string;
    productPropertyValueLocalizedContent?: ProductPropertyValueLocalizedContent;
}

export interface ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    productPropertyValueLocalizedContent?: Array<ProductPropertyValueLocalizedContent>;
}

/**
 * 
 */
export class ProductPropertiesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add property
     * Add property
     */


    async addPropertyRaw(requestParameters: ProductPropertiesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductProperty>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductPropertyToJSON(requestParameters.productProperty),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductPropertyFromJSON(jsonValue));
    }

    /**
     * Add property
     * Add property
     */
    async addProperty(requestParameters: ProductPropertiesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductProperty> {
        const response = await this.addPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add property value localized content
     */


    async addPropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiAddPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addPropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling addPropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling addPropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductPropertyValueLocalizedContentToJSON(requestParameters.productPropertyValueLocalizedContent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductPropertyValueLocalizedContentFromJSON(jsonValue));
    }

    /**
     * 
     * Add property value localized content
     */
    async addPropertyValueLocalizedContent(requestParameters: ProductPropertiesApiAddPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent> {
        const response = await this.addPropertyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Property
     * Delete property
     */


    async deletePropertyRaw(requestParameters: ProductPropertiesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Property
     * Delete property
     */
    async deleteProperty(requestParameters: ProductPropertiesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete property value localized content
     */


    async deletePropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiDeletePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete property value localized content
     */
    async deletePropertyValueLocalizedContent(requestParameters: ProductPropertiesApiDeletePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyValueLocalizedContentRaw(requestParameters, initOverrides);
    }

    /**
     * Get properties for the product
     * Get properties
     */


    async getPropertiesRaw(requestParameters: ProductPropertiesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductProperty>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductPropertyFromJSON));
    }

    /**
     * Get properties for the product
     * Get properties
     */
    async getProperties(requestParameters: ProductPropertiesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductProperty>> {
        const response = await this.getPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get individual property
     * Get property
     */


    async getPropertyRaw(requestParameters: ProductPropertiesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductProperty>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductPropertyFromJSON(jsonValue));
    }

    /**
     * Get individual property
     * Get property
     */
    async getProperty(requestParameters: ProductPropertiesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductProperty> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get property value localized content
     */


    async getPropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductPropertyValueLocalizedContentFromJSON(jsonValue));
    }

    /**
     * 
     * Get property value localized content
     */
    async getPropertyValueLocalizedContent(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent> {
        const response = await this.getPropertyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get property value localized contents
     */


    async getPropertyValueLocalizedContentsRaw(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductPropertyValueLocalizedContent>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getPropertyValueLocalizedContents.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getPropertyValueLocalizedContents.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getPropertyValueLocalizedContents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductPropertyValueLocalizedContentFromJSON));
    }

    /**
     * 
     * Get property value localized contents
     */
    async getPropertyValueLocalizedContents(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductPropertyValueLocalizedContent>> {
        const response = await this.getPropertyValueLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update property
     * Update property
     */


    async updatePropertyRaw(requestParameters: ProductPropertiesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductProperty>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductPropertyToJSON(requestParameters.productProperty),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductPropertyFromJSON(jsonValue));
    }

    /**
     * Update property
     * Update property
     */
    async updateProperty(requestParameters: ProductPropertiesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductProperty> {
        const response = await this.updatePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update property value localized content
     */


    async updatePropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductPropertyValueLocalizedContentToJSON(requestParameters.productPropertyValueLocalizedContent),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductPropertyValueLocalizedContentFromJSON(jsonValue));
    }

    /**
     * 
     * Update property value localized content
     */
    async updatePropertyValueLocalizedContent(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent> {
        const response = await this.updatePropertyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update property value localized contents
     */


    async updatePropertyValueLocalizedContentsRaw(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductPropertyValueLocalizedContent>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updatePropertyValueLocalizedContents.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updatePropertyValueLocalizedContents.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updatePropertyValueLocalizedContents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productPropertyValueLocalizedContent.map(ProductPropertyValueLocalizedContentToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductPropertyValueLocalizedContentFromJSON));
    }

    /**
     * 
     * Update property value localized contents
     */
    async updatePropertyValueLocalizedContents(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductPropertyValueLocalizedContent>> {
        const response = await this.updatePropertyValueLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
