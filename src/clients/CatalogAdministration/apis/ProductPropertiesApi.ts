/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsProductProperty,
  ProductPropertyValueLocalizedContent,
} from '../models';

export interface ProductPropertiesApiAddPropertyRequest {
    productCode: string;
    batchJobCode?: string;
    responseFields?: string;
    catalogAdminsProductProperty?: CatalogAdminsProductProperty;
}

export interface ProductPropertiesApiAddPropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    responseFields?: string;
    productPropertyValueLocalizedContent?: ProductPropertyValueLocalizedContent;
}

export interface ProductPropertiesApiDeletePropertyRequest {
    productCode: string;
    attributeFQN: string;
    batchJobCode?: string;
}

export interface ProductPropertiesApiDeletePropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    localeCode: string;
}

export interface ProductPropertiesApiGetPropertiesRequest {
    productCode: string;
    responseFields?: string;
}

export interface ProductPropertiesApiGetPropertyRequest {
    productCode: string;
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductPropertiesApiGetPropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    localeCode: string;
    responseFields?: string;
}

export interface ProductPropertiesApiGetPropertyValueLocalizedContentsRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    responseFields?: string;
}

export interface ProductPropertiesApiUpdatePropertyRequest {
    productCode: string;
    attributeFQN: string;
    batchJobCode?: string;
    allowSyscalcValueUpdates?: boolean;
    responseFields?: string;
    catalogAdminsProductProperty?: CatalogAdminsProductProperty;
}

export interface ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    localeCode: string;
    responseFields?: string;
    productPropertyValueLocalizedContent?: ProductPropertyValueLocalizedContent;
}

export interface ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest {
    productCode: string;
    attributeFQN: string;
    value: string;
    responseFields?: string;
    productPropertyValueLocalizedContent?: Array<ProductPropertyValueLocalizedContent>;
}

/**
 * ProductPropertiesApi - interface
 * 
 * @export
 * @interface ProductPropertiesApiInterface
 */
export interface ProductPropertiesApiInterface {
    /**
     * Add property
     * @summary Add property
     * @param {string} productCode 
     * @param {string} [batchJobCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsProductProperty} [catalogAdminsProductProperty] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    addPropertyRaw(requestParameters: ProductPropertiesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductProperty>>;

    /**
     * Add property
     * Add property
     */
    addProperty(requestParameters: ProductPropertiesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductProperty>;

    /**
     * 
     * @summary Add property value localized content
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductPropertyValueLocalizedContent} [productPropertyValueLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    addPropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiAddPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>>;

    /**
     * 
     * Add property value localized content
     */
    addPropertyValueLocalizedContent(requestParameters: ProductPropertiesApiAddPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent>;

    /**
     * Delete Property
     * @summary Delete property
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} [batchJobCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    deletePropertyRaw(requestParameters: ProductPropertiesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete Property
     * Delete property
     */
    deleteProperty(requestParameters: ProductPropertiesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete property value localized content
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} localeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    deletePropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiDeletePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete property value localized content
     */
    deletePropertyValueLocalizedContent(requestParameters: ProductPropertiesApiDeletePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get properties for the product
     * @summary Get properties
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    getPropertiesRaw(requestParameters: ProductPropertiesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsProductProperty>>>;

    /**
     * Get properties for the product
     * Get properties
     */
    getProperties(requestParameters: ProductPropertiesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsProductProperty>>;

    /**
     * Get individual property
     * @summary Get property
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    getPropertyRaw(requestParameters: ProductPropertiesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductProperty>>;

    /**
     * Get individual property
     * Get property
     */
    getProperty(requestParameters: ProductPropertiesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductProperty>;

    /**
     * 
     * @summary Get property value localized content
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    getPropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>>;

    /**
     * 
     * Get property value localized content
     */
    getPropertyValueLocalizedContent(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent>;

    /**
     * 
     * @summary Get property value localized contents
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    getPropertyValueLocalizedContentsRaw(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductPropertyValueLocalizedContent>>>;

    /**
     * 
     * Get property value localized contents
     */
    getPropertyValueLocalizedContents(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductPropertyValueLocalizedContent>>;

    /**
     * Update property
     * @summary Update property
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} [batchJobCode] 
     * @param {boolean} [allowSyscalcValueUpdates] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsProductProperty} [catalogAdminsProductProperty] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    updatePropertyRaw(requestParameters: ProductPropertiesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductProperty>>;

    /**
     * Update property
     * Update property
     */
    updateProperty(requestParameters: ProductPropertiesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductProperty>;

    /**
     * 
     * @summary Update property value localized content
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductPropertyValueLocalizedContent} [productPropertyValueLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    updatePropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>>;

    /**
     * 
     * Update property value localized content
     */
    updatePropertyValueLocalizedContent(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent>;

    /**
     * 
     * @summary Update property value localized contents
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ProductPropertyValueLocalizedContent>} [productPropertyValueLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPropertiesApiInterface
     */
    updatePropertyValueLocalizedContentsRaw(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductPropertyValueLocalizedContent>>>;

    /**
     * 
     * Update property value localized contents
     */
    updatePropertyValueLocalizedContents(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductPropertyValueLocalizedContent>>;

}

/**
 * 
 */
export class ProductPropertiesApi extends runtime.BaseAPI implements ProductPropertiesApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add property
     * Add property
     */


    async addPropertyRaw(requestParameters: ProductPropertiesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductProperty>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProductProperty,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add property
     * Add property
     */
    async addProperty(requestParameters: ProductPropertiesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductProperty> {
        const response = await this.addPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add property value localized content
     */


    async addPropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiAddPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addPropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling addPropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling addPropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productPropertyValueLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Add property value localized content
     */
    async addPropertyValueLocalizedContent(requestParameters: ProductPropertiesApiAddPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent> {
        const response = await this.addPropertyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Property
     * Delete property
     */


    async deletePropertyRaw(requestParameters: ProductPropertiesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Property
     * Delete property
     */
    async deleteProperty(requestParameters: ProductPropertiesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete property value localized content
     */


    async deletePropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiDeletePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling deletePropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete property value localized content
     */
    async deletePropertyValueLocalizedContent(requestParameters: ProductPropertiesApiDeletePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyValueLocalizedContentRaw(requestParameters, initOverrides);
    }

    /**
     * Get properties for the product
     * Get properties
     */


    async getPropertiesRaw(requestParameters: ProductPropertiesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsProductProperty>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get properties for the product
     * Get properties
     */
    async getProperties(requestParameters: ProductPropertiesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsProductProperty>> {
        const response = await this.getPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get individual property
     * Get property
     */


    async getPropertyRaw(requestParameters: ProductPropertiesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductProperty>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get individual property
     * Get property
     */
    async getProperty(requestParameters: ProductPropertiesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductProperty> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get property value localized content
     */


    async getPropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getPropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get property value localized content
     */
    async getPropertyValueLocalizedContent(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent> {
        const response = await this.getPropertyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get property value localized contents
     */


    async getPropertyValueLocalizedContentsRaw(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductPropertyValueLocalizedContent>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getPropertyValueLocalizedContents.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getPropertyValueLocalizedContents.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getPropertyValueLocalizedContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get property value localized contents
     */
    async getPropertyValueLocalizedContents(requestParameters: ProductPropertiesApiGetPropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductPropertyValueLocalizedContent>> {
        const response = await this.getPropertyValueLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update property
     * Update property
     */


    async updatePropertyRaw(requestParameters: ProductPropertiesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductProperty>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.allowSyscalcValueUpdates !== undefined) {
            queryParameters['allowSyscalcValueUpdates'] = requestParameters.allowSyscalcValueUpdates;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProductProperty,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update property
     * Update property
     */
    async updateProperty(requestParameters: ProductPropertiesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductProperty> {
        const response = await this.updatePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update property value localized content
     */


    async updatePropertyValueLocalizedContentRaw(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductPropertyValueLocalizedContent>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling updatePropertyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent/{localeCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productPropertyValueLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update property value localized content
     */
    async updatePropertyValueLocalizedContent(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductPropertyValueLocalizedContent> {
        const response = await this.updatePropertyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update property value localized contents
     */


    async updatePropertyValueLocalizedContentsRaw(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductPropertyValueLocalizedContent>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updatePropertyValueLocalizedContents.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updatePropertyValueLocalizedContents.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updatePropertyValueLocalizedContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Properties/{attributeFQN}/values/{value}/LocalizedContent`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productPropertyValueLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update property value localized contents
     */
    async updatePropertyValueLocalizedContents(requestParameters: ProductPropertiesApiUpdatePropertyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductPropertyValueLocalizedContent>> {
        const response = await this.updatePropertyValueLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
