/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  PriceList,
  PriceListCollection,
} from '../models';
import {
    PriceListFromJSON,
    PriceListToJSON,
    PriceListCollectionFromJSON,
    PriceListCollectionToJSON,
} from '../models';

export interface PriceListsApiAddPriceListRequest {
    priceList?: PriceList;
}

export interface PriceListsApiDeletePriceListRequest {
    priceListCode: string;
    cascadeDeleteEntries?: boolean;
}

export interface PriceListsApiGetPriceListRequest {
    priceListCode: string;
}

export interface PriceListsApiGetPriceListsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface PriceListsApiUpdatePriceListRequest {
    priceListCode: string;
    priceList?: PriceList;
}

/**
 * 
 */
export class PriceListsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Add price list
     */


    async addPriceListRaw(requestParameters: PriceListsApiAddPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PriceListToJSON(requestParameters.priceList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListFromJSON(jsonValue));
    }

    /**
     * 
     * Add price list
     */
    async addPriceList(requestParameters: PriceListsApiAddPriceListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceList> {
        const response = await this.addPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete price list
     */


    async deletePriceListRaw(requestParameters: PriceListsApiDeletePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling deletePriceList.');
        }

        const queryParameters: any = {};

        if (requestParameters.cascadeDeleteEntries !== undefined) {
            queryParameters['cascadeDeleteEntries'] = requestParameters.cascadeDeleteEntries;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete price list
     */
    async deletePriceList(requestParameters: PriceListsApiDeletePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePriceListRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get price list
     */


    async getPriceListRaw(requestParameters: PriceListsApiGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceList>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling getPriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListFromJSON(jsonValue));
    }

    /**
     * 
     * Get price list
     */
    async getPriceList(requestParameters: PriceListsApiGetPriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceList> {
        const response = await this.getPriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get price lists
     */


    async getPriceListsRaw(requestParameters: PriceListsApiGetPriceListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Get price lists
     */
    async getPriceLists(requestParameters: PriceListsApiGetPriceListsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListCollection> {
        const response = await this.getPriceListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update price list
     */


    async updatePriceListRaw(requestParameters: PriceListsApiUpdatePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceList>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling updatePriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PriceListToJSON(requestParameters.priceList),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListFromJSON(jsonValue));
    }

    /**
     * 
     * Update price list
     */
    async updatePriceList(requestParameters: PriceListsApiUpdatePriceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceList> {
        const response = await this.updatePriceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
