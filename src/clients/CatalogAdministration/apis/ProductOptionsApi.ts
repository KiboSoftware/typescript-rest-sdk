/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsProductOption,
} from '../models';

export interface ProductOptionsApiAddOptionRequest {
    productCode: string;
    responseFields?: string;
    catalogAdminsProductOption?: CatalogAdminsProductOption;
}

export interface ProductOptionsApiDeleteOptionRequest {
    productCode: string;
    attributeFQN: string;
}

export interface ProductOptionsApiGetOptionRequest {
    productCode: string;
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductOptionsApiGetOptionsRequest {
    productCode: string;
    responseFields?: string;
}

export interface ProductOptionsApiUpdateOptionRequest {
    productCode: string;
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsProductOption?: CatalogAdminsProductOption;
}

/**
 * ProductOptionsApi - interface
 * 
 * @export
 * @interface ProductOptionsApiInterface
 */
export interface ProductOptionsApiInterface {
    /**
     * Add option
     * @summary Add option
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsProductOption} [catalogAdminsProductOption] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionsApiInterface
     */
    addOptionRaw(requestParameters: ProductOptionsApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductOption>>;

    /**
     * Add option
     * Add option
     */
    addOption(requestParameters: ProductOptionsApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductOption>;

    /**
     * Delete individual option
     * @summary Delete option
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionsApiInterface
     */
    deleteOptionRaw(requestParameters: ProductOptionsApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete individual option
     * Delete option
     */
    deleteOption(requestParameters: ProductOptionsApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get individual option
     * @summary Get option
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionsApiInterface
     */
    getOptionRaw(requestParameters: ProductOptionsApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductOption>>;

    /**
     * Get individual option
     * Get option
     */
    getOption(requestParameters: ProductOptionsApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductOption>;

    /**
     * Get options for the product
     * @summary Get options
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionsApiInterface
     */
    getOptionsRaw(requestParameters: ProductOptionsApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsProductOption>>>;

    /**
     * Get options for the product
     * Get options
     */
    getOptions(requestParameters: ProductOptionsApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsProductOption>>;

    /**
     * Update individual option
     * @summary Update option
     * @param {string} productCode 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsProductOption} [catalogAdminsProductOption] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionsApiInterface
     */
    updateOptionRaw(requestParameters: ProductOptionsApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductOption>>;

    /**
     * Update individual option
     * Update option
     */
    updateOption(requestParameters: ProductOptionsApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductOption>;

}

/**
 * 
 */
export class ProductOptionsApi extends runtime.BaseAPI implements ProductOptionsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add option
     * Add option
     */


    async addOptionRaw(requestParameters: ProductOptionsApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductOption>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addOption.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Options`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProductOption,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add option
     * Add option
     */
    async addOption(requestParameters: ProductOptionsApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductOption> {
        const response = await this.addOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete individual option
     * Delete option
     */


    async deleteOptionRaw(requestParameters: ProductOptionsApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Options/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete individual option
     * Delete option
     */
    async deleteOption(requestParameters: ProductOptionsApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOptionRaw(requestParameters, initOverrides);
    }

    /**
     * Get individual option
     * Get option
     */


    async getOptionRaw(requestParameters: ProductOptionsApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductOption>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getOption.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Options/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get individual option
     * Get option
     */
    async getOption(requestParameters: ProductOptionsApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductOption> {
        const response = await this.getOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get options for the product
     * Get options
     */


    async getOptionsRaw(requestParameters: ProductOptionsApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsProductOption>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Options`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get options for the product
     * Get options
     */
    async getOptions(requestParameters: ProductOptionsApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsProductOption>> {
        const response = await this.getOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update individual option
     * Update option
     */


    async updateOptionRaw(requestParameters: ProductOptionsApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductOption>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateOption.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/Options/{attributeFQN}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProductOption,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update individual option
     * Update option
     */
    async updateOption(requestParameters: ProductOptionsApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductOption> {
        const response = await this.updateOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
