/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsProduct,
  CatalogAdminsProductCollection,
  ProductCodeRename,
  ProductInCatalogInfo,
  ProductTypeChangeRequest,
  ProductTypeChangeResponse,
} from '../models';

export interface AddProductRequest {
    batchJobCode?: string;
    responseFields?: string;
    catalogAdminsProduct?: CatalogAdminsProduct;
}

export interface AddProductInCatalogRequest {
    productCode: string;
    responseFields?: string;
    productInCatalogInfo?: ProductInCatalogInfo;
}

export interface ChangeProductTypeRequest {
    productCode: string;
    responseFields?: string;
    productTypeChangeRequest?: ProductTypeChangeRequest;
}

export interface DeleteProductRequest {
    productCode: string;
    batchJobCode?: string;
}

export interface DeleteProductInCatalogRequest {
    productCode: string;
    catalogId: number;
}

export interface GetProductRequest {
    productCode: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface GetProductInCatalogRequest {
    productCode: string;
    catalogId: number;
    responseFields?: string;
}

export interface GetProductInCatalogsRequest {
    productCode: string;
    responseFields?: string;
}

export interface GetProductsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    responseGroups?: string;
    filter?: string;
    q?: string;
    qLimit?: number;
    noCount?: boolean;
    responseFields?: string;
}

export interface RenameProductCodesRequest {
    responseFields?: string;
    productCodeRename?: Array<ProductCodeRename>;
}

export interface UpdateProductRequest {
    productCode: string;
    batchJobCode?: string;
    responseFields?: string;
    catalogAdminsProduct?: CatalogAdminsProduct;
}

export interface UpdateProductInCatalogRequest {
    productCode: string;
    catalogId: number;
    responseFields?: string;
    productInCatalogInfo?: ProductInCatalogInfo;
}

export interface UpdateProductInCatalogsRequest {
    productCode: string;
    responseFields?: string;
    productInCatalogInfo?: Array<ProductInCatalogInfo>;
}

/**
 * ProductsApi - interface
 * 
 * @export
 * @interface ProductsApiInterface
 */
export interface ProductsApiInterface {
    /**
     * Creates a new product. You supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
     * @summary Add product
     * @param {string} [batchJobCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsProduct} [catalogAdminsProduct] Properties of the new product. Required properties: ProductCode, Content.ProductName, and Price.ListPrice. Mozu.ProductAdmin.Contracts.Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    addProductRaw(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProduct>>;

    /**
     * Creates a new product. You supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
     * Add product
     */
    addProduct(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProduct>;

    /**
     * 
     * @summary Add product in catalog
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductInCatalogInfo} [productInCatalogInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    addProductInCatalogRaw(requestParameters: AddProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductInCatalogInfo>>;

    /**
     * 
     * Add product in catalog
     */
    addProductInCatalog(requestParameters: AddProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductInCatalogInfo>;

    /**
     * Change a product\'s product type.
     * @summary Change product type.
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductTypeChangeRequest} [productTypeChangeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    changeProductTypeRaw(requestParameters: ChangeProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeChangeResponse>>;

    /**
     * Change a product\'s product type.
     * Change product type.
     */
    changeProductType(requestParameters: ChangeProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeChangeResponse>;

    /**
     * Deletes the product specified by its product code.
     * @summary Delete product
     * @param {string} productCode Merchant-created code associated with the product, for example, a SKU. Required.
     * @param {string} [batchJobCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the product specified by its product code.
     * Delete product
     */
    deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete product in catalog
     * @param {string} productCode 
     * @param {number} catalogId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    deleteProductInCatalogRaw(requestParameters: DeleteProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete product in catalog
     */
    deleteProductInCatalog(requestParameters: DeleteProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves details about a product based on the specified response group. For example, to get the BaseProductCode of a product.
     * @summary Get product
     * @param {string} productCode Merchant-created code associated with the product, for example, a SKU. Required.
     * @param {string} [responseGroups] Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProduct>>;

    /**
     * Retrieves details about a product based on the specified response group. For example, to get the BaseProductCode of a product.
     * Get product
     */
    getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProduct>;

    /**
     * 
     * @summary Get product in catalog
     * @param {string} productCode 
     * @param {number} catalogId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductInCatalogRaw(requestParameters: GetProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductInCatalogInfo>>;

    /**
     * 
     * Get product in catalog
     */
    getProductInCatalog(requestParameters: GetProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductInCatalogInfo>;

    /**
     * 
     * @summary Update products in catalog
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductInCatalogsRaw(requestParameters: GetProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductInCatalogInfo>>>;

    /**
     * 
     * Update products in catalog
     */
    getProductInCatalogs(requestParameters: GetProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductInCatalogInfo>>;

    /**
     * Retrieves a list of products according to any specified filter criteria and sort options.
     * @summary Get products
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc.
     * @param {string} [responseGroups] Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [q] 
     * @param {number} [qLimit] 
     * @param {boolean} [noCount] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductCollection>>;

    /**
     * Retrieves a list of products according to any specified filter criteria and sort options.
     * Get products
     */
    getProducts(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductCollection>;

    /**
     * Action that allows productCodes to be Renamed. Changing the resource identifier of a product could cause problems for established products.
     * @summary Rename product codes
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ProductCodeRename>} [productCodeRename] An array specifying the existing productCode and the new productCode it should be renamed to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    renameProductCodesRaw(requestParameters: RenameProductCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Action that allows productCodes to be Renamed. Changing the resource identifier of a product could cause problems for established products.
     * Rename product codes
     */
    renameProductCodes(requestParameters: RenameProductCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Modifies an existing product.
     * @summary Update product
     * @param {string} productCode Merchant-created code associated with the product, for example, a SKU. Required.
     * @param {string} [batchJobCode] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsProduct} [catalogAdminsProduct] Properties of the product that you want to update. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProduct>>;

    /**
     * Modifies an existing product.
     * Update product
     */
    updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProduct>;

    /**
     * 
     * @summary Update product in catalog
     * @param {string} productCode 
     * @param {number} catalogId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductInCatalogInfo} [productInCatalogInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    updateProductInCatalogRaw(requestParameters: UpdateProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductInCatalogInfo>>;

    /**
     * 
     * Update product in catalog
     */
    updateProductInCatalog(requestParameters: UpdateProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductInCatalogInfo>;

    /**
     * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
     * @summary Update products in catalog
     * @param {string} productCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<ProductInCatalogInfo>} [productInCatalogInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApiInterface
     */
    updateProductInCatalogsRaw(requestParameters: UpdateProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductInCatalogInfo>>>;

    /**
     * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
     * Update products in catalog
     */
    updateProductInCatalogs(requestParameters: UpdateProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductInCatalogInfo>>;

}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI implements ProductsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a new product. You supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
     * Add product
     */


    async addProductRaw(requestParameters: AddProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProduct>> {
        const queryParameters: any = {};

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProduct,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new product. You supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
     * Add product
     */
    async addProduct(requestParameters: AddProductRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProduct> {
        const response = await this.addProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add product in catalog
     */


    async addProductInCatalogRaw(requestParameters: AddProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductInCatalogInfo>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addProductInCatalog.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/ProductInCatalogs`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productInCatalogInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Add product in catalog
     */
    async addProductInCatalog(requestParameters: AddProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductInCatalogInfo> {
        const response = await this.addProductInCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a product\'s product type.
     * Change product type.
     */


    async changeProductTypeRaw(requestParameters: ChangeProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeChangeResponse>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling changeProductType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/changeproducttype`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productTypeChangeRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Change a product\'s product type.
     * Change product type.
     */
    async changeProductType(requestParameters: ChangeProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeChangeResponse> {
        const response = await this.changeProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the product specified by its product code.
     * Delete product
     */


    async deleteProductRaw(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the product specified by its product code.
     * Delete product
     */
    async deleteProduct(requestParameters: DeleteProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete product in catalog
     */


    async deleteProductInCatalogRaw(requestParameters: DeleteProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProductInCatalog.');
        }

        if (requestParameters.catalogId === null || requestParameters.catalogId === undefined) {
            throw new runtime.RequiredError('catalogId','Required parameter requestParameters.catalogId was null or undefined when calling deleteProductInCatalog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/ProductInCatalogs/{catalogId}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters.catalogId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product in catalog
     */
    async deleteProductInCatalog(requestParameters: DeleteProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductInCatalogRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves details about a product based on the specified response group. For example, to get the BaseProductCode of a product.
     * Get product
     */


    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProduct>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves details about a product based on the specified response group. For example, to get the BaseProductCode of a product.
     * Get product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProduct> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product in catalog
     */


    async getProductInCatalogRaw(requestParameters: GetProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductInCatalogInfo>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductInCatalog.');
        }

        if (requestParameters.catalogId === null || requestParameters.catalogId === undefined) {
            throw new runtime.RequiredError('catalogId','Required parameter requestParameters.catalogId was null or undefined when calling getProductInCatalog.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/ProductInCatalogs/{catalogId}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters.catalogId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product in catalog
     */
    async getProductInCatalog(requestParameters: GetProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductInCatalogInfo> {
        const response = await this.getProductInCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update products in catalog
     */


    async getProductInCatalogsRaw(requestParameters: GetProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductInCatalogInfo>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductInCatalogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/ProductInCatalogs`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update products in catalog
     */
    async getProductInCatalogs(requestParameters: GetProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductInCatalogInfo>> {
        const response = await this.getProductInCatalogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of products according to any specified filter criteria and sort options.
     * Get products
     */


    async getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProductCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.qLimit !== undefined) {
            queryParameters['qLimit'] = requestParameters.qLimit;
        }

        if (requestParameters.noCount !== undefined) {
            queryParameters['noCount'] = requestParameters.noCount;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of products according to any specified filter criteria and sort options.
     * Get products
     */
    async getProducts(requestParameters: GetProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProductCollection> {
        const response = await this.getProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Action that allows productCodes to be Renamed. Changing the resource identifier of a product could cause problems for established products.
     * Rename product codes
     */


    async renameProductCodesRaw(requestParameters: RenameProductCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/Actions/RenameProductCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productCodeRename,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Action that allows productCodes to be Renamed. Changing the resource identifier of a product could cause problems for established products.
     * Rename product codes
     */
    async renameProductCodes(requestParameters: RenameProductCodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameProductCodesRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies an existing product.
     * Update product
     */


    async updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsProduct>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProduct,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies an existing product.
     * Update product
     */
    async updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsProduct> {
        const response = await this.updateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product in catalog
     */


    async updateProductInCatalogRaw(requestParameters: UpdateProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductInCatalogInfo>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductInCatalog.');
        }

        if (requestParameters.catalogId === null || requestParameters.catalogId === undefined) {
            throw new runtime.RequiredError('catalogId','Required parameter requestParameters.catalogId was null or undefined when calling updateProductInCatalog.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/ProductInCatalogs/{catalogId}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"catalogId"}}`, encodeURIComponent(String(requestParameters.catalogId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productInCatalogInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product in catalog
     */
    async updateProductInCatalog(requestParameters: UpdateProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductInCatalogInfo> {
        const response = await this.updateProductInCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
     * Update products in catalog
     */


    async updateProductInCatalogsRaw(requestParameters: UpdateProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductInCatalogInfo>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductInCatalogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/ProductInCatalogs`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productInCatalogInfo,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Use the Products resource to create and manage products for your store. You can create products with options that a shopper configures (such as a T-shirt color and size). The system can manage inventory for all combinations of your product options, and can calculate tax and shipping costs.
     * Update products in catalog
     */
    async updateProductInCatalogs(requestParameters: UpdateProductInCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductInCatalogInfo>> {
        const response = await this.updateProductInCatalogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
