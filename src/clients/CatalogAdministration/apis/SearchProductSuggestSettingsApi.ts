/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ProductSuggestSettings,
  SuggestSettings,
} from '../models';

export interface DeleteProductSuggestSettingsRequest {
    name: string;
}

export interface GetProductSuggestSettingsRequest {
    name: string;
    responseFields?: string;
}

export interface UpdateProductSuggestSettingsRequest {
    name: string;
    responseFields?: string;
    productSuggestSettings?: ProductSuggestSettings;
}

/**
 * SearchProductSuggestSettingsApi - interface
 * 
 * @export
 * @interface SearchProductSuggestSettingsApiInterface
 */
export interface SearchProductSuggestSettingsApiInterface {
    /**
     * Deletes the ProductSuggestSettings for a specific SearchSetting by name.
     * @summary Delete product suggest settings
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchProductSuggestSettingsApiInterface
     */
    deleteProductSuggestSettingsRaw(requestParameters: DeleteProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the ProductSuggestSettings for a specific SearchSetting by name.
     * Delete product suggest settings
     */
    deleteProductSuggestSettings(requestParameters: DeleteProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get ProductSuggestSettings for a specific SearchSettings by name.
     * @summary Get [roduct suggest settings
     * @param {string} name 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchProductSuggestSettingsApiInterface
     */
    getProductSuggestSettingsRaw(requestParameters: GetProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestSettings>>;

    /**
     * Get ProductSuggestSettings for a specific SearchSettings by name.
     * Get [roduct suggest settings
     */
    getProductSuggestSettings(requestParameters: GetProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestSettings>;

    /**
     * Adds or Updates (Upsert) the ProductSuggestSettings for a specific SearchSetting by name.
     * @summary Add/Update product suggest settings
     * @param {string} name 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductSuggestSettings} [productSuggestSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchProductSuggestSettingsApiInterface
     */
    updateProductSuggestSettingsRaw(requestParameters: UpdateProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSuggestSettings>>;

    /**
     * Adds or Updates (Upsert) the ProductSuggestSettings for a specific SearchSetting by name.
     * Add/Update product suggest settings
     */
    updateProductSuggestSettings(requestParameters: UpdateProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSuggestSettings>;

}

/**
 * 
 */
export class SearchProductSuggestSettingsApi extends runtime.BaseAPI implements SearchProductSuggestSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Deletes the ProductSuggestSettings for a specific SearchSetting by name.
     * Delete product suggest settings
     */


    async deleteProductSuggestSettingsRaw(requestParameters: DeleteProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteProductSuggestSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/productsuggestsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the ProductSuggestSettings for a specific SearchSetting by name.
     * Delete product suggest settings
     */
    async deleteProductSuggestSettings(requestParameters: DeleteProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductSuggestSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * Get ProductSuggestSettings for a specific SearchSettings by name.
     * Get [roduct suggest settings
     */


    async getProductSuggestSettingsRaw(requestParameters: GetProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getProductSuggestSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/productsuggestsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get ProductSuggestSettings for a specific SearchSettings by name.
     * Get [roduct suggest settings
     */
    async getProductSuggestSettings(requestParameters: GetProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestSettings> {
        const response = await this.getProductSuggestSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds or Updates (Upsert) the ProductSuggestSettings for a specific SearchSetting by name.
     * Add/Update product suggest settings
     */


    async updateProductSuggestSettingsRaw(requestParameters: UpdateProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSuggestSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateProductSuggestSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/productsuggestsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productSuggestSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds or Updates (Upsert) the ProductSuggestSettings for a specific SearchSetting by name.
     * Add/Update product suggest settings
     */
    async updateProductSuggestSettings(requestParameters: UpdateProductSuggestSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSuggestSettings> {
        const response = await this.updateProductSuggestSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
