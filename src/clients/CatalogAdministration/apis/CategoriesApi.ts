/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsCategory,
  CatalogAdminsCategoryAttribute,
  CatalogAdminsCategoryCollection,
  CatalogAdminsCategoryPagedCollection,
  CategoryAttributeCollection,
  DynamicExpression,
} from '../models';

export interface CategoriesApiAddCategoryRequest {
    incrementSequence?: boolean;
    useProvidedId?: boolean;
    responseFields?: string;
    catalogAdminsCategory?: CatalogAdminsCategory;
}

export interface CategoriesApiAddCategoryAttributeRequest {
    categoryId: number;
    responseFields?: string;
    catalogAdminsCategoryAttribute?: CatalogAdminsCategoryAttribute;
}

export interface CategoriesApiAddProductsToCategoryRequest {
    categoryId: number;
    responseFields?: string;
    requestBody?: Array<string>;
}

export interface CategoriesApiDeleteCategoryAttributeRequest {
    categoryId: number;
    attributeFQN: string;
}

export interface CategoriesApiDeleteCategoryByIdRequest {
    categoryId: number;
    cascadeDelete?: boolean;
    forceDelete?: boolean;
    reassignToParent?: boolean;
}

export interface CategoriesApiGetCategoriesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributes?: boolean;
    responseGroups?: string;
    responseFields?: string;
}

export interface CategoriesApiGetCategoryRequest {
    categoryId: number;
    includeAttributes?: boolean;
    responseFields?: string;
}

export interface CategoriesApiGetCategoryAttributeRequest {
    categoryId: number;
    attributeFQN: string;
    responseFields?: string;
}

export interface CategoriesApiGetCategoryAttributesRequest {
    categoryId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface CategoriesApiGetChildCategoriesRequest {
    categoryId: number;
    responseFields?: string;
}

export interface CategoriesApiRemoveProductsFromCategoryRequest {
    categoryId: number;
    responseFields?: string;
    requestBody?: Array<string>;
}

export interface CategoriesApiUpdateCategoryRequest {
    categoryId: number;
    cascadeVisibility?: boolean;
    responseFields?: string;
    catalogAdminsCategory?: CatalogAdminsCategory;
}

export interface CategoriesApiUpdateCategoryAttributeRequest {
    categoryId: number;
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsCategoryAttribute?: CatalogAdminsCategoryAttribute;
}

export interface CategoriesApiValidateDynamicExpressionRequest {
    responseFields?: string;
    dynamicExpression?: DynamicExpression;
}

export interface CategoriesApiValidateRealTimeDynamicExpressionRequest {
    responseFields?: string;
    dynamicExpression?: DynamicExpression;
}

/**
 * CategoriesApi - interface
 * 
 * @export
 * @interface CategoriesApiInterface
 */
export interface CategoriesApiInterface {
    /**
     * dds a new category to the catalog\'s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * @summary Add category
     * @param {boolean} [incrementSequence] Sets the sequence number of the category to the current max sequence value plus 1 (e.g. 5 + 1 &#x3D; 6)
     * @param {boolean} [useProvidedId] If true, the provided Id value will be used as the CategoryId. If omitted or false, the system will generate a CategoryId
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsCategory} [catalogAdminsCategory] Properties of the new category. Required properties ParentCategoryID and Content.Name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    addCategoryRaw(requestParameters: CategoriesApiAddCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategory>>;

    /**
     * dds a new category to the catalog\'s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * Add category
     */
    addCategory(requestParameters: CategoriesApiAddCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategory>;

    /**
     * Adds a new category attribute to the category.
     * @summary Add category attribute
     * @param {number} categoryId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsCategoryAttribute} [catalogAdminsCategoryAttribute] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    addCategoryAttributeRaw(requestParameters: CategoriesApiAddCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryAttribute>>;

    /**
     * Adds a new category attribute to the category.
     * Add category attribute
     */
    addCategoryAttribute(requestParameters: CategoriesApiAddCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryAttribute>;

    /**
     * Adds the products in the provided product code list to the specified category.
     * @summary Add products to category
     * @param {number} categoryId Unique identifier of the category that you want produts added to.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<string>} [requestBody] A list of products to be added to the category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    addProductsToCategoryRaw(requestParameters: CategoriesApiAddProductsToCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Adds the products in the provided product code list to the specified category.
     * Add products to category
     */
    addProductsToCategory(requestParameters: CategoriesApiAddProductsToCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes the category attribute specified by its attributeFQN.
     * @summary Delete category attribute
     * @param {number} categoryId 
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    deleteCategoryAttributeRaw(requestParameters: CategoriesApiDeleteCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the category attribute specified by its attributeFQN.
     * Delete category attribute
     */
    deleteCategoryAttribute(requestParameters: CategoriesApiDeleteCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Deletes the category specified by its category ID.
     * @summary Delete category
     * @param {number} categoryId Unique identifier of the category that you want to delete.
     * @param {boolean} [cascadeDelete] If true, any subcategories of a category are deleted when this category is deleted. Otherwise only the given category is deleted. Default is false.
     * @param {boolean} [forceDelete] If true, category (and optionally subcategories) will be deleted even if there are products referecing them.  Default is false.
     * @param {boolean} [reassignToParent] If true, and child categories of the given category will be reassigned to the parent of the given category. Only applies if cascadeDelete is false. Default is false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    deleteCategoryByIdRaw(requestParameters: CategoriesApiDeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the category specified by its category ID.
     * Delete category
     */
    deleteCategoryById(requestParameters: CategoriesApiDeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * @summary Get categories
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {boolean} [includeAttributes] 
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoriesRaw(requestParameters: CategoriesApiGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryPagedCollection>>;

    /**
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * Get categories
     */
    getCategories(requestParameters: CategoriesApiGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryPagedCollection>;

    /**
     * Retrieves the details of a single category.
     * @summary Get category
     * @param {number} categoryId Unique identifier of the category.
     * @param {boolean} [includeAttributes] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoryRaw(requestParameters: CategoriesApiGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategory>>;

    /**
     * Retrieves the details of a single category.
     * Get category
     */
    getCategory(requestParameters: CategoriesApiGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategory>;

    /**
     * Retrieves the details of a single category attribute.
     * @summary Get category attribute
     * @param {number} categoryId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoryAttributeRaw(requestParameters: CategoriesApiGetCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryAttribute>>;

    /**
     * Retrieves the details of a single category attribute.
     * Get category attribute
     */
    getCategoryAttribute(requestParameters: CategoriesApiGetCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryAttribute>;

    /**
     * Retrieves a list of category attributes.
     * @summary Get category attributes
     * @param {number} categoryId 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategoryAttributesRaw(requestParameters: CategoriesApiGetCategoryAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAttributeCollection>>;

    /**
     * Retrieves a list of category attributes.
     * Get category attributes
     */
    getCategoryAttributes(requestParameters: CategoriesApiGetCategoryAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAttributeCollection>;

    /**
     * Retrieves the immediate subcategories of a category.
     * @summary Get child categories
     * @param {number} categoryId Unique identifier of the category whose subcategories you want to get.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getChildCategoriesRaw(requestParameters: CategoriesApiGetChildCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryCollection>>;

    /**
     * Retrieves the immediate subcategories of a category.
     * Get child categories
     */
    getChildCategories(requestParameters: CategoriesApiGetChildCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryCollection>;

    /**
     * Removes the products in the provided product code list from the specified category.
     * @summary Remove products from category
     * @param {number} categoryId Unique identifier of the category that you want products removed from.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<string>} [requestBody] A list of products to be removed from the category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    removeProductsFromCategoryRaw(requestParameters: CategoriesApiRemoveProductsFromCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes the products in the provided product code list from the specified category.
     * Remove products from category
     */
    removeProductsFromCategory(requestParameters: CategoriesApiRemoveProductsFromCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * @summary Update category
     * @param {number} categoryId Unique identifier of the category that you want to modify. Required.
     * @param {boolean} [cascadeVisibility] If true, when changing the display option for the category, change it for all subcategories also. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsCategory} [catalogAdminsCategory] Properties of the category that you want to modify. Required properties ParentCategoryID and Content.Name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    updateCategoryRaw(requestParameters: CategoriesApiUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategory>>;

    /**
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * Update category
     */
    updateCategory(requestParameters: CategoriesApiUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategory>;

    /**
     * Modifies the category attribute.
     * @summary Update category attribute
     * @param {number} categoryId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsCategoryAttribute} [catalogAdminsCategoryAttribute] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    updateCategoryAttributeRaw(requestParameters: CategoriesApiUpdateCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryAttribute>>;

    /**
     * Modifies the category attribute.
     * Update category attribute
     */
    updateCategoryAttribute(requestParameters: CategoriesApiUpdateCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryAttribute>;

    /**
     * 
     * @summary Validate dynamic category expression
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {DynamicExpression} [dynamicExpression] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    validateDynamicExpressionRaw(requestParameters: CategoriesApiValidateDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicExpression>>;

    /**
     * 
     * Validate dynamic category expression
     */
    validateDynamicExpression(requestParameters: CategoriesApiValidateDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicExpression>;

    /**
     * 
     * @summary Validate realtime dynamic category expression
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {DynamicExpression} [dynamicExpression] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    validateRealTimeDynamicExpressionRaw(requestParameters: CategoriesApiValidateRealTimeDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicExpression>>;

    /**
     * 
     * Validate realtime dynamic category expression
     */
    validateRealTimeDynamicExpression(requestParameters: CategoriesApiValidateRealTimeDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicExpression>;

}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI implements CategoriesApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * dds a new category to the catalog\'s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * Add category
     */


    async addCategoryRaw(requestParameters: CategoriesApiAddCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategory>> {
        const queryParameters: any = {};

        if (requestParameters.incrementSequence !== undefined) {
            queryParameters['incrementSequence'] = requestParameters.incrementSequence;
        }

        if (requestParameters.useProvidedId !== undefined) {
            queryParameters['useProvidedId'] = requestParameters.useProvidedId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsCategory,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * dds a new category to the catalog\'s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * Add category
     */
    async addCategory(requestParameters: CategoriesApiAddCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategory> {
        const response = await this.addCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new category attribute to the category.
     * Add category attribute
     */


    async addCategoryAttributeRaw(requestParameters: CategoriesApiAddCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryAttribute>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addCategoryAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsCategoryAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a new category attribute to the category.
     * Add category attribute
     */
    async addCategoryAttribute(requestParameters: CategoriesApiAddCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryAttribute> {
        const response = await this.addCategoryAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds the products in the provided product code list to the specified category.
     * Add products to category
     */


    async addProductsToCategoryRaw(requestParameters: CategoriesApiAddProductsToCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addProductsToCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/add-products`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds the products in the provided product code list to the specified category.
     * Add products to category
     */
    async addProductsToCategory(requestParameters: CategoriesApiAddProductsToCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addProductsToCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the category attribute specified by its attributeFQN.
     * Delete category attribute
     */


    async deleteCategoryAttributeRaw(requestParameters: CategoriesApiDeleteCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteCategoryAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteCategoryAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the category attribute specified by its attributeFQN.
     * Delete category attribute
     */
    async deleteCategoryAttribute(requestParameters: CategoriesApiDeleteCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the category specified by its category ID.
     * Delete category
     */


    async deleteCategoryByIdRaw(requestParameters: CategoriesApiDeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteCategoryById.');
        }

        const queryParameters: any = {};

        if (requestParameters.cascadeDelete !== undefined) {
            queryParameters['cascadeDelete'] = requestParameters.cascadeDelete;
        }

        if (requestParameters.forceDelete !== undefined) {
            queryParameters['forceDelete'] = requestParameters.forceDelete;
        }

        if (requestParameters.reassignToParent !== undefined) {
            queryParameters['reassignToParent'] = requestParameters.reassignToParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the category specified by its category ID.
     * Delete category
     */
    async deleteCategoryById(requestParameters: CategoriesApiDeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * Get categories
     */


    async getCategoriesRaw(requestParameters: CategoriesApiGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryPagedCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * Get categories
     */
    async getCategories(requestParameters: CategoriesApiGetCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryPagedCollection> {
        const response = await this.getCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single category.
     * Get category
     */


    async getCategoryRaw(requestParameters: CategoriesApiGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategory>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single category.
     * Get category
     */
    async getCategory(requestParameters: CategoriesApiGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategory> {
        const response = await this.getCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single category attribute.
     * Get category attribute
     */


    async getCategoryAttributeRaw(requestParameters: CategoriesApiGetCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryAttribute>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getCategoryAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single category attribute.
     * Get category attribute
     */
    async getCategoryAttribute(requestParameters: CategoriesApiGetCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryAttribute> {
        const response = await this.getCategoryAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of category attributes.
     * Get category attributes
     */


    async getCategoryAttributesRaw(requestParameters: CategoriesApiGetCategoryAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAttributeCollection>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of category attributes.
     * Get category attributes
     */
    async getCategoryAttributes(requestParameters: CategoriesApiGetCategoryAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAttributeCollection> {
        const response = await this.getCategoryAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the immediate subcategories of a category.
     * Get child categories
     */


    async getChildCategoriesRaw(requestParameters: CategoriesApiGetChildCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryCollection>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getChildCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/children`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the immediate subcategories of a category.
     * Get child categories
     */
    async getChildCategories(requestParameters: CategoriesApiGetChildCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryCollection> {
        const response = await this.getChildCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the products in the provided product code list from the specified category.
     * Remove products from category
     */


    async removeProductsFromCategoryRaw(requestParameters: CategoriesApiRemoveProductsFromCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling removeProductsFromCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/remove-products`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the products in the provided product code list from the specified category.
     * Remove products from category
     */
    async removeProductsFromCategory(requestParameters: CategoriesApiRemoveProductsFromCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProductsFromCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * Update category
     */


    async updateCategoryRaw(requestParameters: CategoriesApiUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategory>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.cascadeVisibility !== undefined) {
            queryParameters['cascadeVisibility'] = requestParameters.cascadeVisibility;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsCategory,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * Update category
     */
    async updateCategory(requestParameters: CategoriesApiUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategory> {
        const response = await this.updateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the category attribute.
     * Update category attribute
     */


    async updateCategoryAttributeRaw(requestParameters: CategoriesApiUpdateCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCategoryAttribute>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategoryAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateCategoryAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsCategoryAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies the category attribute.
     * Update category attribute
     */
    async updateCategoryAttribute(requestParameters: CategoriesApiUpdateCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCategoryAttribute> {
        const response = await this.updateCategoryAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Validate dynamic category expression
     */


    async validateDynamicExpressionRaw(requestParameters: CategoriesApiValidateDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicExpression>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/ValidateDynamicExpression`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dynamicExpression,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Validate dynamic category expression
     */
    async validateDynamicExpression(requestParameters: CategoriesApiValidateDynamicExpressionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicExpression> {
        const response = await this.validateDynamicExpressionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Validate realtime dynamic category expression
     */


    async validateRealTimeDynamicExpressionRaw(requestParameters: CategoriesApiValidateRealTimeDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicExpression>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/ValidateRealTimeDynamicExpression`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.dynamicExpression,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Validate realtime dynamic category expression
     */
    async validateRealTimeDynamicExpression(requestParameters: CategoriesApiValidateRealTimeDynamicExpressionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicExpression> {
        const response = await this.validateRealTimeDynamicExpressionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
