/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Category,
  CategoryAttribute,
  CategoryAttributeCollection,
  CategoryCollection,
  CategoryPagedCollection,
  DynamicExpression,
} from '../models';
import {
    CategoryFromJSON,
    CategoryToJSON,
    CategoryAttributeFromJSON,
    CategoryAttributeToJSON,
    CategoryAttributeCollectionFromJSON,
    CategoryAttributeCollectionToJSON,
    CategoryCollectionFromJSON,
    CategoryCollectionToJSON,
    CategoryPagedCollectionFromJSON,
    CategoryPagedCollectionToJSON,
    DynamicExpressionFromJSON,
    DynamicExpressionToJSON,
} from '../models';

export interface CategoriesApiAddCategoryRequest {
    incrementSequence?: boolean;
    useProvidedId?: boolean;
    category?: Category;
}

export interface CategoriesApiAddCategoryAttributeRequest {
    categoryId: number;
    categoryAttribute?: CategoryAttribute;
}

export interface CategoriesApiAddProductsToCategoryRequest {
    categoryId: number;
    requestBody?: Array<string>;
}

export interface CategoriesApiDeleteCategoryAttributeRequest {
    categoryId: number;
    attributeFQN: string;
}

export interface CategoriesApiDeleteCategoryByIdRequest {
    categoryId: number;
    cascadeDelete?: boolean;
    forceDelete?: boolean;
    reassignToParent?: boolean;
}

export interface CategoriesApiGetCategoriesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    includeAttributes?: boolean;
    responseGroups?: string;
}

export interface CategoriesApiGetCategoryRequest {
    categoryId: number;
    includeAttributes?: boolean;
}

export interface CategoriesApiGetCategoryAttributeRequest {
    categoryId: number;
    attributeFQN: string;
}

export interface CategoriesApiGetCategoryAttributesRequest {
    categoryId: number;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface CategoriesApiGetChildCategoriesRequest {
    categoryId: number;
}

export interface CategoriesApiRemoveProductsFromCategoryRequest {
    categoryId: number;
    requestBody?: Array<string>;
}

export interface CategoriesApiUpdateCategoryRequest {
    categoryId: number;
    cascadeVisibility?: boolean;
    category?: Category;
}

export interface CategoriesApiUpdateCategoryAttributeRequest {
    categoryId: number;
    attributeFQN: string;
    categoryAttribute?: CategoryAttribute;
}

export interface CategoriesApiValidateDynamicExpressionRequest {
    dynamicExpression?: DynamicExpression;
}

export interface CategoriesApiValidateRealTimeDynamicExpressionRequest {
    dynamicExpression?: DynamicExpression;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * dds a new category to the catalog\'s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * Add category
     */


    async addCategoryRaw(requestParameters: CategoriesApiAddCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        const queryParameters: any = {};

        if (requestParameters.incrementSequence !== undefined) {
            queryParameters['incrementSequence'] = requestParameters.incrementSequence;
        }

        if (requestParameters.useProvidedId !== undefined) {
            queryParameters['useProvidedId'] = requestParameters.useProvidedId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters.category),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * dds a new category to the catalog\'s category hierarchy. Specify a ParentCategoryID to determine where to locate the category in the hierarchy; if not specified it becomes a top-level category.
     * Add category
     */
    async addCategory(requestParameters: CategoriesApiAddCategoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.addCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new category attribute to the category.
     * Add category attribute
     */


    async addCategoryAttributeRaw(requestParameters: CategoriesApiAddCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAttribute>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addCategoryAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryAttributeToJSON(requestParameters.categoryAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryAttributeFromJSON(jsonValue));
    }

    /**
     * Adds a new category attribute to the category.
     * Add category attribute
     */
    async addCategoryAttribute(requestParameters: CategoriesApiAddCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAttribute> {
        const response = await this.addCategoryAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds the products in the provided product code list to the specified category.
     * Add products to category
     */


    async addProductsToCategoryRaw(requestParameters: CategoriesApiAddProductsToCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addProductsToCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/add-products`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds the products in the provided product code list to the specified category.
     * Add products to category
     */
    async addProductsToCategory(requestParameters: CategoriesApiAddProductsToCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addProductsToCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the category attribute specified by its attributeFQN.
     * Delete category attribute
     */


    async deleteCategoryAttributeRaw(requestParameters: CategoriesApiDeleteCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteCategoryAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteCategoryAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the category attribute specified by its attributeFQN.
     * Delete category attribute
     */
    async deleteCategoryAttribute(requestParameters: CategoriesApiDeleteCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the category specified by its category ID.
     * Delete category
     */


    async deleteCategoryByIdRaw(requestParameters: CategoriesApiDeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling deleteCategoryById.');
        }

        const queryParameters: any = {};

        if (requestParameters.cascadeDelete !== undefined) {
            queryParameters['cascadeDelete'] = requestParameters.cascadeDelete;
        }

        if (requestParameters.forceDelete !== undefined) {
            queryParameters['forceDelete'] = requestParameters.forceDelete;
        }

        if (requestParameters.reassignToParent !== undefined) {
            queryParameters['reassignToParent'] = requestParameters.reassignToParent;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the category specified by its category ID.
     * Delete category
     */
    async deleteCategoryById(requestParameters: CategoriesApiDeleteCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCategoryByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * Get categories
     */


    async getCategoriesRaw(requestParameters: CategoriesApiGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryPagedCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryPagedCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of categories according to any specified filter criteria and sort options.
     * Get categories
     */
    async getCategories(requestParameters: CategoriesApiGetCategoriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryPagedCollection> {
        const response = await this.getCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single category.
     * Get category
     */


    async getCategoryRaw(requestParameters: CategoriesApiGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAttributes !== undefined) {
            queryParameters['includeAttributes'] = requestParameters.includeAttributes;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a single category.
     * Get category
     */
    async getCategory(requestParameters: CategoriesApiGetCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.getCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single category attribute.
     * Get category attribute
     */


    async getCategoryAttributeRaw(requestParameters: CategoriesApiGetCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAttribute>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getCategoryAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryAttributeFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a single category attribute.
     * Get category attribute
     */
    async getCategoryAttribute(requestParameters: CategoriesApiGetCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAttribute> {
        const response = await this.getCategoryAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of category attributes.
     * Get category attributes
     */


    async getCategoryAttributesRaw(requestParameters: CategoriesApiGetCategoryAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAttributeCollection>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryAttributes.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryAttributeCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of category attributes.
     * Get category attributes
     */
    async getCategoryAttributes(requestParameters: CategoriesApiGetCategoryAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAttributeCollection> {
        const response = await this.getCategoryAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the immediate subcategories of a category.
     * Get child categories
     */


    async getChildCategoriesRaw(requestParameters: CategoriesApiGetChildCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryCollection>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getChildCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/children`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the immediate subcategories of a category.
     * Get child categories
     */
    async getChildCategories(requestParameters: CategoriesApiGetChildCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryCollection> {
        const response = await this.getChildCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the products in the provided product code list from the specified category.
     * Remove products from category
     */


    async removeProductsFromCategoryRaw(requestParameters: CategoriesApiRemoveProductsFromCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling removeProductsFromCategory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/remove-products`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the products in the provided product code list from the specified category.
     * Remove products from category
     */
    async removeProductsFromCategory(requestParameters: CategoriesApiRemoveProductsFromCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProductsFromCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * Update category
     */


    async updateCategoryRaw(requestParameters: CategoriesApiUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategory.');
        }

        const queryParameters: any = {};

        if (requestParameters.cascadeVisibility !== undefined) {
            queryParameters['cascadeVisibility'] = requestParameters.cascadeVisibility;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters.category),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * Modifies a category such as moving it to another location in the category tree, or changing          whether it is visible on the storefront. This PUT replaces the existing resource, so be sure          to include all the information that you want to maintain for the category. Any unspecified          properties are set to null.
     * Update category
     */
    async updateCategory(requestParameters: CategoriesApiUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Category> {
        const response = await this.updateCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the category attribute.
     * Update category attribute
     */


    async updateCategoryAttributeRaw(requestParameters: CategoriesApiUpdateCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryAttribute>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategoryAttribute.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateCategoryAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/{categoryId}/attributes/{attributeFQN}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryAttributeToJSON(requestParameters.categoryAttribute),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryAttributeFromJSON(jsonValue));
    }

    /**
     * Modifies the category attribute.
     * Update category attribute
     */
    async updateCategoryAttribute(requestParameters: CategoriesApiUpdateCategoryAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryAttribute> {
        const response = await this.updateCategoryAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Validate dynamic category expression
     */


    async validateDynamicExpressionRaw(requestParameters: CategoriesApiValidateDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicExpression>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/ValidateDynamicExpression`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicExpressionToJSON(requestParameters.dynamicExpression),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DynamicExpressionFromJSON(jsonValue));
    }

    /**
     * 
     * Validate dynamic category expression
     */
    async validateDynamicExpression(requestParameters: CategoriesApiValidateDynamicExpressionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicExpression> {
        const response = await this.validateDynamicExpressionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Validate realtime dynamic category expression
     */


    async validateRealTimeDynamicExpressionRaw(requestParameters: CategoriesApiValidateRealTimeDynamicExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DynamicExpression>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categories/ValidateRealTimeDynamicExpression`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicExpressionToJSON(requestParameters.dynamicExpression),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DynamicExpressionFromJSON(jsonValue));
    }

    /**
     * 
     * Validate realtime dynamic category expression
     */
    async validateRealTimeDynamicExpression(requestParameters: CategoriesApiValidateRealTimeDynamicExpressionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DynamicExpression> {
        const response = await this.validateRealTimeDynamicExpressionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
