/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsCurrencyExchangeRate,
  CurrencyExchangeRateCollection,
  CurrencyLocalization,
  CurrencyLocalizationCollection,
} from '../models';


export namespace currencyApiParams { 
    export interface AddCurrencyExchangeRatesRequest {
        currencyCode: string;
        responseFields?: string;
        catalogAdminsCurrencyExchangeRate?: Array<CatalogAdminsCurrencyExchangeRate>;
    }
    export interface AddCurrencyLocalizationRequest {
        responseFields?: string;
        currencyLocalization?: CurrencyLocalization;
    }
    export interface DeleteCurrencyExchangeRateRequest {
        currencyCode: string;
        toCurrencyCode: string;
    }
    export interface DeleteCurrencyLocalizationRequest {
        currencyCode: string;
    }
    export interface GetCurrencyExchangeRateRequest {
        currencyCode: string;
        toCurrencyCode: string;
        responseFields?: string;
    }
    export interface GetCurrencyExchangeRatesRequest {
        currencyCode: string;
        responseFields?: string;
    }
    export interface GetCurrencyLocalizationRequest {
        currencyCode: string;
        responseFields?: string;
    }
    export interface GetCurrencyLocalizationsRequest {
        responseFields?: string;
    }
    export interface UpdateCurrencyExchangeRatesRequest {
        currencyCode: string;
        responseFields?: string;
        catalogAdminsCurrencyExchangeRate?: Array<CatalogAdminsCurrencyExchangeRate>;
    }
    export interface UpdateCurrencyLocalizationRequest {
        currencyCode: string;
        responseFields?: string;
        currencyLocalization?: CurrencyLocalization;
    }
}
/**
* CurrencyApiService - interface
* 
* @export
* @interface CurrencyApi
*/
export interface CurrencyApiService {
    /**
    * Updates the details of a currency-localization.
    * @summary Update currency localization
    * @param {string} currencyCode Currency code
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<CatalogAdminsCurrencyExchangeRate>} [catalogAdminsCurrencyExchangeRate] Exchange rates for the currency
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    addCurrencyExchangeRatesRaw(requestParameters: currencyApiParams.AddCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Updates the details of a currency-localization.
    * Update currency localization
    */
    addCurrencyExchangeRates(requestParameters: currencyApiParams.AddCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Adds a new currency localization
    * @summary Add currency localization
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CurrencyLocalization} [currencyLocalization] Properties of the currency-localization to create.  Required properties: CurrencyCode
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    addCurrencyLocalizationRaw(requestParameters: currencyApiParams.AddCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalization>>;

    /**
    * Adds a new currency localization
    * Add currency localization
    */
    addCurrencyLocalization(requestParameters: currencyApiParams.AddCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalization>;

    /**
    * Delete a single exchange rate for a specified currency-code and target currency-code.
    * @summary Delete currency exchange rate
    * @param {string} currencyCode Currency code
    * @param {string} toCurrencyCode C
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    deleteCurrencyExchangeRateRaw(requestParameters: currencyApiParams.DeleteCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete a single exchange rate for a specified currency-code and target currency-code.
    * Delete currency exchange rate
    */
    deleteCurrencyExchangeRate(requestParameters: currencyApiParams.DeleteCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Deletes the currency-localization specified by its currency code.
    * @summary Delete currency localization
    * @param {string} currencyCode Currency code.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    deleteCurrencyLocalizationRaw(requestParameters: currencyApiParams.DeleteCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes the currency-localization specified by its currency code.
    * Delete currency localization
    */
    deleteCurrencyLocalization(requestParameters: currencyApiParams.DeleteCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
    * @summary Get currency exchange rate
    * @param {string} currencyCode Currency code
    * @param {string} toCurrencyCode Target currency code
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    getCurrencyExchangeRateRaw(requestParameters: currencyApiParams.GetCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCurrencyExchangeRate>>;

    /**
    * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
    * Get currency exchange rate
    */
    getCurrencyExchangeRate(requestParameters: currencyApiParams.GetCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCurrencyExchangeRate>;

    /**
    * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
    * @summary Get currency exchange rates
    * @param {string} currencyCode Currency code
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    getCurrencyExchangeRatesRaw(requestParameters: currencyApiParams.GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateCollection>>;

    /**
    * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
    * Get currency exchange rates
    */
    getCurrencyExchangeRates(requestParameters: currencyApiParams.GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateCollection>;

    /**
    * Gets a single currency-localization.
    * @summary Get currency localization
    * @param {string} currencyCode Currency code.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    getCurrencyLocalizationRaw(requestParameters: currencyApiParams.GetCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalization>>;

    /**
    * Gets a single currency-localization.
    * Get currency localization
    */
    getCurrencyLocalization(requestParameters: currencyApiParams.GetCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalization>;

    /**
    * Gets all currency-localizations.
    * @summary Get currency localizations
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    getCurrencyLocalizationsRaw(requestParameters: currencyApiParams.GetCurrencyLocalizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalizationCollection>>;

    /**
    * Gets all currency-localizations.
    * Get currency localizations
    */
    getCurrencyLocalizations(requestParameters: currencyApiParams.GetCurrencyLocalizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalizationCollection>;

    /**
    * Update multiple exchange rates for a specified currency-code.
    * @summary Update currency exchange rates
    * @param {string} currencyCode Currency code
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<CatalogAdminsCurrencyExchangeRate>} [catalogAdminsCurrencyExchangeRate] Exchange rates for the currency
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    updateCurrencyExchangeRatesRaw(requestParameters: currencyApiParams.UpdateCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Update multiple exchange rates for a specified currency-code.
    * Update currency exchange rates
    */
    updateCurrencyExchangeRates(requestParameters: currencyApiParams.UpdateCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Updates the details of a currency-localization.
    * @summary Update currency localization
    * @param {string} currencyCode Currency code.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CurrencyLocalization} [currencyLocalization] Properties of the currency-localization to update.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CurrencyApiInterface
    */
    updateCurrencyLocalizationRaw(requestParameters: currencyApiParams.UpdateCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalization>>;

    /**
    * Updates the details of a currency-localization.
    * Update currency localization
    */
    updateCurrencyLocalization(requestParameters: currencyApiParams.UpdateCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalization>;

}


/**
 * 
 */
export class CurrencyApi extends runtime.BaseAPI implements CurrencyApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Updates the details of a currency-localization.
     * Update currency localization
     */


    async addCurrencyExchangeRatesRaw(requestParameters: currencyApiParams.AddCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling addCurrencyExchangeRates.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}/exchangerates`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsCurrencyExchangeRate,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the details of a currency-localization.
     * Update currency localization
     */
    async addCurrencyExchangeRates(requestParameters: currencyApiParams.AddCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addCurrencyExchangeRatesRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a new currency localization
     * Add currency localization
     */


    async addCurrencyLocalizationRaw(requestParameters: currencyApiParams.AddCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalization>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.currencyLocalization,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a new currency localization
     * Add currency localization
     */
    async addCurrencyLocalization(requestParameters: currencyApiParams.AddCurrencyLocalizationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalization> {
        const response = await this.addCurrencyLocalizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a single exchange rate for a specified currency-code and target currency-code.
     * Delete currency exchange rate
     */


    async deleteCurrencyExchangeRateRaw(requestParameters: currencyApiParams.DeleteCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling deleteCurrencyExchangeRate.');
        }

        if (requestParameters.toCurrencyCode === null || requestParameters.toCurrencyCode === undefined) {
            throw new runtime.RequiredError('toCurrencyCode','Required parameter requestParameters.toCurrencyCode was null or undefined when calling deleteCurrencyExchangeRate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))).replace(`{${"toCurrencyCode"}}`, encodeURIComponent(String(requestParameters.toCurrencyCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a single exchange rate for a specified currency-code and target currency-code.
     * Delete currency exchange rate
     */
    async deleteCurrencyExchangeRate(requestParameters: currencyApiParams.DeleteCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrencyExchangeRateRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the currency-localization specified by its currency code.
     * Delete currency localization
     */


    async deleteCurrencyLocalizationRaw(requestParameters: currencyApiParams.DeleteCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling deleteCurrencyLocalization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the currency-localization specified by its currency code.
     * Delete currency localization
     */
    async deleteCurrencyLocalization(requestParameters: currencyApiParams.DeleteCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrencyLocalizationRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
     * Get currency exchange rate
     */


    async getCurrencyExchangeRateRaw(requestParameters: currencyApiParams.GetCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsCurrencyExchangeRate>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getCurrencyExchangeRate.');
        }

        if (requestParameters.toCurrencyCode === null || requestParameters.toCurrencyCode === undefined) {
            throw new runtime.RequiredError('toCurrencyCode','Required parameter requestParameters.toCurrencyCode was null or undefined when calling getCurrencyExchangeRate.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}/exchangerates/{toCurrencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))).replace(`{${"toCurrencyCode"}}`, encodeURIComponent(String(requestParameters.toCurrencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a single exchange rate for a specified currency-code and target-currency-code.
     * Get currency exchange rate
     */
    async getCurrencyExchangeRate(requestParameters: currencyApiParams.GetCurrencyExchangeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsCurrencyExchangeRate> {
        const response = await this.getCurrencyExchangeRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
     * Get currency exchange rates
     */


    async getCurrencyExchangeRatesRaw(requestParameters: currencyApiParams.GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRateCollection>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getCurrencyExchangeRates.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}/exchangerates`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of exchange rates for a specified currency-code and filter criteria.
     * Get currency exchange rates
     */
    async getCurrencyExchangeRates(requestParameters: currencyApiParams.GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRateCollection> {
        const response = await this.getCurrencyExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a single currency-localization.
     * Get currency localization
     */


    async getCurrencyLocalizationRaw(requestParameters: currencyApiParams.GetCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalization>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getCurrencyLocalization.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a single currency-localization.
     * Get currency localization
     */
    async getCurrencyLocalization(requestParameters: currencyApiParams.GetCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalization> {
        const response = await this.getCurrencyLocalizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all currency-localizations.
     * Get currency localizations
     */


    async getCurrencyLocalizationsRaw(requestParameters: currencyApiParams.GetCurrencyLocalizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalizationCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all currency-localizations.
     * Get currency localizations
     */
    async getCurrencyLocalizations(requestParameters: currencyApiParams.GetCurrencyLocalizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalizationCollection> {
        const response = await this.getCurrencyLocalizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update multiple exchange rates for a specified currency-code.
     * Update currency exchange rates
     */


    async updateCurrencyExchangeRatesRaw(requestParameters: currencyApiParams.UpdateCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling updateCurrencyExchangeRates.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}/exchangerates`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsCurrencyExchangeRate,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update multiple exchange rates for a specified currency-code.
     * Update currency exchange rates
     */
    async updateCurrencyExchangeRates(requestParameters: currencyApiParams.UpdateCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrencyExchangeRatesRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the details of a currency-localization.
     * Update currency localization
     */


    async updateCurrencyLocalizationRaw(requestParameters: currencyApiParams.UpdateCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyLocalization>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling updateCurrencyLocalization.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/currency/{currencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.currencyLocalization,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the details of a currency-localization.
     * Update currency localization
     */
    async updateCurrencyLocalization(requestParameters: currencyApiParams.UpdateCurrencyLocalizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyLocalization> {
        const response = await this.updateCurrencyLocalizationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
