/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ExtensibleAttribute,
  ExtensibleAttributeCollection,
  ExtensibleAttributeVocabularyValue,
} from '../models';


export namespace categoryAttributeDefinitionApiParams { 
    export interface CreateAttributeRequest {
        responseFields?: string;
        extensibleAttribute?: ExtensibleAttribute;
    }
    export interface GetAttributeRequest {
        attributeFQN: string;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetAttributeVocabularyValuesRequest {
        attributeFQN: string;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetAttributesRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        responseGroups?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface UpdateAttributeRequest {
        attributeFQN: string;
        responseFields?: string;
        extensibleAttribute?: ExtensibleAttribute;
    }
}
/**
* CategoryAttributeDefinitionApiService - interface
* 
* @export
* @interface CategoryAttributeDefinitionApi
*/
export interface CategoryAttributeDefinitionApiService {
    /**
    * Create Attribute
    * @summary Create Attribute
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ExtensibleAttribute} [extensibleAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CategoryAttributeDefinitionApiInterface
    */
    createAttributeRaw(requestParameters: categoryAttributeDefinitionApiParams.CreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttribute>>;

    /**
    * Create Attribute
    * Create Attribute
    */
    createAttribute(requestParameters: categoryAttributeDefinitionApiParams.CreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttribute>;

    /**
    * Get Attribute
    * @summary Get Attribute
    * @param {string} attributeFQN 
    * @param {string} [responseGroups] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CategoryAttributeDefinitionApiInterface
    */
    getAttributeRaw(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttribute>>;

    /**
    * Get Attribute
    * Get Attribute
    */
    getAttribute(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttribute>;

    /**
    * Get Attribute Vocabulary Values
    * @summary Get Attribute Vocabulary Values
    * @param {string} attributeFQN 
    * @param {string} [responseGroups] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CategoryAttributeDefinitionApiInterface
    */
    getAttributeVocabularyValuesRaw(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtensibleAttributeVocabularyValue>>>;

    /**
    * Get Attribute Vocabulary Values
    * Get Attribute Vocabulary Values
    */
    getAttributeVocabularyValues(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtensibleAttributeVocabularyValue>>;

    /**
    * Get Attributes
    * @summary Get Attributes
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [responseGroups] 
    * @param {string} [filter] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CategoryAttributeDefinitionApiInterface
    */
    getAttributesRaw(requestParameters: categoryAttributeDefinitionApiParams.GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttributeCollection>>;

    /**
    * Get Attributes
    * Get Attributes
    */
    getAttributes(requestParameters: categoryAttributeDefinitionApiParams.GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttributeCollection>;

    /**
    * Update Attribute
    * @summary Update Attribute
    * @param {string} attributeFQN 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {ExtensibleAttribute} [extensibleAttribute] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CategoryAttributeDefinitionApiInterface
    */
    updateAttributeRaw(requestParameters: categoryAttributeDefinitionApiParams.UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttribute>>;

    /**
    * Update Attribute
    * Update Attribute
    */
    updateAttribute(requestParameters: categoryAttributeDefinitionApiParams.UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttribute>;

}


/**
 * 
 */
export class CategoryAttributeDefinitionApi extends runtime.BaseAPI implements CategoryAttributeDefinitionApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Create Attribute
     * Create Attribute
     */


    async createAttributeRaw(requestParameters: categoryAttributeDefinitionApiParams.CreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttribute>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categoryattributedefinition/attributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extensibleAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create Attribute
     * Create Attribute
     */
    async createAttribute(requestParameters: categoryAttributeDefinitionApiParams.CreateAttributeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttribute> {
        const response = await this.createAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Attribute
     * Get Attribute
     */


    async getAttributeRaw(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttribute>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categoryattributedefinition/attributes/{attributeFQN}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Attribute
     * Get Attribute
     */
    async getAttribute(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttribute> {
        const response = await this.getAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Attribute Vocabulary Values
     * Get Attribute Vocabulary Values
     */


    async getAttributeVocabularyValuesRaw(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExtensibleAttributeVocabularyValue>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeVocabularyValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categoryattributedefinition/attributes/{attributeFQN}/VocabularyValues`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Attribute Vocabulary Values
     * Get Attribute Vocabulary Values
     */
    async getAttributeVocabularyValues(requestParameters: categoryAttributeDefinitionApiParams.GetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExtensibleAttributeVocabularyValue>> {
        const response = await this.getAttributeVocabularyValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Attributes
     * Get Attributes
     */


    async getAttributesRaw(requestParameters: categoryAttributeDefinitionApiParams.GetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttributeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categoryattributedefinition/attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get Attributes
     * Get Attributes
     */
    async getAttributes(requestParameters: categoryAttributeDefinitionApiParams.GetAttributesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttributeCollection> {
        const response = await this.getAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Attribute
     * Update Attribute
     */


    async updateAttributeRaw(requestParameters: categoryAttributeDefinitionApiParams.UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtensibleAttribute>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/categoryattributedefinition/attributes/{attributeFQN}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.extensibleAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update Attribute
     * Update Attribute
     */
    async updateAttribute(requestParameters: categoryAttributeDefinitionApiParams.UpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtensibleAttribute> {
        const response = await this.updateAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
