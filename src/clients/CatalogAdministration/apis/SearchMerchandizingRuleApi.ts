/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SearchMerchandizingRule,
  SearchMerchandizingRuleCollection,
} from '../models';
import {
    SearchMerchandizingRuleFromJSON,
    SearchMerchandizingRuleToJSON,
    SearchMerchandizingRuleCollectionFromJSON,
    SearchMerchandizingRuleCollectionToJSON,
} from '../models';

export interface SearchMerchandizingRuleApiCloneSearchMerchandizingRuleRequest {
    code: string;
}

export interface SearchMerchandizingRuleApiCreateSearchMerchandizingRuleRequest {
    searchMerchandizingRule?: SearchMerchandizingRule;
}

export interface SearchMerchandizingRuleApiDeleteSearchMerchandizingRuleRequest {
    code: string;
}

export interface SearchMerchandizingRuleApiGetSearchMerchandizingRuleRequest {
    code: string;
}

export interface SearchMerchandizingRuleApiGetSearchMerchandizingRulesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
    q?: string;
}

export interface SearchMerchandizingRuleApiUpdateSearchMerchandizingRuleRequest {
    code: string;
    searchMerchandizingRule?: SearchMerchandizingRule;
}

/**
 * 
 */
export class SearchMerchandizingRuleApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Clone Search Merchandizing Rule
     * Clone Search Merchandizing Rule
     */


    async cloneSearchMerchandizingRuleRaw(requestParameters: SearchMerchandizingRuleApiCloneSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchMerchandizingRule>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling cloneSearchMerchandizingRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchmerchandizingrules/{code}/clone`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchMerchandizingRuleFromJSON(jsonValue));
    }

    /**
     * Clone Search Merchandizing Rule
     * Clone Search Merchandizing Rule
     */
    async cloneSearchMerchandizingRule(requestParameters: SearchMerchandizingRuleApiCloneSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchMerchandizingRule> {
        const response = await this.cloneSearchMerchandizingRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Search Merchandizing Rule
     * Create Search Merchandizing Rule
     */


    async createSearchMerchandizingRuleRaw(requestParameters: SearchMerchandizingRuleApiCreateSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchMerchandizingRule>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchmerchandizingrules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchMerchandizingRuleToJSON(requestParameters.searchMerchandizingRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchMerchandizingRuleFromJSON(jsonValue));
    }

    /**
     * Create Search Merchandizing Rule
     * Create Search Merchandizing Rule
     */
    async createSearchMerchandizingRule(requestParameters: SearchMerchandizingRuleApiCreateSearchMerchandizingRuleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchMerchandizingRule> {
        const response = await this.createSearchMerchandizingRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Search Merchandizing Rule
     * Delete Search Merchandizing Rule
     */


    async deleteSearchMerchandizingRuleRaw(requestParameters: SearchMerchandizingRuleApiDeleteSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteSearchMerchandizingRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchmerchandizingrules/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Search Merchandizing Rule
     * Delete Search Merchandizing Rule
     */
    async deleteSearchMerchandizingRule(requestParameters: SearchMerchandizingRuleApiDeleteSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSearchMerchandizingRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Get Search Merchandizing Rule
     * Get Search Merchandizing Rule
     */


    async getSearchMerchandizingRuleRaw(requestParameters: SearchMerchandizingRuleApiGetSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchMerchandizingRule>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getSearchMerchandizingRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchmerchandizingrules/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchMerchandizingRuleFromJSON(jsonValue));
    }

    /**
     * Get Search Merchandizing Rule
     * Get Search Merchandizing Rule
     */
    async getSearchMerchandizingRule(requestParameters: SearchMerchandizingRuleApiGetSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchMerchandizingRule> {
        const response = await this.getSearchMerchandizingRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Search Merchandizing Rules
     * Get Search Merchandizing Rules
     */


    async getSearchMerchandizingRulesRaw(requestParameters: SearchMerchandizingRuleApiGetSearchMerchandizingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchMerchandizingRuleCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchmerchandizingrules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchMerchandizingRuleCollectionFromJSON(jsonValue));
    }

    /**
     * Get Search Merchandizing Rules
     * Get Search Merchandizing Rules
     */
    async getSearchMerchandizingRules(requestParameters: SearchMerchandizingRuleApiGetSearchMerchandizingRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchMerchandizingRuleCollection> {
        const response = await this.getSearchMerchandizingRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Search Merchandizing Rule
     * Update Search Merchandizing Rule
     */


    async updateSearchMerchandizingRuleRaw(requestParameters: SearchMerchandizingRuleApiUpdateSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchMerchandizingRule>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updateSearchMerchandizingRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/searchmerchandizingrules/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SearchMerchandizingRuleToJSON(requestParameters.searchMerchandizingRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchMerchandizingRuleFromJSON(jsonValue));
    }

    /**
     * Update Search Merchandizing Rule
     * Update Search Merchandizing Rule
     */
    async updateSearchMerchandizingRule(requestParameters: SearchMerchandizingRuleApiUpdateSearchMerchandizingRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchMerchandizingRule> {
        const response = await this.updateSearchMerchandizingRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
