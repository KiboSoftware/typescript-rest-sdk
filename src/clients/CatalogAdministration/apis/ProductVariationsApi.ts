/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ProductVariation,
  ProductVariationCollection,
  ProductVariationDeltaPrice,
  ProductVariationFixedPrice,
  ProductVariationPagedCollection,
} from '../models';
import {
    ProductVariationFromJSON,
    ProductVariationToJSON,
    ProductVariationCollectionFromJSON,
    ProductVariationCollectionToJSON,
    ProductVariationDeltaPriceFromJSON,
    ProductVariationDeltaPriceToJSON,
    ProductVariationFixedPriceFromJSON,
    ProductVariationFixedPriceToJSON,
    ProductVariationPagedCollectionFromJSON,
    ProductVariationPagedCollectionToJSON,
} from '../models';

export interface ProductVariationsApiAddProductVariationLocalizedDeltaPriceRequest {
    productCode: string;
    variationKey: string;
    productVariationDeltaPrice?: ProductVariationDeltaPrice;
}

export interface ProductVariationsApiAddProductVariationLocalizedPriceRequest {
    productCode: string;
    variationKey: string;
    productVariationFixedPrice?: ProductVariationFixedPrice;
}

export interface ProductVariationsApiDeleteProductVariationRequest {
    productCode: string;
    variationKey: string;
}

export interface ProductVariationsApiDeleteProductVariationLocalizedDeltaPriceRequest {
    productCode: string;
    variationKey: string;
    currencyCode: string;
}

export interface ProductVariationsApiDeleteProductVariationLocalizedPriceRequest {
    productCode: string;
    variationKey: string;
    currencyCode: string;
}

export interface ProductVariationsApiGetProductVariationRequest {
    productCode: string;
    variationKey: string;
}

export interface ProductVariationsApiGetProductVariationLocalizedDeltaPriceRequest {
    productCode: string;
    variationKey: string;
    currencyCode: string;
}

export interface ProductVariationsApiGetProductVariationLocalizedDeltaPricesRequest {
    productCode: string;
    variationKey: string;
}

export interface ProductVariationsApiGetProductVariationLocalizedPriceRequest {
    productCode: string;
    variationKey: string;
    currencyCode: string;
}

export interface ProductVariationsApiGetProductVariationLocalizedPricesRequest {
    productCode: string;
    variationKey: string;
}

export interface ProductVariationsApiGetProductVariationsRequest {
    productCode: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface ProductVariationsApiUpdateProductVariationRequest {
    productCode: string;
    variationKey: string;
    productVariation?: ProductVariation;
}

export interface ProductVariationsApiUpdateProductVariationLocalizedDeltaPriceRequest {
    productCode: string;
    variationKey: string;
    currencyCode: string;
    productVariationDeltaPrice?: ProductVariationDeltaPrice;
}

export interface ProductVariationsApiUpdateProductVariationLocalizedDeltaPricesRequest {
    productCode: string;
    variationKey: string;
    productVariationDeltaPrice?: Array<ProductVariationDeltaPrice>;
}

export interface ProductVariationsApiUpdateProductVariationLocalizedPriceRequest {
    productCode: string;
    variationKey: string;
    currencyCode: string;
    productVariationFixedPrice?: ProductVariationFixedPrice;
}

export interface ProductVariationsApiUpdateProductVariationLocalizedPricesRequest {
    productCode: string;
    variationKey: string;
    productVariationFixedPrice?: Array<ProductVariationFixedPrice>;
}

export interface ProductVariationsApiUpdateProductVariationsRequest {
    productCode: string;
    productVariationCollection?: ProductVariationCollection;
}

/**
 * 
 */
export class ProductVariationsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Add product variation localized delta price
     */


    async addProductVariationLocalizedDeltaPriceRaw(requestParameters: ProductVariationsApiAddProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationDeltaPrice>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling addProductVariationLocalizedDeltaPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductVariationDeltaPriceToJSON(requestParameters.productVariationDeltaPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationDeltaPriceFromJSON(jsonValue));
    }

    /**
     * 
     * Add product variation localized delta price
     */
    async addProductVariationLocalizedDeltaPrice(requestParameters: ProductVariationsApiAddProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationDeltaPrice> {
        const response = await this.addProductVariationLocalizedDeltaPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add product variation localized price
     */


    async addProductVariationLocalizedPriceRaw(requestParameters: ProductVariationsApiAddProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationFixedPrice>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling addProductVariationLocalizedPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling addProductVariationLocalizedPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductVariationFixedPriceToJSON(requestParameters.productVariationFixedPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationFixedPriceFromJSON(jsonValue));
    }

    /**
     * 
     * Add product variation localized price
     */
    async addProductVariationLocalizedPrice(requestParameters: ProductVariationsApiAddProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationFixedPrice> {
        const response = await this.addProductVariationLocalizedPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an existing product variation.
     * Delete product variation
     */


    async deleteProductVariationRaw(requestParameters: ProductVariationsApiDeleteProductVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProductVariation.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling deleteProductVariation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing product variation.
     * Delete product variation
     */
    async deleteProductVariation(requestParameters: ProductVariationsApiDeleteProductVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductVariationRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete product variation localized delta price
     */


    async deleteProductVariationLocalizedDeltaPriceRaw(requestParameters: ProductVariationsApiDeleteProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling deleteProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling deleteProductVariationLocalizedDeltaPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice/{currencyCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product variation localized delta price
     */
    async deleteProductVariationLocalizedDeltaPrice(requestParameters: ProductVariationsApiDeleteProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductVariationLocalizedDeltaPriceRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete product variation localized price
     */


    async deleteProductVariationLocalizedPriceRaw(requestParameters: ProductVariationsApiDeleteProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deleteProductVariationLocalizedPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling deleteProductVariationLocalizedPrice.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling deleteProductVariationLocalizedPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice/{currencyCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product variation localized price
     */
    async deleteProductVariationLocalizedPrice(requestParameters: ProductVariationsApiDeleteProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductVariationLocalizedPriceRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves an existing product variation for a specific product and variation key.
     * Get product variation
     */


    async getProductVariationRaw(requestParameters: ProductVariationsApiGetProductVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariation>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductVariation.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling getProductVariation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationFromJSON(jsonValue));
    }

    /**
     * Retrieves an existing product variation for a specific product and variation key.
     * Get product variation
     */
    async getProductVariation(requestParameters: ProductVariationsApiGetProductVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariation> {
        const response = await this.getProductVariationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product variation localized delta price
     */


    async getProductVariationLocalizedDeltaPriceRaw(requestParameters: ProductVariationsApiGetProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationDeltaPrice>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling getProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getProductVariationLocalizedDeltaPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice/{currencyCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationDeltaPriceFromJSON(jsonValue));
    }

    /**
     * 
     * Get product variation localized delta price
     */
    async getProductVariationLocalizedDeltaPrice(requestParameters: ProductVariationsApiGetProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationDeltaPrice> {
        const response = await this.getProductVariationLocalizedDeltaPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product variation localized delta prices
     */


    async getProductVariationLocalizedDeltaPricesRaw(requestParameters: ProductVariationsApiGetProductVariationLocalizedDeltaPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductVariationDeltaPrice>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductVariationLocalizedDeltaPrices.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling getProductVariationLocalizedDeltaPrices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductVariationDeltaPriceFromJSON));
    }

    /**
     * 
     * Get product variation localized delta prices
     */
    async getProductVariationLocalizedDeltaPrices(requestParameters: ProductVariationsApiGetProductVariationLocalizedDeltaPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductVariationDeltaPrice>> {
        const response = await this.getProductVariationLocalizedDeltaPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product variation localized price
     */


    async getProductVariationLocalizedPriceRaw(requestParameters: ProductVariationsApiGetProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationFixedPrice>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductVariationLocalizedPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling getProductVariationLocalizedPrice.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getProductVariationLocalizedPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice/{currencyCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationFixedPriceFromJSON(jsonValue));
    }

    /**
     * 
     * Get product variation localized price
     */
    async getProductVariationLocalizedPrice(requestParameters: ProductVariationsApiGetProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationFixedPrice> {
        const response = await this.getProductVariationLocalizedPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product variation localized prices
     */


    async getProductVariationLocalizedPricesRaw(requestParameters: ProductVariationsApiGetProductVariationLocalizedPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductVariationFixedPrice>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductVariationLocalizedPrices.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling getProductVariationLocalizedPrices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductVariationFixedPriceFromJSON));
    }

    /**
     * 
     * Get product variation localized prices
     */
    async getProductVariationLocalizedPrices(requestParameters: ProductVariationsApiGetProductVariationLocalizedPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductVariationFixedPrice>> {
        const response = await this.getProductVariationLocalizedPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paged list of product variations for a specific product according to any specified filter criteria and sort options.
     * Get product variations
     */


    async getProductVariationsRaw(requestParameters: ProductVariationsApiGetProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationPagedCollection>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getProductVariations.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationPagedCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a paged list of product variations for a specific product according to any specified filter criteria and sort options.
     * Get product variations
     */
    async getProductVariations(requestParameters: ProductVariationsApiGetProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationPagedCollection> {
        const response = await this.getProductVariationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies an existing product variation specified by its variation key. Typically used to change the price or               inventory count of an existing product variation. Read-only options are ignored.
     * Update product variation
     */


    async updateProductVariationRaw(requestParameters: ProductVariationsApiUpdateProductVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariation>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductVariation.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling updateProductVariation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductVariationToJSON(requestParameters.productVariation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationFromJSON(jsonValue));
    }

    /**
     * Modifies an existing product variation specified by its variation key. Typically used to change the price or               inventory count of an existing product variation. Read-only options are ignored.
     * Update product variation
     */
    async updateProductVariation(requestParameters: ProductVariationsApiUpdateProductVariationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariation> {
        const response = await this.updateProductVariationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product variation localized delta price
     */


    async updateProductVariationLocalizedDeltaPriceRaw(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationDeltaPrice>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling updateProductVariationLocalizedDeltaPrice.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling updateProductVariationLocalizedDeltaPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice/{currencyCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductVariationDeltaPriceToJSON(requestParameters.productVariationDeltaPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationDeltaPriceFromJSON(jsonValue));
    }

    /**
     * 
     * Update product variation localized delta price
     */
    async updateProductVariationLocalizedDeltaPrice(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedDeltaPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationDeltaPrice> {
        const response = await this.updateProductVariationLocalizedDeltaPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product variation localized delta prices
     */


    async updateProductVariationLocalizedDeltaPricesRaw(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedDeltaPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductVariationDeltaPrice>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductVariationLocalizedDeltaPrices.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling updateProductVariationLocalizedDeltaPrices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedDeltaPrice`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productVariationDeltaPrice.map(ProductVariationDeltaPriceToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductVariationDeltaPriceFromJSON));
    }

    /**
     * 
     * Update product variation localized delta prices
     */
    async updateProductVariationLocalizedDeltaPrices(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedDeltaPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductVariationDeltaPrice>> {
        const response = await this.updateProductVariationLocalizedDeltaPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product variation localized price
     */


    async updateProductVariationLocalizedPriceRaw(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationFixedPrice>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductVariationLocalizedPrice.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling updateProductVariationLocalizedPrice.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling updateProductVariationLocalizedPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice/{currencyCode}`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductVariationFixedPriceToJSON(requestParameters.productVariationFixedPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationFixedPriceFromJSON(jsonValue));
    }

    /**
     * 
     * Update product variation localized price
     */
    async updateProductVariationLocalizedPrice(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedPriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationFixedPrice> {
        const response = await this.updateProductVariationLocalizedPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product variation localized prices
     */


    async updateProductVariationLocalizedPricesRaw(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProductVariationFixedPrice>>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductVariationLocalizedPrices.');
        }

        if (requestParameters.variationKey === null || requestParameters.variationKey === undefined) {
            throw new runtime.RequiredError('variationKey','Required parameter requestParameters.variationKey was null or undefined when calling updateProductVariationLocalizedPrices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations/{variationKey}/localizedPrice`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"variationKey"}}`, encodeURIComponent(String(requestParameters.variationKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productVariationFixedPrice.map(ProductVariationFixedPriceToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductVariationFixedPriceFromJSON));
    }

    /**
     * 
     * Update product variation localized prices
     */
    async updateProductVariationLocalizedPrices(requestParameters: ProductVariationsApiUpdateProductVariationLocalizedPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProductVariationFixedPrice>> {
        const response = await this.updateProductVariationLocalizedPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies multiple product variations for an existing product in one operation. Use to set IsActive to true for               variations that represent configurable options for sale. Also use to change the price or inventory count of an               existing product variation. Read-only options are ignored.
     * Update product variations
     */


    async updateProductVariationsRaw(requestParameters: ProductVariationsApiUpdateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationCollection>> {
        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updateProductVariations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/products/{productCode}/variations`.replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductVariationCollectionToJSON(requestParameters.productVariationCollection),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationCollectionFromJSON(jsonValue));
    }

    /**
     * Modifies multiple product variations for an existing product in one operation. Use to set IsActive to true for               variations that represent configurable options for sale. Also use to change the price or inventory count of an               existing product variation. Read-only options are ignored.
     * Update product variations
     */
    async updateProductVariations(requestParameters: ProductVariationsApiUpdateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationCollection> {
        const response = await this.updateProductVariationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
