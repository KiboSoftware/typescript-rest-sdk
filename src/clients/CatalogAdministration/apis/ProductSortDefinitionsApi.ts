/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ProductSortDefinition,
  ProductSortDefinitionPagedCollection,
} from '../models';

export interface ProductSortDefinitionsApiAddProductSortDefinitionRequest {
    useProvidedId?: boolean;
    responseFields?: string;
    productSortDefinition?: ProductSortDefinition;
}

export interface ProductSortDefinitionsApiDeleteProductSortDefinitionRequest {
    productSortDefinitionId: number;
}

export interface ProductSortDefinitionsApiGetProductSortDefinitionRequest {
    productSortDefinitionId: number;
    responseFields?: string;
}

export interface ProductSortDefinitionsApiGetProductSortDefinitionsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface ProductSortDefinitionsApiUpdateProductSortDefinitionRequest {
    productSortDefinitionId: number;
    responseFields?: string;
    productSortDefinition?: ProductSortDefinition;
}

/**
 * ProductSortDefinitionsApi - interface
 * 
 * @export
 * @interface ProductSortDefinitionsApiInterface
 */
export interface ProductSortDefinitionsApiInterface {
    /**
     * Adds a new product sort definition.
     * @summary Add product sort definition
     * @param {boolean} [useProvidedId] If true, the provided Id value will be used as the ProductSortDefinitionId. If omitted or false, the system will generate a ProductSortDefinitionId
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductSortDefinition} [productSortDefinition] Properties of the new product sort definition. Required properties of StartDate and Name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSortDefinitionsApiInterface
     */
    addProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiAddProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinition>>;

    /**
     * Adds a new product sort definition.
     * Add product sort definition
     */
    addProductSortDefinition(requestParameters: ProductSortDefinitionsApiAddProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinition>;

    /**
     * Deletes the product sort definition specified by its ProductSortDefinitionID.
     * @summary Delete product sort definition
     * @param {number} productSortDefinitionId Unique identifier of the product sort definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSortDefinitionsApiInterface
     */
    deleteProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiDeleteProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the product sort definition specified by its ProductSortDefinitionID.
     * Delete product sort definition
     */
    deleteProductSortDefinition(requestParameters: ProductSortDefinitionsApiDeleteProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Gets a single product sort definition.
     * @summary Get product sort definition
     * @param {number} productSortDefinitionId Unique identifier of the product sort definition.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSortDefinitionsApiInterface
     */
    getProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinition>>;

    /**
     * Gets a single product sort definition.
     * Get product sort definition
     */
    getProductSortDefinition(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinition>;

    /**
     * Retrieves a list of product sort definitions according to any specified filter criteria and sort options.
     * @summary Get product sort definitions
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. The default value is 0.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSortDefinitionsApiInterface
     */
    getProductSortDefinitionsRaw(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinitionPagedCollection>>;

    /**
     * Retrieves a list of product sort definitions according to any specified filter criteria and sort options.
     * Get product sort definitions
     */
    getProductSortDefinitions(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinitionPagedCollection>;

    /**
     * Updates the details of a product sort definition.
     * @summary Update product sort definition
     * @param {number} productSortDefinitionId Unique identifier of the product sort definition.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductSortDefinition} [productSortDefinition] The details of the product sort definition to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductSortDefinitionsApiInterface
     */
    updateProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiUpdateProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinition>>;

    /**
     * Updates the details of a product sort definition.
     * Update product sort definition
     */
    updateProductSortDefinition(requestParameters: ProductSortDefinitionsApiUpdateProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinition>;

}

/**
 * 
 */
export class ProductSortDefinitionsApi extends runtime.BaseAPI implements ProductSortDefinitionsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a new product sort definition.
     * Add product sort definition
     */


    async addProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiAddProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinition>> {
        const queryParameters: any = {};

        if (requestParameters.useProvidedId !== undefined) {
            queryParameters['useProvidedId'] = requestParameters.useProvidedId;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/productsortdefinitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productSortDefinition,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a new product sort definition.
     * Add product sort definition
     */
    async addProductSortDefinition(requestParameters: ProductSortDefinitionsApiAddProductSortDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinition> {
        const response = await this.addProductSortDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the product sort definition specified by its ProductSortDefinitionID.
     * Delete product sort definition
     */


    async deleteProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiDeleteProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productSortDefinitionId === null || requestParameters.productSortDefinitionId === undefined) {
            throw new runtime.RequiredError('productSortDefinitionId','Required parameter requestParameters.productSortDefinitionId was null or undefined when calling deleteProductSortDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/productsortdefinitions/{productSortDefinitionId}`.replace(`{${"productSortDefinitionId"}}`, encodeURIComponent(String(requestParameters.productSortDefinitionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the product sort definition specified by its ProductSortDefinitionID.
     * Delete product sort definition
     */
    async deleteProductSortDefinition(requestParameters: ProductSortDefinitionsApiDeleteProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductSortDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a single product sort definition.
     * Get product sort definition
     */


    async getProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinition>> {
        if (requestParameters.productSortDefinitionId === null || requestParameters.productSortDefinitionId === undefined) {
            throw new runtime.RequiredError('productSortDefinitionId','Required parameter requestParameters.productSortDefinitionId was null or undefined when calling getProductSortDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/productsortdefinitions/{productSortDefinitionId}`.replace(`{${"productSortDefinitionId"}}`, encodeURIComponent(String(requestParameters.productSortDefinitionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets a single product sort definition.
     * Get product sort definition
     */
    async getProductSortDefinition(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinition> {
        const response = await this.getProductSortDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of product sort definitions according to any specified filter criteria and sort options.
     * Get product sort definitions
     */


    async getProductSortDefinitionsRaw(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinitionPagedCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/productsortdefinitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of product sort definitions according to any specified filter criteria and sort options.
     * Get product sort definitions
     */
    async getProductSortDefinitions(requestParameters: ProductSortDefinitionsApiGetProductSortDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinitionPagedCollection> {
        const response = await this.getProductSortDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of a product sort definition.
     * Update product sort definition
     */


    async updateProductSortDefinitionRaw(requestParameters: ProductSortDefinitionsApiUpdateProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductSortDefinition>> {
        if (requestParameters.productSortDefinitionId === null || requestParameters.productSortDefinitionId === undefined) {
            throw new runtime.RequiredError('productSortDefinitionId','Required parameter requestParameters.productSortDefinitionId was null or undefined when calling updateProductSortDefinition.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/productsortdefinitions/{productSortDefinitionId}`.replace(`{${"productSortDefinitionId"}}`, encodeURIComponent(String(requestParameters.productSortDefinitionId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productSortDefinition,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the details of a product sort definition.
     * Update product sort definition
     */
    async updateProductSortDefinition(requestParameters: ProductSortDefinitionsApiUpdateProductSortDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductSortDefinition> {
        const response = await this.updateProductSortDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
