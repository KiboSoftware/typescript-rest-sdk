/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SearchTuningRule,
  SearchTuningRuleCollection,
  SearchTuningRuleSortFields,
} from '../models';


export namespace searchTuningRulesApiParams { 
    export interface AddSearchTuningRuleRequest {
        responseFields?: string;
        searchTuningRule?: SearchTuningRule;
    }
    export interface DeleteSearchTuningRuleRequest {
        searchTuningRuleCode: string;
    }
    export interface GetSearchTuningRuleRequest {
        searchTuningRuleCode: string;
        responseFields?: string;
    }
    export interface GetSearchTuningRuleSortFieldsRequest {
        responseFields?: string;
    }
    export interface GetSearchTuningRulesRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface UpdateSearchTuningRuleRequest {
        searchTuningRuleCode: string;
        responseFields?: string;
        searchTuningRule?: SearchTuningRule;
    }
    export interface UpdateSearchTuningRuleSortFieldsRequest {
        responseFields?: string;
        searchTuningRuleSortFields?: SearchTuningRuleSortFields;
    }
}
/**
* SearchTuningRulesApiService - interface
* 
* @export
* @interface SearchTuningRulesApi
*/
export interface SearchTuningRulesApiService {
    /**
    * Add search tuning rule
    * @summary Add search tuning rule
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SearchTuningRule} [searchTuningRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    addSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.AddSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>>;

    /**
    * Add search tuning rule
    * Add search tuning rule
    */
    addSearchTuningRule(requestParameters: searchTuningRulesApiParams.AddSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule>;

    /**
    * Delete search tuning rule
    * @summary Delete search tuning rule
    * @param {string} searchTuningRuleCode 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    deleteSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.DeleteSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Delete search tuning rule
    * Delete search tuning rule
    */
    deleteSearchTuningRule(requestParameters: searchTuningRulesApiParams.DeleteSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get search tuning rule
    * @summary Get search tuning rule
    * @param {string} searchTuningRuleCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    getSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>>;

    /**
    * Get search tuning rule
    * Get search tuning rule
    */
    getSearchTuningRule(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule>;

    /**
    * Get search tuning rule sort fields
    * @summary Get search tuning rule sort fields
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    getSearchTuningRuleSortFieldsRaw(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleSortFields>>;

    /**
    * Get search tuning rule sort fields
    * Get search tuning rule sort fields
    */
    getSearchTuningRuleSortFields(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleSortFields>;

    /**
    * Get search tuning rules
    * @summary Get search tuning rules
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseGroups] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    getSearchTuningRulesRaw(requestParameters: searchTuningRulesApiParams.GetSearchTuningRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleCollection>>;

    /**
    * Get search tuning rules
    * Get search tuning rules
    */
    getSearchTuningRules(requestParameters: searchTuningRulesApiParams.GetSearchTuningRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleCollection>;

    /**
    * Update search tuning rule
    * @summary Update search tuning rule
    * @param {string} searchTuningRuleCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SearchTuningRule} [searchTuningRule] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    updateSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>>;

    /**
    * Update search tuning rule
    * Update search tuning rule
    */
    updateSearchTuningRule(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule>;

    /**
    * Update search tuning rule sort fields
    * @summary Update search tuning rule sort fields
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SearchTuningRuleSortFields} [searchTuningRuleSortFields] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchTuningRulesApiInterface
    */
    updateSearchTuningRuleSortFieldsRaw(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleSortFields>>;

    /**
    * Update search tuning rule sort fields
    * Update search tuning rule sort fields
    */
    updateSearchTuningRuleSortFields(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleSortFields>;

}


/**
 * 
 */
export class SearchTuningRulesApi extends runtime.BaseAPI implements SearchTuningRulesApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add search tuning rule
     * Add search tuning rule
     */


    async addSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.AddSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.searchTuningRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add search tuning rule
     * Add search tuning rule
     */
    async addSearchTuningRule(requestParameters: searchTuningRulesApiParams.AddSearchTuningRuleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule> {
        const response = await this.addSearchTuningRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete search tuning rule
     * Delete search tuning rule
     */


    async deleteSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.DeleteSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.searchTuningRuleCode === null || requestParameters.searchTuningRuleCode === undefined) {
            throw new runtime.RequiredError('searchTuningRuleCode','Required parameter requestParameters.searchTuningRuleCode was null or undefined when calling deleteSearchTuningRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}`.replace(`{${"searchTuningRuleCode"}}`, encodeURIComponent(String(requestParameters.searchTuningRuleCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete search tuning rule
     * Delete search tuning rule
     */
    async deleteSearchTuningRule(requestParameters: searchTuningRulesApiParams.DeleteSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSearchTuningRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Get search tuning rule
     * Get search tuning rule
     */


    async getSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>> {
        if (requestParameters.searchTuningRuleCode === null || requestParameters.searchTuningRuleCode === undefined) {
            throw new runtime.RequiredError('searchTuningRuleCode','Required parameter requestParameters.searchTuningRuleCode was null or undefined when calling getSearchTuningRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}`.replace(`{${"searchTuningRuleCode"}}`, encodeURIComponent(String(requestParameters.searchTuningRuleCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get search tuning rule
     * Get search tuning rule
     */
    async getSearchTuningRule(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule> {
        const response = await this.getSearchTuningRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get search tuning rule sort fields
     * Get search tuning rule sort fields
     */


    async getSearchTuningRuleSortFieldsRaw(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleSortFields>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrulesortfields`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get search tuning rule sort fields
     * Get search tuning rule sort fields
     */
    async getSearchTuningRuleSortFields(requestParameters: searchTuningRulesApiParams.GetSearchTuningRuleSortFieldsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleSortFields> {
        const response = await this.getSearchTuningRuleSortFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get search tuning rules
     * Get search tuning rules
     */


    async getSearchTuningRulesRaw(requestParameters: searchTuningRulesApiParams.GetSearchTuningRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get search tuning rules
     * Get search tuning rules
     */
    async getSearchTuningRules(requestParameters: searchTuningRulesApiParams.GetSearchTuningRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleCollection> {
        const response = await this.getSearchTuningRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update search tuning rule
     * Update search tuning rule
     */


    async updateSearchTuningRuleRaw(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>> {
        if (requestParameters.searchTuningRuleCode === null || requestParameters.searchTuningRuleCode === undefined) {
            throw new runtime.RequiredError('searchTuningRuleCode','Required parameter requestParameters.searchTuningRuleCode was null or undefined when calling updateSearchTuningRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}`.replace(`{${"searchTuningRuleCode"}}`, encodeURIComponent(String(requestParameters.searchTuningRuleCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.searchTuningRule,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update search tuning rule
     * Update search tuning rule
     */
    async updateSearchTuningRule(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule> {
        const response = await this.updateSearchTuningRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update search tuning rule sort fields
     * Update search tuning rule sort fields
     */


    async updateSearchTuningRuleSortFieldsRaw(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleSortFields>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrulesortfields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.searchTuningRuleSortFields,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update search tuning rule sort fields
     * Update search tuning rule sort fields
     */
    async updateSearchTuningRuleSortFields(requestParameters: searchTuningRulesApiParams.UpdateSearchTuningRuleSortFieldsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleSortFields> {
        const response = await this.updateSearchTuningRuleSortFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
