/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SearchTuningRule,
  SearchTuningRuleCollection,
  SearchTuningRuleSortFields,
} from '../models';
import {
    SearchTuningRuleFromJSON,
    SearchTuningRuleToJSON,
    SearchTuningRuleCollectionFromJSON,
    SearchTuningRuleCollectionToJSON,
    SearchTuningRuleSortFieldsFromJSON,
    SearchTuningRuleSortFieldsToJSON,
} from '../models';

export interface SearchTuningRulesApiAddSearchTuningRuleRequest {
    searchTuningRule?: SearchTuningRule;
}

export interface SearchTuningRulesApiDeleteSearchTuningRuleRequest {
    searchTuningRuleCode: string;
}

export interface SearchTuningRulesApiGetSearchTuningRuleRequest {
    searchTuningRuleCode: string;
}

export interface SearchTuningRulesApiGetSearchTuningRulesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
}

export interface SearchTuningRulesApiUpdateSearchTuningRuleRequest {
    searchTuningRuleCode: string;
    searchTuningRule?: SearchTuningRule;
}

export interface SearchTuningRulesApiUpdateSearchTuningRuleSortFieldsRequest {
    searchTuningRuleSortFields?: SearchTuningRuleSortFields;
}

/**
 * 
 */
export class SearchTuningRulesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add search tuning rule
     * Add search tuning rule
     */


    async addSearchTuningRuleRaw(requestParameters: SearchTuningRulesApiAddSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchTuningRuleToJSON(requestParameters.searchTuningRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTuningRuleFromJSON(jsonValue));
    }

    /**
     * Add search tuning rule
     * Add search tuning rule
     */
    async addSearchTuningRule(requestParameters: SearchTuningRulesApiAddSearchTuningRuleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule> {
        const response = await this.addSearchTuningRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete search tuning rule
     * Delete search tuning rule
     */


    async deleteSearchTuningRuleRaw(requestParameters: SearchTuningRulesApiDeleteSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.searchTuningRuleCode === null || requestParameters.searchTuningRuleCode === undefined) {
            throw new runtime.RequiredError('searchTuningRuleCode','Required parameter requestParameters.searchTuningRuleCode was null or undefined when calling deleteSearchTuningRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}`.replace(`{${"searchTuningRuleCode"}}`, encodeURIComponent(String(requestParameters.searchTuningRuleCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete search tuning rule
     * Delete search tuning rule
     */
    async deleteSearchTuningRule(requestParameters: SearchTuningRulesApiDeleteSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSearchTuningRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Get search tuning rule
     * Get search tuning rule
     */


    async getSearchTuningRuleRaw(requestParameters: SearchTuningRulesApiGetSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>> {
        if (requestParameters.searchTuningRuleCode === null || requestParameters.searchTuningRuleCode === undefined) {
            throw new runtime.RequiredError('searchTuningRuleCode','Required parameter requestParameters.searchTuningRuleCode was null or undefined when calling getSearchTuningRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}`.replace(`{${"searchTuningRuleCode"}}`, encodeURIComponent(String(requestParameters.searchTuningRuleCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTuningRuleFromJSON(jsonValue));
    }

    /**
     * Get search tuning rule
     * Get search tuning rule
     */
    async getSearchTuningRule(requestParameters: SearchTuningRulesApiGetSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule> {
        const response = await this.getSearchTuningRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get search tuning rule sort fields
     * Get search tuning rule sort fields
     */


    async getSearchTuningRuleSortFieldsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleSortFields>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrulesortfields`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTuningRuleSortFieldsFromJSON(jsonValue));
    }

    /**
     * Get search tuning rule sort fields
     * Get search tuning rule sort fields
     */
    async getSearchTuningRuleSortFields(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleSortFields> {
        const response = await this.getSearchTuningRuleSortFieldsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get search tuning rules
     * Get search tuning rules
     */


    async getSearchTuningRulesRaw(requestParameters: SearchTuningRulesApiGetSearchTuningRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTuningRuleCollectionFromJSON(jsonValue));
    }

    /**
     * Get search tuning rules
     * Get search tuning rules
     */
    async getSearchTuningRules(requestParameters: SearchTuningRulesApiGetSearchTuningRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleCollection> {
        const response = await this.getSearchTuningRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update search tuning rule
     * Update search tuning rule
     */


    async updateSearchTuningRuleRaw(requestParameters: SearchTuningRulesApiUpdateSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRule>> {
        if (requestParameters.searchTuningRuleCode === null || requestParameters.searchTuningRuleCode === undefined) {
            throw new runtime.RequiredError('searchTuningRuleCode','Required parameter requestParameters.searchTuningRuleCode was null or undefined when calling updateSearchTuningRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrules/{searchTuningRuleCode}`.replace(`{${"searchTuningRuleCode"}}`, encodeURIComponent(String(requestParameters.searchTuningRuleCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SearchTuningRuleToJSON(requestParameters.searchTuningRule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTuningRuleFromJSON(jsonValue));
    }

    /**
     * Update search tuning rule
     * Update search tuning rule
     */
    async updateSearchTuningRule(requestParameters: SearchTuningRulesApiUpdateSearchTuningRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRule> {
        const response = await this.updateSearchTuningRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update search tuning rule sort fields
     * Update search tuning rule sort fields
     */


    async updateSearchTuningRuleSortFieldsRaw(requestParameters: SearchTuningRulesApiUpdateSearchTuningRuleSortFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTuningRuleSortFields>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/searchtuningrulesortfields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchTuningRuleSortFieldsToJSON(requestParameters.searchTuningRuleSortFields),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTuningRuleSortFieldsFromJSON(jsonValue));
    }

    /**
     * Update search tuning rule sort fields
     * Update search tuning rule sort fields
     */
    async updateSearchTuningRuleSortFields(requestParameters: SearchTuningRulesApiUpdateSearchTuningRuleSortFieldsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTuningRuleSortFields> {
        const response = await this.updateSearchTuningRuleSortFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
