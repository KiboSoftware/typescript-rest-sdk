/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsTag,
  TagCollection,
  TagNodeTree,
} from '../models';


export namespace tagApiParams { 
    export interface CreateTagRequest {
        responseFields?: string;
        catalogAdminsTag?: CatalogAdminsTag;
    }
    export interface DeleteTagRequest {
        tagCode: string;
    }
    export interface GetNodeTreeRequest {
        tagCode?: string;
        responseFields?: string;
    }
    export interface GetTagRequest {
        tagCode: string;
        responseFields?: string;
    }
    export interface GetTagsRequest {
        path?: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface UpdateTagRequest {
        tagCode: string;
        responseFields?: string;
        catalogAdminsTag?: CatalogAdminsTag;
    }
}
/**
* TagApiService - interface
* 
* @export
* @interface TagApi
*/
export interface TagApiService {
    /**
    * Creates a tag.
    * @summary Create tag
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsTag} [catalogAdminsTag] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TagApiInterface
    */
    createTagRaw(requestParameters: tagApiParams.CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsTag>>;

    /**
    * Creates a tag.
    * Create tag
    */
    createTag(requestParameters: tagApiParams.CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsTag>;

    /**
    * Deletes a Tag specified by its tagCode.
    * @summary Delete tag
    * @param {string} tagCode 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TagApiInterface
    */
    deleteTagRaw(requestParameters: tagApiParams.DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes a Tag specified by its tagCode.
    * Delete tag
    */
    deleteTag(requestParameters: tagApiParams.DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Retrieves the tag collection as tag tree for specified tagCode.
    * @summary Get tag collection as tag tree
    * @param {string} [tagCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TagApiInterface
    */
    getNodeTreeRaw(requestParameters: tagApiParams.GetNodeTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagNodeTree>>;

    /**
    * Retrieves the tag collection as tag tree for specified tagCode.
    * Get tag collection as tag tree
    */
    getNodeTree(requestParameters: tagApiParams.GetNodeTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagNodeTree>;

    /**
    * Retrieves the details of a single tag.
    * @summary Get tag
    * @param {string} tagCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TagApiInterface
    */
    getTagRaw(requestParameters: tagApiParams.GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsTag>>;

    /**
    * Retrieves the details of a single tag.
    * Get tag
    */
    getTag(requestParameters: tagApiParams.GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsTag>;

    /**
    * Retrieves a list of tags.
    * @summary Get tags
    * @param {string} [path] 
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseGroups] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TagApiInterface
    */
    getTagsRaw(requestParameters: tagApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCollection>>;

    /**
    * Retrieves a list of tags.
    * Get tags
    */
    getTags(requestParameters: tagApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCollection>;

    /**
    * Modifies a tag.
    * @summary Update tag
    * @param {string} tagCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsTag} [catalogAdminsTag] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof TagApiInterface
    */
    updateTagRaw(requestParameters: tagApiParams.UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsTag>>;

    /**
    * Modifies a tag.
    * Update tag
    */
    updateTag(requestParameters: tagApiParams.UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsTag>;

}


/**
 * 
 */
export class TagApi extends runtime.BaseAPI implements TagApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a tag.
     * Create tag
     */


    async createTagRaw(requestParameters: tagApiParams.CreateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsTag>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsTag,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a tag.
     * Create tag
     */
    async createTag(requestParameters: tagApiParams.CreateTagRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsTag> {
        const response = await this.createTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Tag specified by its tagCode.
     * Delete tag
     */


    async deleteTagRaw(requestParameters: tagApiParams.DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tagCode === null || requestParameters.tagCode === undefined) {
            throw new runtime.RequiredError('tagCode','Required parameter requestParameters.tagCode was null or undefined when calling deleteTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/tags/{tagCode}`.replace(`{${"tagCode"}}`, encodeURIComponent(String(requestParameters.tagCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Tag specified by its tagCode.
     * Delete tag
     */
    async deleteTag(requestParameters: tagApiParams.DeleteTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the tag collection as tag tree for specified tagCode.
     * Get tag collection as tag tree
     */


    async getNodeTreeRaw(requestParameters: tagApiParams.GetNodeTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagNodeTree>> {
        const queryParameters: any = {};

        if (requestParameters.tagCode !== undefined) {
            queryParameters['tagCode'] = requestParameters.tagCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/tags/node/tree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the tag collection as tag tree for specified tagCode.
     * Get tag collection as tag tree
     */
    async getNodeTree(requestParameters: tagApiParams.GetNodeTreeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagNodeTree> {
        const response = await this.getNodeTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single tag.
     * Get tag
     */


    async getTagRaw(requestParameters: tagApiParams.GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsTag>> {
        if (requestParameters.tagCode === null || requestParameters.tagCode === undefined) {
            throw new runtime.RequiredError('tagCode','Required parameter requestParameters.tagCode was null or undefined when calling getTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/tags/{tagCode}`.replace(`{${"tagCode"}}`, encodeURIComponent(String(requestParameters.tagCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single tag.
     * Get tag
     */
    async getTag(requestParameters: tagApiParams.GetTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsTag> {
        const response = await this.getTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of tags.
     * Get tags
     */


    async getTagsRaw(requestParameters: tagApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCollection>> {
        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of tags.
     * Get tags
     */
    async getTags(requestParameters: tagApiParams.GetTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCollection> {
        const response = await this.getTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies a tag.
     * Update tag
     */


    async updateTagRaw(requestParameters: tagApiParams.UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsTag>> {
        if (requestParameters.tagCode === null || requestParameters.tagCode === undefined) {
            throw new runtime.RequiredError('tagCode','Required parameter requestParameters.tagCode was null or undefined when calling updateTag.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/tags/{tagCode}`.replace(`{${"tagCode"}}`, encodeURIComponent(String(requestParameters.tagCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsTag,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies a tag.
     * Update tag
     */
    async updateTag(requestParameters: tagApiParams.UpdateTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsTag> {
        const response = await this.updateTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
