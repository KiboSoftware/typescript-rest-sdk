/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AttributeInProductType,
  CatalogAdminsProductOption,
  ProductType,
  ProductTypeCollection,
  ProductVariationPagedCollection,
} from '../models';

export interface ProductTypesApiAddExtraRequest {
    productTypeId: number;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiAddOptionRequest {
    productTypeId: number;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiAddProductTypeRequest {
    responseFields?: string;
    productType?: ProductType;
}

export interface ProductTypesApiAddPropertyRequest {
    productTypeId: number;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiAddVariantPropertyRequest {
    productTypeId: number;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiDeleteExtraRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiDeleteOptionRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiDeleteProductTypeRequest {
    productTypeId: number;
}

export interface ProductTypesApiDeletePropertyRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiDeleteVariantPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiGenerateProductVariationsRequest {
    productTypeId: number;
    productCode?: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
    catalogAdminsProductOption?: Array<CatalogAdminsProductOption>;
}

export interface ProductTypesApiGetExtraRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductTypesApiGetExtrasRequest {
    productTypeId: number;
    responseFields?: string;
}

export interface ProductTypesApiGetOptionRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductTypesApiGetOptionsRequest {
    productTypeId: number;
    responseFields?: string;
}

export interface ProductTypesApiGetProductTypeRequest {
    productTypeId: number;
    responseFields?: string;
}

export interface ProductTypesApiGetProductTypesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface ProductTypesApiGetPropertiesRequest {
    productTypeId: number;
    responseFields?: string;
}

export interface ProductTypesApiGetPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductTypesApiGetVariantPropertiesRequest {
    productTypeId: number;
    responseFields?: string;
}

export interface ProductTypesApiGetVariantPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductTypesApiUpdateExtraRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiUpdateOptionRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiUpdateProductTypeRequest {
    productTypeId: number;
    responseFields?: string;
    productType?: ProductType;
}

export interface ProductTypesApiUpdatePropertyRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiUpdateVariantPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
    responseFields?: string;
    attributeInProductType?: AttributeInProductType;
}

/**
 * ProductTypesApi - interface
 * 
 * @export
 * @interface ProductTypesApiInterface
 */
export interface ProductTypesApiInterface {
    /**
     * Add extra.
     * @summary Add extra
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    addExtraRaw(requestParameters: ProductTypesApiAddExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Add extra.
     * Add extra
     */
    addExtra(requestParameters: ProductTypesApiAddExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Add option.
     * @summary Add option
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    addOptionRaw(requestParameters: ProductTypesApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Add option.
     * Add option
     */
    addOption(requestParameters: ProductTypesApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Get product type by Id.
     * @summary Add product type
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductType} [productType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    addProductTypeRaw(requestParameters: ProductTypesApiAddProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>>;

    /**
     * Get product type by Id.
     * Add product type
     */
    addProductType(requestParameters: ProductTypesApiAddProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType>;

    /**
     * Add property.
     * @summary Add product type property
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    addPropertyRaw(requestParameters: ProductTypesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Add property.
     * Add product type property
     */
    addProperty(requestParameters: ProductTypesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Add variant property.
     * @summary Add variant property
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    addVariantPropertyRaw(requestParameters: ProductTypesApiAddVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Add variant property.
     * Add variant property
     */
    addVariantProperty(requestParameters: ProductTypesApiAddVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Delete extra.
     * @summary Delete extra
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    deleteExtraRaw(requestParameters: ProductTypesApiDeleteExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete extra.
     * Delete extra
     */
    deleteExtra(requestParameters: ProductTypesApiDeleteExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete option.
     * @summary Delete option
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    deleteOptionRaw(requestParameters: ProductTypesApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete option.
     * Delete option
     */
    deleteOption(requestParameters: ProductTypesApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete product type.
     * @summary Delete product type
     * @param {number} productTypeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    deleteProductTypeRaw(requestParameters: ProductTypesApiDeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete product type.
     * Delete product type
     */
    deleteProductType(requestParameters: ProductTypesApiDeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete property.
     * @summary Delete product type property
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    deletePropertyRaw(requestParameters: ProductTypesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete property.
     * Delete product type property
     */
    deleteProperty(requestParameters: ProductTypesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Delete variant property.
     * @summary Delete variant property
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    deleteVariantPropertyRaw(requestParameters: ProductTypesApiDeleteVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete variant property.
     * Delete variant property
     */
    deleteVariantProperty(requestParameters: ProductTypesApiDeleteVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Generate product variations
     * @param {number} productTypeId 
     * @param {string} [productCode] 
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CatalogAdminsProductOption>} [catalogAdminsProductOption] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    generateProductVariationsRaw(requestParameters: ProductTypesApiGenerateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationPagedCollection>>;

    /**
     * 
     * Generate product variations
     */
    generateProductVariations(requestParameters: ProductTypesApiGenerateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationPagedCollection>;

    /**
     * Get extra.
     * @summary Get extra
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getExtraRaw(requestParameters: ProductTypesApiGetExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Get extra.
     * Get extra
     */
    getExtra(requestParameters: ProductTypesApiGetExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Get extras.
     * @summary Get extras
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getExtrasRaw(requestParameters: ProductTypesApiGetExtrasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>>;

    /**
     * Get extras.
     * Get extras
     */
    getExtras(requestParameters: ProductTypesApiGetExtrasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>>;

    /**
     * Get individual option.
     * @summary Get option
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getOptionRaw(requestParameters: ProductTypesApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Get individual option.
     * Get option
     */
    getOption(requestParameters: ProductTypesApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Get options for the product type.
     * @summary Get options
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getOptionsRaw(requestParameters: ProductTypesApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>>;

    /**
     * Get options for the product type.
     * Get options
     */
    getOptions(requestParameters: ProductTypesApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>>;

    /**
     * Get product type by Id.
     * @summary Get product type
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getProductTypeRaw(requestParameters: ProductTypesApiGetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>>;

    /**
     * Get product type by Id.
     * Get product type
     */
    getProductType(requestParameters: ProductTypesApiGetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType>;

    /**
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * @summary Get product types
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a single query. The default value is 20 and the maximum value is 200.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending or descending order. For example, to sort the results by “ID” ascending then by “CreateDate” descending, use: id asc,createdate desc.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseGroups] Used to get more specific information from the request. For example to get discounts applied to a product use the AppliedProducts response group. Available response groups: ApplicableDiscounts, VariationOptions, and BaseProductCode.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getProductTypesRaw(requestParameters: ProductTypesApiGetProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeCollection>>;

    /**
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * Get product types
     */
    getProductTypes(requestParameters: ProductTypesApiGetProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeCollection>;

    /**
     * Get properties.
     * @summary Get product type properties
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getPropertiesRaw(requestParameters: ProductTypesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>>;

    /**
     * Get properties.
     * Get product type properties
     */
    getProperties(requestParameters: ProductTypesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>>;

    /**
     * Get property.
     * @summary Get product type property
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getPropertyRaw(requestParameters: ProductTypesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Get property.
     * Get product type property
     */
    getProperty(requestParameters: ProductTypesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Get variant properties.
     * @summary Get variant properties
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getVariantPropertiesRaw(requestParameters: ProductTypesApiGetVariantPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>>;

    /**
     * Get variant properties.
     * Get variant properties
     */
    getVariantProperties(requestParameters: ProductTypesApiGetVariantPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>>;

    /**
     * Get variant property.
     * @summary Get variant property
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    getVariantPropertyRaw(requestParameters: ProductTypesApiGetVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Get variant property.
     * Get variant property
     */
    getVariantProperty(requestParameters: ProductTypesApiGetVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Update extra.
     * @summary Update extra
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    updateExtraRaw(requestParameters: ProductTypesApiUpdateExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Update extra.
     * Update extra
     */
    updateExtra(requestParameters: ProductTypesApiUpdateExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Update option.
     * @summary Update option
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    updateOptionRaw(requestParameters: ProductTypesApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Update option.
     * Update option
     */
    updateOption(requestParameters: ProductTypesApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Update product type.
     * @summary Update product type
     * @param {number} productTypeId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ProductType} [productType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    updateProductTypeRaw(requestParameters: ProductTypesApiUpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>>;

    /**
     * Update product type.
     * Update product type
     */
    updateProductType(requestParameters: ProductTypesApiUpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType>;

    /**
     * Update property.
     * @summary Update product type property
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    updatePropertyRaw(requestParameters: ProductTypesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Update property.
     * Update product type property
     */
    updateProperty(requestParameters: ProductTypesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

    /**
     * Update variant property.
     * @summary Update variant property
     * @param {number} productTypeId 
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeInProductType} [attributeInProductType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTypesApiInterface
     */
    updateVariantPropertyRaw(requestParameters: ProductTypesApiUpdateVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>>;

    /**
     * Update variant property.
     * Update variant property
     */
    updateVariantProperty(requestParameters: ProductTypesApiUpdateVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType>;

}

/**
 * 
 */
export class ProductTypesApi extends runtime.BaseAPI implements ProductTypesApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add extra.
     * Add extra
     */


    async addExtraRaw(requestParameters: ProductTypesApiAddExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addExtra.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add extra.
     * Add extra
     */
    async addExtra(requestParameters: ProductTypesApiAddExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add option.
     * Add option
     */


    async addOptionRaw(requestParameters: ProductTypesApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addOption.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add option.
     * Add option
     */
    async addOption(requestParameters: ProductTypesApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product type by Id.
     * Add product type
     */


    async addProductTypeRaw(requestParameters: ProductTypesApiAddProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get product type by Id.
     * Add product type
     */
    async addProductType(requestParameters: ProductTypesApiAddProductTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.addProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add property.
     * Add product type property
     */


    async addPropertyRaw(requestParameters: ProductTypesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add property.
     * Add product type property
     */
    async addProperty(requestParameters: ProductTypesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add variant property.
     * Add variant property
     */


    async addVariantPropertyRaw(requestParameters: ProductTypesApiAddVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addVariantProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add variant property.
     * Add variant property
     */
    async addVariantProperty(requestParameters: ProductTypesApiAddVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addVariantPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete extra.
     * Delete extra
     */


    async deleteExtraRaw(requestParameters: ProductTypesApiDeleteExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteExtra.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete extra.
     * Delete extra
     */
    async deleteExtra(requestParameters: ProductTypesApiDeleteExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtraRaw(requestParameters, initOverrides);
    }

    /**
     * Delete option.
     * Delete option
     */


    async deleteOptionRaw(requestParameters: ProductTypesApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete option.
     * Delete option
     */
    async deleteOption(requestParameters: ProductTypesApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOptionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete product type.
     * Delete product type
     */


    async deleteProductTypeRaw(requestParameters: ProductTypesApiDeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete product type.
     * Delete product type
     */
    async deleteProductType(requestParameters: ProductTypesApiDeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Delete property.
     * Delete product type property
     */


    async deletePropertyRaw(requestParameters: ProductTypesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete property.
     * Delete product type property
     */
    async deleteProperty(requestParameters: ProductTypesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Delete variant property.
     * Delete variant property
     */


    async deleteVariantPropertyRaw(requestParameters: ProductTypesApiDeleteVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteVariantProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteVariantProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete variant property.
     * Delete variant property
     */
    async deleteVariantProperty(requestParameters: ProductTypesApiDeleteVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVariantPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Generate product variations
     */


    async generateProductVariationsRaw(requestParameters: ProductTypesApiGenerateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationPagedCollection>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling generateProductVariations.');
        }

        const queryParameters: any = {};

        if (requestParameters.productCode !== undefined) {
            queryParameters['productCode'] = requestParameters.productCode;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/variations`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsProductOption,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Generate product variations
     */
    async generateProductVariations(requestParameters: ProductTypesApiGenerateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationPagedCollection> {
        const response = await this.generateProductVariationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extra.
     * Get extra
     */


    async getExtraRaw(requestParameters: ProductTypesApiGetExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getExtra.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getExtra.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get extra.
     * Get extra
     */
    async getExtra(requestParameters: ProductTypesApiGetExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extras.
     * Get extras
     */


    async getExtrasRaw(requestParameters: ProductTypesApiGetExtrasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getExtras.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get extras.
     * Get extras
     */
    async getExtras(requestParameters: ProductTypesApiGetExtrasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getExtrasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get individual option.
     * Get option
     */


    async getOptionRaw(requestParameters: ProductTypesApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getOption.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get individual option.
     * Get option
     */
    async getOption(requestParameters: ProductTypesApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get options for the product type.
     * Get options
     */


    async getOptionsRaw(requestParameters: ProductTypesApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get options for the product type.
     * Get options
     */
    async getOptions(requestParameters: ProductTypesApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product type by Id.
     * Get product type
     */


    async getProductTypeRaw(requestParameters: ProductTypesApiGetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getProductType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get product type by Id.
     * Get product type
     */
    async getProductType(requestParameters: ProductTypesApiGetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.getProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * Get product types
     */


    async getProductTypesRaw(requestParameters: ProductTypesApiGetProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * Get product types
     */
    async getProductTypes(requestParameters: ProductTypesApiGetProductTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeCollection> {
        const response = await this.getProductTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get properties.
     * Get product type properties
     */


    async getPropertiesRaw(requestParameters: ProductTypesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get properties.
     * Get product type properties
     */
    async getProperties(requestParameters: ProductTypesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get property.
     * Get product type property
     */


    async getPropertyRaw(requestParameters: ProductTypesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get property.
     * Get product type property
     */
    async getProperty(requestParameters: ProductTypesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get variant properties.
     * Get variant properties
     */


    async getVariantPropertiesRaw(requestParameters: ProductTypesApiGetVariantPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getVariantProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get variant properties.
     * Get variant properties
     */
    async getVariantProperties(requestParameters: ProductTypesApiGetVariantPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getVariantPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get variant property.
     * Get variant property
     */


    async getVariantPropertyRaw(requestParameters: ProductTypesApiGetVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getVariantProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getVariantProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get variant property.
     * Get variant property
     */
    async getVariantProperty(requestParameters: ProductTypesApiGetVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getVariantPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update extra.
     * Update extra
     */


    async updateExtraRaw(requestParameters: ProductTypesApiUpdateExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateExtra.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateExtra.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update extra.
     * Update extra
     */
    async updateExtra(requestParameters: ProductTypesApiUpdateExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updateExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update option.
     * Update option
     */


    async updateOptionRaw(requestParameters: ProductTypesApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateOption.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update option.
     * Update option
     */
    async updateOption(requestParameters: ProductTypesApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updateOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update product type.
     * Update product type
     */


    async updateProductTypeRaw(requestParameters: ProductTypesApiUpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateProductType.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update product type.
     * Update product type
     */
    async updateProductType(requestParameters: ProductTypesApiUpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.updateProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update property.
     * Update product type property
     */


    async updatePropertyRaw(requestParameters: ProductTypesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update property.
     * Update product type property
     */
    async updateProperty(requestParameters: ProductTypesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updatePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update variant property.
     * Update variant property
     */


    async updateVariantPropertyRaw(requestParameters: ProductTypesApiUpdateVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateVariantProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateVariantProperty.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeInProductType,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update variant property.
     * Update variant property
     */
    async updateVariantProperty(requestParameters: ProductTypesApiUpdateVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updateVariantPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
