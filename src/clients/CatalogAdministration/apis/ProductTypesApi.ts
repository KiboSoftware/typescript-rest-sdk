/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AttributeInProductType,
  ProductOption,
  ProductType,
  ProductTypeCollection,
  ProductVariationPagedCollection,
} from '../models';
import {
    AttributeInProductTypeFromJSON,
    AttributeInProductTypeToJSON,
    ProductOptionFromJSON,
    ProductOptionToJSON,
    ProductTypeFromJSON,
    ProductTypeToJSON,
    ProductTypeCollectionFromJSON,
    ProductTypeCollectionToJSON,
    ProductVariationPagedCollectionFromJSON,
    ProductVariationPagedCollectionToJSON,
} from '../models';

export interface ProductTypesApiAddExtraRequest {
    productTypeId: number;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiAddOptionRequest {
    productTypeId: number;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiAddProductTypeRequest {
    productType?: ProductType;
}

export interface ProductTypesApiAddPropertyRequest {
    productTypeId: number;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiAddVariantPropertyRequest {
    productTypeId: number;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiDeleteExtraRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiDeleteOptionRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiDeleteProductTypeRequest {
    productTypeId: number;
}

export interface ProductTypesApiDeletePropertyRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiDeleteVariantPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiGenerateProductVariationsRequest {
    productTypeId: number;
    productCode?: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    productOption?: Array<ProductOption>;
}

export interface ProductTypesApiGetExtraRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiGetExtrasRequest {
    productTypeId: number;
}

export interface ProductTypesApiGetOptionRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiGetOptionsRequest {
    productTypeId: number;
}

export interface ProductTypesApiGetProductTypeRequest {
    productTypeId: number;
}

export interface ProductTypesApiGetProductTypesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
}

export interface ProductTypesApiGetPropertiesRequest {
    productTypeId: number;
}

export interface ProductTypesApiGetPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiGetVariantPropertiesRequest {
    productTypeId: number;
}

export interface ProductTypesApiGetVariantPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
}

export interface ProductTypesApiUpdateExtraRequest {
    productTypeId: number;
    attributeFQN: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiUpdateOptionRequest {
    productTypeId: number;
    attributeFQN: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiUpdateProductTypeRequest {
    productTypeId: number;
    productType?: ProductType;
}

export interface ProductTypesApiUpdatePropertyRequest {
    productTypeId: number;
    attributeFQN: string;
    attributeInProductType?: AttributeInProductType;
}

export interface ProductTypesApiUpdateVariantPropertyRequest {
    productTypeId: number;
    attributeFQN: string;
    attributeInProductType?: AttributeInProductType;
}

/**
 * 
 */
export class ProductTypesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add extra.
     * Add extra
     */


    async addExtraRaw(requestParameters: ProductTypesApiAddExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Add extra.
     * Add extra
     */
    async addExtra(requestParameters: ProductTypesApiAddExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add option.
     * Add option
     */


    async addOptionRaw(requestParameters: ProductTypesApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Add option.
     * Add option
     */
    async addOption(requestParameters: ProductTypesApiAddOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product type by Id.
     * Add product type
     */


    async addProductTypeRaw(requestParameters: ProductTypesApiAddProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductTypeToJSON(requestParameters.productType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeFromJSON(jsonValue));
    }

    /**
     * Get product type by Id.
     * Add product type
     */
    async addProductType(requestParameters: ProductTypesApiAddProductTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.addProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add property.
     * Add product type property
     */


    async addPropertyRaw(requestParameters: ProductTypesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Add property.
     * Add product type property
     */
    async addProperty(requestParameters: ProductTypesApiAddPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add variant property.
     * Add variant property
     */


    async addVariantPropertyRaw(requestParameters: ProductTypesApiAddVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling addVariantProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Add variant property.
     * Add variant property
     */
    async addVariantProperty(requestParameters: ProductTypesApiAddVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.addVariantPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete extra.
     * Delete extra
     */


    async deleteExtraRaw(requestParameters: ProductTypesApiDeleteExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteExtra.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete extra.
     * Delete extra
     */
    async deleteExtra(requestParameters: ProductTypesApiDeleteExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExtraRaw(requestParameters, initOverrides);
    }

    /**
     * Delete option.
     * Delete option
     */


    async deleteOptionRaw(requestParameters: ProductTypesApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete option.
     * Delete option
     */
    async deleteOption(requestParameters: ProductTypesApiDeleteOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOptionRaw(requestParameters, initOverrides);
    }

    /**
     * Delete product type.
     * Delete product type
     */


    async deleteProductTypeRaw(requestParameters: ProductTypesApiDeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete product type.
     * Delete product type
     */
    async deleteProductType(requestParameters: ProductTypesApiDeleteProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProductTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Delete property.
     * Delete product type property
     */


    async deletePropertyRaw(requestParameters: ProductTypesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete property.
     * Delete product type property
     */
    async deleteProperty(requestParameters: ProductTypesApiDeletePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Delete variant property.
     * Delete variant property
     */


    async deleteVariantPropertyRaw(requestParameters: ProductTypesApiDeleteVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling deleteVariantProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteVariantProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete variant property.
     * Delete variant property
     */
    async deleteVariantProperty(requestParameters: ProductTypesApiDeleteVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVariantPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Generate product variations
     */


    async generateProductVariationsRaw(requestParameters: ProductTypesApiGenerateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductVariationPagedCollection>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling generateProductVariations.');
        }

        const queryParameters: any = {};

        if (requestParameters.productCode !== undefined) {
            queryParameters['productCode'] = requestParameters.productCode;
        }

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/variations`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productOption.map(ProductOptionToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductVariationPagedCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Generate product variations
     */
    async generateProductVariations(requestParameters: ProductTypesApiGenerateProductVariationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductVariationPagedCollection> {
        const response = await this.generateProductVariationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extra.
     * Get extra
     */


    async getExtraRaw(requestParameters: ProductTypesApiGetExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getExtra.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Get extra.
     * Get extra
     */
    async getExtra(requestParameters: ProductTypesApiGetExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extras.
     * Get extras
     */


    async getExtrasRaw(requestParameters: ProductTypesApiGetExtrasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getExtras.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttributeInProductTypeFromJSON));
    }

    /**
     * Get extras.
     * Get extras
     */
    async getExtras(requestParameters: ProductTypesApiGetExtrasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getExtrasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get individual option.
     * Get option
     */


    async getOptionRaw(requestParameters: ProductTypesApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Get individual option.
     * Get option
     */
    async getOption(requestParameters: ProductTypesApiGetOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get options for the product type.
     * Get options
     */


    async getOptionsRaw(requestParameters: ProductTypesApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttributeInProductTypeFromJSON));
    }

    /**
     * Get options for the product type.
     * Get options
     */
    async getOptions(requestParameters: ProductTypesApiGetOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product type by Id.
     * Get product type
     */


    async getProductTypeRaw(requestParameters: ProductTypesApiGetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeFromJSON(jsonValue));
    }

    /**
     * Get product type by Id.
     * Get product type
     */
    async getProductType(requestParameters: ProductTypesApiGetProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.getProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * Get product types
     */


    async getProductTypesRaw(requestParameters: ProductTypesApiGetProductTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductTypeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of product types according to any specified filter criteria and sort options.
     * Get product types
     */
    async getProductTypes(requestParameters: ProductTypesApiGetProductTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductTypeCollection> {
        const response = await this.getProductTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get properties.
     * Get product type properties
     */


    async getPropertiesRaw(requestParameters: ProductTypesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttributeInProductTypeFromJSON));
    }

    /**
     * Get properties.
     * Get product type properties
     */
    async getProperties(requestParameters: ProductTypesApiGetPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get property.
     * Get product type property
     */


    async getPropertyRaw(requestParameters: ProductTypesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Get property.
     * Get product type property
     */
    async getProperty(requestParameters: ProductTypesApiGetPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get variant properties.
     * Get variant properties
     */


    async getVariantPropertiesRaw(requestParameters: ProductTypesApiGetVariantPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeInProductType>>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getVariantProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttributeInProductTypeFromJSON));
    }

    /**
     * Get variant properties.
     * Get variant properties
     */
    async getVariantProperties(requestParameters: ProductTypesApiGetVariantPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeInProductType>> {
        const response = await this.getVariantPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get variant property.
     * Get variant property
     */


    async getVariantPropertyRaw(requestParameters: ProductTypesApiGetVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling getVariantProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getVariantProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Get variant property.
     * Get variant property
     */
    async getVariantProperty(requestParameters: ProductTypesApiGetVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.getVariantPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update extra.
     * Update extra
     */


    async updateExtraRaw(requestParameters: ProductTypesApiUpdateExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateExtra.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateExtra.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Extras/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Update extra.
     * Update extra
     */
    async updateExtra(requestParameters: ProductTypesApiUpdateExtraRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updateExtraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update option.
     * Update option
     */


    async updateOptionRaw(requestParameters: ProductTypesApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateOption.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Options/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Update option.
     * Update option
     */
    async updateOption(requestParameters: ProductTypesApiUpdateOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updateOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update product type.
     * Update product type
     */


    async updateProductTypeRaw(requestParameters: ProductTypesApiUpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateProductType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductTypeToJSON(requestParameters.productType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductTypeFromJSON(jsonValue));
    }

    /**
     * Update product type.
     * Update product type
     */
    async updateProductType(requestParameters: ProductTypesApiUpdateProductTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductType> {
        const response = await this.updateProductTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update property.
     * Update product type property
     */


    async updatePropertyRaw(requestParameters: ProductTypesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/Properties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Update property.
     * Update product type property
     */
    async updateProperty(requestParameters: ProductTypesApiUpdatePropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updatePropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update variant property.
     * Update variant property
     */


    async updateVariantPropertyRaw(requestParameters: ProductTypesApiUpdateVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeInProductType>> {
        if (requestParameters.productTypeId === null || requestParameters.productTypeId === undefined) {
            throw new runtime.RequiredError('productTypeId','Required parameter requestParameters.productTypeId was null or undefined when calling updateVariantProperty.');
        }

        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateVariantProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/producttypes/{productTypeId}/VariantProperties/{attributeFQN}`.replace(`{${"productTypeId"}}`, encodeURIComponent(String(requestParameters.productTypeId))).replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AttributeInProductTypeToJSON(requestParameters.attributeInProductType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeInProductTypeFromJSON(jsonValue));
    }

    /**
     * Update variant property.
     * Update variant property
     */
    async updateVariantProperty(requestParameters: ProductTypesApiUpdateVariantPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeInProductType> {
        const response = await this.updateVariantPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
