/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  Facet,
  FacetCollection,
  FacetSet,
} from '../models';
import {
    FacetFromJSON,
    FacetToJSON,
    FacetCollectionFromJSON,
    FacetCollectionToJSON,
    FacetSetFromJSON,
    FacetSetToJSON,
} from '../models';

export interface FacetsApiAddFacetRequest {
    facet?: Facet;
}

export interface FacetsApiDeleteFacetByIdRequest {
    facetId: number;
}

export interface FacetsApiGetFacetRequest {
    facetId: number;
    validate?: boolean;
}

export interface FacetsApiGetFacetCategoryListRequest {
    categoryId?: number;
    categoryCode?: string;
    includeAvailable?: boolean;
    validate?: boolean;
}

export interface FacetsApiGetFacetCategoryListLegacyRequest {
    categoryId: number;
    includeAvailable?: boolean;
    validate?: boolean;
}

export interface FacetsApiUpdateFacetRequest {
    facetId: number;
    facet?: Facet;
}

export interface FacetsApiUpdateFacetSetRequest {
    categoryId?: number;
    categoryCode?: string;
    facetSet?: FacetSet;
}

/**
 * 
 */
export class FacetsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a new Facet to a category in a catalog.
     * Add facet
     */


    async addFacetRaw(requestParameters: FacetsApiAddFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Facet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FacetToJSON(requestParameters.facet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetFromJSON(jsonValue));
    }

    /**
     * Adds a new Facet to a category in a catalog.
     * Add facet
     */
    async addFacet(requestParameters: FacetsApiAddFacetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Facet> {
        const response = await this.addFacetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the Facet definition from the store.
     * Delete facet
     */


    async deleteFacetByIdRaw(requestParameters: FacetsApiDeleteFacetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.facetId === null || requestParameters.facetId === undefined) {
            throw new runtime.RequiredError('facetId','Required parameter requestParameters.facetId was null or undefined when calling deleteFacetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/{facetId}`.replace(`{${"facetId"}}`, encodeURIComponent(String(requestParameters.facetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Facet definition from the store.
     * Delete facet
     */
    async deleteFacetById(requestParameters: FacetsApiDeleteFacetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFacetByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of a Facet Definition
     * Get facet
     */


    async getFacetRaw(requestParameters: FacetsApiGetFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Facet>> {
        if (requestParameters.facetId === null || requestParameters.facetId === undefined) {
            throw new runtime.RequiredError('facetId','Required parameter requestParameters.facetId was null or undefined when calling getFacet.');
        }

        const queryParameters: any = {};

        if (requestParameters.validate !== undefined) {
            queryParameters['validate'] = requestParameters.validate;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/{facetId}`.replace(`{${"facetId"}}`, encodeURIComponent(String(requestParameters.facetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a Facet Definition
     * Get facet
     */
    async getFacet(requestParameters: FacetsApiGetFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Facet> {
        const response = await this.getFacetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list
     */


    async getFacetCategoryListRaw(requestParameters: FacetsApiGetFacetCategoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>> {
        const queryParameters: any = {};

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.categoryCode !== undefined) {
            queryParameters['categoryCode'] = requestParameters.categoryCode;
        }

        if (requestParameters.includeAvailable !== undefined) {
            queryParameters['includeAvailable'] = requestParameters.includeAvailable;
        }

        if (requestParameters.validate !== undefined) {
            queryParameters['validate'] = requestParameters.validate;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetSetFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list
     */
    async getFacetCategoryList(requestParameters: FacetsApiGetFacetCategoryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet> {
        const response = await this.getFacetCategoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list (legacy)
     */


    async getFacetCategoryListLegacyRaw(requestParameters: FacetsApiGetFacetCategoryListLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getFacetCategoryListLegacy.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAvailable !== undefined) {
            queryParameters['includeAvailable'] = requestParameters.includeAvailable;
        }

        if (requestParameters.validate !== undefined) {
            queryParameters['validate'] = requestParameters.validate;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/category/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetSetFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list (legacy)
     */
    async getFacetCategoryListLegacy(requestParameters: FacetsApiGetFacetCategoryListLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet> {
        const response = await this.getFacetCategoryListLegacyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the list of Facet Definition
     * Get facets
     */


    async getFacetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves the list of Facet Definition
     * Get facets
     */
    async getFacets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetCollection> {
        const response = await this.getFacetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */


    async updateFacetRaw(requestParameters: FacetsApiUpdateFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Facet>> {
        if (requestParameters.facetId === null || requestParameters.facetId === undefined) {
            throw new runtime.RequiredError('facetId','Required parameter requestParameters.facetId was null or undefined when calling updateFacet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/{facetId}`.replace(`{${"facetId"}}`, encodeURIComponent(String(requestParameters.facetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FacetToJSON(requestParameters.facet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetFromJSON(jsonValue));
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */
    async updateFacet(requestParameters: FacetsApiUpdateFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Facet> {
        const response = await this.updateFacetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */


    async updateFacetSetRaw(requestParameters: FacetsApiUpdateFacetSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>> {
        const queryParameters: any = {};

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.categoryCode !== undefined) {
            queryParameters['categoryCode'] = requestParameters.categoryCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/set/edit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FacetSetToJSON(requestParameters.facetSet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetSetFromJSON(jsonValue));
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */
    async updateFacetSet(requestParameters: FacetsApiUpdateFacetSetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet> {
        const response = await this.updateFacetSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
