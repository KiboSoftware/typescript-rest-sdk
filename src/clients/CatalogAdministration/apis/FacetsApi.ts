/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsFacet,
  FacetCollection,
  FacetSet,
} from '../models';


export namespace facetsApiParams { 
    export interface AddFacetRequest {
        responseFields?: string;
        catalogAdminsFacet?: CatalogAdminsFacet;
    }
    export interface DeleteFacetByIdRequest {
        facetId: number;
    }
    export interface GetFacetRequest {
        facetId: number;
        validate?: boolean;
        responseFields?: string;
    }
    export interface GetFacetCategoryListRequest {
        categoryId?: number;
        categoryCode?: string;
        includeAvailable?: boolean;
        validate?: boolean;
        responseFields?: string;
    }
    export interface GetFacetCategoryListLegacyRequest {
        categoryId: number;
        includeAvailable?: boolean;
        validate?: boolean;
        responseFields?: string;
    }
    export interface GetFacetsRequest {
        responseFields?: string;
    }
    export interface UpdateFacetRequest {
        facetId: number;
        responseFields?: string;
        catalogAdminsFacet?: CatalogAdminsFacet;
    }
    export interface UpdateFacetSetRequest {
        categoryId?: number;
        categoryCode?: string;
        responseFields?: string;
        facetSet?: FacetSet;
    }
}
/**
* FacetsApiService - interface
* 
* @export
* @interface FacetsApi
*/
export interface FacetsApiService {
    /**
    * Adds a new Facet to a category in a catalog.
    * @summary Add facet
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsFacet} [catalogAdminsFacet] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    addFacetRaw(requestParameters: facetsApiParams.AddFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsFacet>>;

    /**
    * Adds a new Facet to a category in a catalog.
    * Add facet
    */
    addFacet(requestParameters: facetsApiParams.AddFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsFacet>;

    /**
    * Deletes the Facet definition from the store.
    * @summary Delete facet
    * @param {number} facetId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    deleteFacetByIdRaw(requestParameters: facetsApiParams.DeleteFacetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes the Facet definition from the store.
    * Delete facet
    */
    deleteFacetById(requestParameters: facetsApiParams.DeleteFacetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Retrieves the details of a Facet Definition
    * @summary Get facet
    * @param {number} facetId 
    * @param {boolean} [validate] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    getFacetRaw(requestParameters: facetsApiParams.GetFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsFacet>>;

    /**
    * Retrieves the details of a Facet Definition
    * Get facet
    */
    getFacet(requestParameters: facetsApiParams.GetFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsFacet>;

    /**
    * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
    * @summary Get facet category list
    * @param {number} [categoryId] 
    * @param {string} [categoryCode] 
    * @param {boolean} [includeAvailable] 
    * @param {boolean} [validate] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    getFacetCategoryListRaw(requestParameters: facetsApiParams.GetFacetCategoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>>;

    /**
    * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
    * Get facet category list
    */
    getFacetCategoryList(requestParameters: facetsApiParams.GetFacetCategoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet>;

    /**
    * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
    * @summary Get facet category list (legacy)
    * @param {number} categoryId 
    * @param {boolean} [includeAvailable] 
    * @param {boolean} [validate] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    getFacetCategoryListLegacyRaw(requestParameters: facetsApiParams.GetFacetCategoryListLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>>;

    /**
    * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
    * Get facet category list (legacy)
    */
    getFacetCategoryListLegacy(requestParameters: facetsApiParams.GetFacetCategoryListLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet>;

    /**
    * Retrieves the list of Facet Definition
    * @summary Get facets
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    getFacetsRaw(requestParameters: facetsApiParams.GetFacetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetCollection>>;

    /**
    * Retrieves the list of Facet Definition
    * Get facets
    */
    getFacets(requestParameters: facetsApiParams.GetFacetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetCollection>;

    /**
    * Modifies a Facet definition.
    * @summary Update facet
    * @param {number} facetId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsFacet} [catalogAdminsFacet] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    updateFacetRaw(requestParameters: facetsApiParams.UpdateFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsFacet>>;

    /**
    * Modifies a Facet definition.
    * Update facet
    */
    updateFacet(requestParameters: facetsApiParams.UpdateFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsFacet>;

    /**
    * Modifies a Facet definition.
    * @summary Update facet
    * @param {number} [categoryId] 
    * @param {string} [categoryCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {FacetSet} [facetSet] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof FacetsApiInterface
    */
    updateFacetSetRaw(requestParameters: facetsApiParams.UpdateFacetSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>>;

    /**
    * Modifies a Facet definition.
    * Update facet
    */
    updateFacetSet(requestParameters: facetsApiParams.UpdateFacetSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet>;

}


/**
 * 
 */
export class FacetsApi extends runtime.BaseAPI implements FacetsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a new Facet to a category in a catalog.
     * Add facet
     */


    async addFacetRaw(requestParameters: facetsApiParams.AddFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsFacet>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsFacet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a new Facet to a category in a catalog.
     * Add facet
     */
    async addFacet(requestParameters: facetsApiParams.AddFacetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsFacet> {
        const response = await this.addFacetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the Facet definition from the store.
     * Delete facet
     */


    async deleteFacetByIdRaw(requestParameters: facetsApiParams.DeleteFacetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.facetId === null || requestParameters.facetId === undefined) {
            throw new runtime.RequiredError('facetId','Required parameter requestParameters.facetId was null or undefined when calling deleteFacetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/{facetId}`.replace(`{${"facetId"}}`, encodeURIComponent(String(requestParameters.facetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Facet definition from the store.
     * Delete facet
     */
    async deleteFacetById(requestParameters: facetsApiParams.DeleteFacetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFacetByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of a Facet Definition
     * Get facet
     */


    async getFacetRaw(requestParameters: facetsApiParams.GetFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsFacet>> {
        if (requestParameters.facetId === null || requestParameters.facetId === undefined) {
            throw new runtime.RequiredError('facetId','Required parameter requestParameters.facetId was null or undefined when calling getFacet.');
        }

        const queryParameters: any = {};

        if (requestParameters.validate !== undefined) {
            queryParameters['validate'] = requestParameters.validate;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/{facetId}`.replace(`{${"facetId"}}`, encodeURIComponent(String(requestParameters.facetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a Facet Definition
     * Get facet
     */
    async getFacet(requestParameters: facetsApiParams.GetFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsFacet> {
        const response = await this.getFacetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list
     */


    async getFacetCategoryListRaw(requestParameters: facetsApiParams.GetFacetCategoryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>> {
        const queryParameters: any = {};

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.categoryCode !== undefined) {
            queryParameters['categoryCode'] = requestParameters.categoryCode;
        }

        if (requestParameters.includeAvailable !== undefined) {
            queryParameters['includeAvailable'] = requestParameters.includeAvailable;
        }

        if (requestParameters.validate !== undefined) {
            queryParameters['validate'] = requestParameters.validate;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/category`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list
     */
    async getFacetCategoryList(requestParameters: facetsApiParams.GetFacetCategoryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet> {
        const response = await this.getFacetCategoryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list (legacy)
     */


    async getFacetCategoryListLegacyRaw(requestParameters: facetsApiParams.GetFacetCategoryListLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getFacetCategoryListLegacy.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAvailable !== undefined) {
            queryParameters['includeAvailable'] = requestParameters.includeAvailable;
        }

        if (requestParameters.validate !== undefined) {
            queryParameters['validate'] = requestParameters.validate;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/category/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of configured, and optionally available, Facet Configurations for the specified category.
     * Get facet category list (legacy)
     */
    async getFacetCategoryListLegacy(requestParameters: facetsApiParams.GetFacetCategoryListLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet> {
        const response = await this.getFacetCategoryListLegacyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the list of Facet Definition
     * Get facets
     */


    async getFacetsRaw(requestParameters: facetsApiParams.GetFacetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the list of Facet Definition
     * Get facets
     */
    async getFacets(requestParameters: facetsApiParams.GetFacetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetCollection> {
        const response = await this.getFacetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */


    async updateFacetRaw(requestParameters: facetsApiParams.UpdateFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsFacet>> {
        if (requestParameters.facetId === null || requestParameters.facetId === undefined) {
            throw new runtime.RequiredError('facetId','Required parameter requestParameters.facetId was null or undefined when calling updateFacet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/{facetId}`.replace(`{${"facetId"}}`, encodeURIComponent(String(requestParameters.facetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsFacet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */
    async updateFacet(requestParameters: facetsApiParams.UpdateFacetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsFacet> {
        const response = await this.updateFacetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */


    async updateFacetSetRaw(requestParameters: facetsApiParams.UpdateFacetSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSet>> {
        const queryParameters: any = {};

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.categoryCode !== undefined) {
            queryParameters['categoryCode'] = requestParameters.categoryCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/facets/set/edit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.facetSet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies a Facet definition.
     * Update facet
     */
    async updateFacetSet(requestParameters: facetsApiParams.UpdateFacetSetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSet> {
        const response = await this.updateFacetSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
