/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  PublishSet,
  PublishSetCollection,
  PublishingScope,
} from '../models';
import {
    PublishSetFromJSON,
    PublishSetToJSON,
    PublishSetCollectionFromJSON,
    PublishSetCollectionToJSON,
    PublishingScopeFromJSON,
    PublishingScopeToJSON,
} from '../models';

export interface ProductPublishingApiAssignProductsToPublishSetRequest {
    publishSet?: PublishSet;
}

export interface ProductPublishingApiDeletePublishSetRequest {
    publishSetCode: string;
    discardDrafts?: boolean;
}

export interface ProductPublishingApiDiscardDraftsRequest {
    publishingScope?: PublishingScope;
}

export interface ProductPublishingApiGetPublishSetRequest {
    publishSetCode: string;
}

export interface ProductPublishingApiPublishDraftsRequest {
    publishingScope?: PublishingScope;
}

/**
 * 
 */
export class ProductPublishingApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Assign products to publish set
     */


    async assignProductsToPublishSetRaw(requestParameters: ProductPublishingApiAssignProductsToPublishSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishSet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/publishing/publishsets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishSetToJSON(requestParameters.publishSet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishSetFromJSON(jsonValue));
    }

    /**
     * 
     * Assign products to publish set
     */
    async assignProductsToPublishSet(requestParameters: ProductPublishingApiAssignProductsToPublishSetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishSet> {
        const response = await this.assignProductsToPublishSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes all details about a PublishSet from the product service.          If the discardDrafts param is true, it also deletes the product drafts.
     * Delete publish set
     */


    async deletePublishSetRaw(requestParameters: ProductPublishingApiDeletePublishSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.publishSetCode === null || requestParameters.publishSetCode === undefined) {
            throw new runtime.RequiredError('publishSetCode','Required parameter requestParameters.publishSetCode was null or undefined when calling deletePublishSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.discardDrafts !== undefined) {
            queryParameters['discardDrafts'] = requestParameters.discardDrafts;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/publishing/publishsets/{publishSetCode}`.replace(`{${"publishSetCode"}}`, encodeURIComponent(String(requestParameters.publishSetCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes all details about a PublishSet from the product service.          If the discardDrafts param is true, it also deletes the product drafts.
     * Delete publish set
     */
    async deletePublishSet(requestParameters: ProductPublishingApiDeletePublishSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePublishSetRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Discard draft products
     */


    async discardDraftsRaw(requestParameters: ProductPublishingApiDiscardDraftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/publishing/discarddrafts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishingScopeToJSON(requestParameters.publishingScope),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Discard draft products
     */
    async discardDrafts(requestParameters: ProductPublishingApiDiscardDraftsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.discardDraftsRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the details of a single PublishSet.
     * Get publish set
     */


    async getPublishSetRaw(requestParameters: ProductPublishingApiGetPublishSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishSet>> {
        if (requestParameters.publishSetCode === null || requestParameters.publishSetCode === undefined) {
            throw new runtime.RequiredError('publishSetCode','Required parameter requestParameters.publishSetCode was null or undefined when calling getPublishSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/publishing/publishsets/{publishSetCode}`.replace(`{${"publishSetCode"}}`, encodeURIComponent(String(requestParameters.publishSetCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishSetFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a single PublishSet.
     * Get publish set
     */
    async getPublishSet(requestParameters: ProductPublishingApiGetPublishSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishSet> {
        const response = await this.getPublishSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of PublishSets including the product counts.
     * Get publish sets
     */


    async getPublishSetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublishSetCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/publishing/publishsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublishSetCollectionFromJSON(jsonValue));
    }

    /**
     * Retrieves a list of PublishSets including the product counts.
     * Get publish sets
     */
    async getPublishSets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublishSetCollection> {
        const response = await this.getPublishSetsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * Publish draft products
     */


    async publishDraftsRaw(requestParameters: ProductPublishingApiPublishDraftsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/publishing/publishdrafts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishingScopeToJSON(requestParameters.publishingScope),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Publish draft products
     */
    async publishDrafts(requestParameters: ProductPublishingApiPublishDraftsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publishDraftsRaw(requestParameters, initOverrides);
    }

}
