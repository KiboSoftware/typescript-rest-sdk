/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsDiscount,
  CatalogAdminsDiscountCollection,
  CatalogAdminsDiscountTarget,
  DiscountLocalizedContent,
  DiscountTag,
  DiscountTagCollection,
  TagCollection,
} from '../models';


export namespace discountsApiParams { 
    export interface CreateDiscountRequest {
        tagCode?: string;
        responseFields?: string;
        catalogAdminsDiscount?: CatalogAdminsDiscount;
    }
    export interface DeleteDiscountRequest {
        discountId: number;
    }
    export interface GenerateRandomCouponRequest {
        responseFields?: string;
    }
    export interface GetDiscountRequest {
        discountId: number;
        responseFields?: string;
    }
    export interface GetDiscountContentRequest {
        discountId: number;
        responseFields?: string;
    }
    export interface GetDiscountTargetRequest {
        discountId: number;
        responseFields?: string;
    }
    export interface GetDiscountsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetTagsRequest {
        discountId: number;
        responseFields?: string;
    }
    export interface UpdateDiscountRequest {
        discountId: number;
        responseFields?: string;
        catalogAdminsDiscount?: CatalogAdminsDiscount;
    }
    export interface UpdateDiscountContentRequest {
        discountId: number;
        responseFields?: string;
        discountLocalizedContent?: DiscountLocalizedContent;
    }
    export interface UpdateDiscountTagsRequest {
        responseFields?: string;
        discountTag?: Array<DiscountTag>;
    }
    export interface UpdateDiscountTargetRequest {
        discountId: number;
        responseFields?: string;
        catalogAdminsDiscountTarget?: CatalogAdminsDiscountTarget;
    }
}
/**
* DiscountsApiService - interface
* 
* @export
* @interface DiscountsApi
*/
export interface DiscountsApiService {
    /**
    * Creates a discount.
    * @summary Create discount
    * @param {string} [tagCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsDiscount} [catalogAdminsDiscount] Properties of the discount to create. Required properties: Content.Name, AmountType, StartDate, and Target.Type.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    createDiscountRaw(requestParameters: discountsApiParams.CreateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscount>>;

    /**
    * Creates a discount.
    * Create discount
    */
    createDiscount(requestParameters: discountsApiParams.CreateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscount>;

    /**
    * Deletes a discount specified by its discount ID.
    * @summary Delete discount
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    deleteDiscountRaw(requestParameters: discountsApiParams.DeleteDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes a discount specified by its discount ID.
    * Delete discount
    */
    deleteDiscount(requestParameters: discountsApiParams.DeleteDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Generates a random code for a coupon.
    * @summary Generate a random coupon
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    generateRandomCouponRaw(requestParameters: discountsApiParams.GenerateRandomCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * Generates a random code for a coupon.
    * Generate a random coupon
    */
    generateRandomCoupon(requestParameters: discountsApiParams.GenerateRandomCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
    * Retrieves the details of a single discount.
    * @summary Get discount
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    getDiscountRaw(requestParameters: discountsApiParams.GetDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscount>>;

    /**
    * Retrieves the details of a single discount.
    * Get discount
    */
    getDiscount(requestParameters: discountsApiParams.GetDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscount>;

    /**
    * Retrieves the localized content specified for the specified discount.
    * @summary Get discount content
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    getDiscountContentRaw(requestParameters: discountsApiParams.GetDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLocalizedContent>>;

    /**
    * Retrieves the localized content specified for the specified discount.
    * Get discount content
    */
    getDiscountContent(requestParameters: discountsApiParams.GetDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLocalizedContent>;

    /**
    * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
    * @summary Get discount target
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    getDiscountTargetRaw(requestParameters: discountsApiParams.GetDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscountTarget>>;

    /**
    * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
    * Get discount target
    */
    getDiscountTarget(requestParameters: discountsApiParams.GetDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscountTarget>;

    /**
    * Retrieves a list of discounts according to any specified filter criteria and sort options.
    * @summary Get discounts
    * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
    * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
    * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
    * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
    * @param {string} [responseGroups] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    getDiscountsRaw(requestParameters: discountsApiParams.GetDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscountCollection>>;

    /**
    * Retrieves a list of discounts according to any specified filter criteria and sort options.
    * Get discounts
    */
    getDiscounts(requestParameters: discountsApiParams.GetDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscountCollection>;

    /**
    * Retrieves all tags associated to a discount
    * @summary Get tags for a discount
    * @param {number} discountId 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    getTagsRaw(requestParameters: discountsApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCollection>>;

    /**
    * Retrieves all tags associated to a discount
    * Get tags for a discount
    */
    getTags(requestParameters: discountsApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCollection>;

    /**
    * Modifies a discount.
    * @summary Update discount
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsDiscount} [catalogAdminsDiscount] Properties of the discount to update.               Required properties: Content.Name, AmountType, StartDate, and Target.Type.               Any unspecified properties are set to null and boolean variables are set to false.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    updateDiscountRaw(requestParameters: discountsApiParams.UpdateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscount>>;

    /**
    * Modifies a discount.
    * Update discount
    */
    updateDiscount(requestParameters: discountsApiParams.UpdateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscount>;

    /**
    * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
    * @summary Update discount content
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {DiscountLocalizedContent} [discountLocalizedContent] New Name and/or LocaleCode. Properties of the content to update. Required property: Name.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    updateDiscountContentRaw(requestParameters: discountsApiParams.UpdateDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLocalizedContent>>;

    /**
    * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
    * Update discount content
    */
    updateDiscountContent(requestParameters: discountsApiParams.UpdateDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLocalizedContent>;

    /**
    * Modifies tags of the discount. The original tags are overwritten.
    * @summary Update discount tags
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<DiscountTag>} [discountTag] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    updateDiscountTagsRaw(requestParameters: discountsApiParams.UpdateDiscountTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountTagCollection>>;

    /**
    * Modifies tags of the discount. The original tags are overwritten.
    * Update discount tags
    */
    updateDiscountTags(requestParameters: discountsApiParams.UpdateDiscountTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountTagCollection>;

    /**
    * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
    * @summary Update discount target
    * @param {number} discountId Unique identifier of the discount. System-supplied and read-only.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CatalogAdminsDiscountTarget} [catalogAdminsDiscountTarget] Properties of the discount target to modify.               Required properties: Target.Type. Any unspecified properties are set to null and boolean variables to false.
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof DiscountsApiInterface
    */
    updateDiscountTargetRaw(requestParameters: discountsApiParams.UpdateDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscountTarget>>;

    /**
    * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
    * Update discount target
    */
    updateDiscountTarget(requestParameters: discountsApiParams.UpdateDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscountTarget>;

}


/**
 * 
 */
export class DiscountsApi extends runtime.BaseAPI implements DiscountsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Creates a discount.
     * Create discount
     */


    async createDiscountRaw(requestParameters: discountsApiParams.CreateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscount>> {
        const queryParameters: any = {};

        if (requestParameters.tagCode !== undefined) {
            queryParameters['tagCode'] = requestParameters.tagCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsDiscount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a discount.
     * Create discount
     */
    async createDiscount(requestParameters: discountsApiParams.CreateDiscountRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscount> {
        const response = await this.createDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a discount specified by its discount ID.
     * Delete discount
     */


    async deleteDiscountRaw(requestParameters: discountsApiParams.DeleteDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling deleteDiscount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a discount specified by its discount ID.
     * Delete discount
     */
    async deleteDiscount(requestParameters: discountsApiParams.DeleteDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDiscountRaw(requestParameters, initOverrides);
    }

    /**
     * Generates a random code for a coupon.
     * Generate a random coupon
     */


    async generateRandomCouponRaw(requestParameters: discountsApiParams.GenerateRandomCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/generate-random-coupon`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Generates a random code for a coupon.
     * Generate a random coupon
     */
    async generateRandomCoupon(requestParameters: discountsApiParams.GenerateRandomCouponRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.generateRandomCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a single discount.
     * Get discount
     */


    async getDiscountRaw(requestParameters: discountsApiParams.GetDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscount>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling getDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the details of a single discount.
     * Get discount
     */
    async getDiscount(requestParameters: discountsApiParams.GetDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscount> {
        const response = await this.getDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the localized content specified for the specified discount.
     * Get discount content
     */


    async getDiscountContentRaw(requestParameters: discountsApiParams.GetDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLocalizedContent>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling getDiscountContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}/content`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the localized content specified for the specified discount.
     * Get discount content
     */
    async getDiscountContent(requestParameters: discountsApiParams.GetDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLocalizedContent> {
        const response = await this.getDiscountContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
     * Get discount target
     */


    async getDiscountTargetRaw(requestParameters: discountsApiParams.GetDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscountTarget>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling getDiscountTarget.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}/target`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the discount target, that is which products, categories, or shipping methods are eligible for the discount.
     * Get discount target
     */
    async getDiscountTarget(requestParameters: discountsApiParams.GetDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscountTarget> {
        const response = await this.getDiscountTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of discounts according to any specified filter criteria and sort options.
     * Get discounts
     */


    async getDiscountsRaw(requestParameters: discountsApiParams.GetDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscountCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of discounts according to any specified filter criteria and sort options.
     * Get discounts
     */
    async getDiscounts(requestParameters: discountsApiParams.GetDiscountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscountCollection> {
        const response = await this.getDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all tags associated to a discount
     * Get tags for a discount
     */


    async getTagsRaw(requestParameters: discountsApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagCollection>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling getTags.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}/tags`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves all tags associated to a discount
     * Get tags for a discount
     */
    async getTags(requestParameters: discountsApiParams.GetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagCollection> {
        const response = await this.getTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies a discount.
     * Update discount
     */


    async updateDiscountRaw(requestParameters: discountsApiParams.UpdateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscount>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsDiscount,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies a discount.
     * Update discount
     */
    async updateDiscount(requestParameters: discountsApiParams.UpdateDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscount> {
        const response = await this.updateDiscountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
     * Update discount content
     */


    async updateDiscountContentRaw(requestParameters: discountsApiParams.UpdateDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountLocalizedContent>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateDiscountContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}/content`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.discountLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies the localized content for the specified discount. Allows you to rename the discount without modifying any other discount properties.
     * Update discount content
     */
    async updateDiscountContent(requestParameters: discountsApiParams.UpdateDiscountContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountLocalizedContent> {
        const response = await this.updateDiscountContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies tags of the discount. The original tags are overwritten.
     * Update discount tags
     */


    async updateDiscountTagsRaw(requestParameters: discountsApiParams.UpdateDiscountTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountTagCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/tags`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.discountTag,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies tags of the discount. The original tags are overwritten.
     * Update discount tags
     */
    async updateDiscountTags(requestParameters: discountsApiParams.UpdateDiscountTagsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountTagCollection> {
        const response = await this.updateDiscountTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
     * Update discount target
     */


    async updateDiscountTargetRaw(requestParameters: discountsApiParams.UpdateDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsDiscountTarget>> {
        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling updateDiscountTarget.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/discounts/{discountId}/target`.replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsDiscountTarget,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Modifies properties of the discount target, for example, the dollar amount, or precentage off the price.
     * Update discount target
     */
    async updateDiscountTarget(requestParameters: discountsApiParams.UpdateDiscountTargetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsDiscountTarget> {
        const response = await this.updateDiscountTargetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
