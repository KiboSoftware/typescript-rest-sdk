/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SynonymDefinition,
  SynonymDefinitionCollection,
  SynonymDefinitionPagedCollection,
} from '../models';
import {
    SynonymDefinitionFromJSON,
    SynonymDefinitionToJSON,
    SynonymDefinitionCollectionFromJSON,
    SynonymDefinitionCollectionToJSON,
    SynonymDefinitionPagedCollectionFromJSON,
    SynonymDefinitionPagedCollectionToJSON,
} from '../models';

export interface SearchSynonymsApiAddSynonymDefinitionRequest {
    synonymDefinition?: SynonymDefinition;
}

export interface SearchSynonymsApiDeleteSynonymDefinitionRequest {
    synonymId: number;
}

export interface SearchSynonymsApiGetAllSynonymDefinitionCollectionsForMasterCatalogRequest {
    languageCode: string;
}

export interface SearchSynonymsApiGetSynonymDefinitionRequest {
    synonymId: number;
}

export interface SearchSynonymsApiGetSynonymDefinitionCollectionRequest {
    localeCode: string;
}

export interface SearchSynonymsApiGetSynonymDefinitionsRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface SearchSynonymsApiUpdateSynonymDefinitionRequest {
    synonymId: number;
    synonymDefinition?: SynonymDefinition;
}

export interface SearchSynonymsApiUpdateSynonymDefinitionCollectionRequest {
    localeCode: string;
    synonymDefinitionCollection?: SynonymDefinitionCollection;
}

/**
 * 
 */
export class SearchSynonymsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add synonym definition
     * Add synonym definition
     */


    async addSynonymDefinitionRaw(requestParameters: SearchSynonymsApiAddSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinition>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonyms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SynonymDefinitionToJSON(requestParameters.synonymDefinition),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionFromJSON(jsonValue));
    }

    /**
     * Add synonym definition
     * Add synonym definition
     */
    async addSynonymDefinition(requestParameters: SearchSynonymsApiAddSynonymDefinitionRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinition> {
        const response = await this.addSynonymDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete synonym definition
     * Delete synonym definition
     */


    async deleteSynonymDefinitionRaw(requestParameters: SearchSynonymsApiDeleteSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.synonymId === null || requestParameters.synonymId === undefined) {
            throw new runtime.RequiredError('synonymId','Required parameter requestParameters.synonymId was null or undefined when calling deleteSynonymDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonyms/{synonymId}`.replace(`{${"synonymId"}}`, encodeURIComponent(String(requestParameters.synonymId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete synonym definition
     * Delete synonym definition
     */
    async deleteSynonymDefinition(requestParameters: SearchSynonymsApiDeleteSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSynonymDefinitionRaw(requestParameters, initOverrides);
    }

    /**
     * Get synonym definition collections
     * Get synonym definition collections
     */


    async getAllSynonymDefinitionCollectionsForMasterCatalogRaw(requestParameters: SearchSynonymsApiGetAllSynonymDefinitionCollectionsForMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinitionCollection>> {
        if (requestParameters.languageCode === null || requestParameters.languageCode === undefined) {
            throw new runtime.RequiredError('languageCode','Required parameter requestParameters.languageCode was null or undefined when calling getAllSynonymDefinitionCollectionsForMasterCatalog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/master-catalog-synonym-definitions/{languageCode}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionCollectionFromJSON(jsonValue));
    }

    /**
     * Get synonym definition collections
     * Get synonym definition collections
     */
    async getAllSynonymDefinitionCollectionsForMasterCatalog(requestParameters: SearchSynonymsApiGetAllSynonymDefinitionCollectionsForMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinitionCollection> {
        const response = await this.getAllSynonymDefinitionCollectionsForMasterCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get synonym definition
     * Get synonym definition
     */


    async getSynonymDefinitionRaw(requestParameters: SearchSynonymsApiGetSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinition>> {
        if (requestParameters.synonymId === null || requestParameters.synonymId === undefined) {
            throw new runtime.RequiredError('synonymId','Required parameter requestParameters.synonymId was null or undefined when calling getSynonymDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonyms/{synonymId}`.replace(`{${"synonymId"}}`, encodeURIComponent(String(requestParameters.synonymId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionFromJSON(jsonValue));
    }

    /**
     * Get synonym definition
     * Get synonym definition
     */
    async getSynonymDefinition(requestParameters: SearchSynonymsApiGetSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinition> {
        const response = await this.getSynonymDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get synonym definition collection
     * Get synonym definition collection
     */


    async getSynonymDefinitionCollectionRaw(requestParameters: SearchSynonymsApiGetSynonymDefinitionCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinitionCollection>> {
        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getSynonymDefinitionCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonym-definitions/{localeCode}`.replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionCollectionFromJSON(jsonValue));
    }

    /**
     * Get synonym definition collection
     * Get synonym definition collection
     */
    async getSynonymDefinitionCollection(requestParameters: SearchSynonymsApiGetSynonymDefinitionCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinitionCollection> {
        const response = await this.getSynonymDefinitionCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get synonym definitions
     * Get synonym definitions
     */


    async getSynonymDefinitionsRaw(requestParameters: SearchSynonymsApiGetSynonymDefinitionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinitionPagedCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonyms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionPagedCollectionFromJSON(jsonValue));
    }

    /**
     * Get synonym definitions
     * Get synonym definitions
     */
    async getSynonymDefinitions(requestParameters: SearchSynonymsApiGetSynonymDefinitionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinitionPagedCollection> {
        const response = await this.getSynonymDefinitionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update synonym definition
     * Update synonym definition
     */


    async updateSynonymDefinitionRaw(requestParameters: SearchSynonymsApiUpdateSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinition>> {
        if (requestParameters.synonymId === null || requestParameters.synonymId === undefined) {
            throw new runtime.RequiredError('synonymId','Required parameter requestParameters.synonymId was null or undefined when calling updateSynonymDefinition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonyms/{synonymId}`.replace(`{${"synonymId"}}`, encodeURIComponent(String(requestParameters.synonymId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SynonymDefinitionToJSON(requestParameters.synonymDefinition),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionFromJSON(jsonValue));
    }

    /**
     * Update synonym definition
     * Update synonym definition
     */
    async updateSynonymDefinition(requestParameters: SearchSynonymsApiUpdateSynonymDefinitionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinition> {
        const response = await this.updateSynonymDefinitionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert synonym definition collection
     * Add/Update synonym definition collection
     */


    async updateSynonymDefinitionCollectionRaw(requestParameters: SearchSynonymsApiUpdateSynonymDefinitionCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SynonymDefinitionCollection>> {
        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling updateSynonymDefinitionCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/synonym-definitions/{localeCode}`.replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SynonymDefinitionCollectionToJSON(requestParameters.synonymDefinitionCollection),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SynonymDefinitionCollectionFromJSON(jsonValue));
    }

    /**
     * Upsert synonym definition collection
     * Add/Update synonym definition collection
     */
    async updateSynonymDefinitionCollection(requestParameters: SearchSynonymsApiUpdateSynonymDefinitionCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SynonymDefinitionCollection> {
        const response = await this.updateSynonymDefinitionCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
