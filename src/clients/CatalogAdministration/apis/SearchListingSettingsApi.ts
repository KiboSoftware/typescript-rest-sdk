/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  ListingSettings,
} from '../models';

export interface SearchListingSettingsApiDeleteListingSettingsRequest {
    name: string;
}

export interface SearchListingSettingsApiGetListingSettingsRequest {
    name: string;
    responseFields?: string;
}

export interface SearchListingSettingsApiUpdateListingSettingsRequest {
    name: string;
    responseFields?: string;
    listingSettings?: ListingSettings;
}

/**
 * SearchListingSettingsApi - interface
 * 
 * @export
 * @interface SearchListingSettingsApiInterface
 */
export interface SearchListingSettingsApiInterface {
    /**
     * Deletes the ListingSettings for a specific SearchSetting by name.
     * @summary Delete search listing settings
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchListingSettingsApiInterface
     */
    deleteListingSettingsRaw(requestParameters: SearchListingSettingsApiDeleteListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the ListingSettings for a specific SearchSetting by name.
     * Delete search listing settings
     */
    deleteListingSettings(requestParameters: SearchListingSettingsApiDeleteListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get ListingSettings for a specific SearchSettings by name.
     * @summary Get search listing settings
     * @param {string} name 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchListingSettingsApiInterface
     */
    getListingSettingsRaw(requestParameters: SearchListingSettingsApiGetListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingSettings>>;

    /**
     * Get ListingSettings for a specific SearchSettings by name.
     * Get search listing settings
     */
    getListingSettings(requestParameters: SearchListingSettingsApiGetListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingSettings>;

    /**
     * Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting by name.
     * @summary Add/Update search listing settings
     * @param {string} name 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {ListingSettings} [listingSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchListingSettingsApiInterface
     */
    updateListingSettingsRaw(requestParameters: SearchListingSettingsApiUpdateListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingSettings>>;

    /**
     * Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting by name.
     * Add/Update search listing settings
     */
    updateListingSettings(requestParameters: SearchListingSettingsApiUpdateListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingSettings>;

}

/**
 * 
 */
export class SearchListingSettingsApi extends runtime.BaseAPI implements SearchListingSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Deletes the ListingSettings for a specific SearchSetting by name.
     * Delete search listing settings
     */


    async deleteListingSettingsRaw(requestParameters: SearchListingSettingsApiDeleteListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteListingSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/listingsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the ListingSettings for a specific SearchSetting by name.
     * Delete search listing settings
     */
    async deleteListingSettings(requestParameters: SearchListingSettingsApiDeleteListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteListingSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * Get ListingSettings for a specific SearchSettings by name.
     * Get search listing settings
     */


    async getListingSettingsRaw(requestParameters: SearchListingSettingsApiGetListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getListingSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/listingsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get ListingSettings for a specific SearchSettings by name.
     * Get search listing settings
     */
    async getListingSettings(requestParameters: SearchListingSettingsApiGetListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingSettings> {
        const response = await this.getListingSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting by name.
     * Add/Update search listing settings
     */


    async updateListingSettingsRaw(requestParameters: SearchListingSettingsApiUpdateListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateListingSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/listingsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.listingSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds or Updates (Upsert) the ListingSettings for a specific SearchSetting by name.
     * Add/Update search listing settings
     */
    async updateListingSettings(requestParameters: SearchListingSettingsApiUpdateListingSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingSettings> {
        const response = await this.updateListingSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
