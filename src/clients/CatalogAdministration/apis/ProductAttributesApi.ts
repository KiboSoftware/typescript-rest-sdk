/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AttributeTypeRuleCollection,
  AttributeVocabularyValueLocalizedContent,
  CatalogAdminsAttribute,
  CatalogAdminsAttributeCollection,
  CatalogAdminsAttributeLocalizedContent,
  CatalogAdminsAttributeVocabularyValue,
} from '../models';

export interface ProductAttributesApiAddAttributeRequest {
    responseFields?: string;
    catalogAdminsAttribute?: CatalogAdminsAttribute;
}

export interface ProductAttributesApiAddAttributeVocabularyValueRequest {
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsAttributeVocabularyValue?: CatalogAdminsAttributeVocabularyValue;
}

export interface ProductAttributesApiAddAttributeVocabularyValueLocalizedContentRequest {
    attributeFQN: string;
    value: string;
    responseFields?: string;
    attributeVocabularyValueLocalizedContent?: AttributeVocabularyValueLocalizedContent;
}

export interface ProductAttributesApiAddLocalizedContentRequest {
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsAttributeLocalizedContent?: CatalogAdminsAttributeLocalizedContent;
}

export interface ProductAttributesApiDeleteAttributeRequest {
    attributeFQN: string;
}

export interface ProductAttributesApiDeleteAttributeVocabularyValueRequest {
    attributeFQN: string;
    value: string;
}

export interface ProductAttributesApiDeleteAttributeVocabularyValueLocalizedContentRequest {
    attributeFQN: string;
    value: string;
    localeCode: string;
}

export interface ProductAttributesApiDeleteLocalizedContentRequest {
    attributeFQN: string;
    localeCode: string;
}

export interface ProductAttributesApiGetAttributeRequest {
    attributeFQN: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeLocalizedContentRequest {
    attributeFQN: string;
    localeCode: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeLocalizedContentsRequest {
    attributeFQN: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeTypeRulesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeVocabularyValueRequest {
    attributeFQN: string;
    value: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeVocabularyValueLocalizedContentRequest {
    attributeFQN: string;
    value: string;
    localeCode: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeVocabularyValueLocalizedContentsRequest {
    attributeFQN: string;
    value: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributeVocabularyValuesRequest {
    attributeFQN: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface ProductAttributesApiGetAttributesRequest {
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
    responseGroups?: string;
    responseFields?: string;
}

export interface ProductAttributesApiUpdateAttributeRequest {
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsAttribute?: CatalogAdminsAttribute;
}

export interface ProductAttributesApiUpdateAttributeVocabularyValueRequest {
    attributeFQN: string;
    value: string;
    responseFields?: string;
    catalogAdminsAttributeVocabularyValue?: CatalogAdminsAttributeVocabularyValue;
}

export interface ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentRequest {
    attributeFQN: string;
    value: string;
    localeCode: string;
    responseFields?: string;
    attributeVocabularyValueLocalizedContent?: AttributeVocabularyValueLocalizedContent;
}

export interface ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentsRequest {
    attributeFQN: string;
    value: string;
    responseFields?: string;
    attributeVocabularyValueLocalizedContent?: Array<AttributeVocabularyValueLocalizedContent>;
}

export interface ProductAttributesApiUpdateAttributeVocabularyValuesRequest {
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsAttributeVocabularyValue?: Array<CatalogAdminsAttributeVocabularyValue>;
}

export interface ProductAttributesApiUpdateLocalizedContentRequest {
    attributeFQN: string;
    localeCode: string;
    responseFields?: string;
    catalogAdminsAttributeLocalizedContent?: CatalogAdminsAttributeLocalizedContent;
}

export interface ProductAttributesApiUpdateLocalizedContentsRequest {
    attributeFQN: string;
    responseFields?: string;
    catalogAdminsAttributeLocalizedContent?: Array<CatalogAdminsAttributeLocalizedContent>;
}

/**
 * ProductAttributesApi - interface
 * 
 * @export
 * @interface ProductAttributesApiInterface
 */
export interface ProductAttributesApiInterface {
    /**
     * Add / Create Attribute
     * @summary Add a product attribute
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsAttribute} [catalogAdminsAttribute] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    addAttributeRaw(requestParameters: ProductAttributesApiAddAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttribute>>;

    /**
     * Add / Create Attribute
     * Add a product attribute
     */
    addAttribute(requestParameters: ProductAttributesApiAddAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttribute>;

    /**
     * Add product attribute vocabulary value
     * @summary Add product attribute vocabulary value
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsAttributeVocabularyValue} [catalogAdminsAttributeVocabularyValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    addAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiAddAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeVocabularyValue>>;

    /**
     * Add product attribute vocabulary value
     * Add product attribute vocabulary value
     */
    addAttributeVocabularyValue(requestParameters: ProductAttributesApiAddAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeVocabularyValue>;

    /**
     * 
     * @summary Add product attribute vocabulary value
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeVocabularyValueLocalizedContent} [attributeVocabularyValueLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    addAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiAddAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeVocabularyValueLocalizedContent>>;

    /**
     * 
     * Add product attribute vocabulary value
     */
    addAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiAddAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeVocabularyValueLocalizedContent>;

    /**
     * 
     * @summary Add product attribute localized content
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsAttributeLocalizedContent} [catalogAdminsAttributeLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    addLocalizedContentRaw(requestParameters: ProductAttributesApiAddLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeLocalizedContent>>;

    /**
     * 
     * Add product attribute localized content
     */
    addLocalizedContent(requestParameters: ProductAttributesApiAddLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeLocalizedContent>;

    /**
     * 
     * @summary Delete product attribute
     * @param {string} attributeFQN 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    deleteAttributeRaw(requestParameters: ProductAttributesApiDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete product attribute
     */
    deleteAttribute(requestParameters: ProductAttributesApiDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete product attribute vocabulary value
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    deleteAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete product attribute vocabulary value
     */
    deleteAttributeVocabularyValue(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete product attribute vocabulary value localized content
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} localeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    deleteAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete product attribute vocabulary value localized content
     */
    deleteAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete product attribute localized content
     * @param {string} attributeFQN 
     * @param {string} localeCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    deleteLocalizedContentRaw(requestParameters: ProductAttributesApiDeleteLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     * Delete product attribute localized content
     */
    deleteLocalizedContent(requestParameters: ProductAttributesApiDeleteLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get product attribute
     * @param {string} attributeFQN 
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeRaw(requestParameters: ProductAttributesApiGetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttribute>>;

    /**
     * 
     * Get product attribute
     */
    getAttribute(requestParameters: ProductAttributesApiGetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttribute>;

    /**
     * 
     * @summary Get product attribute localized content
     * @param {string} attributeFQN 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeLocalizedContentRaw(requestParameters: ProductAttributesApiGetAttributeLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeLocalizedContent>>;

    /**
     * 
     * Get product attribute localized content
     */
    getAttributeLocalizedContent(requestParameters: ProductAttributesApiGetAttributeLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeLocalizedContent>;

    /**
     * 
     * @summary Get product attribute localized contents
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeLocalizedContentsRaw(requestParameters: ProductAttributesApiGetAttributeLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeLocalizedContent>>>;

    /**
     * 
     * Get product attribute localized contents
     */
    getAttributeLocalizedContents(requestParameters: ProductAttributesApiGetAttributeLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeLocalizedContent>>;

    /**
     * Retrieves a paged list of attribute type rules according to any specified filter criteria and sort options.
     * @summary Get attribute type rules
     * @param {number} [startIndex] Used to page results from a query. Indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, startIndex&#x3D;3. The default value is 0. Optional.
     * @param {number} [pageSize] Used to page results from a query. Indicates the maximum number of entities to return from a query. The default value is 20 and the maximum value is 200. Optional.
     * @param {string} [sortBy] The element to sort the results by and the order in which the results appear. Either ascending (a-z) or descending (z-a) order. Optional.
     * @param {string} [filter] A set of filter expressions representing the search parameters for a query: eq&#x3D;equals, ne&#x3D;not equals, gt&#x3D;greater than, lt &#x3D; less than or equals, gt &#x3D; greater than or equals, lt &#x3D; less than or equals, sw &#x3D; starts with, or cont &#x3D; contains. Optional.
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeTypeRulesRaw(requestParameters: ProductAttributesApiGetAttributeTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeTypeRuleCollection>>;

    /**
     * Retrieves a paged list of attribute type rules according to any specified filter criteria and sort options.
     * Get attribute type rules
     */
    getAttributeTypeRules(requestParameters: ProductAttributesApiGetAttributeTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeTypeRuleCollection>;

    /**
     * 
     * @summary Get product attribute vocabulary value
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeVocabularyValue>>;

    /**
     * 
     * Get product attribute vocabulary value
     */
    getAttributeVocabularyValue(requestParameters: ProductAttributesApiGetAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeVocabularyValue>;

    /**
     * 
     * @summary Get product attribute vocabulary value localized content
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeVocabularyValueLocalizedContent>>;

    /**
     * 
     * Get product attribute vocabulary value localized content
     */
    getAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeVocabularyValueLocalizedContent>;

    /**
     * 
     * @summary Get product attribute vocabulary value localized content
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeVocabularyValueLocalizedContentsRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeVocabularyValueLocalizedContent>>>;

    /**
     * 
     * Get product attribute vocabulary value localized content
     */
    getAttributeVocabularyValueLocalizedContents(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeVocabularyValueLocalizedContent>>;

    /**
     * 
     * @summary Get product attribute vocabulary values
     * @param {string} attributeFQN 
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributeVocabularyValuesRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeVocabularyValue>>>;

    /**
     * 
     * Get product attribute vocabulary values
     */
    getAttributeVocabularyValues(requestParameters: ProductAttributesApiGetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeVocabularyValue>>;

    /**
     * Get product attributes
     * @summary Get product attributes
     * @param {number} [startIndex] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [filter] 
     * @param {string} [responseGroups] 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    getAttributesRaw(requestParameters: ProductAttributesApiGetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeCollection>>;

    /**
     * Get product attributes
     * Get product attributes
     */
    getAttributes(requestParameters: ProductAttributesApiGetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeCollection>;

    /**
     * 
     * @summary Update a product attribute
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsAttribute} [catalogAdminsAttribute] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateAttributeRaw(requestParameters: ProductAttributesApiUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttribute>>;

    /**
     * 
     * Update a product attribute
     */
    updateAttribute(requestParameters: ProductAttributesApiUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttribute>;

    /**
     * 
     * @summary Update product attribute vocabulary value
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsAttributeVocabularyValue} [catalogAdminsAttributeVocabularyValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeVocabularyValue>>;

    /**
     * 
     * Update product attribute vocabulary value
     */
    updateAttributeVocabularyValue(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeVocabularyValue>;

    /**
     * 
     * @summary Update product attribute vocabulary value localized content
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {AttributeVocabularyValueLocalizedContent} [attributeVocabularyValueLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeVocabularyValueLocalizedContent>>;

    /**
     * 
     * Update product attribute vocabulary value localized content
     */
    updateAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeVocabularyValueLocalizedContent>;

    /**
     * 
     * @summary Update product attribute vocabulary value localized content
     * @param {string} attributeFQN 
     * @param {string} value 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<AttributeVocabularyValueLocalizedContent>} [attributeVocabularyValueLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateAttributeVocabularyValueLocalizedContentsRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeVocabularyValueLocalizedContent>>>;

    /**
     * 
     * Update product attribute vocabulary value localized content
     */
    updateAttributeVocabularyValueLocalizedContents(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeVocabularyValueLocalizedContent>>;

    /**
     * 
     * @summary Update product attribute vocabulary values
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CatalogAdminsAttributeVocabularyValue>} [catalogAdminsAttributeVocabularyValue] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateAttributeVocabularyValuesRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeVocabularyValue>>>;

    /**
     * 
     * Update product attribute vocabulary values
     */
    updateAttributeVocabularyValues(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeVocabularyValue>>;

    /**
     * 
     * @summary Update product attribute localized content
     * @param {string} attributeFQN 
     * @param {string} localeCode 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsAttributeLocalizedContent} [catalogAdminsAttributeLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateLocalizedContentRaw(requestParameters: ProductAttributesApiUpdateLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeLocalizedContent>>;

    /**
     * 
     * Update product attribute localized content
     */
    updateLocalizedContent(requestParameters: ProductAttributesApiUpdateLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeLocalizedContent>;

    /**
     * 
     * @summary Update product attribute localized content
     * @param {string} attributeFQN 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {Array<CatalogAdminsAttributeLocalizedContent>} [catalogAdminsAttributeLocalizedContent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributesApiInterface
     */
    updateLocalizedContentsRaw(requestParameters: ProductAttributesApiUpdateLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeLocalizedContent>>>;

    /**
     * 
     * Update product attribute localized content
     */
    updateLocalizedContents(requestParameters: ProductAttributesApiUpdateLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeLocalizedContent>>;

}

/**
 * 
 */
export class ProductAttributesApi extends runtime.BaseAPI implements ProductAttributesApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Add / Create Attribute
     * Add a product attribute
     */


    async addAttributeRaw(requestParameters: ProductAttributesApiAddAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttribute>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add / Create Attribute
     * Add a product attribute
     */
    async addAttribute(requestParameters: ProductAttributesApiAddAttributeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttribute> {
        const response = await this.addAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add product attribute vocabulary value
     * Add product attribute vocabulary value
     */


    async addAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiAddAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeVocabularyValue>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling addAttributeVocabularyValue.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttributeVocabularyValue,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add product attribute vocabulary value
     * Add product attribute vocabulary value
     */
    async addAttributeVocabularyValue(requestParameters: ProductAttributesApiAddAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeVocabularyValue> {
        const response = await this.addAttributeVocabularyValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add product attribute vocabulary value
     */


    async addAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiAddAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeVocabularyValueLocalizedContent>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling addAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling addAttributeVocabularyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeVocabularyValueLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Add product attribute vocabulary value
     */
    async addAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiAddAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeVocabularyValueLocalizedContent> {
        const response = await this.addAttributeVocabularyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add product attribute localized content
     */


    async addLocalizedContentRaw(requestParameters: ProductAttributesApiAddLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeLocalizedContent>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling addLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttributeLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Add product attribute localized content
     */
    async addLocalizedContent(requestParameters: ProductAttributesApiAddLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeLocalizedContent> {
        const response = await this.addLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete product attribute
     */


    async deleteAttributeRaw(requestParameters: ProductAttributesApiDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product attribute
     */
    async deleteAttribute(requestParameters: ProductAttributesApiDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete product attribute vocabulary value
     */


    async deleteAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteAttributeVocabularyValue.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling deleteAttributeVocabularyValue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product attribute vocabulary value
     */
    async deleteAttributeVocabularyValue(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttributeVocabularyValueRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete product attribute vocabulary value localized content
     */


    async deleteAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling deleteAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling deleteAttributeVocabularyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent/{localeCode}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product attribute vocabulary value localized content
     */
    async deleteAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiDeleteAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAttributeVocabularyValueLocalizedContentRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete product attribute localized content
     */


    async deleteLocalizedContentRaw(requestParameters: ProductAttributesApiDeleteLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling deleteLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling deleteLocalizedContent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent/{localeCode}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete product attribute localized content
     */
    async deleteLocalizedContent(requestParameters: ProductAttributesApiDeleteLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocalizedContentRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get product attribute
     */


    async getAttributeRaw(requestParameters: ProductAttributesApiGetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttribute>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute
     */
    async getAttribute(requestParameters: ProductAttributesApiGetAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttribute> {
        const response = await this.getAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product attribute localized content
     */


    async getAttributeLocalizedContentRaw(requestParameters: ProductAttributesApiGetAttributeLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeLocalizedContent>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getAttributeLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent/{localeCode}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute localized content
     */
    async getAttributeLocalizedContent(requestParameters: ProductAttributesApiGetAttributeLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeLocalizedContent> {
        const response = await this.getAttributeLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product attribute localized contents
     */


    async getAttributeLocalizedContentsRaw(requestParameters: ProductAttributesApiGetAttributeLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeLocalizedContent>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeLocalizedContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute localized contents
     */
    async getAttributeLocalizedContents(requestParameters: ProductAttributesApiGetAttributeLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeLocalizedContent>> {
        const response = await this.getAttributeLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paged list of attribute type rules according to any specified filter criteria and sort options.
     * Get attribute type rules
     */


    async getAttributeTypeRulesRaw(requestParameters: ProductAttributesApiGetAttributeTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeTypeRuleCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/typerules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a paged list of attribute type rules according to any specified filter criteria and sort options.
     * Get attribute type rules
     */
    async getAttributeTypeRules(requestParameters: ProductAttributesApiGetAttributeTypeRulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeTypeRuleCollection> {
        const response = await this.getAttributeTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product attribute vocabulary value
     */


    async getAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeVocabularyValue>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeVocabularyValue.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getAttributeVocabularyValue.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute vocabulary value
     */
    async getAttributeVocabularyValue(requestParameters: ProductAttributesApiGetAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeVocabularyValue> {
        const response = await this.getAttributeVocabularyValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product attribute vocabulary value localized content
     */


    async getAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeVocabularyValueLocalizedContent>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling getAttributeVocabularyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent/{localeCode}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute vocabulary value localized content
     */
    async getAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeVocabularyValueLocalizedContent> {
        const response = await this.getAttributeVocabularyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product attribute vocabulary value localized content
     */


    async getAttributeVocabularyValueLocalizedContentsRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeVocabularyValueLocalizedContent>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeVocabularyValueLocalizedContents.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling getAttributeVocabularyValueLocalizedContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute vocabulary value localized content
     */
    async getAttributeVocabularyValueLocalizedContents(requestParameters: ProductAttributesApiGetAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeVocabularyValueLocalizedContent>> {
        const response = await this.getAttributeVocabularyValueLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get product attribute vocabulary values
     */


    async getAttributeVocabularyValuesRaw(requestParameters: ProductAttributesApiGetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeVocabularyValue>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling getAttributeVocabularyValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get product attribute vocabulary values
     */
    async getAttributeVocabularyValues(requestParameters: ProductAttributesApiGetAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeVocabularyValue>> {
        const response = await this.getAttributeVocabularyValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get product attributes
     * Get product attributes
     */


    async getAttributesRaw(requestParameters: ProductAttributesApiGetAttributesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get product attributes
     * Get product attributes
     */
    async getAttributes(requestParameters: ProductAttributesApiGetAttributesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeCollection> {
        const response = await this.getAttributesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update a product attribute
     */


    async updateAttributeRaw(requestParameters: ProductAttributesApiUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttribute>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttribute,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update a product attribute
     */
    async updateAttribute(requestParameters: ProductAttributesApiUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttribute> {
        const response = await this.updateAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product attribute vocabulary value
     */


    async updateAttributeVocabularyValueRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeVocabularyValue>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAttributeVocabularyValue.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updateAttributeVocabularyValue.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttributeVocabularyValue,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product attribute vocabulary value
     */
    async updateAttributeVocabularyValue(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeVocabularyValue> {
        const response = await this.updateAttributeVocabularyValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product attribute vocabulary value localized content
     */


    async updateAttributeVocabularyValueLocalizedContentRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttributeVocabularyValueLocalizedContent>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updateAttributeVocabularyValueLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling updateAttributeVocabularyValueLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent/{localeCode}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeVocabularyValueLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product attribute vocabulary value localized content
     */
    async updateAttributeVocabularyValueLocalizedContent(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttributeVocabularyValueLocalizedContent> {
        const response = await this.updateAttributeVocabularyValueLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product attribute vocabulary value localized content
     */


    async updateAttributeVocabularyValueLocalizedContentsRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AttributeVocabularyValueLocalizedContent>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAttributeVocabularyValueLocalizedContents.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling updateAttributeVocabularyValueLocalizedContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues/{value}/LocalizedContent`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributeVocabularyValueLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product attribute vocabulary value localized content
     */
    async updateAttributeVocabularyValueLocalizedContents(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValueLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AttributeVocabularyValueLocalizedContent>> {
        const response = await this.updateAttributeVocabularyValueLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product attribute vocabulary values
     */


    async updateAttributeVocabularyValuesRaw(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeVocabularyValue>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateAttributeVocabularyValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/VocabularyValues`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttributeVocabularyValue,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product attribute vocabulary values
     */
    async updateAttributeVocabularyValues(requestParameters: ProductAttributesApiUpdateAttributeVocabularyValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeVocabularyValue>> {
        const response = await this.updateAttributeVocabularyValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product attribute localized content
     */


    async updateLocalizedContentRaw(requestParameters: ProductAttributesApiUpdateLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsAttributeLocalizedContent>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateLocalizedContent.');
        }

        if (requestParameters.localeCode === null || requestParameters.localeCode === undefined) {
            throw new runtime.RequiredError('localeCode','Required parameter requestParameters.localeCode was null or undefined when calling updateLocalizedContent.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent/{localeCode}`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))).replace(`{${"localeCode"}}`, encodeURIComponent(String(requestParameters.localeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttributeLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product attribute localized content
     */
    async updateLocalizedContent(requestParameters: ProductAttributesApiUpdateLocalizedContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsAttributeLocalizedContent> {
        const response = await this.updateLocalizedContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update product attribute localized content
     */


    async updateLocalizedContentsRaw(requestParameters: ProductAttributesApiUpdateLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CatalogAdminsAttributeLocalizedContent>>> {
        if (requestParameters.attributeFQN === null || requestParameters.attributeFQN === undefined) {
            throw new runtime.RequiredError('attributeFQN','Required parameter requestParameters.attributeFQN was null or undefined when calling updateLocalizedContents.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/attributedefinition/attributes/{attributeFQN}/LocalizedContent`.replace(`{${"attributeFQN"}}`, encodeURIComponent(String(requestParameters.attributeFQN))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsAttributeLocalizedContent,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update product attribute localized content
     */
    async updateLocalizedContents(requestParameters: ProductAttributesApiUpdateLocalizedContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CatalogAdminsAttributeLocalizedContent>> {
        const response = await this.updateLocalizedContentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
