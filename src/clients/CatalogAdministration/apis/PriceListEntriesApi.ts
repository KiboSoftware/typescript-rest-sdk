/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  PriceListEntry,
  PriceListEntryCollection,
} from '../models';
import {
    PriceListEntryFromJSON,
    PriceListEntryToJSON,
    PriceListEntryCollectionFromJSON,
    PriceListEntryCollectionToJSON,
} from '../models';

export interface PriceListEntriesApiAddPriceListEntryRequest {
    priceListCode: string;
    priceListEntry?: PriceListEntry;
}

export interface PriceListEntriesApiBulkAddPriceListEntriesRequest {
    publishEvents?: boolean;
    invalidateCache?: boolean;
    priceListEntry?: Array<PriceListEntry>;
}

export interface PriceListEntriesApiBulkDeletePriceListEntriesRequest {
    publishEvents?: boolean;
    invalidateCache?: boolean;
    priceListEntry?: Array<PriceListEntry>;
}

export interface PriceListEntriesApiBulkUpdatePriceListEntriesRequest {
    publishEvents?: boolean;
    invalidateCache?: boolean;
    priceListEntry?: Array<PriceListEntry>;
}

export interface PriceListEntriesApiDeletePriceListEntryRequest {
    priceListCode: string;
    productCode: string;
    currencyCode: string;
    startDate?: Date;
}

export interface PriceListEntriesApiGetPriceListEntriesRequest {
    priceListCode: string;
    startIndex?: number;
    pageSize?: number;
    sortBy?: string;
    filter?: string;
}

export interface PriceListEntriesApiGetPriceListEntryRequest {
    priceListCode: string;
    productCode: string;
    currencyCode: string;
    startDate?: Date;
}

export interface PriceListEntriesApiUpdatePriceListEntryRequest {
    priceListCode: string;
    productCode: string;
    currencyCode: string;
    startDate?: Date;
    priceListEntry?: PriceListEntry;
}

/**
 * 
 */
export class PriceListEntriesApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Add price list entry
     */


    async addPriceListEntryRaw(requestParameters: PriceListEntriesApiAddPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling addPriceListEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PriceListEntryToJSON(requestParameters.priceListEntry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListEntryFromJSON(jsonValue));
    }

    /**
     * 
     * Add price list entry
     */
    async addPriceListEntry(requestParameters: PriceListEntriesApiAddPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry> {
        const response = await this.addPriceListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Bulk add price list entries
     */


    async bulkAddPriceListEntriesRaw(requestParameters: PriceListEntriesApiBulkAddPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.publishEvents !== undefined) {
            queryParameters['publishEvents'] = requestParameters.publishEvents;
        }

        if (requestParameters.invalidateCache !== undefined) {
            queryParameters['invalidateCache'] = requestParameters.invalidateCache;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/bulkaddentries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry.map(PriceListEntryToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Bulk add price list entries
     */
    async bulkAddPriceListEntries(requestParameters: PriceListEntriesApiBulkAddPriceListEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkAddPriceListEntriesRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Bulk delete price list entries
     */


    async bulkDeletePriceListEntriesRaw(requestParameters: PriceListEntriesApiBulkDeletePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.publishEvents !== undefined) {
            queryParameters['publishEvents'] = requestParameters.publishEvents;
        }

        if (requestParameters.invalidateCache !== undefined) {
            queryParameters['invalidateCache'] = requestParameters.invalidateCache;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/bulkdeleteentries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry.map(PriceListEntryToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Bulk delete price list entries
     */
    async bulkDeletePriceListEntries(requestParameters: PriceListEntriesApiBulkDeletePriceListEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeletePriceListEntriesRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Bulk update price list entries
     */


    async bulkUpdatePriceListEntriesRaw(requestParameters: PriceListEntriesApiBulkUpdatePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.publishEvents !== undefined) {
            queryParameters['publishEvents'] = requestParameters.publishEvents;
        }

        if (requestParameters.invalidateCache !== undefined) {
            queryParameters['invalidateCache'] = requestParameters.invalidateCache;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/bulkupdateentries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry.map(PriceListEntryToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Bulk update price list entries
     */
    async bulkUpdatePriceListEntries(requestParameters: PriceListEntriesApiBulkUpdatePriceListEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkUpdatePriceListEntriesRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete price list entry
     */


    async deletePriceListEntryRaw(requestParameters: PriceListEntriesApiDeletePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling deletePriceListEntry.');
        }

        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deletePriceListEntry.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling deletePriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))).replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete price list entry
     */
    async deletePriceListEntry(requestParameters: PriceListEntriesApiDeletePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePriceListEntryRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get price list entries
     */


    async getPriceListEntriesRaw(requestParameters: PriceListEntriesApiGetPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntryCollection>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling getPriceListEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListEntryCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Get price list entries
     */
    async getPriceListEntries(requestParameters: PriceListEntriesApiGetPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntryCollection> {
        const response = await this.getPriceListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get price list entry
     */


    async getPriceListEntryRaw(requestParameters: PriceListEntriesApiGetPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling getPriceListEntry.');
        }

        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getPriceListEntry.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getPriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))).replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListEntryFromJSON(jsonValue));
    }

    /**
     * 
     * Get price list entry
     */
    async getPriceListEntry(requestParameters: PriceListEntriesApiGetPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry> {
        const response = await this.getPriceListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update price list entry
     */


    async updatePriceListEntryRaw(requestParameters: PriceListEntriesApiUpdatePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling updatePriceListEntry.');
        }

        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updatePriceListEntry.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling updatePriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))).replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PriceListEntryToJSON(requestParameters.priceListEntry),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListEntryFromJSON(jsonValue));
    }

    /**
     * 
     * Update price list entry
     */
    async updatePriceListEntry(requestParameters: PriceListEntriesApiUpdatePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry> {
        const response = await this.updatePriceListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
