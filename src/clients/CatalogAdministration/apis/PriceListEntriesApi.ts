/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  PriceListBulkResult,
  PriceListEntry,
  PriceListEntryCollection,
} from '../models';


export namespace priceListEntriesApiParams { 
    export interface AddPriceListEntryRequest {
        priceListCode: string;
        responseFields?: string;
        priceListEntry?: PriceListEntry;
    }
    export interface BulkAddPriceListEntriesRequest {
        publishEvents?: boolean;
        invalidateCache?: boolean;
        allowPartialSuccess?: boolean;
        batchJobCode?: string;
        responseFields?: string;
        priceListEntry?: Array<PriceListEntry>;
    }
    export interface BulkDeletePriceListEntriesRequest {
        publishEvents?: boolean;
        invalidateCache?: boolean;
        allowPartialSuccess?: boolean;
        batchJobCode?: string;
        responseFields?: string;
        priceListEntry?: Array<PriceListEntry>;
    }
    export interface BulkUpdatePriceListEntriesRequest {
        publishEvents?: boolean;
        invalidateCache?: boolean;
        allowPartialSuccess?: boolean;
        batchJobCode?: string;
        responseFields?: string;
        priceListEntry?: Array<PriceListEntry>;
    }
    export interface DeletePriceListEntryRequest {
        priceListCode: string;
        productCode: string;
        currencyCode: string;
        startDate?: string;
    }
    export interface GetPriceListEntriesRequest {
        priceListCode: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        responseFields?: string;
    }
    export interface GetPriceListEntryRequest {
        priceListCode: string;
        productCode: string;
        currencyCode: string;
        startDate?: string;
        responseFields?: string;
    }
    export interface UpdatePriceListEntryRequest {
        priceListCode: string;
        productCode: string;
        currencyCode: string;
        startDate?: string;
        responseFields?: string;
        priceListEntry?: PriceListEntry;
    }
}
/**
* PriceListEntriesApiService - interface
* 
* @export
* @interface PriceListEntriesApi
*/
export interface PriceListEntriesApiService {
    /**
    * 
    * @summary Add price list entry
    * @param {string} priceListCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {PriceListEntry} [priceListEntry] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    addPriceListEntryRaw(requestParameters: priceListEntriesApiParams.AddPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>>;

    /**
    * 
    * Add price list entry
    */
    addPriceListEntry(requestParameters: priceListEntriesApiParams.AddPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry>;

    /**
    * 
    * @summary Bulk add price list entries
    * @param {boolean} [publishEvents] 
    * @param {boolean} [invalidateCache] 
    * @param {boolean} [allowPartialSuccess] 
    * @param {string} [batchJobCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<PriceListEntry>} [priceListEntry] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    bulkAddPriceListEntriesRaw(requestParameters: priceListEntriesApiParams.BulkAddPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListBulkResult>>;

    /**
    * 
    * Bulk add price list entries
    */
    bulkAddPriceListEntries(requestParameters: priceListEntriesApiParams.BulkAddPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListBulkResult>;

    /**
    * 
    * @summary Bulk delete price list entries
    * @param {boolean} [publishEvents] 
    * @param {boolean} [invalidateCache] 
    * @param {boolean} [allowPartialSuccess] 
    * @param {string} [batchJobCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<PriceListEntry>} [priceListEntry] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    bulkDeletePriceListEntriesRaw(requestParameters: priceListEntriesApiParams.BulkDeletePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListBulkResult>>;

    /**
    * 
    * Bulk delete price list entries
    */
    bulkDeletePriceListEntries(requestParameters: priceListEntriesApiParams.BulkDeletePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListBulkResult>;

    /**
    * 
    * @summary Bulk update price list entries
    * @param {boolean} [publishEvents] 
    * @param {boolean} [invalidateCache] 
    * @param {boolean} [allowPartialSuccess] 
    * @param {string} [batchJobCode] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<PriceListEntry>} [priceListEntry] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    bulkUpdatePriceListEntriesRaw(requestParameters: priceListEntriesApiParams.BulkUpdatePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListBulkResult>>;

    /**
    * 
    * Bulk update price list entries
    */
    bulkUpdatePriceListEntries(requestParameters: priceListEntriesApiParams.BulkUpdatePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListBulkResult>;

    /**
    * 
    * @summary Delete price list entry
    * @param {string} priceListCode 
    * @param {string} productCode 
    * @param {string} currencyCode 
    * @param {string} [startDate] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    deletePriceListEntryRaw(requestParameters: priceListEntriesApiParams.DeletePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Delete price list entry
    */
    deletePriceListEntry(requestParameters: priceListEntriesApiParams.DeletePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Get price list entries
    * @param {string} priceListCode 
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    getPriceListEntriesRaw(requestParameters: priceListEntriesApiParams.GetPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntryCollection>>;

    /**
    * 
    * Get price list entries
    */
    getPriceListEntries(requestParameters: priceListEntriesApiParams.GetPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntryCollection>;

    /**
    * 
    * @summary Get price list entry
    * @param {string} priceListCode 
    * @param {string} productCode 
    * @param {string} currencyCode 
    * @param {string} [startDate] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    getPriceListEntryRaw(requestParameters: priceListEntriesApiParams.GetPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>>;

    /**
    * 
    * Get price list entry
    */
    getPriceListEntry(requestParameters: priceListEntriesApiParams.GetPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry>;

    /**
    * 
    * @summary Update price list entry
    * @param {string} priceListCode 
    * @param {string} productCode 
    * @param {string} currencyCode 
    * @param {string} [startDate] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {PriceListEntry} [priceListEntry] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof PriceListEntriesApiInterface
    */
    updatePriceListEntryRaw(requestParameters: priceListEntriesApiParams.UpdatePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>>;

    /**
    * 
    * Update price list entry
    */
    updatePriceListEntry(requestParameters: priceListEntriesApiParams.UpdatePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry>;

}


/**
 * 
 */
export class PriceListEntriesApi extends runtime.BaseAPI implements PriceListEntriesApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * 
     * Add price list entry
     */


    async addPriceListEntryRaw(requestParameters: priceListEntriesApiParams.AddPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling addPriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Add price list entry
     */
    async addPriceListEntry(requestParameters: priceListEntriesApiParams.AddPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry> {
        const response = await this.addPriceListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Bulk add price list entries
     */


    async bulkAddPriceListEntriesRaw(requestParameters: priceListEntriesApiParams.BulkAddPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListBulkResult>> {
        const queryParameters: any = {};

        if (requestParameters.publishEvents !== undefined) {
            queryParameters['publishEvents'] = requestParameters.publishEvents;
        }

        if (requestParameters.invalidateCache !== undefined) {
            queryParameters['invalidateCache'] = requestParameters.invalidateCache;
        }

        if (requestParameters.allowPartialSuccess !== undefined) {
            queryParameters['allowPartialSuccess'] = requestParameters.allowPartialSuccess;
        }

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/bulkaddentries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Bulk add price list entries
     */
    async bulkAddPriceListEntries(requestParameters: priceListEntriesApiParams.BulkAddPriceListEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListBulkResult> {
        const response = await this.bulkAddPriceListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Bulk delete price list entries
     */


    async bulkDeletePriceListEntriesRaw(requestParameters: priceListEntriesApiParams.BulkDeletePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListBulkResult>> {
        const queryParameters: any = {};

        if (requestParameters.publishEvents !== undefined) {
            queryParameters['publishEvents'] = requestParameters.publishEvents;
        }

        if (requestParameters.invalidateCache !== undefined) {
            queryParameters['invalidateCache'] = requestParameters.invalidateCache;
        }

        if (requestParameters.allowPartialSuccess !== undefined) {
            queryParameters['allowPartialSuccess'] = requestParameters.allowPartialSuccess;
        }

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/bulkdeleteentries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Bulk delete price list entries
     */
    async bulkDeletePriceListEntries(requestParameters: priceListEntriesApiParams.BulkDeletePriceListEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListBulkResult> {
        const response = await this.bulkDeletePriceListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Bulk update price list entries
     */


    async bulkUpdatePriceListEntriesRaw(requestParameters: priceListEntriesApiParams.BulkUpdatePriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListBulkResult>> {
        const queryParameters: any = {};

        if (requestParameters.publishEvents !== undefined) {
            queryParameters['publishEvents'] = requestParameters.publishEvents;
        }

        if (requestParameters.invalidateCache !== undefined) {
            queryParameters['invalidateCache'] = requestParameters.invalidateCache;
        }

        if (requestParameters.allowPartialSuccess !== undefined) {
            queryParameters['allowPartialSuccess'] = requestParameters.allowPartialSuccess;
        }

        if (requestParameters.batchJobCode !== undefined) {
            queryParameters['batchJobCode'] = requestParameters.batchJobCode;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/bulkupdateentries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Bulk update price list entries
     */
    async bulkUpdatePriceListEntries(requestParameters: priceListEntriesApiParams.BulkUpdatePriceListEntriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListBulkResult> {
        const response = await this.bulkUpdatePriceListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Delete price list entry
     */


    async deletePriceListEntryRaw(requestParameters: priceListEntriesApiParams.DeletePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling deletePriceListEntry.');
        }

        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling deletePriceListEntry.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling deletePriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))).replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete price list entry
     */
    async deletePriceListEntry(requestParameters: priceListEntriesApiParams.DeletePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePriceListEntryRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get price list entries
     */


    async getPriceListEntriesRaw(requestParameters: priceListEntriesApiParams.GetPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntryCollection>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling getPriceListEntries.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get price list entries
     */
    async getPriceListEntries(requestParameters: priceListEntriesApiParams.GetPriceListEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntryCollection> {
        const response = await this.getPriceListEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get price list entry
     */


    async getPriceListEntryRaw(requestParameters: priceListEntriesApiParams.GetPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling getPriceListEntry.');
        }

        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling getPriceListEntry.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getPriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))).replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get price list entry
     */
    async getPriceListEntry(requestParameters: priceListEntriesApiParams.GetPriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry> {
        const response = await this.getPriceListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Update price list entry
     */


    async updatePriceListEntryRaw(requestParameters: priceListEntriesApiParams.UpdatePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PriceListEntry>> {
        if (requestParameters.priceListCode === null || requestParameters.priceListCode === undefined) {
            throw new runtime.RequiredError('priceListCode','Required parameter requestParameters.priceListCode was null or undefined when calling updatePriceListEntry.');
        }

        if (requestParameters.productCode === null || requestParameters.productCode === undefined) {
            throw new runtime.RequiredError('productCode','Required parameter requestParameters.productCode was null or undefined when calling updatePriceListEntry.');
        }

        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling updatePriceListEntry.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/pricelists/{priceListCode}/entries/{productCode}/{currencyCode}`.replace(`{${"priceListCode"}}`, encodeURIComponent(String(requestParameters.priceListCode))).replace(`{${"productCode"}}`, encodeURIComponent(String(requestParameters.productCode))).replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.priceListEntry,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Update price list entry
     */
    async updatePriceListEntry(requestParameters: priceListEntriesApiParams.UpdatePriceListEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PriceListEntry> {
        const response = await this.updatePriceListEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
