/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  QuickEditProductActions,
  QuickEditProductInCatalogActions,
  QuickEditProductPropertyActions,
  QuickEditResponse,
} from '../models';
import {
    QuickEditProductActionsFromJSON,
    QuickEditProductActionsToJSON,
    QuickEditProductInCatalogActionsFromJSON,
    QuickEditProductInCatalogActionsToJSON,
    QuickEditProductPropertyActionsFromJSON,
    QuickEditProductPropertyActionsToJSON,
    QuickEditResponseFromJSON,
    QuickEditResponseToJSON,
} from '../models';

export interface ProductQuickEditApiUpdateProductInCatalogRequest {
    quickEditProductInCatalogActions?: QuickEditProductInCatalogActions;
}

export interface ProductQuickEditApiUpdateProductPropertiesRequest {
    quickEditProductPropertyActions?: QuickEditProductPropertyActions;
}

export interface ProductQuickEditApiUpdateProductsRequest {
    quickEditProductActions?: QuickEditProductActions;
}

/**
 * 
 */
export class ProductQuickEditApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     *  Values will be added not replaced.
     * Endpoint  is used to update product in Catalog
     */


    async updateProductInCatalogRaw(requestParameters: ProductQuickEditApiUpdateProductInCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuickEditResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/quickedit/products/productincatalog`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuickEditProductInCatalogActionsToJSON(requestParameters.quickEditProductInCatalogActions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuickEditResponseFromJSON(jsonValue));
    }

    /**
     *  Values will be added not replaced.
     * Endpoint  is used to update product in Catalog
     */
    async updateProductInCatalog(requestParameters: ProductQuickEditApiUpdateProductInCatalogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuickEditResponse> {
        const response = await this.updateProductInCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Endpoint used to apply properties updates  Values will be added not replaced
     */


    async updateProductPropertiesRaw(requestParameters: ProductQuickEditApiUpdateProductPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuickEditResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/quickedit/products/properties`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuickEditProductPropertyActionsToJSON(requestParameters.quickEditProductPropertyActions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuickEditResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Endpoint used to apply properties updates  Values will be added not replaced
     */
    async updateProductProperties(requestParameters: ProductQuickEditApiUpdateProductPropertiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuickEditResponse> {
        const response = await this.updateProductPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Endpoint used to apply top level product updates  Downside is that the whole product has to be hydrated
     */


    async updateProductsRaw(requestParameters: ProductQuickEditApiUpdateProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuickEditResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/quickedit/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuickEditProductActionsToJSON(requestParameters.quickEditProductActions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuickEditResponseFromJSON(jsonValue));
    }

    /**
     * 
     * Endpoint used to apply top level product updates  Downside is that the whole product has to be hydrated
     */
    async updateProducts(requestParameters: ProductQuickEditApiUpdateProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuickEditResponse> {
        const response = await this.updateProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
