/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  AssignedDiscount,
  Coupon,
  CouponCollection,
  CouponSet,
  CouponSetCollection,
} from '../models';


export namespace couponSetsApiParams { 
    export interface AddCouponSetRequest {
        responseFields?: string;
        couponSet?: CouponSet;
    }
    export interface AddCouponsRequest {
        couponSetCode: string;
        responseFields?: string;
        coupon?: Array<Coupon>;
    }
    export interface AssignDiscountRequest {
        couponSetCode: string;
        responseFields?: string;
        assignedDiscount?: AssignedDiscount;
    }
    export interface DeleteCouponRequest {
        couponSetCode: string;
        couponCode: string;
    }
    export interface DeleteCouponSetRequest {
        couponSetCode: string;
    }
    export interface DeleteCouponsRequest {
        couponSetCode: string;
        responseFields?: string;
        requestBody?: Array<string>;
    }
    export interface GetAssignedDiscountsRequest {
        couponSetCode: string;
        responseFields?: string;
    }
    export interface GetCouponRequest {
        couponSetCode: string;
        couponCode: string;
        includeCounts?: boolean;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetCouponSetRequest {
        couponSetCode: string;
        includeCounts?: boolean;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetCouponSetsRequest {
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        includeCounts?: boolean;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetCouponsRequest {
        couponSetCode: string;
        startIndex?: number;
        pageSize?: number;
        sortBy?: string;
        filter?: string;
        includeCounts?: boolean;
        responseGroups?: string;
        responseFields?: string;
    }
    export interface GetUniqueCouponSetCodeRequest {
        responseFields?: string;
    }
    export interface UnAssignDiscountRequest {
        couponSetCode: string;
        discountId: number;
    }
    export interface UpdateCouponSetRequest {
        couponSetCode: string;
        responseFields?: string;
        couponSet?: CouponSet;
    }
    export interface ValidateUniqueCouponSetCodeRequest {
        responseFields?: string;
        body?: string;
    }
}
/**
* CouponSetsApiService - interface
* 
* @export
* @interface CouponSetsApi
*/
export interface CouponSetsApiService {
    /**
    * Adds a single CouponSet
    * @summary Add coupon set
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CouponSet} [couponSet] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    addCouponSetRaw(requestParameters: couponSetsApiParams.AddCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSet>>;

    /**
    * Adds a single CouponSet
    * Add coupon set
    */
    addCouponSet(requestParameters: couponSetsApiParams.AddCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSet>;

    /**
    * 
    * @summary Add coupons
    * @param {string} couponSetCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<Coupon>} [coupon] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    addCouponsRaw(requestParameters: couponSetsApiParams.AddCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Add coupons
    */
    addCoupons(requestParameters: couponSetsApiParams.AddCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Assign discount
    * @param {string} couponSetCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {AssignedDiscount} [assignedDiscount] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    assignDiscountRaw(requestParameters: couponSetsApiParams.AssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Assign discount
    */
    assignDiscount(requestParameters: couponSetsApiParams.AssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Delete coupon
    * @param {string} couponSetCode 
    * @param {string} couponCode 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    deleteCouponRaw(requestParameters: couponSetsApiParams.DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Delete coupon
    */
    deleteCoupon(requestParameters: couponSetsApiParams.DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Delete coupon set
    * @param {string} couponSetCode 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    deleteCouponSetRaw(requestParameters: couponSetsApiParams.DeleteCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Delete coupon set
    */
    deleteCouponSet(requestParameters: couponSetsApiParams.DeleteCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Delete coupons
    * @param {string} couponSetCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {Array<string>} [requestBody] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    deleteCouponsRaw(requestParameters: couponSetsApiParams.DeleteCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * Delete coupons
    */
    deleteCoupons(requestParameters: couponSetsApiParams.DeleteCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * 
    * @summary Get assigned discounts
    * @param {string} couponSetCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    getAssignedDiscountsRaw(requestParameters: couponSetsApiParams.GetAssignedDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssignedDiscount>>>;

    /**
    * 
    * Get assigned discounts
    */
    getAssignedDiscounts(requestParameters: couponSetsApiParams.GetAssignedDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssignedDiscount>>;

    /**
    * 
    * @summary Get coupon
    * @param {string} couponSetCode 
    * @param {string} couponCode 
    * @param {boolean} [includeCounts] 
    * @param {string} [responseGroups] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    getCouponRaw(requestParameters: couponSetsApiParams.GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coupon>>;

    /**
    * 
    * Get coupon
    */
    getCoupon(requestParameters: couponSetsApiParams.GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coupon>;

    /**
    * Returns a single CouponSet
    * @summary Get coupon set
    * @param {string} couponSetCode CouponSetCode for the requested CouponSet
    * @param {boolean} [includeCounts] Include the redemption counts and coupon counts
    * @param {string} [responseGroups] \&quot;counts\&quot; includes the number of redemptions, coupon codes, and assigned discounts.
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    getCouponSetRaw(requestParameters: couponSetsApiParams.GetCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSet>>;

    /**
    * Returns a single CouponSet
    * Get coupon set
    */
    getCouponSet(requestParameters: couponSetsApiParams.GetCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSet>;

    /**
    * Returns a paged collection of CouponSets
    * @summary Get coupon sets
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {boolean} [includeCounts] Include coupon and redemption counts
    * @param {string} [responseGroups] \&quot;counts\&quot; returns discount and couponCode counts
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    getCouponSetsRaw(requestParameters: couponSetsApiParams.GetCouponSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSetCollection>>;

    /**
    * Returns a paged collection of CouponSets
    * Get coupon sets
    */
    getCouponSets(requestParameters: couponSetsApiParams.GetCouponSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSetCollection>;

    /**
    * Returns a paged collection of Coupons
    * @summary Get coupons
    * @param {string} couponSetCode 
    * @param {number} [startIndex] 
    * @param {number} [pageSize] 
    * @param {string} [sortBy] 
    * @param {string} [filter] 
    * @param {boolean} [includeCounts] Includes coupon redemption counts
    * @param {string} [responseGroups] counts
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    getCouponsRaw(requestParameters: couponSetsApiParams.GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCollection>>;

    /**
    * Returns a paged collection of Coupons
    * Get coupons
    */
    getCoupons(requestParameters: couponSetsApiParams.GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCollection>;

    /**
    * Returns a random 4 character code that is unique as a coupon set code.
    * @summary Get unique coupon set code
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    getUniqueCouponSetCodeRaw(requestParameters: couponSetsApiParams.GetUniqueCouponSetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
    * Returns a random 4 character code that is unique as a coupon set code.
    * Get unique coupon set code
    */
    getUniqueCouponSetCode(requestParameters: couponSetsApiParams.GetUniqueCouponSetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
    * 
    * @summary UnAssign discount
    * @param {string} couponSetCode 
    * @param {number} discountId 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    unAssignDiscountRaw(requestParameters: couponSetsApiParams.UnAssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * 
    * UnAssign discount
    */
    unAssignDiscount(requestParameters: couponSetsApiParams.UnAssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Update a CouponSet.     You can not update the Code or ID once the set is created.
    * @summary Update coupon set
    * @param {string} couponSetCode 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {CouponSet} [couponSet] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    updateCouponSetRaw(requestParameters: couponSetsApiParams.UpdateCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSet>>;

    /**
    * Update a CouponSet.     You can not update the Code or ID once the set is created.
    * Update coupon set
    */
    updateCouponSet(requestParameters: couponSetsApiParams.UpdateCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSet>;

    /**
    *  Tests code for uniqueness and validity.
    * @summary Validate unique coupon set code
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {string} [body] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof CouponSetsApiInterface
    */
    validateUniqueCouponSetCodeRaw(requestParameters: couponSetsApiParams.ValidateUniqueCouponSetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    *  Tests code for uniqueness and validity.
    * Validate unique coupon set code
    */
    validateUniqueCouponSetCode(requestParameters: couponSetsApiParams.ValidateUniqueCouponSetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}


/**
 * 
 */
export class CouponSetsApi extends runtime.BaseAPI implements CouponSetsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds a single CouponSet
     * Add coupon set
     */


    async addCouponSetRaw(requestParameters: couponSetsApiParams.AddCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSet>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.couponSet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a single CouponSet
     * Add coupon set
     */
    async addCouponSet(requestParameters: couponSetsApiParams.AddCouponSetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSet> {
        const response = await this.addCouponSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Add coupons
     */


    async addCouponsRaw(requestParameters: couponSetsApiParams.AddCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling addCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.coupon,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Add coupons
     */
    async addCoupons(requestParameters: couponSetsApiParams.AddCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addCouponsRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Assign discount
     */


    async assignDiscountRaw(requestParameters: couponSetsApiParams.AssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling assignDiscount.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.assignedDiscount,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Assign discount
     */
    async assignDiscount(requestParameters: couponSetsApiParams.AssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assignDiscountRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete coupon
     */


    async deleteCouponRaw(requestParameters: couponSetsApiParams.DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling deleteCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling deleteCoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete coupon
     */
    async deleteCoupon(requestParameters: couponSetsApiParams.DeleteCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCouponRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete coupon set
     */


    async deleteCouponSetRaw(requestParameters: couponSetsApiParams.DeleteCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling deleteCouponSet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete coupon set
     */
    async deleteCouponSet(requestParameters: couponSetsApiParams.DeleteCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCouponSetRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Delete coupons
     */


    async deleteCouponsRaw(requestParameters: couponSetsApiParams.DeleteCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling deleteCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/remove`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Delete coupons
     */
    async deleteCoupons(requestParameters: couponSetsApiParams.DeleteCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCouponsRaw(requestParameters, initOverrides);
    }

    /**
     * 
     * Get assigned discounts
     */


    async getAssignedDiscountsRaw(requestParameters: couponSetsApiParams.GetAssignedDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AssignedDiscount>>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling getAssignedDiscounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get assigned discounts
     */
    async getAssignedDiscounts(requestParameters: couponSetsApiParams.GetAssignedDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AssignedDiscount>> {
        const response = await this.getAssignedDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get coupon
     */


    async getCouponRaw(requestParameters: couponSetsApiParams.GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coupon>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling getCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling getCoupon.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeCounts !== undefined) {
            queryParameters['includeCounts'] = requestParameters.includeCounts;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes/{couponCode}`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get coupon
     */
    async getCoupon(requestParameters: couponSetsApiParams.GetCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coupon> {
        const response = await this.getCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single CouponSet
     * Get coupon set
     */


    async getCouponSetRaw(requestParameters: couponSetsApiParams.GetCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSet>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling getCouponSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeCounts !== undefined) {
            queryParameters['includeCounts'] = requestParameters.includeCounts;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a single CouponSet
     * Get coupon set
     */
    async getCouponSet(requestParameters: couponSetsApiParams.GetCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSet> {
        const response = await this.getCouponSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paged collection of CouponSets
     * Get coupon sets
     */


    async getCouponSetsRaw(requestParameters: couponSetsApiParams.GetCouponSetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSetCollection>> {
        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeCounts !== undefined) {
            queryParameters['includeCounts'] = requestParameters.includeCounts;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a paged collection of CouponSets
     * Get coupon sets
     */
    async getCouponSets(requestParameters: couponSetsApiParams.GetCouponSetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSetCollection> {
        const response = await this.getCouponSetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a paged collection of Coupons
     * Get coupons
     */


    async getCouponsRaw(requestParameters: couponSetsApiParams.GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCollection>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling getCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.startIndex !== undefined) {
            queryParameters['startIndex'] = requestParameters.startIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.includeCounts !== undefined) {
            queryParameters['includeCounts'] = requestParameters.includeCounts;
        }

        if (requestParameters.responseGroups !== undefined) {
            queryParameters['responseGroups'] = requestParameters.responseGroups;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/couponcodes`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a paged collection of Coupons
     * Get coupons
     */
    async getCoupons(requestParameters: couponSetsApiParams.GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCollection> {
        const response = await this.getCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a random 4 character code that is unique as a coupon set code.
     * Get unique coupon set code
     */


    async getUniqueCouponSetCodeRaw(requestParameters: couponSetsApiParams.GetUniqueCouponSetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/unique-code`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns a random 4 character code that is unique as a coupon set code.
     * Get unique coupon set code
     */
    async getUniqueCouponSetCode(requestParameters: couponSetsApiParams.GetUniqueCouponSetCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getUniqueCouponSetCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * UnAssign discount
     */


    async unAssignDiscountRaw(requestParameters: couponSetsApiParams.UnAssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling unAssignDiscount.');
        }

        if (requestParameters.discountId === null || requestParameters.discountId === undefined) {
            throw new runtime.RequiredError('discountId','Required parameter requestParameters.discountId was null or undefined when calling unAssignDiscount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}/assigneddiscounts/{discountId}`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))).replace(`{${"discountId"}}`, encodeURIComponent(String(requestParameters.discountId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * UnAssign discount
     */
    async unAssignDiscount(requestParameters: couponSetsApiParams.UnAssignDiscountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unAssignDiscountRaw(requestParameters, initOverrides);
    }

    /**
     * Update a CouponSet.     You can not update the Code or ID once the set is created.
     * Update coupon set
     */


    async updateCouponSetRaw(requestParameters: couponSetsApiParams.UpdateCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponSet>> {
        if (requestParameters.couponSetCode === null || requestParameters.couponSetCode === undefined) {
            throw new runtime.RequiredError('couponSetCode','Required parameter requestParameters.couponSetCode was null or undefined when calling updateCouponSet.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/{couponSetCode}`.replace(`{${"couponSetCode"}}`, encodeURIComponent(String(requestParameters.couponSetCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.couponSet,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update a CouponSet.     You can not update the Code or ID once the set is created.
     * Update coupon set
     */
    async updateCouponSet(requestParameters: couponSetsApiParams.UpdateCouponSetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponSet> {
        const response = await this.updateCouponSetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Tests code for uniqueness and validity.
     * Validate unique coupon set code
     */


    async validateUniqueCouponSetCodeRaw(requestParameters: couponSetsApiParams.ValidateUniqueCouponSetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/couponsets/validate-unique-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  Tests code for uniqueness and validity.
     * Validate unique coupon set code
     */
    async validateUniqueCouponSetCode(requestParameters: couponSetsApiParams.ValidateUniqueCouponSetCodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateUniqueCouponSetCodeRaw(requestParameters, initOverrides);
    }

}
