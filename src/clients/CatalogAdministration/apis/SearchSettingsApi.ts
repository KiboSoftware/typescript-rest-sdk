/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SearchSettings,
  SearchSettingsCollection,
  SiteSearchSettings,
  SpellcheckUpdate,
} from '../models';


export namespace searchSettingsApiParams { 
    export interface AddSearchSettingRequest {
        fromSystemDefault?: boolean;
        copyFromName?: string;
        name?: string;
        makeDefault?: boolean;
        responseFields?: string;
        searchSettings?: SearchSettings;
    }
    export interface DeleteSearchSettingRequest {
        name: string;
    }
    export interface DeleteSiteSearchSettingsRequest {
        name: string;
    }
    export interface GetSearchSettingRequest {
        name: string;
        responseFields?: string;
    }
    export interface GetSearchSettingsRequest {
        responseFields?: string;
    }
    export interface GetSiteSearchSettingsRequest {
        name: string;
        responseFields?: string;
    }
    export interface GetSystemDefaultSettingsRequest {
        responseFields?: string;
    }
    export interface UpdateSearchSettingRequest {
        name: string;
        responseFields?: string;
        searchSettings?: SearchSettings;
    }
    export interface UpdateSiteSearchSettingsRequest {
        name: string;
        responseFields?: string;
        siteSearchSettings?: SiteSearchSettings;
    }
    export interface UpdateSpellCheckRequest {
        responseFields?: string;
        spellcheckUpdate?: SpellcheckUpdate;
    }
}
/**
* SearchSettingsApiService - interface
* 
* @export
* @interface SearchSettingsApi
*/
export interface SearchSettingsApiService {
    /**
    * Adds the Search Settings for a specific site.
    * @summary Add search setting
    * @param {boolean} [fromSystemDefault] 
    * @param {string} [copyFromName] 
    * @param {string} [name] 
    * @param {boolean} [makeDefault] 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SearchSettings} [searchSettings] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    addSearchSettingRaw(requestParameters: searchSettingsApiParams.AddSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>>;

    /**
    * Adds the Search Settings for a specific site.
    * Add search setting
    */
    addSearchSetting(requestParameters: searchSettingsApiParams.AddSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings>;

    /**
    * Delete the Search Settings for a specific site by name.
    * @summary Delete search setting
    * @param {string} name 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    deleteSearchSettingRaw(requestParameters: searchSettingsApiParams.DeleteSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>>;

    /**
    * Delete the Search Settings for a specific site by name.
    * Delete search setting
    */
    deleteSearchSetting(requestParameters: searchSettingsApiParams.DeleteSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings>;

    /**
    * Deletes the SiteSearchSettings for a specific SearchSetting by name.
    * @summary Delete site search settings
    * @param {string} name 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    deleteSiteSearchSettingsRaw(requestParameters: searchSettingsApiParams.DeleteSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Deletes the SiteSearchSettings for a specific SearchSetting by name.
    * Delete site search settings
    */
    deleteSiteSearchSettings(requestParameters: searchSettingsApiParams.DeleteSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
    * Get site search settings by name.
    * @summary Get search setting
    * @param {string} name 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    getSearchSettingRaw(requestParameters: searchSettingsApiParams.GetSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>>;

    /**
    * Get site search settings by name.
    * Get search setting
    */
    getSearchSetting(requestParameters: searchSettingsApiParams.GetSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings>;

    /**
    * Get site search settings list.
    * @summary Get search settings
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    getSearchSettingsRaw(requestParameters: searchSettingsApiParams.GetSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettingsCollection>>;

    /**
    * Get site search settings list.
    * Get search settings
    */
    getSearchSettings(requestParameters: searchSettingsApiParams.GetSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettingsCollection>;

    /**
    * Get SiteSearchSettings for a specific SearchSettings by name.
    * @summary Get site search settings
    * @param {string} name 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    getSiteSearchSettingsRaw(requestParameters: searchSettingsApiParams.GetSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchSettings>>;

    /**
    * Get SiteSearchSettings for a specific SearchSettings by name.
    * Get site search settings
    */
    getSiteSearchSettings(requestParameters: searchSettingsApiParams.GetSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchSettings>;

    /**
    * Get the system default search settings
    * @summary Get system default search setting
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    getSystemDefaultSettingsRaw(requestParameters: searchSettingsApiParams.GetSystemDefaultSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>>;

    /**
    * Get the system default search settings
    * Get system default search setting
    */
    getSystemDefaultSettings(requestParameters: searchSettingsApiParams.GetSystemDefaultSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings>;

    /**
    * Updates the Search Settings for a specific site.
    * @summary Update search setting
    * @param {string} name 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SearchSettings} [searchSettings] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    updateSearchSettingRaw(requestParameters: searchSettingsApiParams.UpdateSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>>;

    /**
    * Updates the Search Settings for a specific site.
    * Update search setting
    */
    updateSearchSetting(requestParameters: searchSettingsApiParams.UpdateSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings>;

    /**
    * Updates the SiteSearchSettings for a specific SearchSetting by name.
    * @summary Update site search settings
    * @param {string} name 
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SiteSearchSettings} [siteSearchSettings] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    updateSiteSearchSettingsRaw(requestParameters: searchSettingsApiParams.UpdateSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchSettings>>;

    /**
    * Updates the SiteSearchSettings for a specific SearchSetting by name.
    * Update site search settings
    */
    updateSiteSearchSettings(requestParameters: searchSettingsApiParams.UpdateSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchSettings>;

    /**
    * Update Spellcheck for SiteSearchSettings.
    * @summary Update Spellcheck settings
    * @param {string} [responseFields] limits which fields are returned in the response body
    * @param {SpellcheckUpdate} [spellcheckUpdate] 
    * @param {*} [options] Override http request option.
    * @throws {RequiredError}
    * @memberof SearchSettingsApiInterface
    */
    updateSpellCheckRaw(requestParameters: searchSettingsApiParams.UpdateSpellCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
    * Update Spellcheck for SiteSearchSettings.
    * Update Spellcheck settings
    */
    updateSpellCheck(requestParameters: searchSettingsApiParams.UpdateSpellCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}


/**
 * 
 */
export class SearchSettingsApi extends runtime.BaseAPI implements SearchSettingsApiService {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds the Search Settings for a specific site.
     * Add search setting
     */


    async addSearchSettingRaw(requestParameters: searchSettingsApiParams.AddSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        const queryParameters: any = {};

        if (requestParameters.fromSystemDefault !== undefined) {
            queryParameters['fromSystemDefault'] = requestParameters.fromSystemDefault;
        }

        if (requestParameters.copyFromName !== undefined) {
            queryParameters['copyFromName'] = requestParameters.copyFromName;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.makeDefault !== undefined) {
            queryParameters['makeDefault'] = requestParameters.makeDefault;
        }

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.searchSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds the Search Settings for a specific site.
     * Add search setting
     */
    async addSearchSetting(requestParameters: searchSettingsApiParams.AddSearchSettingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.addSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the Search Settings for a specific site by name.
     * Delete search setting
     */


    async deleteSearchSettingRaw(requestParameters: searchSettingsApiParams.DeleteSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteSearchSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Delete the Search Settings for a specific site by name.
     * Delete search setting
     */
    async deleteSearchSetting(requestParameters: searchSettingsApiParams.DeleteSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.deleteSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the SiteSearchSettings for a specific SearchSetting by name.
     * Delete site search settings
     */


    async deleteSiteSearchSettingsRaw(requestParameters: searchSettingsApiParams.DeleteSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteSiteSearchSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/sitesearchsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the SiteSearchSettings for a specific SearchSetting by name.
     * Delete site search settings
     */
    async deleteSiteSearchSettings(requestParameters: searchSettingsApiParams.DeleteSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSiteSearchSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * Get site search settings by name.
     * Get search setting
     */


    async getSearchSettingRaw(requestParameters: searchSettingsApiParams.GetSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getSearchSetting.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get site search settings by name.
     * Get search setting
     */
    async getSearchSetting(requestParameters: searchSettingsApiParams.GetSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.getSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get site search settings list.
     * Get search settings
     */


    async getSearchSettingsRaw(requestParameters: searchSettingsApiParams.GetSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettingsCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get site search settings list.
     * Get search settings
     */
    async getSearchSettings(requestParameters: searchSettingsApiParams.GetSearchSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettingsCollection> {
        const response = await this.getSearchSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SiteSearchSettings for a specific SearchSettings by name.
     * Get site search settings
     */


    async getSiteSearchSettingsRaw(requestParameters: searchSettingsApiParams.GetSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getSiteSearchSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/sitesearchsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get SiteSearchSettings for a specific SearchSettings by name.
     * Get site search settings
     */
    async getSiteSearchSettings(requestParameters: searchSettingsApiParams.GetSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchSettings> {
        const response = await this.getSiteSearchSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the system default search settings
     * Get system default search setting
     */


    async getSystemDefaultSettingsRaw(requestParameters: searchSettingsApiParams.GetSystemDefaultSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/systemdefault`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get the system default search settings
     * Get system default search setting
     */
    async getSystemDefaultSettings(requestParameters: searchSettingsApiParams.GetSystemDefaultSettingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.getSystemDefaultSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Search Settings for a specific site.
     * Update search setting
     */


    async updateSearchSettingRaw(requestParameters: searchSettingsApiParams.UpdateSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateSearchSetting.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.searchSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the Search Settings for a specific site.
     * Update search setting
     */
    async updateSearchSetting(requestParameters: searchSettingsApiParams.UpdateSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.updateSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the SiteSearchSettings for a specific SearchSetting by name.
     * Update site search settings
     */


    async updateSiteSearchSettingsRaw(requestParameters: searchSettingsApiParams.UpdateSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateSiteSearchSettings.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/sitesearchsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.siteSearchSettings,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates the SiteSearchSettings for a specific SearchSetting by name.
     * Update site search settings
     */
    async updateSiteSearchSettings(requestParameters: searchSettingsApiParams.UpdateSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchSettings> {
        const response = await this.updateSiteSearchSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Spellcheck for SiteSearchSettings.
     * Update Spellcheck settings
     */


    async updateSpellCheckRaw(requestParameters: searchSettingsApiParams.UpdateSpellCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/search/spellcheck`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.spellcheckUpdate,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Spellcheck for SiteSearchSettings.
     * Update Spellcheck settings
     */
    async updateSpellCheck(requestParameters: searchSettingsApiParams.UpdateSpellCheckRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSpellCheckRaw(requestParameters, initOverrides);
    }

}
