/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  SearchSettings,
  SearchSettingsCollection,
  SiteSearchSettings,
  SpellcheckUpdate,
} from '../models';
import {
    SearchSettingsFromJSON,
    SearchSettingsToJSON,
    SearchSettingsCollectionFromJSON,
    SearchSettingsCollectionToJSON,
    SiteSearchSettingsFromJSON,
    SiteSearchSettingsToJSON,
    SpellcheckUpdateFromJSON,
    SpellcheckUpdateToJSON,
} from '../models';

export interface SearchSettingsApiAddSearchSettingRequest {
    fromSystemDefault?: boolean;
    name?: string;
    makeDefault?: boolean;
    searchSettings?: SearchSettings;
}

export interface SearchSettingsApiDeleteSearchSettingRequest {
    name: string;
}

export interface SearchSettingsApiDeleteSiteSearchSettingsRequest {
    name: string;
}

export interface SearchSettingsApiGetSearchSettingRequest {
    name: string;
}

export interface SearchSettingsApiGetSiteSearchSettingsRequest {
    name: string;
}

export interface SearchSettingsApiUpdateSearchSettingRequest {
    name: string;
    searchSettings?: SearchSettings;
}

export interface SearchSettingsApiUpdateSiteSearchSettingsRequest {
    name: string;
    siteSearchSettings?: SiteSearchSettings;
}

export interface SearchSettingsApiUpdateSpellCheckRequest {
    spellcheckUpdate?: SpellcheckUpdate;
}

/**
 * 
 */
export class SearchSettingsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Adds the Search Settings for a specific site.
     * Add search setting
     */


    async addSearchSettingRaw(requestParameters: SearchSettingsApiAddSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        const queryParameters: any = {};

        if (requestParameters.fromSystemDefault !== undefined) {
            queryParameters['fromSystemDefault'] = requestParameters.fromSystemDefault;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.makeDefault !== undefined) {
            queryParameters['makeDefault'] = requestParameters.makeDefault;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSettingsToJSON(requestParameters.searchSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSettingsFromJSON(jsonValue));
    }

    /**
     * Adds the Search Settings for a specific site.
     * Add search setting
     */
    async addSearchSetting(requestParameters: SearchSettingsApiAddSearchSettingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.addSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the Search Settings for a specific site by name.
     * Delete search setting
     */


    async deleteSearchSettingRaw(requestParameters: SearchSettingsApiDeleteSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteSearchSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSettingsFromJSON(jsonValue));
    }

    /**
     * Delete the Search Settings for a specific site by name.
     * Delete search setting
     */
    async deleteSearchSetting(requestParameters: SearchSettingsApiDeleteSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.deleteSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the SiteSearchSettings for a specific SearchSetting by name.
     * Delete site search settings
     */


    async deleteSiteSearchSettingsRaw(requestParameters: SearchSettingsApiDeleteSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteSiteSearchSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/sitesearchsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the SiteSearchSettings for a specific SearchSetting by name.
     * Delete site search settings
     */
    async deleteSiteSearchSettings(requestParameters: SearchSettingsApiDeleteSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSiteSearchSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * Get site search settings by name.
     * Get search setting
     */


    async getSearchSettingRaw(requestParameters: SearchSettingsApiGetSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getSearchSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSettingsFromJSON(jsonValue));
    }

    /**
     * Get site search settings by name.
     * Get search setting
     */
    async getSearchSetting(requestParameters: SearchSettingsApiGetSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.getSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get site search settings list.
     * Get search settings
     */


    async getSearchSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettingsCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSettingsCollectionFromJSON(jsonValue));
    }

    /**
     * Get site search settings list.
     * Get search settings
     */
    async getSearchSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettingsCollection> {
        const response = await this.getSearchSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get SiteSearchSettings for a specific SearchSettings by name.
     * Get site search settings
     */


    async getSiteSearchSettingsRaw(requestParameters: SearchSettingsApiGetSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getSiteSearchSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/sitesearchsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteSearchSettingsFromJSON(jsonValue));
    }

    /**
     * Get SiteSearchSettings for a specific SearchSettings by name.
     * Get site search settings
     */
    async getSiteSearchSettings(requestParameters: SearchSettingsApiGetSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchSettings> {
        const response = await this.getSiteSearchSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the system default search settings
     * Get system default search setting
     */


    async getSystemDefaultSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/systemdefault`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSettingsFromJSON(jsonValue));
    }

    /**
     * Get the system default search settings
     * Get system default search setting
     */
    async getSystemDefaultSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.getSystemDefaultSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the Search Settings for a specific site.
     * Update search setting
     */


    async updateSearchSettingRaw(requestParameters: SearchSettingsApiUpdateSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateSearchSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/settings/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SearchSettingsToJSON(requestParameters.searchSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchSettingsFromJSON(jsonValue));
    }

    /**
     * Updates the Search Settings for a specific site.
     * Update search setting
     */
    async updateSearchSetting(requestParameters: SearchSettingsApiUpdateSearchSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchSettings> {
        const response = await this.updateSearchSettingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the SiteSearchSettings for a specific SearchSetting by name.
     * Update site search settings
     */


    async updateSiteSearchSettingsRaw(requestParameters: SearchSettingsApiUpdateSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSearchSettings>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateSiteSearchSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/{name}/sitesearchsettings`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SiteSearchSettingsToJSON(requestParameters.siteSearchSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteSearchSettingsFromJSON(jsonValue));
    }

    /**
     * Updates the SiteSearchSettings for a specific SearchSetting by name.
     * Update site search settings
     */
    async updateSiteSearchSettings(requestParameters: SearchSettingsApiUpdateSiteSearchSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSearchSettings> {
        const response = await this.updateSiteSearchSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Spellcheck for SiteSearchSettings.
     * Update Spellcheck settings
     */


    async updateSpellCheckRaw(requestParameters: SearchSettingsApiUpdateSpellCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/search/spellcheck`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SpellcheckUpdateToJSON(requestParameters.spellcheckUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Spellcheck for SiteSearchSettings.
     * Update Spellcheck settings
     */
    async updateSpellCheck(requestParameters: SearchSettingsApiUpdateSpellCheckRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSpellCheckRaw(requestParameters, initOverrides);
    }

}
