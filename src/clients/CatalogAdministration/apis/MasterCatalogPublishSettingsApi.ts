/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  MasterCatalog,
  MasterCatalogCollection,
} from '../models';
import {
    MasterCatalogFromJSON,
    MasterCatalogToJSON,
    MasterCatalogCollectionFromJSON,
    MasterCatalogCollectionToJSON,
} from '../models';

export interface MasterCatalogPublishSettingsApiGetMasterCatalogRequest {
    masterCatalogId: number;
}

export interface MasterCatalogPublishSettingsApiUpdateMasterCatalogRequest {
    masterCatalogId: number;
    masterCatalog?: MasterCatalog;
}

/**
 * 
 */
export class MasterCatalogPublishSettingsApi extends runtime.BaseAPI {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get a MasterCatalog
     * Get master catalog
     */


    async getMasterCatalogRaw(requestParameters: MasterCatalogPublishSettingsApiGetMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterCatalog>> {
        if (requestParameters.masterCatalogId === null || requestParameters.masterCatalogId === undefined) {
            throw new runtime.RequiredError('masterCatalogId','Required parameter requestParameters.masterCatalogId was null or undefined when calling getMasterCatalog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/mastercatalogs/{masterCatalogId}`.replace(`{${"masterCatalogId"}}`, encodeURIComponent(String(requestParameters.masterCatalogId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MasterCatalogFromJSON(jsonValue));
    }

    /**
     * Get a MasterCatalog
     * Get master catalog
     */
    async getMasterCatalog(requestParameters: MasterCatalogPublishSettingsApiGetMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterCatalog> {
        const response = await this.getMasterCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get master catalogs
     */


    async getMasterCatalogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterCatalogCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/mastercatalogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MasterCatalogCollectionFromJSON(jsonValue));
    }

    /**
     * 
     * Get master catalogs
     */
    async getMasterCatalogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterCatalogCollection> {
        const response = await this.getMasterCatalogsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the publishingMode of a MasterCatalog
     * Update master catalog
     */


    async updateMasterCatalogRaw(requestParameters: MasterCatalogPublishSettingsApiUpdateMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterCatalog>> {
        if (requestParameters.masterCatalogId === null || requestParameters.masterCatalogId === undefined) {
            throw new runtime.RequiredError('masterCatalogId','Required parameter requestParameters.masterCatalogId was null or undefined when calling updateMasterCatalog.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        if (this.configuration && (this.configuration.accessToken || this.configuration.clientId && this.configuration.sharedSecret)) {
            const token = await this.configuration.accessToken;
            const tokenString = await token();
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        
        if (this.configuration && this.configuration.jwt) {
            const token = this.configuration.jwt;
            const tokenString = await token();

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/commerce/catalog/admin/mastercatalogs/{masterCatalogId}`.replace(`{${"masterCatalogId"}}`, encodeURIComponent(String(requestParameters.masterCatalogId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MasterCatalogToJSON(requestParameters.masterCatalog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MasterCatalogFromJSON(jsonValue));
    }

    /**
     * Update the publishingMode of a MasterCatalog
     * Update master catalog
     */
    async updateMasterCatalog(requestParameters: MasterCatalogPublishSettingsApiUpdateMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterCatalog> {
        const response = await this.updateMasterCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
