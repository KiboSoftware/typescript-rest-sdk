/* tslint:disable */
/* eslint-disable */
/**
 * Kibo Catalog Admin Services
 * OpenAPI Spec for Kibo Catalog Admin Services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../../../client-runtime';
import { basePathTemplate } from '../api-path';
import type {
  CatalogAdminsMasterCatalog,
  MasterCatalogCollection,
} from '../models';

export interface GetMasterCatalogRequest {
    masterCatalogId: number;
    responseFields?: string;
}

export interface GetMasterCatalogsRequest {
    responseFields?: string;
}

export interface UpdateMasterCatalogRequest {
    masterCatalogId: number;
    responseFields?: string;
    catalogAdminsMasterCatalog?: CatalogAdminsMasterCatalog;
}

/**
 * MasterCatalogPublishSettingsApi - interface
 * 
 * @export
 * @interface MasterCatalogPublishSettingsApiInterface
 */
export interface MasterCatalogPublishSettingsApiInterface {
    /**
     * Get a MasterCatalog
     * @summary Get master catalog
     * @param {number} masterCatalogId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterCatalogPublishSettingsApiInterface
     */
    getMasterCatalogRaw(requestParameters: GetMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsMasterCatalog>>;

    /**
     * Get a MasterCatalog
     * Get master catalog
     */
    getMasterCatalog(requestParameters: GetMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsMasterCatalog>;

    /**
     * 
     * @summary Get master catalogs
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterCatalogPublishSettingsApiInterface
     */
    getMasterCatalogsRaw(requestParameters: GetMasterCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterCatalogCollection>>;

    /**
     * 
     * Get master catalogs
     */
    getMasterCatalogs(requestParameters: GetMasterCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterCatalogCollection>;

    /**
     * Update the publishingMode of a MasterCatalog
     * @summary Update master catalog
     * @param {number} masterCatalogId 
     * @param {string} [responseFields] limits which fields are returned in the response body
     * @param {CatalogAdminsMasterCatalog} [catalogAdminsMasterCatalog] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterCatalogPublishSettingsApiInterface
     */
    updateMasterCatalogRaw(requestParameters: UpdateMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsMasterCatalog>>;

    /**
     * Update the publishingMode of a MasterCatalog
     * Update master catalog
     */
    updateMasterCatalog(requestParameters: UpdateMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsMasterCatalog>;

}

/**
 * 
 */
export class MasterCatalogPublishSettingsApi extends runtime.BaseAPI implements MasterCatalogPublishSettingsApiInterface {
    constructor(configuration?) {
        super(configuration)
        this.basePathTemplate = basePathTemplate
    }
    /**
     * Get a MasterCatalog
     * Get master catalog
     */


    async getMasterCatalogRaw(requestParameters: GetMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsMasterCatalog>> {
        if (requestParameters.masterCatalogId === null || requestParameters.masterCatalogId === undefined) {
            throw new runtime.RequiredError('masterCatalogId','Required parameter requestParameters.masterCatalogId was null or undefined when calling getMasterCatalog.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/mastercatalogs/{masterCatalogId}`.replace(`{${"masterCatalogId"}}`, encodeURIComponent(String(requestParameters.masterCatalogId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get a MasterCatalog
     * Get master catalog
     */
    async getMasterCatalog(requestParameters: GetMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsMasterCatalog> {
        const response = await this.getMasterCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * Get master catalogs
     */


    async getMasterCatalogsRaw(requestParameters: GetMasterCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterCatalogCollection>> {
        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/mastercatalogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * Get master catalogs
     */
    async getMasterCatalogs(requestParameters: GetMasterCatalogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterCatalogCollection> {
        const response = await this.getMasterCatalogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the publishingMode of a MasterCatalog
     * Update master catalog
     */


    async updateMasterCatalogRaw(requestParameters: UpdateMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CatalogAdminsMasterCatalog>> {
        if (requestParameters.masterCatalogId === null || requestParameters.masterCatalogId === undefined) {
            throw new runtime.RequiredError('masterCatalogId','Required parameter requestParameters.masterCatalogId was null or undefined when calling updateMasterCatalog.');
        }

        const queryParameters: any = {};

        if (requestParameters.responseFields !== undefined) {
            queryParameters['responseFields'] = requestParameters.responseFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';





        await this.addAuthorizationHeaders(headerParameters)
        
        const response = await this.request({
            path: `/commerce/catalog/admin/mastercatalogs/{masterCatalogId}`.replace(`{${"masterCatalogId"}}`, encodeURIComponent(String(requestParameters.masterCatalogId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.catalogAdminsMasterCatalog,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Update the publishingMode of a MasterCatalog
     * Update master catalog
     */
    async updateMasterCatalog(requestParameters: UpdateMasterCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CatalogAdminsMasterCatalog> {
        const response = await this.updateMasterCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
